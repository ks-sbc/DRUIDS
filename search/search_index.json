{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DRUIDS Wiki","text":"","tags":["druids","revolutionary-tech","documentation"]},{"location":"#find-your-path","title":"Find Your Path","text":"<p>This documentation is organized by your journey, not academic categories. Choose based on where you are:</p>","tags":["druids","revolutionary-tech","documentation"]},{"location":"#start-here-is-druids-for-me","title":"\ud83c\udf31 Start Here - \"Is DRUIDS for me?\"","text":"<p>For organizers exploring DRUIDS for the first time</p> <ul> <li>Why DRUIDS? - The problems we solve</li> <li>Quick Demo - See it in action (5 minutes)</li> <li>Understand our revolutionary principles</li> <li>Learn about our security philosophy</li> </ul> <p>Begin here if: You're evaluating whether DRUIDS fits your organization's needs.</p>","tags":["druids","revolutionary-tech","documentation"]},{"location":"#learn-how-do-i-understand-it","title":"\ud83d\udcda Learn - \"How do I understand it?\"","text":"<p>For organizers ready to build foundational knowledge</p> <ul> <li>Core Concepts - Revolutionary theory meets practice</li> <li>Git Fundamentals - Version control for organizers</li> <li>DRUIDS Basics - Our specific practices</li> <li>Security as revolutionary practice</li> </ul> <p>Continue here if: You've decided to use DRUIDS and need to understand the concepts.</p>","tags":["druids","revolutionary-tech","documentation"]},{"location":"#implement-how-do-i-deploy-it","title":"\ud83d\udd27 Implement - \"How do I deploy it?\"","text":"<p>For organizers ready to set up DRUIDS</p> <ul> <li>Installation Guide</li> <li>Migration from Discord</li> <li>Migration from Google</li> <li>Advanced security setups</li> </ul> <p>Jump here if: You understand the basics and are ready to install DRUIDS.</p>","tags":["druids","revolutionary-tech","documentation"]},{"location":"#teach-how-do-i-spread-this","title":"\ud83c\udf93 Teach - \"How do I spread this?\"","text":"<p>For organizers training others</p> <ul> <li>Teaching Without Hierarchy</li> <li>Workshop materials</li> <li>Onboarding templates</li> <li>Common questions and answers</li> </ul> <p>Use this if: You're helping others in your organization adopt DRUIDS.</p>","tags":["druids","revolutionary-tech","documentation"]},{"location":"#quick-links-for-experienced-users","title":"Quick Links for Experienced Users","text":"<ul> <li>\ud83d\udcd6 Philosophy - Theoretical foundation</li> <li>\ud83d\udcdd Glossary - Revolutionary terminology</li> </ul> <ul> <li>\ud83e\udd1d Contributing - Help build DRUIDS</li> </ul>","tags":["druids","revolutionary-tech","documentation"]},{"location":"#what-makes-this-different","title":"What Makes This Different?","text":"<p>Traditional documentation asks \"What type of document is this?\" (tutorial, how-to, reference, explanation).</p> <p>We ask \"What are you trying to accomplish?\"</p> <p>This matches how people actually learn and adopt new tools - through their journey, not through document categories.</p>","tags":["druids","revolutionary-tech","documentation"]},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Stuck? Each section has its own guide</li> <li>Questions? Check the glossary for terms</li> <li>Contributing? See our style guide</li> </ul> <p>Remember: Every expert was once a beginner. Start where you are, not where you think you should be.</p> <p>DRUIDS: Infrastructure for revolutionary organizing in the digital age.</p> <p>Backlinks:</p>","tags":["druids","revolutionary-tech","documentation"]},{"location":"merge-conflicts-democratic/","title":"Merge Conflicts Are Democratic Discussions","text":"","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#the-fear-vs-the-reality","title":"The Fear vs The Reality","text":"<p>Most Git tutorials treat merge conflicts like disasters. \"Oh no! A conflict! Here's how to fix it quickly!\"</p> <p>This is bourgeois thinking. Merge conflicts aren't problems - they're the technical expression of democratic debate.</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#what-merge-conflicts-actually-are","title":"What Merge Conflicts Actually Are","text":"","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#the-scenario","title":"The Scenario","text":"<p>Two comrades work on the same document:</p> <p>Rosa's Branch: Updates the rent strike timeline to April 15 Karl's Branch: Updates the rent strike timeline to May 1</p> <p>When merging, Git says: \"These comrades disagree. Let's discuss.\"</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#the-technical-reality","title":"The Technical Reality","text":"Diff<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD (Rosa's version)\nRent Strike Date: April 15\n- Earlier date captures momentum\n- Before finals week\n=======\nRent Strike Date: May 1\n- International Workers Day\n- More time to organize\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; karl-branch\n</code></pre> <p>Git isn't broken. Git is facilitating democratic centralism.</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#why-this-is-beautiful","title":"Why This Is Beautiful","text":"","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#1-no-silent-overwriting","title":"1. No Silent Overwriting","text":"<p>In Google Docs, the last edit wins. Rosa's reasoning disappears when Karl types.</p> <p>In Git, both perspectives are preserved. The conflict forces discussion.</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#2-transparent-disagreement","title":"2. Transparent Disagreement","text":"<p>The conflict markers show: - What each comrade proposed - Why they might differ - The need for collective decision</p> <p>This isn't a bug. It's accountability.</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#3-collective-resolution-required","title":"3. Collective Resolution Required","text":"<p>You can't proceed without resolving the conflict. This forces: - Reading both proposals - Understanding both perspectives - Making conscious choice - Documenting the decision</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#merge-conflicts-as-organizational-moments","title":"Merge Conflicts as Organizational Moments","text":"","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#example-1-strategic-disagreement","title":"Example 1: Strategic Disagreement","text":"Diff<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; security-team\nAction: Silent march to avoid police confrontation\n=======\nAction: Loud demonstration to show strength\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; outreach-team\n</code></pre> <p>This conflict reveals different organizational priorities. Resolution requires political discussion, not technical fixes.</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#example-2-resource-allocation","title":"Example 2: Resource Allocation","text":"Diff<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; finance-committee\nBudget: $500 for flyers, $200 for bail fund\n=======\nBudget: $200 for flyers, $500 for bail fund\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; legal-team\n</code></pre> <p>The conflict surfaces different risk assessments. The merge resolution documents organizational priorities.</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#example-3-tactical-evolution","title":"Example 3: Tactical Evolution","text":"Diff<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; main\nTactic: Phone banking for tenant outreach\n=======\nTactic: Door knocking for tenant outreach\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; field-team\n</code></pre> <p>Field experience challenges established practice. The conflict creates space for tactical development.</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#the-democratic-process-of-resolution","title":"The Democratic Process of Resolution","text":"","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#step-1-understand-both-positions","title":"Step 1: Understand Both Positions","text":"<p>Don't just pick one. Read both. Understand why each comrade made their choice.</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#step-2-consult-if-needed","title":"Step 2: Consult if Needed","text":"<p>Major conflicts might need collective discussion: - Call the comrades involved - Bring to working group - Schedule quick meeting</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#step-3-document-the-decision","title":"Step 3: Document the Decision","text":"<p>When resolving: Bash<pre><code>git commit -m \"Merge rent strike timeline after discussion\n\nChose May 1 date to align with International Workers Day.\nApril 15 would have been tactically strong but May 1 \nprovides better symbolic power and organizing time.\n\nDecided in discussion between Rosa and Karl, approved\nby organizing committee.\"\n</code></pre></p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#step-4-learn-from-patterns","title":"Step 4: Learn from Patterns","text":"<p>Frequent conflicts in certain areas might indicate: - Need for better communication - Unclear ownership - Political disagreements needing resolution</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#common-conflict-types-and-their-meaning","title":"Common Conflict Types and Their Meaning","text":"","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#timestamp-conflicts","title":"Timestamp Conflicts","text":"Diff<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nMeeting: Tuesday 7 PM\n=======\nMeeting: Tuesday 8 PM\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch\n</code></pre> <p>Meaning: Communication breakdown. Someone wasn't informed of time change. Solution: Better notification process.</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#scope-conflicts","title":"Scope Conflicts","text":"Diff<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nTarget: 50 tenants\n=======\nTarget: 200 tenants\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; ambitious-branch\n</code></pre> <p>Meaning: Different assessment of organizational capacity. Solution: Collective discussion on realistic goals.</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#priority-conflicts","title":"Priority Conflicts","text":"Diff<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n1. Security training\n2. Outreach campaign\n=======\n1. Outreach campaign\n2. Security training\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; growth-focused\n</code></pre> <p>Meaning: Different strategic emphasis. Solution: Political education on balancing growth with safety.</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#reframing-conflicts","title":"Reframing Conflicts","text":"","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#not-how-do-i-fix-this-quickly","title":"Not: \"How do I fix this quickly?\"","text":"<p>But: \"What is this conflict teaching us?\"</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#not-who-is-right","title":"Not: \"Who is right?\"","text":"<p>But: \"How do we synthesize these positions?\"</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#not-this-is-annoying","title":"Not: \"This is annoying!\"","text":"<p>But: \"This is democratic centralism working.\"</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#technical-tips-for-democratic-resolution","title":"Technical Tips for Democratic Resolution","text":"","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#see-full-context","title":"See Full Context","text":"Bash<pre><code>git diff --merge\n# Shows more context around conflicts\n</code></pre>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#consult-history","title":"Consult History","text":"Bash<pre><code>git log --merge --oneline\n# Shows commits leading to conflict\n</code></pre>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#test-both-versions","title":"Test Both Versions","text":"Bash<pre><code>git checkout --theirs file.md\n# Test their version\n\ngit checkout --ours file.md  \n# Test our version\n\ngit checkout --merge file.md\n# Return to conflict markers\n</code></pre>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#create-synthesis","title":"Create Synthesis","text":"<p>Often the best resolution combines both:</p> Markdown<pre><code>Rent Strike Date: May 1\n- International Workers Day (Karl's point)\n- Preparation starts April 1 (Rosa's urgency)\n- Soft launch April 15 (Rosa's momentum)\n- Full strike May 1 (Karl's symbolism)\n</code></pre>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#when-conflicts-get-complex","title":"When Conflicts Get Complex","text":"","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#multiple-viewpoints","title":"Multiple Viewpoints","text":"<p>Sometimes conflicts involve many branches: Text Only<pre><code>Rosa: April 15\nKarl: May 1  \nEmma: April 30\nMalcolm: Coordinate with other cities\n</code></pre></p> <p>Resolution: Call a meeting. Git forced the conversation that needed to happen.</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#fundamental-disagreements","title":"Fundamental Disagreements","text":"<p>Some conflicts reveal deep political differences: Text Only<pre><code>Branch A: Reform-focused strategy\nBranch B: Revolutionary approach\n</code></pre></p> <p>Resolution: Political education and organizational clarification. The merge conflict did its job - surfacing contradictions.</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#the-beauty-of-preserved-debate","title":"The Beauty of Preserved Debate","text":"<p>After resolution, <code>git log</code> shows:</p> Text Only<pre><code>commit abc123\nMerge: def456 789012\nAuthor: Collective Decision\nDate: March 20\n\n    Resolved rent strike date through democratic process\n\n    After discussing both proposals, synthesized approach:\n    - April 1: Begin preparation (Rosa's urgency)\n    - April 15: Soft launch with committed tenants\n    - May 1: Full strike (Karl's symbolism)\n\n    This captures momentum while building to International\n    Workers Day. Approved by organizing committee.\n</code></pre> <p>This isn't just a commit. It's organizational memory of democratic process.</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#conflicts-and-collective-intelligence","title":"Conflicts and Collective Intelligence","text":"<p>Merge conflicts are moments where: - Individual work becomes collective - Implicit disagreements become explicit - Organizational learning happens - Democratic centralism operates</p> <p>They're not obstacles. They're the technical expression of \"unity-struggle-unity.\"</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#revolutionary-perspective","title":"Revolutionary Perspective","text":"<p>In capitalist development: - Conflicts are \"waste\" - Efficiency demands quick resolution - Individual decision preferred</p> <p>In revolutionary organizing: - Conflicts are opportunities - Democracy requires deliberation - Collective wisdom emerges</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#practical-exercises","title":"Practical Exercises","text":"","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#exercise-1-intentional-conflict","title":"Exercise 1: Intentional Conflict","text":"<ol> <li>Create two branches with different meeting times</li> <li>Merge them</li> <li>Practice reading both perspectives</li> <li>Resolve with synthesis</li> </ol>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#exercise-2-political-conflict","title":"Exercise 2: Political Conflict","text":"<ol> <li>Create branches with different tactical approaches</li> <li>Generate conflict</li> <li>Convene discussion</li> <li>Document resolution reasoning</li> </ol>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#exercise-3-conflict-analysis","title":"Exercise 3: Conflict Analysis","text":"<ol> <li>Review your organization's merge conflicts from last month</li> <li>What patterns emerge?</li> <li>What organizational lessons appear?</li> <li>How can processes improve?</li> </ol>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"merge-conflicts-democratic/#conclusion","title":"Conclusion","text":"<p>Merge conflicts aren't technical failures - they're democratic features. They force us to: - Acknowledge different perspectives - Engage in collective decision-making - Document our reasoning - Build organizational memory</p> <p>Every <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> marker is an invitation to democratic discussion. Every <code>=======</code> represents different revolutionary perspective. Every <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> closes space for collective synthesis.</p> <p>Don't fear merge conflicts. Embrace them as the technical manifestation of democratic centralism.</p> <p>\"The unity of opposites is conditional, temporary, transitory, relative. The struggle of mutually exclusive opposites is absolute.\" - Lenin</p> <p>Git merge conflicts are this principle in code.</p> <p>Next: Branching as Parallel Organizing \u2192</p>","tags":["git","merge-conflicts","explanation","democratic-centralism","collaboration"]},{"location":"privacy-policy/","title":"Privacy Policy","text":"<p>Last updated: January 2024</p>"},{"location":"privacy-policy/#introduction","title":"Introduction","text":"<p>This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you visit our documentation website. Please read this privacy policy carefully. If you do not agree with the terms of this privacy policy, please do not access the site.</p>"},{"location":"privacy-policy/#information-we-collect","title":"Information We Collect","text":""},{"location":"privacy-policy/#automatically-collected-information","title":"Automatically Collected Information","text":"<p>When you visit our site, we may automatically collect certain information about your device and usage patterns:</p>"},{"location":"privacy-policy/#analytics-data-optional-requires-consent","title":"Analytics Data (Optional - Requires Consent)","text":"<ul> <li>Page views and session data: Which pages you visit, how long you stay, and how you navigate</li> <li>Device information: Browser type, operating system, screen resolution</li> <li>Location data: General geographic location (country/region level only)</li> <li>Referrer information: Which site or search engine brought you here</li> </ul> <p>Purpose: To understand how visitors use our documentation and improve the user experience.</p> <p>Legal basis: Consent (you can opt out via cookie settings).</p> <p>Retention: 14 months, then automatically deleted.</p>"},{"location":"privacy-policy/#essential-functional-data-required-for-site-operation","title":"Essential Functional Data (Required for Site Operation)","text":"<ul> <li>Theme preferences: Light/dark mode selection</li> <li>Navigation state: Sidebar expansion, current page</li> <li>Search queries: To provide search results (not stored permanently)</li> <li>Session data: Temporary data to maintain site functionality</li> </ul> <p>Purpose: Essential for website functionality and user experience.</p> <p>Legal basis: Legitimate interest in providing website functionality.</p> <p>Retention: Until you clear your browser data or session expires.</p>"},{"location":"privacy-policy/#information-you-provide","title":"Information You Provide","text":""},{"location":"privacy-policy/#comments-and-discussions-optional-requires-consent","title":"Comments and Discussions (Optional - Requires Consent)","text":"<p>When you choose to comment using our Giscus integration:</p> <ul> <li>GitHub username and profile information</li> <li>Comment content and timestamps</li> <li>Reaction data (likes, etc.)</li> </ul> <p>Purpose: To enable community discussions and feedback.</p> <p>Legal basis: Consent (you choose to participate).</p> <p>Retention: Until you delete your comments via GitHub.</p> <p>Third-party processing: Comments are processed by GitHub under their privacy policy.</p>"},{"location":"privacy-policy/#feedback-submissions-optional","title":"Feedback Submissions (Optional)","text":"<p>When you submit page feedback:</p> <ul> <li>Rating data (helpful/not helpful)</li> <li>Page information (which page was rated)</li> <li>Timestamp of feedback</li> </ul> <p>Purpose: To improve documentation quality.</p> <p>Legal basis: Consent (you choose to provide feedback).</p> <p>Retention: 12 months for analysis, then anonymized.</p>"},{"location":"privacy-policy/#how-we-use-your-information","title":"How We Use Your Information","text":"<p>We use the information we collect to:</p> <ol> <li>Provide and maintain our service</li> <li>Display content and ensure proper functionality</li> <li>Remember your preferences and settings</li> <li> <p>Provide search functionality</p> </li> <li> <p>Improve our documentation (with your consent)</p> </li> <li>Analyze usage patterns to identify popular content</li> <li>Understand user journeys and pain points</li> <li> <p>Optimize site performance and navigation</p> </li> <li> <p>Enable community features (with your consent)</p> </li> <li>Display comments and discussions</li> <li>Show author information and profiles</li> <li> <p>Enable social sharing features</p> </li> <li> <p>Comply with legal obligations</p> </li> <li>Respond to legal requests</li> <li>Protect against fraud and abuse</li> <li>Maintain security and integrity</li> </ol>"},{"location":"privacy-policy/#information-sharing-and-disclosure","title":"Information Sharing and Disclosure","text":"<p>We do not sell, trade, or otherwise transfer your personal information to third parties, except in the following circumstances:</p>"},{"location":"privacy-policy/#service-providers","title":"Service Providers","text":"<p>We may share information with trusted third-party service providers who assist us in operating our website:</p> <ul> <li>Google Analytics: For website analytics (only with your consent)</li> <li>GitHub: For comments and discussions (only when you choose to participate)</li> <li>Hosting providers: For website hosting and content delivery</li> </ul> <p>All service providers are contractually obligated to keep your information confidential and use it only for the purposes we specify.</p>"},{"location":"privacy-policy/#legal-requirements","title":"Legal Requirements","text":"<p>We may disclose your information if required to do so by law or in response to valid requests by public authorities.</p>"},{"location":"privacy-policy/#business-transfers","title":"Business Transfers","text":"<p>In the event of a merger, acquisition, or sale of assets, your information may be transferred as part of that transaction.</p>"},{"location":"privacy-policy/#data-security","title":"Data Security","text":"<p>We implement appropriate technical and organizational security measures to protect your personal information against unauthorized access, alteration, disclosure, or destruction:</p> <ul> <li>Encryption: All data transmission is encrypted using HTTPS</li> <li>Access controls: Limited access to personal data on a need-to-know basis</li> <li>Regular security assessments: Ongoing monitoring and security updates</li> <li>Data minimization: We collect only the data necessary for stated purposes</li> </ul> <p>However, no method of transmission over the internet or electronic storage is 100% secure, and we cannot guarantee absolute security.</p>"},{"location":"privacy-policy/#your-privacy-rights","title":"Your Privacy Rights","text":"<p>Depending on your location, you may have the following rights regarding your personal information:</p>"},{"location":"privacy-policy/#general-rights","title":"General Rights","text":"<ul> <li>Access: Request a copy of the personal information we hold about you</li> <li>Rectification: Request correction of inaccurate or incomplete information</li> <li>Erasure: Request deletion of your personal information</li> <li>Portability: Request transfer of your data to another service</li> <li>Objection: Object to processing of your personal information</li> <li>Restriction: Request limitation of processing in certain circumstances</li> </ul>"},{"location":"privacy-policy/#cookie-and-consent-management","title":"Cookie and Consent Management","text":"<ul> <li>Withdraw consent: Change your cookie preferences at any time</li> <li>Opt-out of analytics: Disable analytics tracking via cookie settings</li> <li>Manage comments: Delete or edit your comments via GitHub</li> </ul>"},{"location":"privacy-policy/#how-to-exercise-your-rights","title":"How to Exercise Your Rights","text":"<p>To exercise any of these rights, please contact us at:</p> <ul> <li>Email: privacy@yoursite.com</li> <li>Data Protection Officer: dpo@yoursite.com</li> </ul> <p>We will respond to your request within 30 days (or as required by applicable law).</p>"},{"location":"privacy-policy/#cookies-and-tracking-technologies","title":"Cookies and Tracking Technologies","text":"<p>We use cookies and similar tracking technologies to enhance your experience:</p>"},{"location":"privacy-policy/#essential-cookies-always-active","title":"Essential Cookies (Always Active)","text":"<ul> <li>Site functionality: Navigation, search, theme preferences</li> <li>Security: CSRF protection, session management</li> <li>Performance: Basic error tracking and debugging</li> </ul>"},{"location":"privacy-policy/#optional-cookies-require-consent","title":"Optional Cookies (Require Consent)","text":"<ul> <li>Analytics cookies: Google Analytics for usage statistics</li> <li>Social cookies: Social media integration and sharing</li> <li>Comment cookies: GitHub authentication for discussions</li> </ul> <p>You can manage your cookie preferences through our cookie consent banner or by adjusting your browser settings.</p>"},{"location":"privacy-policy/#third-party-links","title":"Third-Party Links","text":"<p>Our website may contain links to third-party websites. We are not responsible for the privacy practices or content of these external sites. We encourage you to review the privacy policies of any third-party sites you visit.</p>"},{"location":"privacy-policy/#childrens-privacy","title":"Children's Privacy","text":"<p>Our service is not intended for children under 13 years of age. We do not knowingly collect personal information from children under 13. If you are a parent or guardian and believe your child has provided us with personal information, please contact us immediately.</p>"},{"location":"privacy-policy/#international-data-transfers","title":"International Data Transfers","text":"<p>Your information may be transferred to and processed in countries other than your own. We ensure that such transfers comply with applicable data protection laws through:</p> <ul> <li>Adequacy decisions: Transfers to countries with adequate protection</li> <li>Standard contractual clauses: EU-approved contract terms</li> <li>Certification schemes: Privacy Shield or similar frameworks</li> </ul>"},{"location":"privacy-policy/#changes-to-this-privacy-policy","title":"Changes to This Privacy Policy","text":"<p>We may update this privacy policy from time to time. We will notify you of any changes by:</p> <ul> <li>Posting the new policy on this page</li> <li>Updating the \"Last updated\" date</li> <li>Providing prominent notice for material changes</li> <li>Email notification for significant changes (if you've provided contact information)</li> </ul> <p>Your continued use of the site after changes constitutes acceptance of the updated policy.</p>"},{"location":"privacy-policy/#contact-information","title":"Contact Information","text":"<p>If you have questions or concerns about this privacy policy or our data practices, please contact us:</p> <p>Privacy Contact</p> <ul> <li>Email: privacy@yoursite.com</li> <li>Data Protection Officer: dpo@yoursite.com</li> </ul> <p>General Contact</p> <ul> <li>Email: contact@yoursite.com</li> <li>Website: https://yoursite.com/contact</li> </ul> <p>Postal Address (for GDPR compliance):</p> Text Only<pre><code>[Your Organization Name]\n[Street Address]\n[City, State/Province, Postal Code]\n[Country]\n</code></pre>"},{"location":"privacy-policy/#regulatory-information","title":"Regulatory Information","text":""},{"location":"privacy-policy/#gdpr-european-union","title":"GDPR (European Union)","text":"<p>If you are located in the European Union, you have additional rights under the General Data Protection Regulation (GDPR). Our lawful basis for processing your personal information includes:</p> <ul> <li>Consent: For analytics, comments, and optional features</li> <li>Legitimate interests: For essential site functionality and security</li> <li>Legal obligation: For compliance with applicable laws</li> </ul>"},{"location":"privacy-policy/#ccpa-california","title":"CCPA (California)","text":"<p>If you are a California resident, you have rights under the California Consumer Privacy Act (CCPA), including the right to know what personal information we collect and how we use it.</p>"},{"location":"privacy-policy/#other-jurisdictions","title":"Other Jurisdictions","text":"<p>We comply with applicable data protection laws in all jurisdictions where we operate.</p> <p>This privacy policy is designed to be transparent and comprehensive. If you have any questions or need clarification on any point, please don't hesitate to contact us.</p>"},{"location":"test-features-results/","title":"Test Features Results","text":"<p>This page documents which markdown extensions are already working with the current MkDocs configuration.</p>"},{"location":"test-features-results/#features-that-are-working","title":"\u2705 Features That Are Working","text":""},{"location":"test-features-results/#1-mermaid-diagrams","title":"1. Mermaid Diagrams \u2713","text":"<ul> <li>Status: Working</li> <li>Configuration: <code>pymdownx.superfences</code> with custom fence for mermaid</li> <li>Test: Mermaid diagram renders correctly</li> </ul>"},{"location":"test-features-results/#2-admonitionscallouts","title":"2. Admonitions/Callouts \u2713","text":"<ul> <li>Status: Working (both MkDocs and Obsidian styles)</li> <li>Configuration: Built-in admonitions + pub-obsidian callouts</li> <li>Test: Found 8 admonitions rendered correctly</li> <li>Note: Both <code>!!! note</code> and <code>&gt; [!note]</code> syntaxes work</li> </ul>"},{"location":"test-features-results/#3-code-syntax-highlighting","title":"3. Code Syntax Highlighting \u2713","text":"<ul> <li>Status: Working!</li> <li>Configuration: <code>pymdownx.highlight</code> with Pygments</li> <li>Test: Code blocks have proper span elements with Pygments classes (k, nf, p, etc.)</li> <li>Note: Initial concern was incorrect - highlighting IS working, just not visible in raw HTML inspection</li> </ul>"},{"location":"test-features-results/#4-content-tabs","title":"4. Content Tabs \u2713","text":"<ul> <li>Status: Working</li> <li>Configuration: <code>pymdownx.tabbed</code></li> <li>Test: Tab sets render correctly</li> </ul>"},{"location":"test-features-results/#5-task-lists","title":"5. Task Lists \u2713","text":"<ul> <li>Status: Working</li> <li>Configuration: <code>pymdownx.tasklist</code> with clickable checkboxes</li> <li>Test: Checkboxes render and are interactive</li> </ul>"},{"location":"test-features-results/#6-mathlatex","title":"6. Math/LaTeX \u2713","text":"<ul> <li>Status: Working</li> <li>Configuration: <code>pymdownx.arithmatex</code> + MathJax</li> <li>Test: Both inline and block math render</li> </ul>"},{"location":"test-features-results/#7-icons-and-emojis","title":"7. Icons and Emojis \u2713","text":"<ul> <li>Status: Partially working</li> <li>Configuration: <code>pymdownx.emoji</code></li> <li>Test: Regular emojis work, Material icons need to be tested visually</li> </ul>"},{"location":"test-features-results/#8-footnotes","title":"8. Footnotes \u2713","text":"<ul> <li>Status: Working</li> <li>Configuration: Built-in markdown footnotes</li> <li>Test: Footnotes render with proper links</li> </ul>"},{"location":"test-features-results/#9-text-formatting","title":"9. Text Formatting \u2713","text":"<ul> <li>Status: Working</li> <li>Configuration: <code>pymdownx.caret</code>, <code>pymdownx.mark</code>, <code>pymdownx.tilde</code></li> <li>Test: Superscript, highlight, strikethrough all work</li> </ul>"},{"location":"test-features-results/#10-keyboard-keys","title":"10. Keyboard Keys \u2713","text":"<ul> <li>Status: Working</li> <li>Configuration: <code>pymdownx.keys</code></li> <li>Test: Ctrl+Alt+Del syntax renders</li> </ul>"},{"location":"test-features-results/#11-smartsymbols","title":"11. SmartSymbols \u2713","text":"<ul> <li>Status: Working</li> <li>Configuration: <code>pymdownx.smartsymbols</code></li> <li>Test: \u00a9 \u2122 arrows convert</li> </ul>"},{"location":"test-features-results/#12-wikilinks","title":"12. Wikilinks \u2713","text":"<ul> <li>Status: Working</li> <li>Configuration: <code>pub-obsidian</code></li> <li>Test: links convert to proper HTML links</li> </ul>"},{"location":"test-features-results/#features-that-need-configuration","title":"\u274c Features That Need Configuration","text":""},{"location":"test-features-results/#1-annotations","title":"1. Annotations","text":"<ul> <li>Status: Not configured</li> <li>Needed: Additional CSS/JS for Material annotations</li> <li>Solution: Already have <code>content.code.annotate</code> feature enabled, need to test syntax</li> </ul>"},{"location":"test-features-results/#2-buttons","title":"2. Buttons","text":"<ul> <li>Status: CSS classes exist but need Material theme CSS</li> <li>Solution: Should work with Material theme classes</li> </ul>"},{"location":"test-features-results/#3-grids","title":"3. Grids","text":"<ul> <li>Status: CSS classes exist but need Material theme CSS</li> <li>Solution: Should work with Material theme classes</li> </ul>"},{"location":"test-features-results/#4-image-captions","title":"4. Image Captions","text":"<ul> <li>Status: Basic images work, captions need testing</li> <li>Solution: May need additional configuration</li> </ul>"},{"location":"test-features-results/#5-definition-lists","title":"5. Definition Lists","text":"<ul> <li>Status: Should work with standard markdown</li> <li>Solution: Test with proper syntax</li> </ul>"},{"location":"test-features-results/#6-abbreviations","title":"6. Abbreviations","text":"<ul> <li>Status: Should work with abbr extension</li> <li>Solution: Test with proper syntax</li> </ul>"},{"location":"test-features-results/#key-findings","title":"\ud83d\udd0d Key Findings","text":"<ol> <li> <p>Most critical features are already working! The configuration has most of what's needed.</p> </li> <li> <p>Code highlighting confusion: The code highlighting IS working. Pygments generates proper span elements with classes. The visual styling comes from the Material theme CSS.</p> </li> <li> <p>Obsidian compatibility: pub-obsidian successfully handles both Obsidian callouts and wikilinks.</p> </li> <li> <p>No additional plugins needed for:</p> </li> <li>Mermaid diagrams</li> <li>Admonitions</li> <li>Code blocks</li> <li>Content tabs</li> <li>Task lists</li> <li>Math</li> <li>Footnotes</li> <li> <p>Most text formatting</p> </li> <li> <p>Still need to add:</p> </li> <li>Giscus integration (for comments)</li> <li>Some Material-specific features may need CSS</li> </ol>"},{"location":"test-features-results/#recommendations","title":"\ud83d\udcdd Recommendations","text":"<ol> <li>Remove from TODO.md - These features are already working:</li> <li>Mermaid</li> <li>Admonitions</li> <li>Code blocks</li> <li>Content tabs</li> <li>Footnotes</li> <li>Formatting</li> <li>Lists</li> <li>Math</li> <li> <p>Most of the critical markdown extensions</p> </li> <li> <p>Focus on:</p> </li> <li>Giscus integration</li> <li>Fixing the wikilink hash anchors</li> <li>Testing Material-specific features (annotations, buttons, grids)</li> <li> <p>Adding any missing CSS for Material components</p> </li> <li> <p>The pub-obsidian plugin is doing a lot of heavy lifting - it provides:</p> </li> <li>Wikilinks</li> <li>Callouts/Admonitions (Obsidian style)</li> <li>Backlinks</li> <li>Other Obsidian compatibility features</li> </ol>"},{"location":"test-features-results/#how-to-test","title":"\ud83e\uddea How to Test","text":"<p>Visit the test page at <code>/test-features/</code> when running <code>mkdocs serve</code> to see all features in action.</p>"},{"location":"test-features/","title":"Testing Markdown Extensions","text":"<p>This page tests various markdown extensions to see what's already working.</p>"},{"location":"test-features/#mermaid-diagrams","title":"Mermaid Diagrams","text":"<pre><code>graph TD\n    A[Start] --&gt; B{Is it working?}\n    B --&gt;|Yes| C[Great!]\n    B --&gt;|No| D[Need to configure]\n    C --&gt; E[End]\n    D --&gt; E[End]</code></pre>"},{"location":"test-features/#admonitions-callouts","title":"Admonitions / Callouts","text":"<p>This is a note</p> <p>Testing if admonitions work with the current setup.</p> <p>Warning</p> <p>This is a warning admonition.</p> <p>Danger</p> <p>This is a danger admonition.</p> <p>Pro tip</p> <p>This is a tip admonition.</p> <p>Information</p> <p>This is an info admonition.</p> Collapsible question <p>This is a collapsible admonition.</p>"},{"location":"test-features/#code-blocks-with-syntax-highlighting","title":"Code Blocks with Syntax Highlighting","text":"test.py<pre><code>def hello_world():\n    \"\"\"Test function with syntax highlighting\"\"\"\n    print(\"Hello, World!\")\n    return True\n\n# Testing line numbers\nfor i in range(10):\n    print(f\"Line {i}\")\n</code></pre> app.js<pre><code>// JavaScript with line numbers\nfunction testFunction() {\n    console.log(\"Testing syntax highlighting\");\n    const result = {\n        status: \"success\",\n        data: [1, 2, 3]\n    };\n    return result;\n}\n</code></pre>"},{"location":"test-features/#content-tabs","title":"Content Tabs","text":"Tab 1Tab 2Tab 3 <p>This is the content of tab 1.</p> Python<pre><code>print(\"Tab 1 code\")\n</code></pre> <p>This is the content of tab 2.</p> JavaScript<pre><code>console.log(\"Tab 2 code\");\n</code></pre> <p>This is the content of tab 3.</p>"},{"location":"test-features/#data-tables","title":"Data Tables","text":"Feature Status Priority Mermaid Testing High Admonitions Testing High Code Blocks Testing High Tables Testing Medium"},{"location":"test-features/#footnotes","title":"Footnotes","text":"<p>Here's a sentence with a footnote<sup>1</sup>.</p> <p>And here's another one<sup>2</sup>.</p>"},{"location":"test-features/#task-lists","title":"Task Lists","text":"<ul> <li> Create test page</li> <li> Add Mermaid diagram</li> <li> Test admonitions</li> <li> Test code blocks</li> <li> Verify all features</li> </ul>"},{"location":"test-features/#math-latex","title":"Math (LaTeX)","text":"<p>Inline math: \\(x^2 + y^2 = z^2\\)</p> <p>Block math:</p> \\[ \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\]"},{"location":"test-features/#icons-and-emojis","title":"Icons and Emojis","text":"<ul> <li>:material-check: Material icon check</li> <li>:material-close: Material icon close</li> <li>:material-github: GitHub icon</li> <li>:octicons-check-16: Octicons check</li> <li>\ud83d\ude00 Regular emoji</li> <li>\ud83d\ude80 Rocket emoji</li> </ul>"},{"location":"test-features/#annotations","title":"Annotations","text":"<p>This is text with an annotation(1).</p> <ol> <li>This is the annotation content that appears when clicked.</li> </ol>"},{"location":"test-features/#buttons","title":"Buttons","text":"<p>Subscribe to our newsletter</p> <p>Subscribe to our newsletter</p>"},{"location":"test-features/#grids","title":"Grids","text":"<ul> <li> <p>:material-clock-fast:{ .lg .middle } Set up in 5 minutes</p> <p>Install with pip and get up and running in minutes</p> <p>:octicons-arrow-right-24: Getting started</p> </li> <li> <p>:material-scale-balance:{ .lg .middle } It's just Markdown</p> <p>Focus on your content and let Material do the rest</p> <p>:octicons-arrow-right-24: Learn more</p> </li> </ul>"},{"location":"test-features/#images-with-captions","title":"Images with Captions","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. This text should wrap around the image.</p>"},{"location":"test-features/#tooltips","title":"Tooltips","text":"<p>This is text with a tooltipHover over me to see the tooltip.</p>"},{"location":"test-features/#formatting","title":"Formatting","text":"<p>This text is highlighted</p> <p>This text is superscript</p> <p>This text is strikethrough</p> <p>This text is deleted</p> <p>This text is inserted</p> <p>wrongright</p>"},{"location":"test-features/#definition-lists","title":"Definition Lists","text":"Apple A fruit that grows on trees Orange A citrus fruit that is orange in color Also a color"},{"location":"test-features/#abbreviations","title":"Abbreviations","text":"<p>The HTML specification is maintained by the W3C.</p>"},{"location":"test-features/#keyboard-keys","title":"Keyboard Keys","text":"<p>Press Ctrl+Alt+Del to restart.</p>"},{"location":"test-features/#smartsymbols","title":"SmartSymbols","text":"<p>\u00a9 \u2122 \u00ae \u2192 \u2190 \u2194 \u2260 \u00bc \u00bd \u00be</p>"},{"location":"test-features/#obsidian-features","title":"Obsidian Features","text":""},{"location":"test-features/#wikilinks","title":"Wikilinks","text":"<ul> <li>Basic wikilink: index</li> <li>Wikilink with custom text: Home Page</li> <li>Wikilink to non-existent page: does-not-exist</li> </ul>"},{"location":"test-features/#callouts-obsidian-style","title":"Callouts (Obsidian style)","text":"<p>Note</p> <p>This is an Obsidian-style callout</p> <p>Warning</p> <p>This is a warning callout</p> <p>Tip</p> <p>This is a tip callout</p> <p>Backlinks:</p> <ol> <li> <p>This is the first footnote.\u00a0\u21a9</p> </li> <li> <p>This is the second footnote with more content.\u00a0\u21a9</p> </li> </ol>"},{"location":"test-giscus/","title":"Testing Giscus Comments","text":"<p>This page is used to test the Giscus commenting system integration.</p>"},{"location":"test-giscus/#how-giscus-works","title":"How Giscus Works","text":"<p>Giscus is a commenting system powered by GitHub Discussions. It allows visitors to leave comments on your documentation pages using their GitHub accounts.</p>"},{"location":"test-giscus/#features","title":"Features","text":"<ul> <li>GitHub Integration: Uses GitHub Discussions as the backend</li> <li>Theme Synchronization: Automatically matches your site's light/dark theme</li> <li>Privacy Friendly: No tracking, respects user privacy</li> <li>Moderation: Use GitHub's built-in moderation tools</li> <li>Reactions: Visitors can react to comments</li> <li>Real-time: Comments appear instantly</li> </ul>"},{"location":"test-giscus/#configuration-status","title":"Configuration Status","text":"<p>This site is configured to use Giscus with the following settings:</p> <ul> <li>Mapping: Pathname-based (each page gets its own discussion)</li> <li>Theme: Automatically syncs with Material theme</li> <li>Position: Comments appear at the bottom</li> <li>Language: English</li> </ul>"},{"location":"test-giscus/#testing-comments","title":"Testing Comments","text":"<p>Try leaving a comment below to test the integration. You'll need:</p> <ol> <li>A GitHub account</li> <li>To authorize the Giscus app (first time only)</li> </ol> <p>The comments section should appear below this content.</p>"},{"location":"typography/","title":"Typography Specification","text":"<ul> <li> TODO: Proof read this</li> <li> TODO: Format correctly</li> </ul>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#font-stack-definitions","title":"Font Stack Definitions","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#primary-font-families","title":"Primary Font Families","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#heading-fonts","title":"Heading Fonts","text":"CSS<pre><code>/* Prairie Radical */\nfont-family: 'Playfair Display', 'Spectral', Georgia, 'Times New Roman', serif;\n\n/* Neobrutalist */\nfont-family: 'EB Garamond', 'Spectral', Georgia, serif;\n\n/* Mandalorian */\nfont-family: 'Bebas Neue', 'Oswald', Arial, sans-serif;\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#body-fonts","title":"Body Fonts","text":"CSS<pre><code>/* All Themes */\nfont-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#monospace-fonts","title":"Monospace Fonts","text":"CSS<pre><code>/* All Themes */\nfont-family: 'JetBrains Mono', 'Fira Code', 'Cascadia Code', Consolas, 'Courier New', monospace;\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#type-scale","title":"Type Scale","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#desktop-scale-base-16px","title":"Desktop Scale (base: 16px)","text":"Level Size Pixels Line Height Usage xs 0.75rem 12px 1.5 Captions, labels sm 0.875rem 14px 1.5 Secondary text base 1rem 16px 1.625 Body text lg 1.125rem 18px 1.625 Lead paragraph xl 1.25rem 20px 1.5 H6 2xl 1.5rem 24px 1.375 H5 3xl 1.875rem 30px 1.375 H4 4xl 2.25rem 36px 1.25 H3 5xl 3rem 48px 1.25 H2 6xl 3.75rem 60px 1.125 H1","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#mobile-scale-base-14px","title":"Mobile Scale (base: 14px)","text":"Level Size Pixels Line Height xs 0.75rem 10.5px 1.5 sm 0.875rem 12.25px 1.5 base 1rem 14px 1.625 lg 1.125rem 15.75px 1.625 xl 1.25rem 17.5px 1.5 2xl 1.5rem 21px 1.375 3xl 1.875rem 26.25px 1.375 4xl 2.25rem 31.5px 1.25 5xl 2.5rem 35px 1.25 6xl 3rem 42px 1.125","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#font-weights","title":"Font Weights","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#weight-scale","title":"Weight Scale","text":"CSS<pre><code>--font-weight-light: 300;\n--font-weight-regular: 400;\n--font-weight-medium: 500;\n--font-weight-semibold: 600;\n--font-weight-bold: 700;\n--font-weight-extrabold: 800;\n--font-weight-black: 900;\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#theme-specific-weights","title":"Theme-Specific Weights","text":"Element Prairie Radical Neobrutalist Mandalorian H1-H3 700 (bold) 600 (semibold) 400 (regular) H4-H6 600 (semibold) 600 (semibold) 400 (regular) Body 400 (regular) 400 (regular) 400 (regular) Strong 600 (semibold) 700 (bold) 600 (semibold) Code 400 (regular) 500 (medium) 400 (regular)","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#letter-spacing","title":"Letter Spacing","text":"CSS<pre><code>--letter-spacing-tighter: -0.05em;\n--letter-spacing-tight: -0.025em;\n--letter-spacing-normal: 0;\n--letter-spacing-wide: 0.025em;\n--letter-spacing-wider: 0.05em;\n--letter-spacing-widest: 0.1em;\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#theme-applications","title":"Theme Applications","text":"<ul> <li>Prairie Radical: Normal spacing for readability</li> <li>Neobrutalist: Wider spacing (0.05em) for headings</li> <li>Mandalorian: Wider spacing (0.1em) for Bebas Neue headings</li> </ul>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#text-transformations","title":"Text Transformations","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#by-theme","title":"By Theme","text":"CSS<pre><code>/* Prairie Radical */\n.theme-prairie-radical h1,\n.theme-prairie-radical h2 {\n  text-transform: none;\n}\n\n/* Neobrutalist */\n.theme-neobrutalist h1,\n.theme-neobrutalist h2,\n.theme-neobrutalist h3 {\n  text-transform: uppercase;\n}\n\n/* Mandalorian */\n.theme-mandalorian h1,\n.theme-mandalorian h2 {\n  text-transform: uppercase;\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#responsive-typography","title":"Responsive Typography","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#fluid-type-scale","title":"Fluid Type Scale","text":"CSS<pre><code>/* Fluid typography using clamp() */\nh1 {\n  font-size: clamp(2.5rem, 5vw + 1rem, 3.75rem);\n}\n\nh2 {\n  font-size: clamp(2rem, 4vw + 0.5rem, 3rem);\n}\n\nh3 {\n  font-size: clamp(1.5rem, 3vw + 0.5rem, 2.25rem);\n}\n\nbody {\n  font-size: clamp(0.875rem, 1vw + 0.5rem, 1rem);\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#text-styles","title":"Text Styles","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#paragraph-styles","title":"Paragraph Styles","text":"CSS<pre><code>/* Default paragraph */\np {\n  font-size: var(--druids-font-size-base);\n  line-height: var(--druids-line-height-relaxed);\n  margin-bottom: var(--druids-space-md);\n}\n\n/* Lead paragraph */\n.lead {\n  font-size: var(--druids-font-size-lg);\n  line-height: var(--druids-line-height-relaxed);\n  font-weight: var(--font-weight-light);\n}\n\n/* Small text */\n.small {\n  font-size: var(--druids-font-size-sm);\n  line-height: var(--druids-line-height-normal);\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#list-styles","title":"List Styles","text":"CSS<pre><code>/* Unordered lists */\nul {\n  list-style-type: disc;\n  padding-left: var(--druids-space-lg);\n}\n\n/* Ordered lists */\nol {\n  list-style-type: decimal;\n  padding-left: var(--druids-space-lg);\n}\n\n/* Nested lists */\nul ul, ol ul {\n  list-style-type: circle;\n}\n\nul ul ul, ol ul ul {\n  list-style-type: square;\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#code-styles","title":"Code Styles","text":"CSS<pre><code>/* Inline code */\ncode {\n  font-family: var(--druids-font-mono);\n  font-size: 0.875em;\n  background-color: var(--druids-background-secondary);\n  padding: 0.125rem 0.25rem;\n  border-radius: var(--druids-border-radius-sm);\n}\n\n/* Code blocks */\npre {\n  font-family: var(--druids-font-mono);\n  font-size: var(--druids-font-size-sm);\n  line-height: var(--druids-line-height-normal);\n  overflow-x: auto;\n  padding: var(--druids-space-md);\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#accessibility-considerations","title":"Accessibility Considerations","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#minimum-sizes","title":"Minimum Sizes","text":"<ul> <li>Body text: Never smaller than 14px (0.875rem)</li> <li>UI text: Never smaller than 12px (0.75rem)</li> <li>Touch targets with text: Minimum 44px height</li> </ul>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#line-height-guidelines","title":"Line Height Guidelines","text":"<ul> <li>Body text: 1.5-1.625 for optimal readability</li> <li>Headings: 1.125-1.375 depending on size</li> <li>Code: 1.5 for clarity</li> </ul>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#contrast-requirements","title":"Contrast Requirements","text":"<ul> <li>Normal text: 4.5:1 minimum</li> <li>Large text (18px+ or 14px+ bold): 3:1 minimum</li> <li>All theme combinations tested for WCAG AA compliance</li> </ul>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#font-loading-strategy","title":"Font Loading Strategy","text":"CSS<pre><code>/* Font Face Declarations with font-display */\n@font-face {\n  font-family: 'Playfair Display';\n  src: url('/fonts/playfair-display.woff2') format('woff2');\n  font-weight: 400 700;\n  font-display: swap; /* Ensures text remains visible during load */\n}\n\n/* System Font Fallback */\n.system-font-fallback {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Use <code>font-display: swap</code> for all custom fonts</li> <li>Preload critical fonts: <code>&lt;link rel=\"preload\" as=\"font\"&gt;</code></li> <li>Subset fonts to only needed characters</li> <li>Use variable fonts where possible</li> </ol>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#special-typography-features","title":"Special Typography Features","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#drop-caps-prairie-radical","title":"Drop Caps (Prairie Radical)","text":"CSS<pre><code>.theme-prairie-radical article &gt; p:first-of-type::first-letter {\n  font-family: 'Playfair Display', serif;\n  font-size: 4em;\n  float: left;\n  line-height: 0.8;\n  margin: 0.1em 0.1em 0 0;\n  color: var(--druids-accent-primary);\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#outlined-text-neobrutalist","title":"Outlined Text (Neobrutalist)","text":"CSS<pre><code>.theme-neobrutalist .text-outline {\n  color: transparent;\n  -webkit-text-stroke: 2px var(--druids-text-primary);\n  text-stroke: 2px var(--druids-text-primary);\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"typography/#glitch-effect-mandalorian","title":"Glitch Effect (Mandalorian)","text":"CSS<pre><code>.theme-mandalorian .glitch {\n  position: relative;\n  text-shadow: \n    0.05em 0 0 var(--druids-accent-secondary),\n    -0.05em 0 0 var(--druids-accent-primary);\n  animation: glitch 500ms infinite;\n}\n</code></pre> <p>Backlinks:</p>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"why-rebase-warps-reality/","title":"Why Git Rebase Warps Reality (And Why That's Dangerous for Organizing)","text":"","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#the-brilliant-observation","title":"The Brilliant Observation","text":"<p>A comrade's partner recently explained Git in a way that cuts through all the technical mystification:</p> <p>\"Git doesn't track files. It tracks changes. Like recording driving directions, not destinations.\"</p> <p>This is profound. And it perfectly explains why <code>git rebase</code> is so dangerous for collective work.</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#the-highway-metaphor","title":"The Highway Metaphor","text":"","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#how-git-actually-works","title":"How Git Actually Works","text":"<p>Imagine your organizing project as a road trip. Each commit isn't a location - it's a set of driving directions:</p> Text Only<pre><code>Commit 1: \"Start at headquarters, drive north 10 miles\"\nCommit 2: \"Turn left, drive west 50 miles\" \nCommit 3: \"Turn right, drive north 30 miles\"\n</code></pre> <p>Git doesn't record \"You are now at Cedar City.\" It records \"You drove north 10 miles, then west 50 miles, then north 30 miles.\"</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#how-we-think-git-works","title":"How We Think Git Works","text":"<p>Most people think Git saves snapshots: - \"Here's what the files looked like at 3 PM\" - \"Here's what they looked like at 4 PM\"</p> <p>But that's wrong. Git saves deltas (changes): - \"At 3 PM, you added these lines\" - \"At 4 PM, you deleted those lines\"</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#enter-rebase-the-reality-warper","title":"Enter Rebase: The Reality Warper","text":"","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#what-rebase-claims-to-do","title":"What Rebase Claims to Do","text":"<p>Rebase says: \"Let's clean up history by moving commits around.\"</p> <p>In highway terms: \"Let's pretend you took a different route to get here.\"</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#the-impossible-physics","title":"The Impossible Physics","text":"<p>Here's where it breaks reality:</p> <p>Original journey: 1. Start at HQ 2. Drive north 10 miles (organizing meeting) 3. Turn left, drive west 50 miles (outreach campaign) 4. Turn right, drive north 30 miles (protest planning)</p> <p>After rebase: 1. Start at HQ 2. Drive north 10 miles 3. Turn left, drive west 50 miles 4. [Your commits rebased here] 5. You're somehow 30 miles EAST of where you started</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#the-physics-problem","title":"The Physics Problem","text":"<p>If you: - Started at point A - Took a left turn - Drove west for 50 miles - How the hell are you east of where you started?</p> <p>You can't be. It's physically impossible.</p> <p>But rebase creates this impossibility by rewriting the journey while trying to preserve the destination.</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#why-this-matters-for-revolutionary-organizing","title":"Why This Matters for Revolutionary Organizing","text":"","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#1-shared-reality-is-essential","title":"1. Shared Reality Is Essential","text":"<p>Democratic centralism requires shared truth. When five comrades are working on a campaign: - Rosa commits meeting notes - Karl commits financial records - Emma commits outreach data - Malcolm commits security protocols - You rebase to \"clean up\"</p> <p>Suddenly, everyone else's reality breaks. Their commits reference a history that no longer exists. They pull, and Git says \"I don't know where you are anymore.\"</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#2-trust-requires-truthful-history","title":"2. Trust Requires Truthful History","text":"Bash<pre><code>git log --before=\"last week\"\n# Should show what ACTUALLY happened last week\n# Not some \"cleaned up\" fiction\n</code></pre> <p>When you rebase: - Meeting notes from March 15 might now appear before the March 14 planning session - Decisions made in response to events now appear to predict those events - The collective memory becomes a lie</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#3-accountability-vanishes","title":"3. Accountability Vanishes","text":"<p>Before rebase: Text Only<pre><code>March 10: \"Propose direct action\"\nMarch 11: \"Security concerns raised\"\nMarch 12: \"Modify proposal for safety\"\nMarch 13: \"Approved with modifications\"\n</code></pre></p> <p>After rebase: Text Only<pre><code>March 10: \"Propose safe direct action\"\nMarch 13: \"Approved\"\n</code></pre></p> <p>Where did the security discussion go? Who raised concerns? How did we address them? Rebase ate your accountability.</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#real-world-damage","title":"Real World Damage","text":"","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#scenario-1-the-lost-debate","title":"Scenario 1: The Lost Debate","text":"<p>Your organization debates a controversial tactic. After hours of discussion, you reach consensus with important constraints. Someone rebases to \"clean up\" the commit history. </p> <p>Six months later, when someone asks \"Why did we decide X?\", the reasoning is gone. The debate never happened. You just mysteriously have a decision.</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#scenario-2-the-broken-branch","title":"Scenario 2: The Broken Branch","text":"<p>Five comrades work on a campaign. One rebases the main branch to \"organize better.\" Everyone else pulls and:</p> Bash<pre><code>error: failed to push some refs\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. \n</code></pre> <p>But they're not behind - reality warped. Now everyone stops organizing to fix Git.</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#scenario-3-the-security-nightmare","title":"Scenario 3: The Security Nightmare","text":"Bash<pre><code># Original history\nCommit A: \"Add meeting notes\"\nCommit B: \"SECURITY: Remove real names from notes\"\n\n# After rebase\nCommit A': \"Add meeting notes\" (now includes the removed names)\n</code></pre> <p>Rebase can resurrect deleted sensitive data by reapplying old changes in new contexts.</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#the-alternative-merge","title":"The Alternative: Merge","text":"<p>Merge preserves reality:</p> Text Only<pre><code>      A---B---C topic\n     /         \\\nD---E---F---G---H main\n</code></pre> <p>Everyone can see: - The main line continued (D\u2192E\u2192F\u2192G) - A branch happened (A\u2192B\u2192C) - They merged at H - All history is real and traceable</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#when-people-push-rebase","title":"When People Push Rebase","text":"","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#but-clean-history","title":"\"But Clean History!\"","text":"<p>Them: \"Rebase makes history linear and clean!\" You: \"Our history isn't linear. We're a collective.\"</p> <p>Organizations aren't single-threaded. Multiple campaigns run simultaneously. Preserving that reality matters more than a pretty git log.</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#but-professional-developers","title":"\"But Professional Developers!\"","text":"<p>Them: \"Real developers use rebase!\" You: \"We're revolutionaries, not corporate code monkeys.\"</p> <p>Professional developers often work alone on feature branches. Revolutionary organizations work collectively on shared reality.</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#but-its-more-elegant","title":"\"But It's More Elegant!\"","text":"<p>Them: \"All those merge commits are ugly!\" You: \"Democracy is messy. Hiding the mess doesn't eliminate it.\"</p> <p>Those \"ugly\" merge commits show when ideas combined, when conflicts got resolved, when collective decisions happened.</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#the-rules-for-revolutionary-git","title":"The Rules for Revolutionary Git","text":"<ol> <li>Never rebase shared branches - If others have seen it, don't rewrite it</li> <li>Never rebase after pushing - Published history is sacrosanct</li> <li>Preserve collective memory - Every commit is organizational history</li> <li>Embrace merge commits - They show real collaboration</li> <li>Local cleanup only - Rebase your private thoughts, never shared work</li> </ol>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#the-technical-truth","title":"The Technical Truth","text":"<p>For those who want to understand deeper:</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#gits-content-addressable-storage","title":"Git's Content-Addressable Storage","text":"<p>Each commit has a SHA hash based on: - The changes in that commit - The parent commit's hash - The timestamp - The author</p> <p>Change ANY of these (which rebase does), and you create an entirely new commit. The old one doesn't \"move\" - it's abandoned, and a deceptive copy takes its place.</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#the-directed-acyclic-graph","title":"The Directed Acyclic Graph","text":"<p>Git history is a DAG - commits point to parents, never children. Rebase breaks this by: 1. Creating new commits with different parents 2. Pretending they're the \"same\" commits 3. Forcing everyone to abandon the old reality</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#what-to-use-instead","title":"What To Use Instead","text":"","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#for-cleaning-local-work","title":"For Cleaning Local Work","text":"Bash<pre><code># Before pushing, combine related commits\ngit commit --amend  # Fix the last commit\n</code></pre>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#for-integrating-changes","title":"For Integrating Changes","text":"Bash<pre><code># Always preserve reality\ngit merge main  # Brings main's changes to your branch\n</code></pre>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#for-organizing-history","title":"For Organizing History","text":"<p>Use clear commit messages instead of rewriting history: Bash<pre><code>git commit -m \"Meeting notes: March 15 general assembly\n\n- Decided on rent strike date (April 1)\n- Allocated resources for tenant outreach  \n- Created security protocols for action\"\n</code></pre></p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#the-revolutionary-perspective","title":"The Revolutionary Perspective","text":"<p>In corporate development, hiding mess creates an illusion of perfection. In revolutionary organizing, acknowledging mess builds trust.</p> <p>When a comrade sees: Text Only<pre><code>Merge branch 'march-proposal-v3' after security review\n</code></pre></p> <p>They know: - There were multiple proposals - Security reviewed them - The collective process worked</p> <p>That's not messy history. That's democratic centralism in action.</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"why-rebase-warps-reality/#conclusion-choose-reality","title":"Conclusion: Choose Reality","text":"<p>Git rebase is a tool for those who value pretty lies over messy truth. Revolutionary organizations need tools that preserve collective reality, not rewrite it.</p> <p>Every commit is a decision. Every merge is consensus. Every branch is an idea being developed. This is our organizational memory - don't let anyone convince you to lobotomize it for aesthetics.</p> <p>When someone suggests rebase, ask them: \"Why do you want to hide our democratic process?\"</p> <p>Because that's what rebase does. It takes the beautiful, messy, collective reality of organizing and replaces it with a fiction where everything was perfect from the start.</p> <p>We're not perfect. We're revolutionary. And our Git history should reflect that truth.</p> <p>\"Those who control the past control the future. Those who control the present control the past.\" - George Orwell</p> <p>Don't let rebase control your past.</p> <p>Next: Merge Conflicts Are Democratic Discussions \u2192</p> <p>Backlinks:</p>","tags":["git","rebase","explanation","collaboration","democratic-centralism","warning"]},{"location":"contributing/","title":"Contributing to DRUIDS","text":"<p>Welcome to the revolutionary knowledge commons! Contributing to DRUIDS means joining a collective effort to democratize technical knowledge and build sustainable organizing infrastructure.</p>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#why-contribute","title":"Why Contribute?","text":"<p>Every contribution to DRUIDS strengthens the revolutionary movement by: - Democratizing Knowledge: Breaking down technical barriers for organizers - Building Collective Capacity: Sharing knowledge instead of hoarding it - Strengthening Infrastructure: Improving tools that serve the struggle - Preserving Experience: Ensuring lessons learned benefit future comrades</p>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#getting-started","title":"Getting Started","text":"","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#revolutionary-style-guide","title":"Revolutionary Style Guide","text":"<p>Learn the writing style, tone, and conventions that make DRUIDS documentation accessible to all organizers, regardless of technical background.</p>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#cross-reference-guide","title":"Cross-Reference Guide","text":"<p>Understand how to properly link and reference content across the documentation to create a cohesive knowledge network.</p>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#contribution-areas","title":"Contribution Areas","text":"","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Fix typos and improve clarity</li> <li>Add examples from your organizing experience</li> <li>Create tutorials for new scenarios</li> <li>Translate content into other languages</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#content-development","title":"Content Development","text":"<ul> <li>Write how-to guides for specific use cases</li> <li>Document your organization's DRUIDS implementation</li> <li>Share security practices and lessons learned</li> <li>Create visual aids and diagrams</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#technical-improvements","title":"Technical Improvements","text":"<ul> <li>Improve website functionality</li> <li>Add new features to documentation system</li> <li>Optimize performance and accessibility</li> <li>Test and debug existing features</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#community-building","title":"Community Building","text":"<ul> <li>Answer questions from other users</li> <li>Facilitate learning circles and workshops</li> <li>Connect organizers using DRUIDS</li> <li>Share success stories and case studies</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#contribution-process","title":"Contribution Process","text":"","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#1-start-small","title":"1. Start Small","text":"<ul> <li>Fix a typo</li> <li>Improve a confusing explanation</li> <li>Add an example from your experience</li> <li>Update outdated information</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#2-engage-with-community","title":"2. Engage with Community","text":"<ul> <li>Join discussions about improvements</li> <li>Share your use cases and needs</li> <li>Collaborate on larger projects</li> <li>Provide feedback on proposed changes</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#3-follow-guidelines","title":"3. Follow Guidelines","text":"<ul> <li>Use the Revolutionary Style Guide</li> <li>Follow proper cross-referencing practices</li> <li>Test your changes before submitting</li> <li>Document your contributions clearly</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#4-contribute-sustainably","title":"4. Contribute Sustainably","text":"<ul> <li>Don't burn yourself out</li> <li>Share workload with other contributors</li> <li>Focus on areas that align with your strengths</li> <li>Remember: collective work, not individual heroism</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#types-of-contributions-needed","title":"Types of Contributions Needed","text":"","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#high-priority","title":"High Priority","text":"<ul> <li>Real-world implementation examples</li> <li>Security practices for specific threat models</li> <li>Troubleshooting guides for common issues</li> <li>Onboarding materials for different contexts</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#medium-priority","title":"Medium Priority","text":"<ul> <li>Additional tutorial scenarios</li> <li>Visual aids and diagrams</li> <li>Tool integrations and workflows</li> <li>Performance optimizations</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#low-priority","title":"Low Priority","text":"<ul> <li>Advanced technical features</li> <li>Aesthetic improvements</li> <li>Nice-to-have functionality</li> <li>Experimental integrations</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#contribution-standards","title":"Contribution Standards","text":"","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#political-alignment","title":"Political Alignment","text":"<ul> <li>Contributions must serve revolutionary organizing</li> <li>No corporate or state surveillance tools</li> <li>Prioritize collective liberation over individual benefit</li> <li>Maintain focus on democratic, horizontal organizing</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#technical-quality","title":"Technical Quality","text":"<ul> <li>Test all instructions and code examples</li> <li>Ensure accessibility for users with disabilities</li> <li>Follow security best practices</li> <li>Maintain compatibility across platforms</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#educational-value","title":"Educational Value","text":"<ul> <li>Use clear, jargon-free language</li> <li>Provide context for all technical concepts</li> <li>Include real organizing examples</li> <li>Build from beginners to advanced concepts</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#getting-help","title":"Getting Help","text":"","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#questions-about-contributing","title":"Questions About Contributing?","text":"<ul> <li>Check existing documentation first</li> <li>Ask specific questions about unclear areas</li> <li>Share your use case and context</li> <li>Connect with other contributors</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#technical-issues","title":"Technical Issues?","text":"<ul> <li>Test on a clean system first</li> <li>Document steps to reproduce problems</li> <li>Share error messages and system details</li> <li>Try solutions with community before escalating</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#political-or-strategic-questions","title":"Political or Strategic Questions?","text":"<ul> <li>Engage in collective discussion</li> <li>Ground questions in organizing reality</li> <li>Consider impact on vulnerable communities</li> <li>Prioritize collective security and liberation</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#recognition-and-credit","title":"Recognition and Credit","text":"","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#individual-recognition","title":"Individual Recognition","text":"<p>Contributors are credited in: - Document metadata (author fields) - Commit messages and version history - Community acknowledgments - Annual contributor recognition</p>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#collective-ownership","title":"Collective Ownership","text":"<p>All contributions become part of the commons: - No individual ownership claims - Freely shareable and modifiable - Serves the movement, not contributors - Builds collective capacity</p>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#sustaining-the-work","title":"Sustaining the Work","text":"","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#preventing-burnout","title":"Preventing Burnout","text":"<ul> <li>Rotate responsibilities regularly</li> <li>Share credit and recognition widely</li> <li>Focus on collective wins, not individual achievement</li> <li>Take breaks and step back when needed</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#building-capacity","title":"Building Capacity","text":"<ul> <li>Teach others to contribute</li> <li>Document your processes</li> <li>Create systems that work without you</li> <li>Invest in collective knowledge</li> </ul>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/#long-term-vision","title":"Long-term Vision","text":"<ul> <li>Build infrastructure that outlasts individuals</li> <li>Create sustainable contribution workflows</li> <li>Maintain revolutionary focus through changes</li> <li>Strengthen movement capacity continuously</li> </ul> <p>\"From each according to their ability, to each according to their need - including knowledge and documentation.\"</p>","tags":["contributing","guidelines","style","collaboration"]},{"location":"contributing/cross-reference-guide/","title":"Cross-Reference Guide for Revolutionary Documentation","text":"","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#material-problem-this-solves","title":"Material Problem This Solves","text":"<p>Organizers waste precious time hunting through disconnected documents. Without clear connections between theory and practice, comrades: - Struggle to find the \"how\" after understanding the \"why\" - Miss crucial prerequisites before attempting complex tasks - Can't see how different pieces fit into their organizing journey - Duplicate work because they can't find related efforts</p> <p>This guide ensures every document connects meaningfully to the collective knowledge base.</p>","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#political-framing","title":"Political Framing","text":"<p>Knowledge hoarding is a tool of oppression. By creating clear pathways between documents, we: - Democratize access to technical knowledge - Build collective intelligence rather than individual expertise - Connect theory to practice - the essence of praxis - Reduce barriers for new organizers joining the struggle</p>","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#cross-reference-patterns","title":"Cross-Reference Patterns","text":"","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#1-journey-progression-links","title":"1. Journey Progression Links","text":"<p>These links move comrades forward in their DRUIDS journey:</p> Markdown<pre><code>&lt;!-- After explaining a concept --&gt;\n**Ready to put this into practice?** See [Installation Guide](../implement/getting-started/druids-installation-guide.md){#16bb96f8ca8e61b97c5517b2ad03d1e2}\n\n&lt;!-- After a tutorial --&gt;\n**Understand the theory behind this?** Explore [Institutional Memory](../learn/core-concepts/institutional-memory.md){#7b39e6c0f4fd9735f81c07ac54d14a7a}\n\n&lt;!-- After implementation --&gt;\n**Ready to teach others?** Check out [Teaching Without Hierarchy](../teach/teach-tech-without-priest-hood.md){#872bf9f75bdb39ec4d538e220cd57d5e}\n</code></pre> <p>[EXPAND HERE: Add more journey progression examples from your organizing context]</p>","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#2-material-prerequisites","title":"2. Material Prerequisites","text":"<p>Help comrades build necessary capacity before attempting tasks:</p> Markdown<pre><code>&lt;!-- At document start --&gt;\n&gt; **Prerequisites**: Before diving in, make sure you understand:\n&gt; - [Git in 7 Commands](../learn/git-basics/git-in-7-commands.md){#c9d308c97627c2bef96998f2f68ba5bf} - Basic Git literacy\n&gt; - [DRUIDS Security Implementation](../learn/core-concepts/druids-security-implementation.md){#20273e30271139562ab67b295e290eef} - Our security philosophy\n\n&lt;!-- Inline prerequisites --&gt;\nThis workflow assumes you've completed [Your First Revolutionary Commit](../learn/tutorials/your-first-revolutionary-commit.md){#9dc291f6a55680b31588676f31cfc507}.\n</code></pre> <p>[EXPAND HERE: Create prerequisite chains for your specific workflows]</p>","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#3-theory-to-practice-connections","title":"3. Theory-to-Practice Connections","text":"<p>Every theoretical concept should link to its practical application:</p> Markdown<pre><code>&lt;!-- In theory documents --&gt;\n## Applying This Principle\nSee how democratic centralism works in practice:\n- [Git Workflow Guide](../implement/workflows/git-workflow-guide.md){#d384bbd0d0ea88942d1cafeb00cb29b1} - Branches as working groups\n- [Proposal Process](../implement/workflows/proposal-process.md){#ff4f2bc83633a89124e58633e7736246} - PRs as democratic proposals\n\n&lt;!-- In practical guides --&gt;\n## Revolutionary Theory Behind This\nThis practice embodies:\n- [Democratic Centralism](../learn/core-concepts/democratic-centralism.md){#36f7877efc55268913b61dedd24accab} - Unity in action\n- [Tech Democratization](../learn/core-concepts/tech-democratization-as-class-struggle.md){#a1569ac9972a2606f8abd356505ba4a6} - Breaking knowledge hierarchies\n</code></pre> <p>[EXPAND HERE: Map your organization's principles to concrete practices]</p>","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#4-problem-solution-mappings","title":"4. Problem-Solution Mappings","text":"<p>Connect pain points to their solutions:</p> Markdown<pre><code>&lt;!-- In problem descriptions --&gt;\n### Experiencing This Issue?\n- **Lost knowledge when comrades leave?** \u2192 [Institutional Memory](../learn/core-concepts/institutional-memory.md){#7b39e6c0f4fd9735f81c07ac54d14a7a}\n- **Burnout from repeated onboarding?** \u2192 [Onboarding Without Burnout](../learn/tutorials/onboarding-without-burnout.md){#30b22fbc4f918e7670c91ed085908abc}\n- **Security concerns about surveillance?** \u2192 [Security Playbook](../implement/security/security-playbook.md){#6b3fec9b4bf92af3a52ea4318be4fb7f}\n</code></pre> <p>[EXPAND HERE: Add your organization's specific challenges and solutions]</p>","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#5-alternative-paths","title":"5. Alternative Paths","text":"<p>Recognize different organizing contexts need different approaches:</p> Markdown<pre><code>## Choose Your Path\nDepending on your organizing context:\n\n**For Labor Organizing:**\n- Focus on [Meeting Workflows](../implement/workflows/meeting-workflow-guide.md){#c9d48513b3d3669140e67d3c9da657ea}\n- Prioritize [Security Audits](../implement/security/security-audits-for-organizers.md){#21c5b06172f009bc69d158089f4464f2}\n\n**For Tenant Unions:**\n- Start with [Migration from Google](../implement/getting-started/migration-guides/from-google-docs.md){#381ed65133a7e33df9aa02e48640ca19}\n- Emphasize &lt;!-- [Pseudonym Discipline](../../implement/security/security-playbook.md){#96067a4cdfd928d428f4057107b07fff} - Content to be created --&gt;\n\n**For Community Groups:**\n- Begin with [Quick Demo](../start/quick-demo.md){#41cf3238467ac714c46bf038e8db94f5}\n- Build towards [Proposal Process](../implement/workflows/proposal-process.md){#ff4f2bc83633a89124e58633e7736246}\n</code></pre> <p>[EXPAND HERE: Add paths specific to your movement's sectors]</p>","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#anti-patterns-to-avoid","title":"Anti-Patterns to Avoid","text":"","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#academic-language","title":"\u274c Academic Language","text":"Markdown<pre><code>&lt;!-- Wrong --&gt;\nSee also: Related theoretical frameworks in appendix B\n\n&lt;!-- Right --&gt;\nPut this into practice with: [Git Through Campaign](../teach/workshops/git-through-campaign.md){#2afe380e1f22d3fb6c072e3c4c12fabd}\n</code></pre>","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#circular-references","title":"\u274c Circular References","text":"Markdown<pre><code>&lt;!-- Wrong --&gt;\nFor security, see Security Guide. (Security Guide: For basics, see this document)\n\n&lt;!-- Right --&gt;\nBuild security knowledge progressively:\n1. Start: [Why Security Matters](link1){#863db35a61e3ca7465475aa6975b1574}\n2. Learn: [Security Principles](link2){#85ac0bad0478698a2a2da24486fb2dcb}\n3. Implement: [Security Playbook](link3){#546c8df7af8b8c9bb5cfbef945ef7d8e}\n</code></pre>","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#dead-end-documents","title":"\u274c Dead-End Documents","text":"<p>Every document should link somewhere - no organizer left behind!</p> <p>[EXPAND HERE: Add anti-patterns you've observed in your organizing]</p>","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#implementation-checklist","title":"Implementation Checklist","text":"<p>When adding cross-references to any document:</p> <ul> <li> Entry Point: How do comrades arrive here? Link back to their likely source</li> <li> Prerequisites: What capacity must they have built? Link to foundations</li> <li> Next Steps: Where do they go after this? Link forward in journey</li> <li> Alternatives: What if this doesn't fit their context? Link to options</li> <li> Problems Solved: What organizing challenges does this address? Link to solutions</li> <li> Theory Connection: How does this embody our principles? Link to concepts</li> </ul>","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#cross-reference-phrases-that-work","title":"Cross-Reference Phrases That Work","text":"<p>Replace corporate/academic language with revolutionary framing:</p> \u274c Avoid \u2705 Use Instead \"See also\" \"Apply this in practice with...\" \"Related documents\" \"Build on this knowledge with...\" \"For more information\" \"Deepen your understanding through...\" \"Refer to\" \"Put this to work in...\" \"As described in\" \"Learn the foundation in...\" <p>[EXPAND HERE: Add phrases that resonate with your organizing culture]</p>","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#maintaining-the-web","title":"Maintaining the Web","text":"<p>Cross-references are living connections that need tending:</p> <ol> <li>Regular Audits: Check links monthly during documentation sprints</li> <li>Journey Testing: Have new comrades follow reference paths</li> <li>Feedback Loops: Track which links comrades actually use</li> <li>Continuous Improvement: Update based on organizing needs</li> </ol>","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/cross-reference-guide/#remember","title":"Remember","text":"<p>Every cross-reference is a bridge between isolation and collective power. Make them: - Clear: Comrades know exactly what they'll find - Purposeful: Each link serves the journey - Accessible: Language that includes, not excludes - Revolutionary: Reinforcing our values with every connection</p> <p>Ready to see this in action? Check out Visual Learning Paths for how these connections create complete journeys.</p> <p>Want to contribute? Follow our Revolutionary Style Guide to maintain consistency.</p> <p>Backlinks:</p>","tags":["documentation","cross-references","user-journey","navigation","collective-knowledge"]},{"location":"contributing/revolutionary-style-guide/","title":"DRUIDS Revolutionary Documentation Style Guide","text":"","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#purpose","title":"Purpose","text":"<p>This guide ensures DRUIDS documentation serves revolutionary organizations with clarity, discipline, and political coherence. We write for serious organizers building power against capitalism and state repression.</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#core-principles","title":"Core Principles","text":"","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#revolutionary-voice","title":"Revolutionary Voice","text":"<ul> <li>Direct and disciplined: No corporate fluff or liberal hedging</li> <li>Marxist-Leninist framework: Use proper political terminology</li> <li>Material analysis: Ground everything in concrete conditions</li> <li>Collective focus: We, our, comrades - not individual users</li> </ul>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#what-we-are","title":"What We Are","text":"<ul> <li>Revolutionary infrastructure</li> <li>Tools for democratic centralism</li> <li>Security against state repression</li> <li>Collective knowledge systems</li> </ul>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#what-we-are-not","title":"What We Are NOT","text":"<ul> <li>Productivity software</li> <li>Corporate collaboration tools</li> <li>Liberal reform projects</li> <li>Individual solutions</li> </ul>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#language-guidelines","title":"Language Guidelines","text":"","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#required-terminology","title":"Required Terminology","text":"<p>Political Terms - \"Comrade\" not \"user\" or \"customer\" - \"Organization/formation\" not \"team\" or \"company\" - \"Democratic centralism\" explicitly named - \"State repression\" not \"privacy concerns\" - \"Revolutionary discipline\" not \"best practices\" - \"Collective responsibility\" not \"empowerment\"</p> <p>Technical Terms - \"Vault\" for Obsidian workspace - \"Repository\" for Git backend - \"L0/L1/L2\" for security tiers - \"Commit\" for saved changes - \"Branch\" for proposals/experiments</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#forbidden-language","title":"Forbidden Language","text":"<p>Corporate Speak - \u274c ROI, cost savings, efficiency gains - \u274c Stakeholder, customer, client - \u274c Innovation, disruption, optimization - \u274c Productivity, performance metrics - \u274c Value proposition, use case</p> <p>Liberal Framing - \u274c Empowerment (without class analysis) - \u274c Self-care (as individual solution) - \u274c Safe space (without material safety) - \u274c Inclusive (without power analysis) - \u274c Ethics (abstract, not material)</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#documentation-types-diataxis-framework","title":"Documentation Types (Di\u00e1taxis Framework)","text":"<p>We organize documentation into four types based on comrades' needs:</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#1-tutorials-learning-by-doing","title":"1. Tutorials (Learning by Doing)","text":"<p>Purpose: Help new comrades acquire skills through practical exercises Approach:  - Take comrades step-by-step through their first experiences - Focus on learning, not task completion - Build confidence through early victories - Use \"we\" language - you're learning together</p> <p>Example: \"Your First Revolutionary Commit\" - teaches Git through creating meeting minutes</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#2-how-to-guides-achieving-goals","title":"2. How-To Guides (Achieving Goals)","text":"<p>Purpose: Help experienced comrades accomplish specific organizing tasks Approach: - Assume basic knowledge, focus on the goal - Provide clear, adaptable instructions - Address real-world complexity - Skip unnecessary explanation</p> <p>Example: \"Migrating from Google Surveillance\" - practical steps for data liberation</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#3-reference-technical-information","title":"3. Reference (Technical Information)","text":"<p>Purpose: Provide precise technical details when needed Approach: - Structured for quick lookup - Complete and accurate - Minimal explanation - Include security implications</p> <p>Example: \"Three-Tier Security Model Specifications\"</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#4-explanation-understanding","title":"4. Explanation (Understanding)","text":"<p>Purpose: Deepen theoretical and practical understanding Approach: - Connect technical to political - Provide historical context - Explore contradictions - Build revolutionary consciousness</p> <p>Example: \"Democratic Centralism Through Git\"</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#critical-principle-never-mix-types","title":"Critical Principle: Never Mix Types","text":"<p>Each document serves ONE primary purpose. A tutorial teaches, a how-to guides, reference informs, explanation illuminates. Mixing confuses comrades and weakens documentation.</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#the-documentation-compass","title":"The Documentation Compass","text":"<p>When uncertain about documentation type, ask two questions:</p> <ol> <li>Does it inform ACTION or COGNITION?</li> <li>ACTION: Practical steps, doing things</li> <li> <p>COGNITION: Understanding, knowing things</p> </li> <li> <p>Does it help ACQUIRE or APPLY?</p> </li> <li>ACQUIRE: Learning something new</li> <li>APPLY: Using existing knowledge</li> </ol> <p>The Algorithm: Text Only<pre><code>IF content informs ACTION:\n    IF helps ACQUIRE skill \u2192 TUTORIAL\n    IF helps APPLY skill \u2192 HOW-TO GUIDE\n\nIF content informs COGNITION:\n    IF helps ACQUIRE understanding \u2192 EXPLANATION\n    IF helps APPLY understanding \u2192 REFERENCE\n</code></pre></p> <p>Quick Reference Matrix: | Purpose | Acquire | Apply | |---------|---------|-------| | Action | Tutorial | How-To Guide | | Cognition | Explanation | Reference |</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#content-structure","title":"Content Structure","text":"","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#problem-solution-framework","title":"Problem \u2192 Solution Framework","text":"<p>Always start with material conditions:</p> Markdown<pre><code>## The Problem We Face\n\n[Specific examples from organizing]\n[Material impacts on movement]\n[Current tool failures]\n\n## How DRUIDS Addresses This\n\n[Concrete solution]\n[Based on organizing experience]\n[Collective approach]\n</code></pre>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#historical-materialism","title":"Historical Materialism","text":"<p>Reference movement history: - Black Panthers' survival programs - Bolshevik underground press - Cuban revolutionary infrastructure - Contemporary movement lessons</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#writing-patterns-by-type","title":"Writing Patterns by Type","text":"","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#for-tutorials-learning-oriented","title":"For Tutorials (Learning-Oriented)","text":"Markdown<pre><code># Tutorial: [Skill to Learn]\n\n## What We'll Learn\n[Clear learning objectives - skills, not tasks]\n\n## What You'll Need\n- [Prerequisites kept minimal]\n- [Everything provided or explained]\n\n## Let's Begin\n[Immediate action with visible result]\n\n### Step 1: [First Small Victory]\n[Detailed instructions with \"we\" language]\n[Screenshot or example]\n[What you should see]\n\n### Step 2: [Building on Success]\n[Continue pattern...]\n\n## What We've Learned\n[Celebrate accomplishment]\n[Connect to larger organizing goals]\n\n## Next Steps\n[Link to next tutorial in sequence]\n</code></pre>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#for-how-to-guides-task-oriented","title":"For How-To Guides (Task-Oriented)","text":"<p>Markdown<pre><code># How to [Specific Goal]\n\n## Context\n[When/why you'd need this - brief!]\n\n## Prerequisites\n- [Assumed knowledge]\n- [Required access/tools]\n\n## Steps\n\n### 1. [Action Verb + Specific Task]\n```bash\ncommand --with-options\n</code></pre> [Only essential explanation]</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#2-next-action","title":"2. [Next Action]","text":"<p>[Continue focused on goal...]</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#verification","title":"Verification","text":"<p>[How to confirm success]</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#related-tasks","title":"Related Tasks","text":"<ul> <li>[Link to similar how-tos] Text Only<pre><code>### For Reference (Information-Oriented)\n\n```markdown\n# [Feature/Component] Reference\n\n## Overview\n[Single paragraph summary]\n\n## Specifications\n\n### Configuration Options\n| Option | Type | Default | Security Impact |\n|--------|------|---------|-----------------|\n| [name] | [type] | [value] | L0/L1/L2 |\n\n### Commands\n```bash\ncommand [options] [arguments]\n</code></pre></li> </ul> <p>Options: - <code>--flag</code>: Description (security level) - <code>-f VALUE</code>: Description (validation rules)</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#apiinterface","title":"API/Interface","text":"<p>[Precise technical details, no tutorials]</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#security-considerations","title":"Security Considerations","text":"<p>[Specific threat model addressed]</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#see-also","title":"See Also","text":"<ul> <li>[Related reference pages] Text Only<pre><code>### For Explanation (Understanding-Oriented)\n\n```markdown\n# Understanding [Concept]\n\n## The Revolutionary Context\n[Why this matters for organizing]\n\n## Historical Development\n[How this emerged from material conditions]\n\n## The Contradiction We Navigate\n[Dialectical analysis of the concept]\n\n## How DRUIDS Resolves This\n[Technical implementation serving political needs]\n\n### Theoretical Foundation\n[Connect to Marxist-Leninist theory]\n\n### Practical Implications\n[What this means for daily organizing]\n\n## Common Misconceptions\n[Address liberal or reformist interpretations]\n\n## Further Study\n- [Theoretical texts]\n- [Historical examples]\n- [Related explanations]\n</code></pre></li> </ul>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#examples","title":"Examples","text":"","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#good","title":"Good \u2705","text":"<p>\"DRUIDS implements democratic centralism through Git workflows, ensuring freedom of discussion in branches and unity of action in main.\"</p> <p>\"The three-tier security model protects against state repression by compartmentalizing information based on operational necessity.\"</p> <p>\"Collective knowledge management prevents burnout by distributing organizational memory across all members.\"</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#bad","title":"Bad \u274c","text":"<p>\"DRUIDS empowers users to collaborate more efficiently and maximize their productivity.\"</p> <p>\"Our innovative solution disrupts traditional knowledge management with cutting-edge features.\"</p> <p>\"Practice good self-care by delegating tasks within the intuitive interface.\"</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#specific-guidance","title":"Specific Guidance","text":"","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#writing-about-security","title":"Writing About Security","text":"<p>Frame as protection from real threats: - State surveillance programs - Corporate data harvesting - Infiltration attempts - Device seizures</p> <p>NOT as abstract privacy.</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#writing-about-democracy","title":"Writing About Democracy","text":"<p>Emphasize democratic centralism: - Freedom of discussion - Unity of action - Minority positions preserved - Collective decision-making</p> <p>NOT liberal democracy or consensus.</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#writing-about-sustainability","title":"Writing About Sustainability","text":"<p>Focus on structural solutions: - Distributed responsibility - Collective infrastructure - Systematic knowledge sharing - Preventing individual burnout</p> <p>NOT individual wellness.</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#tone-by-audience","title":"Tone by Audience","text":"","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#for-new-organizations","title":"For New Organizations","text":"<ul> <li>Acknowledge current struggles</li> <li>Provide clear path forward</li> <li>Reference similar organizations</li> <li>Emphasize collective benefit</li> </ul>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#for-technical-implementers","title":"For Technical Implementers","text":"<ul> <li>Assume political alignment</li> <li>Focus on practical details</li> <li>Include security implications</li> <li>Provide complete examples</li> </ul>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#for-experienced-organizers","title":"For Experienced Organizers","text":"<ul> <li>Respect existing knowledge</li> <li>Focus on specific benefits</li> <li>Address likely concerns</li> <li>Provide migration paths</li> </ul>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#implementation-approach-diataxis-method","title":"Implementation Approach (Di\u00e1taxis Method)","text":"","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#start-small-build-organically","title":"Start Small, Build Organically","text":"<ul> <li>Don't create empty documentation structures</li> <li>Work on existing content first</li> <li>Make one improvement at a time</li> <li>Publish immediately - don't wait for perfection</li> </ul>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#iterative-development","title":"Iterative Development","text":"<ol> <li>Choose a specific document</li> <li>Identify which type it should be (tutorial/how-to/reference/explanation)</li> <li>Assess against that type's criteria</li> <li>Make ONE improvement</li> <li>Publish and repeat</li> </ol>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#managing-complexity","title":"Managing Complexity","text":"<p>As documentation grows: - Add hierarchy only when needed - Keep navigation simple (\u22647 items per section) - Group by user journey, not technical architecture - Remember: comrades' needs drive structure</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#common-pitfalls-to-avoid","title":"Common Pitfalls to Avoid","text":"<ul> <li>Mixed types: Each document serves ONE purpose</li> <li>Completeness paralysis: Better to have good partial docs than no docs</li> <li>Over-structuring: Let organization emerge from use</li> <li>Technical focus: Always connect to organizing needs</li> </ul>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#review-checklist","title":"Review Checklist","text":"<p>Before publishing, ensure:</p> <ul> <li> Document type is clear (tutorial/how-to/reference/explanation)</li> <li> Serves its type's specific purpose</li> <li> Uses revolutionary terminology consistently</li> <li> Grounds arguments in material conditions</li> <li> References movement history appropriately</li> <li> Avoids all corporate/liberal language</li> <li> Provides concrete examples from organizing</li> <li> Emphasizes collective over individual</li> <li> Addresses security realistically</li> <li> Supports democratic centralist practice</li> </ul>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#political-education","title":"Political Education","text":"<p>Documentation is political education. Every page should: 1. Advance revolutionary consciousness 2. Build organizational capacity 3. Strengthen security culture 4. Develop collective practice</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"contributing/revolutionary-style-guide/#continuous-improvement","title":"Continuous Improvement","text":"<p>This guide develops through practice. Submit improvements based on: - Organizing experience - Security incidents - Movement feedback - Political development</p> <p>\"Without revolutionary theory there can be no revolutionary movement.\" - Lenin</p> <p>Our documentation is part of that revolutionary theory.</p> <p>Backlinks:</p>","tags":["style-guide","documentation","revolutionary","marxist-leninist"]},{"location":"implement/","title":"Implementing DRUIDS","text":"<p>Prerequisites: Understand why DRUIDS matters and review core concepts before implementation.</p> <p>Need help choosing a path? Check Visual Learning Paths for your organizing context.</p>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#choose-your-path","title":"Choose Your Path","text":"","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>For organizations new to DRUIDS:</p> <ol> <li>Installation Guide - Get DRUIDS running (15-45 minutes)</li> <li>First Week with DRUIDS - Essential habits and workflows</li> <li>Migration Guides - Move from your current tools:</li> <li>From Google Docs</li> <li>From Discord</li> <li>From Signal Groups</li> </ol>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#organizing-workflows","title":"\ud83d\udcbc Organizing Workflows","text":"<p>Daily operational guides:</p> <ul> <li>Meeting Management - Minutes, decisions, and follow-up</li> <li>Campaign Tracking - From planning to victory</li> <li>Member Onboarding - Self-service orientation</li> <li>Security Protocols - Operational security practices</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#advanced-implementation","title":"\ud83d\udd27 Advanced Implementation","text":"<p>For complex deployments:</p> <ul> <li>Multi-Org Federation - Connecting multiple chapters</li> <li>Custom Tails Images - Maximum security setup</li> <li>Automation Scripts - Streamline operations</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#implementation-roadmap","title":"Implementation Roadmap","text":"","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#week-1-foundation","title":"Week 1: Foundation","text":"<ul> <li> Install DRUIDS on test system</li> <li> Create first repository</li> <li> Document one meeting</li> <li> Set up basic security</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#week-2-migration","title":"Week 2: Migration","text":"<ul> <li> Export data from current platforms</li> <li> Import historical documents</li> <li> Train core team</li> <li> Establish workflows</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#week-3-expansion","title":"Week 3: Expansion","text":"<ul> <li> Roll out to all members</li> <li> Implement security tiers</li> <li> Create templates</li> <li> Start daily use</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#week-4-optimization","title":"Week 4: Optimization","text":"<ul> <li> Gather feedback</li> <li> Refine workflows</li> <li> Add automation</li> <li> Document lessons</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#common-implementation-patterns","title":"Common Implementation Patterns","text":"","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#small-cell-2-10-members","title":"Small Cell (2-10 members)","text":"<ul> <li>Single repository</li> <li>Basic security (L0/L1)</li> <li>Local sync or Syncthing</li> <li>Focus on meeting notes and decisions</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#medium-organization-10-50-members","title":"Medium Organization (10-50 members)","text":"<ul> <li>Multiple repositories by function</li> <li>Full security tiers (L0/L1/L2)</li> <li>Tor hidden service for sync</li> <li>Committees with own workflows</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#large-federation-50-members","title":"Large Federation (50+ members)","text":"<ul> <li>Hub and spoke architecture</li> <li>Per-chapter repositories</li> <li>Automated security monitoring</li> <li>Dedicated infrastructure team</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#pre-implementation-checklist","title":"Pre-Implementation Checklist","text":"","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#organizational-readiness","title":"Organizational Readiness","text":"<ul> <li> Identified pain points DRUIDS will solve</li> <li> Leadership buy-in secured</li> <li> Training time allocated</li> <li> Security model chosen</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#technical-preparation","title":"Technical Preparation","text":"<ul> <li> Hardware requirements met</li> <li> Test environment ready</li> <li> Backup systems in place</li> <li> Network connectivity verified</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#human-factors","title":"Human Factors","text":"<ul> <li> Trainers identified</li> <li> Documentation customized</li> <li> Support channels established</li> <li> Success metrics defined</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#deployment-models","title":"Deployment Models","text":"","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#1-druids-tails-usb-highest-security","title":"1. DRUIDS-Tails USB (Highest Security)","text":"<ul> <li>Pre-configured USB sticks</li> <li>Air-gapped capability</li> <li>Tor-only networking</li> <li>Perfect forward secrecy</li> </ul> <p>Best for: High-risk organizing, security-critical operations</p>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#2-standard-installation-balanced","title":"2. Standard Installation (Balanced)","text":"<ul> <li>Install on existing systems</li> <li>Encrypted repositories</li> <li>Mixed network modes</li> <li>Regular backups</li> </ul> <p>Best for: Most organizations, daily organizing work</p>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#3-cloud-hybrid-convenience","title":"3. Cloud-Hybrid (Convenience)","text":"<ul> <li>Local DRUIDS + encrypted cloud sync</li> <li>Easier multi-device access</li> <li>Some sovereignty traded for convenience</li> <li>Still no corporate surveillance</li> </ul> <p>Best for: Distributed organizations, less sensitive work</p>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#success-factors","title":"Success Factors","text":"","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#technical","title":"Technical","text":"<ul> <li>Start simple, add complexity gradually</li> <li>Test everything in safe environment first</li> <li>Have rollback plan ready</li> <li>Monitor adoption metrics</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#organizational","title":"Organizational","text":"<ul> <li>Lead by example</li> <li>Celebrate small wins</li> <li>Address resistance directly</li> <li>Make it easier than old way</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#cultural","title":"Cultural","text":"<ul> <li>Emphasize collective benefit</li> <li>Connect to revolutionary values</li> <li>Build habits slowly</li> <li>Share success stories</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#getting-help","title":"Getting Help","text":"","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#documentation","title":"Documentation","text":"<ul> <li>This guide</li> <li>Troubleshooting</li> <li>Community Forums</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#training","title":"Training","text":"<ul> <li>Workshop Materials</li> <li>Train-the-Trainers</li> <li>Peer support networks</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#technical-support","title":"Technical Support","text":"<ul> <li>GitHub issues</li> <li>Secure communication channels</li> <li>Community expertise</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#measuring-success","title":"Measuring Success","text":"","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#week-1-metrics","title":"Week 1 Metrics","text":"<ul> <li>First successful commit</li> <li>One meeting documented</li> <li>All core members have access</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#month-1-metrics","title":"Month 1 Metrics","text":"<ul> <li>80% of meetings in DRUIDS</li> <li>Onboarding time reduced</li> <li>No data on corporate platforms</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#month-3-metrics","title":"Month 3 Metrics","text":"<ul> <li>Institutional memory building</li> <li>New members self-onboarding</li> <li>Security practices habitual</li> </ul>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/#next-steps","title":"Next Steps","text":"<ol> <li>Choose deployment model based on your needs</li> <li>Follow installation guide for your chosen path</li> <li>Start with one workflow (recommend meeting notes)</li> <li>Expand gradually as comfort grows</li> </ol> <p>Ready to teach others? Use our workshop template to spread knowledge.</p> <p>Need the theory? Review why this matters for organizing.</p> <p>\"Infrastructure is not revolutionary, but revolution requires infrastructure.\"</p> <p>Backlinks:</p>","tags":["implementation","deployment","practical","setup"]},{"location":"implement/advanced/custom-tails-image-technical-guide/","title":"Custom DRUIDS-Tails Image Creation - Technical Deep Dive","text":"<p>The complete technical guide to building custom Tails images with revolutionary aesthetics</p>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#overview","title":"Overview","text":"<p>This guide covers creating a fully customized Tails image with: - Custom boot splash screens and GRUB themes - Modified desktop environment (GNOME) aesthetics - Pre-installed software and configurations - Automated setup scripts - Reproducible build process</p>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#prerequisites","title":"Prerequisites","text":"","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#build-environment","title":"Build Environment","text":"Bash<pre><code># Debian 12 build system with:\n- 32GB+ RAM (for building in tmpfs)\n- 100GB+ free disk space\n- KVM virtualization support\n- Fast internet (downloading packages)\n\n# Required packages\nsudo apt install -y \\\n    git vagrant virtualbox vagrant-libvirt \\\n    vmdebootstrap live-build rsync \\\n    syslinux syslinux-utils isolinux \\\n    xorriso mtools dosfstools squashfs-tools\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#understanding-tails-build-system","title":"Understanding Tails Build System","text":"","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#architecture-overview","title":"Architecture Overview","text":"Text Only<pre><code>tails/\n\u251c\u2500\u2500 config/                 # Live-build configuration\n\u2502   \u251c\u2500\u2500 chroot_local-includes/    # Files to include in image\n\u2502   \u251c\u2500\u2500 chroot_local-hooks/       # Scripts run during build\n\u2502   \u251c\u2500\u2500 binary_local-includes/    # Files for ISO (not persistence)\n\u2502   \u2514\u2500\u2500 binary_local-hooks/       # ISO customization scripts\n\u251c\u2500\u2500 features/              # Cucumber tests\n\u251c\u2500\u2500 vagrant/               # Build VM definitions\n\u2514\u2500\u2500 Rakefile              # Build orchestration\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#step-1-clone-and-prepare-tails-source","title":"Step 1: Clone and Prepare Tails Source","text":"Bash<pre><code># Clone official Tails repository\ngit clone https://gitlab.tails.boum.org/tails/tails.git\ncd tails\n\n# Checkout stable version (adjust version as needed)\ngit checkout tails-6.15\n\n# Create custom branch\ngit checkout -b druids-custom\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#step-2-aesthetic-customizations","title":"Step 2: Aesthetic Customizations","text":"","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#21-boot-splash-plymouth-theme","title":"2.1 Boot Splash (Plymouth Theme)","text":"<p>Create custom Plymouth theme:</p> Bash<pre><code># Create theme directory\nmkdir -p config/chroot_local-includes/usr/share/plymouth/themes/druids\n\n# Create theme script\ncat &gt; config/chroot_local-includes/usr/share/plymouth/themes/druids/druids.script &lt;&lt; 'EOF'\n# DRUIDS Plymouth Theme\nWindow.SetBackgroundTopColor(0.1, 0.1, 0.1);\nWindow.SetBackgroundBottomColor(0.0, 0.0, 0.0);\n\n# Load logo\nlogo.image = Image(\"druids-logo.png\");\nlogo.sprite = Sprite(logo.image);\n\n# Center logo\nlogo.sprite.SetX(Window.GetX() + (Window.GetWidth() - logo.image.GetWidth()) / 2);\nlogo.sprite.SetY(Window.GetY() + (Window.GetHeight() - logo.image.GetHeight()) / 2);\n\n# Progress bar\nprogress_box.image = Image(\"progress_box.png\");\nprogress_box.sprite = Sprite(progress_box.image);\nprogress_box.sprite.SetX(Window.GetX() + (Window.GetWidth() - progress_box.image.GetWidth()) / 2);\nprogress_box.sprite.SetY(logo.sprite.GetY() + logo.image.GetHeight() + 20);\n\nprogress_bar.image = Image(\"progress_bar.png\");\nprogress_bar.sprite = Sprite();\n\nfun progress_callback(progress) {\n    progress_bar.image = progress_bar.image.Scale(progress_box.image.GetWidth() * progress, progress_bar.image.GetHeight());\n    progress_bar.sprite.SetImage(progress_bar.image);\n    progress_bar.sprite.SetX(progress_box.sprite.GetX());\n    progress_bar.sprite.SetY(progress_box.sprite.GetY());\n}\n\nPlymouth.SetBootProgressFunction(progress_callback);\nEOF\n\n# Create theme configuration\ncat &gt; config/chroot_local-includes/usr/share/plymouth/themes/druids/druids.plymouth &lt;&lt; 'EOF'\n[Plymouth Theme]\nName=DRUIDS\nDescription=Democratic Resilient Unity-building Information Distribution System\nModuleName=script\n\n[script]\nImageDir=/usr/share/plymouth/themes/druids\nScriptFile=/usr/share/plymouth/themes/druids/druids.script\nEOF\n</code></pre> <p>Add your images: Bash<pre><code># Copy your logo and progress bar images\ncp /path/to/druids-logo.png config/chroot_local-includes/usr/share/plymouth/themes/druids/\ncp /path/to/progress_*.png config/chroot_local-includes/usr/share/plymouth/themes/druids/\n</code></pre></p>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#22-grub-theme-customization","title":"2.2 GRUB Theme Customization","text":"Bash<pre><code># Create GRUB theme directory\nmkdir -p config/chroot_local-includes/boot/grub/themes/druids\n\n# Create theme.txt\ncat &gt; config/chroot_local-includes/boot/grub/themes/druids/theme.txt &lt;&lt; 'EOF'\n# DRUIDS GRUB Theme\ntitle-text: \"DRUIDS Secure Boot\"\ntitle-font: \"DejaVu Sans Bold 16\"\ntitle-color: \"#FF0000\"\ndesktop-image: \"background.png\"\ndesktop-color: \"#000000\"\n\n# Boot menu styling\n+ boot_menu {\n  left = 15%\n  top = 20%\n  width = 70%\n  height = 60%\n\n  item_font = \"DejaVu Sans Regular 12\"\n  item_color = \"#CCCCCC\"\n  selected_item_color = \"#FFFFFF\"\n  selected_item_pixmap_style = \"select_*.png\"\n\n  item_height = 32\n  item_padding = 8\n  item_spacing = 4\n}\n\n# Progress bar\n+ progress_bar {\n  id = \"__timeout__\"\n  left = 15%\n  top = 85%\n  width = 70%\n  height = 16\n\n  fg_color = \"#FF0000\"\n  bg_color = \"#333333\"\n  border_color = \"#FFFFFF\"\n}\nEOF\n\n# Copy theme assets\ncp /path/to/background.png config/chroot_local-includes/boot/grub/themes/druids/\ncp /path/to/select_*.png config/chroot_local-includes/boot/grub/themes/druids/\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#23-gnome-desktop-customization","title":"2.3 GNOME Desktop Customization","text":"<p>Create GNOME customization script:</p> Bash<pre><code>cat &gt; config/chroot_local-hooks/99-druids-gnome-customize &lt;&lt; 'EOF'\n#!/bin/sh\nset -e\n\n# DRUIDS GNOME Customizations\n\n# Create custom GNOME Shell theme\nmkdir -p /usr/share/themes/DRUIDS/gnome-shell\ncat &gt; /usr/share/themes/DRUIDS/gnome-shell/gnome-shell.css &lt;&lt; 'THEME'\n/* DRUIDS GNOME Shell Theme */\n@import url(\"/usr/share/gnome-shell/theme/gnome-shell.css\");\n\n/* Top bar */\n#panel {\n    background-color: rgba(0, 0, 0, 0.9);\n    font-weight: bold;\n    height: 28px;\n}\n\n/* Activities button */\n#panel .panel-button:hover {\n    background-color: rgba(255, 0, 0, 0.3);\n}\n\n/* System menu */\n.system-menu-action {\n    color: #ffffff;\n}\n\n.system-menu-action:hover {\n    background-color: rgba(255, 0, 0, 0.2);\n}\n\n/* Notifications */\n.notification-banner {\n    background-color: rgba(0, 0, 0, 0.9);\n    border: 1px solid #ff0000;\n}\nTHEME\n\n# Set default wallpaper\nmkdir -p /usr/share/backgrounds/druids\ncp /usr/share/backgrounds/druids/druids-wallpaper.png /usr/share/gnome-background-properties/\n\n# Create dconf defaults\nmkdir -p /etc/dconf/db/local.d\ncat &gt; /etc/dconf/db/local.d/01-druids &lt;&lt; 'DCONF'\n[org/gnome/desktop/background]\npicture-uri='file:///usr/share/backgrounds/druids/druids-wallpaper.png'\npicture-options='zoom'\nprimary-color='#000000'\nsecondary-color='#000000'\n\n[org/gnome/desktop/interface]\ngtk-theme='Adwaita-dark'\nicon-theme='Adwaita'\nfont-name='Liberation Sans 11'\ndocument-font-name='Liberation Sans 11'\nmonospace-font-name='Liberation Mono 10'\n\n[org/gnome/shell]\nfavorite-apps=['tor-browser.desktop', 'org.gnome.Nautilus.desktop', 'org.gnome.Terminal.desktop', 'obsidian.desktop']\n\n[org/gnome/desktop/wm/preferences]\nbutton-layout='close,minimize,maximize:'\ntheme='Adwaita-dark'\nDCONF\n\n# Update dconf\ndconf update\nEOF\n\nchmod +x config/chroot_local-hooks/99-druids-gnome-customize\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#24-custom-greeter-configuration","title":"2.4 Custom Greeter Configuration","text":"Bash<pre><code>cat &gt; config/chroot_local-includes/etc/gdm3/greeter.dconf-defaults &lt;&lt; 'EOF'\n[org/gnome/login-screen]\nbanner-message-enable=true\nbanner-message-text='DRUIDS - Secure Revolutionary Infrastructure\\nRemember: No investigation, no right to speak'\ndisable-user-list=true\nlogo='/usr/share/pixmaps/druids-greeter-logo.png'\nEOF\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#step-3-pre-installed-software","title":"Step 3: Pre-installed Software","text":"","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#31-add-obsidian-and-plugins","title":"3.1 Add Obsidian and Plugins","text":"Bash<pre><code>cat &gt; config/chroot_local-hooks/98-install-obsidian &lt;&lt; 'EOF'\n#!/bin/sh\nset -e\n\n# Download and install Obsidian AppImage\nOBSIDIAN_VERSION=\"1.4.16\"\nwget -O /tmp/obsidian.AppImage \\\n    \"https://github.com/obsidianmd/obsidian-releases/releases/download/v${OBSIDIAN_VERSION}/Obsidian-${OBSIDIAN_VERSION}.AppImage\"\n\n# Install to system location\nmkdir -p /opt/obsidian\nmv /tmp/obsidian.AppImage /opt/obsidian/\nchmod +x /opt/obsidian/obsidian.AppImage\n\n# Create desktop file\ncat &gt; /usr/share/applications/obsidian.desktop &lt;&lt; 'DESKTOP'\n[Desktop Entry]\nName=Obsidian\nExec=/opt/obsidian/obsidian.AppImage %U\nTerminal=false\nType=Application\nIcon=obsidian\nCategories=Office;\nMimeType=x-scheme-handler/obsidian;\nDESKTOP\n\n# Download icon\nwget -O /usr/share/pixmaps/obsidian.png \\\n    \"https://obsidian.md/images/obsidian-logo-gradient.svg\"\nEOF\n\nchmod +x config/chroot_local-hooks/98-install-obsidian\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#32-pre-configure-git-aliases","title":"3.2 Pre-configure Git Aliases","text":"Bash<pre><code>cat &gt; config/chroot_local-includes/etc/skel/.gitconfig &lt;&lt; 'EOF'\n[alias]\n    # Revolutionary aliases\n    unite = merge\n    struggle = diff\n    advance = push\n    learn = pull\n    history = log --oneline --graph --all\n\n    # Practical aliases\n    st = status\n    co = checkout\n    br = branch\n    cm = commit -m\n    unstage = reset HEAD --\n\n[init]\n    defaultBranch = main\n\n[user]\n    # Will be configured on first use\n    name = \n    email = \nEOF\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#step-4-build-automation-scripts","title":"Step 4: Build Automation Scripts","text":"","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#41-first-boot-setup-script","title":"4.1 First-Boot Setup Script","text":"Bash<pre><code>cat &gt; config/chroot_local-includes/usr/local/bin/druids-first-boot &lt;&lt; 'EOF'\n#!/bin/bash\n# DRUIDS First Boot Configuration\n\nset -e\n\nFIRST_BOOT_MARKER=\"/var/lib/druids/.first-boot-complete\"\n\nif [ -f \"$FIRST_BOOT_MARKER\" ]; then\n    exit 0\nfi\n\n# Show welcome\nzenity --info --width=600 --title=\"Welcome to DRUIDS-Tails\" \\\n    --text=\"Welcome to your secure revolutionary infrastructure!\\n\\nThis setup wizard will:\\n\u2022 Configure your security keys\\n\u2022 Set up Git identity\\n\u2022 Initialize Obsidian vault\\n\u2022 Create secure communication channels\\n\\nThis process takes about 10 minutes.\"\n\n# Run setup modules\n/usr/local/bin/druids-setup-keys\n/usr/local/bin/druids-setup-git\n/usr/local/bin/druids-setup-obsidian\n\n# Mark complete\nmkdir -p /var/lib/druids\ntouch \"$FIRST_BOOT_MARKER\"\n\nzenity --info --title=\"Setup Complete\" \\\n    --text=\"DRUIDS setup is complete!\\n\\nYour system is ready for secure organizing.\"\nEOF\n\nchmod +x config/chroot_local-includes/usr/local/bin/druids-first-boot\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#42-create-systemd-service-for-first-boot","title":"4.2 Create Systemd Service for First Boot","text":"Bash<pre><code>cat &gt; config/chroot_local-includes/etc/systemd/system/druids-first-boot.service &lt;&lt; 'EOF'\n[Unit]\nDescription=DRUIDS First Boot Setup\nAfter=gdm.service\nWants=gdm.service\n\n[Service]\nType=oneshot\nExecStart=/usr/local/bin/druids-first-boot\nRemainAfterExit=yes\nUser=amnesia\nEnvironment=\"DISPLAY=:0\"\nEnvironment=\"XAUTHORITY=/run/user/1000/gdm/Xauthority\"\n\n[Install]\nWantedBy=default.target\nEOF\n\n# Enable service\ncat &gt; config/chroot_local-hooks/97-enable-druids-services &lt;&lt; 'EOF'\n#!/bin/sh\nsystemctl enable druids-first-boot.service\nEOF\n\nchmod +x config/chroot_local-hooks/97-enable-druids-services\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#step-5-building-the-image","title":"Step 5: Building the Image","text":"","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#51-configure-build-variables","title":"5.1 Configure Build Variables","text":"Bash<pre><code># Set custom version\nexport DRUIDS_VERSION=\"0.1.0\"\nexport TAILS_VERSION=\"6.15\"\nexport BUILD_DATE=$(date +%Y%m%d)\n\n# Update version files\necho \"DRUIDS-Tails ${DRUIDS_VERSION} (based on Tails ${TAILS_VERSION})\" &gt; \\\n    config/chroot_local-includes/etc/druids-version\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#52-build-process","title":"5.2 Build Process","text":"Bash<pre><code># Clean previous builds\nlb clean --purge\n\n# Configure live-build\nlb config \\\n    --architecture amd64 \\\n    --binary-images iso-hybrid \\\n    --distribution bookworm \\\n    --iso-application \"DRUIDS-Tails\" \\\n    --iso-volume \"DRUIDS-Tails-${DRUIDS_VERSION}\" \\\n    --memtest none\n\n# Add custom packages\necho \"git\ncurl\nwget\ngnupg2\nobsidian\nvim\ntmux\nhtop\nrsync\njq\" &gt;&gt; config/package-lists/druids.list.chroot\n\n# Build the image\nsudo lb build\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#53-post-build-customization","title":"5.3 Post-Build Customization","text":"Bash<pre><code># Extract ISO for modification\nmkdir iso_extracted\nxorriso -osirrox on -indev tails-amd64-*.iso -extract / iso_extracted\n\n# Modify isolinux splash\ncp /path/to/druids-isolinux-splash.png iso_extracted/isolinux/splash.png\n\n# Update bootloader text\nsed -i 's/Tails/DRUIDS-Tails/g' iso_extracted/isolinux/live64.cfg\nsed -i 's/The Amnesic Incognito Live System/Democratic Resilient Unity-building Information Distribution System/g' \\\n    iso_extracted/isolinux/*.cfg\n\n# Rebuild ISO\nxorriso -as mkisofs \\\n    -r -V \"DRUIDS-Tails-${DRUIDS_VERSION}\" \\\n    -J -joliet-long \\\n    -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \\\n    -c isolinux/boot.cat \\\n    -b isolinux/isolinux.bin \\\n    -no-emul-boot -boot-load-size 4 -boot-info-table \\\n    -eltorito-alt-boot \\\n    -e boot/grub/efi.img \\\n    -no-emul-boot -isohybrid-gpt-basdat \\\n    -o druids-tails-${DRUIDS_VERSION}-${BUILD_DATE}.iso \\\n    iso_extracted\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#step-6-reproducible-builds","title":"Step 6: Reproducible Builds","text":"","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#61-create-build-container","title":"6.1 Create Build Container","text":"Docker<pre><code># Dockerfile for reproducible DRUIDS-Tails builds\nFROM debian:bookworm\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    live-build git wget xorriso syslinux \\\n    syslinux-utils isolinux mtools dosfstools \\\n    squashfs-tools genisoimage\n\nWORKDIR /build\nCOPY . /build/\n\nENV SOURCE_DATE_EPOCH=1704067200\nENV DRUIDS_VERSION=0.1.0\n\nCMD [\"/build/scripts/build-druids-tails.sh\"]\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#62-build-script","title":"6.2 Build Script","text":"Bash<pre><code>cat &gt; scripts/build-druids-tails.sh &lt;&lt; 'EOF'\n#!/bin/bash\nset -e\n\n# Set reproducible build environment\nexport LC_ALL=C.UTF-8\nexport LANG=C.UTF-8\nexport TZ=UTC\n\n# Build with consistent timestamp\nfind config/chroot_local-includes -type f -exec touch -d @${SOURCE_DATE_EPOCH} {} \\;\n\n# Run build\nlb clean --purge\nlb config\nlb build\n\n# Generate checksums\nsha256sum *.iso &gt; SHA256SUMS\ngpg --clearsign SHA256SUMS\nEOF\n\nchmod +x scripts/build-druids-tails.sh\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#step-7-verification-and-testing","title":"Step 7: Verification and Testing","text":"","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#71-automated-testing","title":"7.1 Automated Testing","text":"Bash<pre><code># Create test script\ncat &gt; test/verify-build.sh &lt;&lt; 'EOF'\n#!/bin/bash\n\nISO_PATH=$1\n\n# Verify ISO integrity\necho \"Verifying ISO integrity...\"\nxorriso -indev \"$ISO_PATH\" -check_media --\n\n# Check for required files\necho \"Checking for DRUIDS customizations...\"\nxorriso -osirrox on -indev \"$ISO_PATH\" -find / -name \"*druids*\" -exec echo {} \\;\n\n# Verify packages\necho \"Extracting filesystem.squashfs...\"\nxorriso -osirrox on -indev \"$ISO_PATH\" -extract /live/filesystem.squashfs /tmp/fs.squashfs\nunsquashfs -l /tmp/fs.squashfs | grep -E \"(obsidian|druids)\" | head -20\nEOF\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#72-qemu-testing","title":"7.2 QEMU Testing","text":"Bash<pre><code># Quick boot test\nqemu-system-x86_64 \\\n    -m 4096 \\\n    -cdrom druids-tails-*.iso \\\n    -boot d \\\n    -enable-kvm \\\n    -display gtk\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#advanced-customizations","title":"Advanced Customizations","text":"","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#custom-package-repository","title":"Custom Package Repository","text":"Bash<pre><code># Add custom APT repository for DRUIDS packages\ncat &gt; config/chroot_local-includes/etc/apt/sources.list.d/druids.list &lt;&lt; 'EOF'\ndeb [signed-by=/usr/share/keyrings/druids-keyring.gpg] https://apt.druids.dev bookworm main\nEOF\n\n# Add repository key\nwget -O config/chroot_local-includes/usr/share/keyrings/druids-keyring.gpg \\\n    https://apt.druids.dev/druids-keyring.gpg\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#hardware-specific-optimizations","title":"Hardware-Specific Optimizations","text":"Bash<pre><code># Add firmware for specific hardware\necho \"firmware-iwlwifi\nfirmware-realtek\nfirmware-atheros\" &gt;&gt; config/package-lists/firmware.list.chroot\n\n# Kernel parameters for specific hardware\necho \"amdgpu.dc=1 nvme_core.default_ps_max_latency_us=0\" &gt;&gt; \\\n    config/bootloaders/isolinux/live.cfg.in\n</code></pre>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#security-considerations","title":"Security Considerations","text":"<ol> <li>Build Environment: Always build in isolated VMs</li> <li>Supply Chain: Verify all downloaded components</li> <li>Reproducibility: Use consistent timestamps and environments</li> <li>Testing: Verify each build before distribution</li> <li>Signing: GPG sign all images and checksums</li> </ol>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/custom-tails-image-technical-guide/#distribution","title":"Distribution","text":"Bash<pre><code># Create distribution package\nmkdir -p dist/druids-tails-${DRUIDS_VERSION}\ncp druids-tails-*.iso dist/druids-tails-${DRUIDS_VERSION}/\ncp SHA256SUMS* dist/druids-tails-${DRUIDS_VERSION}/\ncp docs/verification-guide.md dist/druids-tails-${DRUIDS_VERSION}/\n\n# Create torrent for distribution\nmktorrent \\\n    -a \"udp://tracker.opentrackr.org:1337/announce\" \\\n    -n \"DRUIDS-Tails-${DRUIDS_VERSION}\" \\\n    -o druids-tails-${DRUIDS_VERSION}.torrent \\\n    dist/druids-tails-${DRUIDS_VERSION}/\n</code></pre> <p>This is the deep technical dive. With this guide, you can create fully customized Tails images with revolutionary aesthetics while maintaining security.</p> <p>Backlinks:</p>","tags":["tails","customization","technical","image-building","branding"]},{"location":"implement/advanced/druids-tails-bootstrap-scripts/","title":"DRUIDS-Tails Bootstrap Scripts","text":"<p>Automated setup scripts for consistent, secure deployment</p>","tags":["scripts","automation","bootstrap","tails","setup"]},{"location":"implement/advanced/druids-tails-bootstrap-scripts/#master-bootstrap-script","title":"Master Bootstrap Script","text":"Bash<pre><code>#!/bin/bash\n# druids-bootstrap.sh - Main bootstrap orchestrator\n# Run this on first boot of DRUIDS-Tails\n\nset -euo pipefail\n\n# Configuration\nDRUIDS_VERSION=\"0.1.0\"\nDRUIDS_HOME=\"/home/amnesia/Persistent/.druids\"\nVAULT_PATH=\"/home/amnesia/Persistent/Obsidian/Vault\"\nLOG_FILE=\"/home/amnesia/Persistent/.druids/bootstrap.log\"\n\n# Color codes for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# Logging function\nlog() {\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_FILE\"\n}\n\n# Error handling\nerror_exit() {\n    echo -e \"${RED}ERROR: $1${NC}\" &gt;&amp;2\n    log \"ERROR: $1\"\n    exit 1\n}\n\n# Success message\nsuccess() {\n    echo -e \"${GREEN}\u2713 $1${NC}\"\n    log \"SUCCESS: $1\"\n}\n\n# Warning message\nwarning() {\n    echo -e \"${YELLOW}\u26a0 $1${NC}\"\n    log \"WARNING: $1\"\n}\n\n# Check if running on Tails\ncheck_environment() {\n    if [ ! -f /etc/os-release ] || ! grep -q \"Tails\" /etc/os-release; then\n        error_exit \"This script must be run on Tails\"\n    fi\n\n    if [ ! -d /home/amnesia/Persistent ]; then\n        error_exit \"Persistent storage not found. Please enable it first.\"\n    fi\n\n    success \"Environment check passed\"\n}\n\n# Create directory structure\nsetup_directories() {\n    log \"Creating DRUIDS directory structure...\"\n\n    mkdir -p \"$DRUIDS_HOME\"/{config,keys,scripts,backups}\n    mkdir -p \"$VAULT_PATH\"/{L0,L1,L2,templates,archive}\n    mkdir -p \"$VAULT_PATH\"/L0/{announcements,education,guides}\n    mkdir -p \"$VAULT_PATH\"/L1/{meetings,members,campaigns}\n    mkdir -p \"$VAULT_PATH\"/L2/.encrypted\n\n    # Set secure permissions\n    chmod 700 \"$DRUIDS_HOME\"\n    chmod 700 \"$VAULT_PATH\"/L2\n\n    success \"Directory structure created\"\n}\n\n# Install additional software\ninstall_software() {\n    log \"Installing additional software...\"\n\n    # Update package list\n    sudo apt-get update || warning \"Package update failed, continuing...\"\n\n    # Install required packages\n    local packages=(\n        \"git\"\n        \"gnupg2\"\n        \"curl\"\n        \"wget\"\n        \"age\"\n        \"jq\"\n        \"tmux\"\n        \"vim\"\n        \"rsync\"\n        \"pwgen\"\n        \"libfido2-1\"\n        \"yubikey-manager\"\n    )\n\n    for package in \"${packages[@]}\"; do\n        if ! dpkg -l | grep -q \"^ii  $package\"; then\n            sudo apt-get install -y \"$package\" || warning \"Failed to install $package\"\n        fi\n    done\n\n    success \"Software installation complete\"\n}\n\n# Configure Git\nsetup_git() {\n    log \"Configuring Git...\"\n\n    # Check if already configured\n    if git config --global user.name &amp;&gt;/dev/null; then\n        warning \"Git already configured, skipping...\"\n        return\n    fi\n\n    # Interactive setup\n    echo \"=== Git Configuration ===\"\n    read -p \"Enter your pseudonym: \" git_name\n    read -p \"Enter your secure email: \" git_email\n\n    git config --global user.name \"$git_name\"\n    git config --global user.email \"$git_email\"\n    git config --global init.defaultBranch main\n    git config --global commit.gpgsign true\n\n    # Revolutionary aliases\n    git config --global alias.unite \"merge\"\n    git config --global alias.struggle \"diff\"\n    git config --global alias.advance \"push\"\n    git config --global alias.learn \"pull\"\n    git config --global alias.history \"log --oneline --graph --all\"\n\n    success \"Git configured\"\n}\n\n# Generate GPG key\nsetup_gpg() {\n    log \"Setting up GPG...\"\n\n    # Check if key already exists\n    if gpg --list-secret-keys | grep -q sec; then\n        warning \"GPG key already exists, skipping generation...\"\n        return\n    fi\n\n    echo \"=== GPG Key Generation ===\"\n    echo \"This will generate a secure GPG key for signing and encryption.\"\n\n    # Generate key with batch mode\n    cat &gt; /tmp/gpg-keygen &lt;&lt; EOF\n%echo Generating DRUIDS GPG key\nKey-Type: RSA\nKey-Length: 4096\nSubkey-Type: RSA\nSubkey-Length: 4096\nName-Real: $(git config --global user.name)\nName-Email: $(git config --global user.email)\nExpire-Date: 1y\n%no-protection\n%commit\n%echo done\nEOF\n\n    gpg --batch --generate-key /tmp/gpg-keygen\n    rm -f /tmp/gpg-keygen\n\n    # Get key ID and configure Git\n    KEY_ID=$(gpg --list-secret-keys --keyid-format=long | grep sec | awk '{print $2}' | cut -d'/' -f2 | head -n1)\n    git config --global user.signingkey \"$KEY_ID\"\n\n    # Export public key\n    gpg --export --armor \"$KEY_ID\" &gt; \"$DRUIDS_HOME/keys/gpg-public.asc\"\n\n    success \"GPG key generated: $KEY_ID\"\n}\n\n# Setup hardware key authentication\nsetup_hardware_key() {\n    log \"Setting up hardware key authentication...\"\n\n    # Check for hardware key\n    if ! lsusb | grep -E \"(Yubico|Feitian)\" &amp;&gt;/dev/null; then\n        warning \"No hardware key detected. Please insert your security key.\"\n        echo \"Press Enter when ready, or 's' to skip...\"\n        read -n 1 response\n        if [ \"$response\" = \"s\" ]; then\n            warning \"Skipping hardware key setup\"\n            return\n        fi\n    fi\n\n    # Generate SSH key with hardware backing\n    echo \"=== Hardware Key SSH Setup ===\"\n    echo \"You'll be prompted to touch your security key...\"\n\n    local ssh_key_file=\"$HOME/.ssh/id_ed25519_sk\"\n\n    if [ -f \"$ssh_key_file\" ]; then\n        warning \"Hardware SSH key already exists\"\n    else\n        ssh-keygen -t ed25519-sk -C \"$(date +%Y%m%d)-druids\" -f \"$ssh_key_file\" -N \"\"\n        success \"Hardware SSH key created\"\n    fi\n\n    # Configure SSH\n    cat &gt; \"$HOME/.ssh/config\" &lt;&lt; EOF\nHost *.onion\n    ProxyCommand nc -x localhost:9050 %h %p\n\nHost github.com\n    User git\n    IdentityFile $ssh_key_file\n    IdentitiesOnly yes\nEOF\n\n    chmod 600 \"$HOME/.ssh/config\"\n    success \"SSH configured for Tor and GitHub\"\n}\n\n# Setup Obsidian\nsetup_obsidian() {\n    log \"Setting up Obsidian...\"\n\n    # Check if Obsidian is installed\n    if [ ! -f /opt/obsidian/obsidian.AppImage ]; then\n        warning \"Obsidian not found. Please install it manually.\"\n        return\n    fi\n\n    # Initialize vault\n    cd \"$VAULT_PATH\"\n    git init\n\n    # Create .gitignore\n    cat &gt; .gitignore &lt;&lt; EOF\n.obsidian/workspace.json\n.obsidian/workspace-mobile.json\n.obsidian/cache\n.trash/\n.DS_Store\nL2/\n*.tmp\n*.age\nEOF\n\n    # Create initial files\n    cat &gt; README.md &lt;&lt; EOF\n# DRUIDS Vault\n\nThis is your secure organizational knowledge base.\n\n## Security Tiers\n\n- **L0**: Public information (this folder)\n- **L1**: Member-only information (encrypted)\n- **L2**: Sensitive operations (client-side only, never synced)\n\n## Quick Start\n\n1. Create new meeting notes: \\`druids new meeting\\`\n2. Check security status: \\`druids security status\\`\n3. Sync with comrades: \\`druids sync\\`\n\nRemember: If in doubt, use a higher security tier.\nEOF\n\n    # Create templates\n    mkdir -p templates\n\n    cat &gt; templates/meeting-minutes.md &lt;&lt; 'EOF'\n---\ndate: {{date}}\ntype: meeting\nsecurity: L1\nattendees: \ndecisions: \nactions: \n---\n\n# Meeting Minutes - {{date}}\n\n## Attendees\n\n\n## Agenda\n\n\n## Discussion\n\n\n## Decisions\n\n\n## Action Items\n- [ ] \n\n## Next Meeting\n\n\n---\n*Recorded by: {{author}}*\nEOF\n\n    # Initial commit\n    git add .\n    git commit -m \"Initialize DRUIDS vault\"\n\n    success \"Obsidian vault initialized\"\n}\n\n# Setup security scripts\ninstall_druids_scripts() {\n    log \"Installing DRUIDS utility scripts...\"\n\n    # Main druids command\n    cat &gt; \"$DRUIDS_HOME/scripts/druids\" &lt;&lt; 'EOF'\n#!/bin/bash\n# DRUIDS command-line interface\n\nDRUIDS_HOME=\"/home/amnesia/Persistent/.druids\"\nVAULT_PATH=\"/home/amnesia/Persistent/Obsidian/Vault\"\n\ncase \"$1\" in\n    status)\n        echo \"=== DRUIDS Status ===\"\n        echo \"Version: $(cat $DRUIDS_HOME/config/version 2&gt;/dev/null || echo 'unknown')\"\n        echo \"Vault: $VAULT_PATH\"\n        echo \"GPG: $(gpg --list-secret-keys | grep uid | head -n1)\"\n        echo \"Git: $(cd $VAULT_PATH &amp;&amp; git log --oneline -1)\"\n        echo \"Tor: $(systemctl is-active tor)\"\n        ;;\n\n    new)\n        case \"$2\" in\n            meeting)\n                DATE=$(date +%Y-%m-%d)\n                FILE=\"$VAULT_PATH/L1/meetings/$DATE-meeting.md\"\n                mkdir -p $(dirname \"$FILE\")\n                cp \"$VAULT_PATH/templates/meeting-minutes.md\" \"$FILE\"\n                sed -i \"s/{{date}}/$DATE/g\" \"$FILE\"\n                sed -i \"s/{{author}}/$(git config user.name)/g\" \"$FILE\"\n                echo \"Created: $FILE\"\n                ;;\n            *)\n                echo \"Usage: druids new [meeting|document|campaign]\"\n                ;;\n        esac\n        ;;\n\n    sync)\n        cd \"$VAULT_PATH\"\n        git add .\n        git commit -m \"Sync $(date +%Y-%m-%d-%H%M%S) from $(hostname)\"\n        echo \"Changes committed locally\"\n        ;;\n\n    security)\n        case \"$2\" in\n            audit)\n                echo \"=== Security Audit ===\"\n                find \"$VAULT_PATH/L2\" -type f -name \"*.md\" | wc -l | xargs echo \"L2 files (should be 0):\"\n                find \"$VAULT_PATH\" -type f -perm /022 | xargs echo \"World-readable files:\"\n                ;;\n            *)\n                echo \"Usage: druids security [audit|status|rotate]\"\n                ;;\n        esac\n        ;;\n\n    *)\n        echo \"DRUIDS - Democratic Resilient Unity-building Information Distribution System\"\n        echo \"\"\n        echo \"Usage: druids [command] [options]\"\n        echo \"\"\n        echo \"Commands:\"\n        echo \"  status    Show system status\"\n        echo \"  new       Create new documents\"\n        echo \"  sync      Commit changes\"\n        echo \"  security  Security operations\"\n        echo \"  help      Show this help\"\n        ;;\nesac\nEOF\n\n    chmod +x \"$DRUIDS_HOME/scripts/druids\"\n\n    # Create symlink\n    sudo ln -sf \"$DRUIDS_HOME/scripts/druids\" /usr/local/bin/druids\n\n    # Security audit script\n    cat &gt; \"$DRUIDS_HOME/scripts/security-audit.sh\" &lt;&lt; 'EOF'\n#!/bin/bash\n# Periodic security audit\n\necho \"=== DRUIDS Security Audit ===\"\necho \"Date: $(date)\"\necho \"\"\n\n# Check for sensitive data in wrong tiers\necho \"Checking for PII in L0...\"\ngrep -r -i -E \"(phone|address|ssn|license|passport)\" \"$VAULT_PATH/L0\" || echo \"\u2713 None found\"\n\necho \"\"\necho \"Checking for unencrypted L1 files...\"\nfind \"$VAULT_PATH/L1\" -name \"*.md\" -exec file {} \\; | grep -v \"PGP\\|GPG\" | head -5\n\necho \"\"\necho \"Checking permissions...\"\nfind \"$VAULT_PATH\" -type f -perm /077 -ls | head -5\n\necho \"\"\necho \"Checking for large files...\"\nfind \"$VAULT_PATH\" -size +10M -ls\n\necho \"\"\necho \"=== Audit Complete ===\"\nEOF\n\n    chmod +x \"$DRUIDS_HOME/scripts/security-audit.sh\"\n\n    success \"DRUIDS scripts installed\"\n}\n\n# Configure autostart\nsetup_autostart() {\n    log \"Configuring autostart...\"\n\n    # Create welcome script\n    cat &gt; \"$DRUIDS_HOME/scripts/welcome.sh\" &lt;&lt; 'EOF'\n#!/bin/bash\n\n# Check if first run today\nLAST_RUN_FILE=\"$HOME/.druids-last-run\"\nTODAY=$(date +%Y-%m-%d)\n\nif [ -f \"$LAST_RUN_FILE\" ]; then\n    LAST_RUN=$(cat \"$LAST_RUN_FILE\")\n    if [ \"$LAST_RUN\" = \"$TODAY\" ]; then\n        exit 0\n    fi\nfi\n\n# Show daily reminder\nzenity --info --title=\"DRUIDS Daily Reminder\" \\\n    --text=\"Remember to:\\n\\n\u2713 Check for updates\\n\u2713 Sync your vault\\n\u2713 Review security tier usage\\n\u2713 Clear L2 if needed\\n\\nStay safe, comrade!\" \\\n    --width=300\n\necho \"$TODAY\" &gt; \"$LAST_RUN_FILE\"\n\n# Run security audit\n/home/amnesia/Persistent/.druids/scripts/security-audit.sh &gt; \\\n    /home/amnesia/Persistent/.druids/security-audit-$TODAY.log\nEOF\n\n    chmod +x \"$DRUIDS_HOME/scripts/welcome.sh\"\n\n    # Create desktop file\n    mkdir -p /home/amnesia/.config/autostart\n    cat &gt; /home/amnesia/.config/autostart/druids-welcome.desktop &lt;&lt; EOF\n[Desktop Entry]\nType=Application\nName=DRUIDS Welcome\nExec=$DRUIDS_HOME/scripts/welcome.sh\nHidden=false\nNoDisplay=false\nX-GNOME-Autostart-enabled=true\nEOF\n\n    success \"Autostart configured\"\n}\n\n# Main execution\nmain() {\n    echo \"===================================\"\n    echo \"   DRUIDS Bootstrap - v$DRUIDS_VERSION\"\n    echo \"===================================\"\n    echo \"\"\n\n    # Create log directory\n    mkdir -p \"$(dirname \"$LOG_FILE\")\"\n\n    log \"Starting DRUIDS bootstrap...\"\n\n    # Check if already bootstrapped\n    if [ -f \"$DRUIDS_HOME/config/.bootstrapped\" ]; then\n        warning \"DRUIDS already bootstrapped. Run with --force to re-run.\"\n        exit 0\n    fi\n\n    # Run setup steps\n    check_environment\n    setup_directories\n    install_software\n    setup_git\n    setup_gpg\n    setup_hardware_key\n    setup_obsidian\n    install_druids_scripts\n    setup_autostart\n\n    # Mark as complete\n    echo \"$DRUIDS_VERSION\" &gt; \"$DRUIDS_HOME/config/version\"\n    touch \"$DRUIDS_HOME/config/.bootstrapped\"\n\n    echo \"\"\n    echo \"=======================================\"\n    echo -e \"${GREEN}\u2713 DRUIDS Bootstrap Complete!${NC}\"\n    echo \"=======================================\"\n    echo \"\"\n    echo \"Next steps:\"\n    echo \"1. Run 'druids status' to verify installation\"\n    echo \"2. Open Obsidian and select: $VAULT_PATH\"\n    echo \"3. Create your first meeting notes: 'druids new meeting'\"\n    echo \"4. Read the security guide in your vault\"\n    echo \"\"\n    echo \"Stay secure, comrade!\"\n}\n\n# Run main function\nmain \"$@\"\n</code></pre>","tags":["scripts","automation","bootstrap","tails","setup"]},{"location":"implement/advanced/druids-tails-bootstrap-scripts/#supporting-scripts","title":"Supporting Scripts","text":"","tags":["scripts","automation","bootstrap","tails","setup"]},{"location":"implement/advanced/druids-tails-bootstrap-scripts/#hardware-key-setup-script","title":"Hardware Key Setup Script","text":"Bash<pre><code>#!/bin/bash\n# setup-hardware-key.sh - Configure hardware security key\n\nset -euo pipefail\n\necho \"=== Hardware Security Key Setup ===\"\necho \"\"\necho \"This script will help you configure your hardware security key.\"\necho \"Supported devices: Yubikey 5, Feitian K9/K40\"\necho \"\"\n\n# Detect hardware key\ndetect_key() {\n    if lsusb | grep -q \"Yubico\"; then\n        echo \"\u2713 Detected: Yubikey\"\n        KEY_TYPE=\"yubikey\"\n    elif lsusb | grep -q \"Feitian\"; then\n        echo \"\u2713 Detected: Feitian ePass\"\n        KEY_TYPE=\"feitian\"\n    else\n        echo \"\u2717 No hardware key detected\"\n        echo \"Please insert your security key and try again.\"\n        exit 1\n    fi\n}\n\n# Configure FIDO2 PIN\nsetup_fido2_pin() {\n    echo \"\"\n    echo \"=== Setting FIDO2 PIN ===\"\n    echo \"Choose a 4-8 digit PIN for your security key.\"\n    echo \"This PIN will be required for authentication.\"\n    echo \"\"\n\n    if [ \"$KEY_TYPE\" = \"yubikey\" ]; then\n        ykman fido access change-pin\n    else\n        # Feitian uses standard FIDO2 commands\n        echo \"Please use your key's management software to set PIN\"\n    fi\n}\n\n# Generate resident SSH key\ngenerate_ssh_key() {\n    echo \"\"\n    echo \"=== Generating SSH Key ===\"\n    echo \"This creates a hardware-backed SSH key.\"\n    echo \"\"\n\n    local key_file=\"$HOME/.ssh/id_ed25519_sk_druids\"\n\n    if [ -f \"$key_file\" ]; then\n        echo \"Key already exists at $key_file\"\n        read -p \"Generate new key? (y/N): \" response\n        if [ \"$response\" != \"y\" ]; then\n            return\n        fi\n    fi\n\n    # Try ed25519-sk first, fall back to ecdsa-sk\n    if ssh-keygen -t ed25519-sk -O resident -O verify-required \\\n                  -C \"druids-$(date +%Y%m%d)\" \\\n                  -f \"$key_file\"; then\n        echo \"\u2713 Generated ed25519-sk key\"\n    else\n        echo \"ed25519-sk not supported, trying ecdsa-sk...\"\n        ssh-keygen -t ecdsa-sk -O resident -O verify-required \\\n                   -C \"druids-$(date +%Y%m%d)\" \\\n                   -f \"$key_file\"\n        echo \"\u2713 Generated ecdsa-sk key\"\n    fi\n\n    # Display public key\n    echo \"\"\n    echo \"Your public SSH key:\"\n    echo \"====================\"\n    cat \"${key_file}.pub\"\n    echo \"====================\"\n    echo \"\"\n    echo \"Add this key to your Git hosting service (GitHub/GitLab)\"\n}\n\n# Configure GPG with hardware key\nsetup_gpg_card() {\n    echo \"\"\n    echo \"=== GPG Card Setup ===\"\n    echo \"This configures GPG to use your hardware key.\"\n    echo \"\"\n\n    if [ \"$KEY_TYPE\" != \"yubikey\" ]; then\n        echo \"Note: GPG card features require a Yubikey\"\n        return\n    fi\n\n    echo \"Initializing GPG card...\"\n    gpg --card-edit\n}\n\n# Test configuration\ntest_setup() {\n    echo \"\"\n    echo \"=== Testing Configuration ===\"\n\n    # Test SSH\n    echo -n \"Testing SSH key... \"\n    if ssh-add -L | grep -q \"sk\"; then\n        echo \"\u2713 OK\"\n    else\n        echo \"\u2717 Not found\"\n    fi\n\n    # Test FIDO2\n    echo -n \"Testing FIDO2... \"\n    if command -v fido2-token &gt;/dev/null; then\n        fido2-token -L | head -1 &amp;&amp; echo \"\u2713 OK\" || echo \"\u2717 Failed\"\n    else\n        echo \"\u2717 fido2-tools not installed\"\n    fi\n}\n\n# Main execution\nmain() {\n    detect_key\n    setup_fido2_pin\n    generate_ssh_key\n\n    if [ \"$KEY_TYPE\" = \"yubikey\" ]; then\n        read -p \"Configure GPG card features? (y/N): \" response\n        if [ \"$response\" = \"y\" ]; then\n            setup_gpg_card\n        fi\n    fi\n\n    test_setup\n\n    echo \"\"\n    echo \"=== Setup Complete ===\"\n    echo \"\"\n    echo \"Your hardware key is configured for DRUIDS.\"\n    echo \"Remember to:\"\n    echo \"1. Backup your key's recovery codes\"\n    echo \"2. Register a second key as backup\"\n    echo \"3. Test authentication before relying on it\"\n}\n\nmain \"$@\"\n</code></pre>","tags":["scripts","automation","bootstrap","tails","setup"]},{"location":"implement/advanced/druids-tails-bootstrap-scripts/#vault-sync-script","title":"Vault Sync Script","text":"Bash<pre><code>#!/bin/bash\n# vault-sync.sh - Secure vault synchronization\n\nset -euo pipefail\n\nVAULT_PATH=\"/home/amnesia/Persistent/Obsidian/Vault\"\nSYNC_METHOD=\"${1:-git}\" # git, syncthing, or usb\n\n# Git sync\nsync_git() {\n    cd \"$VAULT_PATH\"\n\n    # Check for changes\n    if [ -z \"$(git status --porcelain)\" ]; then\n        echo \"No changes to sync\"\n        return\n    fi\n\n    # Add and commit\n    git add -A\n\n    # Get commit message\n    if [ -n \"${2:-}\" ]; then\n        MSG=\"$2\"\n    else\n        MSG=\"Sync from $(hostname) at $(date +%Y-%m-%d-%H%M)\"\n    fi\n\n    git commit -m \"$MSG\" \\\n        -m \"Changed files: $(git diff --cached --name-only | wc -l)\"\n\n    # Check for remote\n    if git remote | grep -q origin; then\n        echo \"Pushing to remote...\"\n        git push origin main || echo \"Push failed - will retry later\"\n    else\n        echo \"No remote configured - local commit only\"\n    fi\n}\n\n# Syncthing sync\nsync_syncthing() {\n    # Check if syncthing is running\n    if ! systemctl --user is-active syncthing &gt;/dev/null; then\n        echo \"Starting Syncthing...\"\n        systemctl --user start syncthing\n        sleep 5\n    fi\n\n    # Trigger sync via API\n    curl -s -X POST -H \"X-API-Key: $(cat ~/.config/syncthing/api-key)\" \\\n        http://localhost:8384/rest/db/scan?folder=druids-vault\n\n    echo \"Syncthing scan triggered\"\n}\n\n# USB backup sync\nsync_usb() {\n    local USB_PATH=\"/media/amnesia/DRUIDS-BACKUP\"\n\n    if [ ! -d \"$USB_PATH\" ]; then\n        echo \"Please insert DRUIDS-BACKUP USB drive\"\n        exit 1\n    fi\n\n    # Create encrypted backup\n    echo \"Creating encrypted backup...\"\n    tar -czf - -C \"$VAULT_PATH\" . | \\\n        age -e -r \"$(cat ~/.druids/keys/backup-pubkey)\" &gt; \\\n        \"$USB_PATH/vault-$(date +%Y%m%d-%H%M%S).tar.gz.age\"\n\n    echo \"Backup created on USB\"\n\n    # Verify\n    echo -n \"Verifying backup... \"\n    if age -d -i ~/.druids/keys/backup-key \\\n        \"$USB_PATH/vault-*.tar.gz.age\" | \\\n        tar -tzf - &gt;/dev/null 2&gt;&amp;1; then\n        echo \"\u2713 OK\"\n    else\n        echo \"\u2717 Failed\"\n        exit 1\n    fi\n}\n\n# Pre-sync security check\nsecurity_check() {\n    echo \"Running pre-sync security check...\"\n\n    # Check for sensitive data in L0\n    if grep -r -i \"password\\|secret\\|private\" \"$VAULT_PATH/L0\" 2&gt;/dev/null; then\n        echo \"WARNING: Possible sensitive data in L0!\"\n        read -p \"Continue anyway? (y/N): \" response\n        if [ \"$response\" != \"y\" ]; then\n            exit 1\n        fi\n    fi\n\n    # Check file permissions\n    find \"$VAULT_PATH\" -type f -perm /077 | while read -r file; do\n        echo \"Fixing permissions: $file\"\n        chmod 600 \"$file\"\n    done\n\n    # Remove L2 files from git\n    if [ -d \"$VAULT_PATH/L2\" ]; then\n        cd \"$VAULT_PATH\"\n        git rm -r --cached L2/ 2&gt;/dev/null || true\n        echo \"L2/\" &gt;&gt; .gitignore\n        git add .gitignore\n    fi\n}\n\n# Main execution\nmain() {\n    echo \"=== DRUIDS Vault Sync ===\"\n    echo \"Method: $SYNC_METHOD\"\n    echo \"\"\n\n    # Run security check\n    security_check\n\n    # Execute sync\n    case \"$SYNC_METHOD\" in\n        git)\n            sync_git \"$@\"\n            ;;\n        syncthing)\n            sync_syncthing\n            ;;\n        usb)\n            sync_usb\n            ;;\n        *)\n            echo \"Unknown sync method: $SYNC_METHOD\"\n            echo \"Usage: $0 [git|syncthing|usb] [commit message]\"\n            exit 1\n            ;;\n    esac\n\n    echo \"\"\n    echo \"\u2713 Sync complete\"\n}\n\nmain \"$@\"\n</code></pre>","tags":["scripts","automation","bootstrap","tails","setup"]},{"location":"implement/advanced/druids-tails-bootstrap-scripts/#first-boot-wizard","title":"First Boot Wizard","text":"Bash<pre><code>#!/bin/bash\n# first-boot-wizard.sh - Interactive setup for new users\n\nset -euo pipefail\n\n# Use zenity for GUI dialogs\nTITLE=\"DRUIDS Setup Wizard\"\n\n# Welcome screen\nshow_welcome() {\n    zenity --info --title=\"$TITLE\" --width=500 --height=300 \\\n        --text=\"Welcome to DRUIDS - Democratic Resilient Unity-building Information Distribution System\\n\\n\\\nThis wizard will help you:\\n\\\n\u2022 Create your security keys\\n\\\n\u2022 Configure your identity\\n\\\n\u2022 Set up your vault\\n\\\n\u2022 Learn basic operations\\n\\n\\\nThe process takes about 15 minutes.\\n\\n\\\nClick OK to begin.\"\n}\n\n# Identity setup\nsetup_identity() {\n    # Get pseudonym\n    PSEUDONYM=$(zenity --entry --title=\"$TITLE\" \\\n        --text=\"Choose your pseudonym (not your real name):\" \\\n        --entry-text=\"Comrade-$(shuf -i 100-999 -n1)\")\n\n    if [ -z \"$PSEUDONYM\" ]; then\n        zenity --error --text=\"Pseudonym is required\"\n        exit 1\n    fi\n\n    # Get secure email\n    EMAIL=$(zenity --entry --title=\"$TITLE\" \\\n        --text=\"Enter your secure email address:\\n(ProtonMail or Tutanota recommended)\")\n\n    if [ -z \"$EMAIL\" ]; then\n        zenity --error --text=\"Email is required\"\n        exit 1\n    fi\n\n    # Configure Git\n    git config --global user.name \"$PSEUDONYM\"\n    git config --global user.email \"$EMAIL\"\n}\n\n# Key generation with progress\ngenerate_keys() {\n    (\n        echo \"10\"\n        echo \"# Generating GPG key...\"\n\n        # Generate GPG key\n        gpg --batch --generate-key &lt;&lt;EOF\n%echo Generating GPG key\nKey-Type: RSA\nKey-Length: 4096\nName-Real: $PSEUDONYM\nName-Email: $EMAIL\nExpire-Date: 1y\n%no-protection\n%commit\nEOF\n\n        echo \"50\"\n        echo \"# Generating SSH key...\"\n\n        # Generate SSH key\n        ssh-keygen -t ed25519 -C \"$EMAIL\" -N \"\" -f ~/.ssh/id_ed25519_druids\n\n        echo \"75\"\n        echo \"# Configuring security...\"\n\n        # Get GPG key ID\n        KEY_ID=$(gpg --list-secret-keys --keyid-format=long | grep sec | \\\n                 awk '{print $2}' | cut -d'/' -f2 | head -n1)\n        git config --global user.signingkey \"$KEY_ID\"\n        git config --global commit.gpgsign true\n\n        echo \"100\"\n        echo \"# Complete!\"\n\n    ) | zenity --progress --title=\"$TITLE\" \\\n        --text=\"Generating security keys...\" \\\n        --percentage=0 --auto-close\n}\n\n# Vault setup\nsetup_vault() {\n    zenity --info --title=\"$TITLE\" \\\n        --text=\"Now we'll set up your Obsidian vault.\\n\\n\\\nThis is where all your organizational knowledge will be stored.\\n\\n\\\nClick OK to continue.\"\n\n    # Initialize vault\n    cd /home/amnesia/Persistent/Obsidian/Vault\n\n    if [ ! -d .git ]; then\n        git init\n        git add README.md\n        git commit -m \"Initialize DRUIDS vault for $PSEUDONYM\"\n    fi\n\n    # Show Obsidian\n    zenity --info --title=\"$TITLE\" \\\n        --text=\"Obsidian will now open.\\n\\n\\\n1. Select 'Open folder as vault'\\n\\\n2. Choose: /home/amnesia/Persistent/Obsidian/Vault\\n\\\n3. Enable community plugins when prompted\\n\\n\\\nClick OK to launch Obsidian.\"\n\n    # Launch Obsidian\n    /opt/obsidian/obsidian.AppImage &amp;\n}\n\n# Security training\nshow_security_training() {\n    zenity --text-info --title=\"$TITLE - Security Guidelines\" \\\n        --width=600 --height=500 \\\n        --filename=/dev/stdin &lt;&lt; 'EOF'\nDRUIDS Security Guidelines\n\n1. PSEUDONYM DISCIPLINE\n   - Never use real names in the system\n   - Create consistent pseudonyms\n   - Keep a secure mapping separately\n\n2. SECURITY TIERS\n   - L0: Public information (can be leaked)\n   - L1: Members only (encrypted)\n   - L2: Sensitive operations (never synced)\n\n3. DAILY PRACTICES\n   - Clear L2 folder after each session\n   - Run security audit weekly\n   - Verify encryption before sync\n\n4. EMERGENCY PROCEDURES\n   - If compromised: Revoke all keys immediately\n   - Notify security contact\n   - Do not boot compromised USB\n\n5. REMEMBER\n   - The state is always watching\n   - Perfect security doesn't exist\n   - Vigilance is collective care\n\nClick OK when you've read and understood these guidelines.\nEOF\n}\n\n# Completion\nshow_completion() {\n    # Create quick reference card\n    cat &gt; ~/Desktop/DRUIDS-Quick-Reference.txt &lt;&lt; EOF\nDRUIDS Quick Reference\n\nYour Identity:\n- Pseudonym: $PSEUDONYM\n- Email: $EMAIL\n- GPG Key: $(gpg --list-secret-keys | grep uid | head -1)\n\nCommon Commands:\n- Create meeting notes: druids new meeting\n- Save your work: druids sync\n- Check security: druids security audit\n- Get help: druids help\n\nDaily Workflow:\n1. Open Terminal\n2. Run: druids status\n3. Work in Obsidian\n4. Run: druids sync\n5. Clear L2 folder before shutdown\n\nStay safe, comrade!\nEOF\n\n    zenity --info --title=\"$TITLE - Complete!\" --width=500 \\\n        --text=\"Congratulations! DRUIDS is now configured.\\n\\n\\\nYour quick reference has been saved to the Desktop.\\n\\n\\\nImportant next steps:\\n\\\n1. Practice the daily workflow\\n\\\n2. Create your first meeting notes\\n\\\n3. Share your PUBLIC key with your cell\\n\\\n4. Never share your PRIVATE keys\\n\\n\\\nWelcome to the resistance, $PSEUDONYM!\"\n}\n\n# Main execution\nmain() {\n    show_welcome\n    setup_identity\n    generate_keys\n    setup_vault\n    show_security_training\n    show_completion\n}\n\n# Error handling\ntrap 'zenity --error --text=\"Setup failed. Please try again.\"' ERR\n\n# Run wizard\nmain \"$@\"\n</code></pre>","tags":["scripts","automation","bootstrap","tails","setup"]},{"location":"implement/advanced/druids-tails-bootstrap-scripts/#installation-instructions","title":"Installation Instructions","text":"<p>To use these scripts on a DRUIDS-Tails system:</p> <ol> <li> <p>During image creation, place scripts in:    Text Only<pre><code>config/chroot_local-includes/usr/local/bin/\n</code></pre></p> </li> <li> <p>On existing Tails, download and run:    Bash<pre><code>wget https://druids.dev/bootstrap/druids-bootstrap.sh\nchmod +x druids-bootstrap.sh\n./druids-bootstrap.sh\n</code></pre></p> </li> <li> <p>For development, clone and link:    Bash<pre><code>git clone https://github.com/druids-dev/bootstrap-scripts.git\ncd bootstrap-scripts\n./install-dev.sh\n</code></pre></p> </li> </ol>","tags":["scripts","automation","bootstrap","tails","setup"]},{"location":"implement/advanced/druids-tails-bootstrap-scripts/#script-security","title":"Script Security","text":"<p>All scripts follow these principles:</p> <ol> <li>Fail-safe defaults - Err on the side of security</li> <li>No network assumptions - Work offline</li> <li>Explicit user consent - No automatic sensitive operations</li> <li>Audit trails - Log all security-relevant actions</li> <li>Idempotency - Safe to run multiple times</li> </ol> <p>These scripts automate the revolution, one bootstrap at a time.</p> <p>Backlinks:</p>","tags":["scripts","automation","bootstrap","tails","setup"]},{"location":"implement/advanced/druids-tails-deployment/","title":"DRUIDS-Tails Deployment Reference","text":"<p>Secure, anonymous, hardware-authenticated infrastructure for revolutionary organizations</p>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#overview","title":"Overview","text":"<p>This reference documents the complete deployment process for DRUIDS on Tails OS with: - Pre-configured Obsidian environment - Hardware security key authentication (Yubikey/Feitian) - Clone-once, deploy-many distribution model - Three-tier trust architecture</p>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#system-requirements","title":"System Requirements","text":"","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#hardware","title":"Hardware","text":"<ul> <li>Master Build System: Debian 12+ with 16GB RAM</li> <li>USB Drives: 32GB minimum, USB 3.0 recommended</li> <li>Security Keys: FIDO2-compatible (Yubikey 5, Feitian K9)</li> </ul>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#software-versions","title":"Software Versions","text":"<ul> <li>Tails: 6.15+</li> <li>Obsidian: Latest AppImage</li> <li>Git: 2.39+</li> <li>GnuPG: 2.2.40+</li> </ul>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#architecture-overview","title":"Architecture Overview","text":"Text Only<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         MASTER TAILS BUILD              \u2502\n\u2502  - Base Tails + Persistence             \u2502\n\u2502  - Obsidian + Required Plugins          \u2502\n\u2502  - Security Scripts &amp; Documentation     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2502 Clone Process\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u25bc                 \u25bc                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 USER 1  \u2502    \u2502 USER 2  \u2502     \u2502 USER N  \u2502\n\u2502 USB+KEY \u2502    \u2502 USB+KEY \u2502     \u2502 USB+KEY \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#security-model","title":"Security Model","text":"","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#three-trust-paths","title":"Three Trust Paths","text":"<ol> <li>Physical Distribution (Convenient)</li> <li>Pre-cloned USB with temporary passphrase</li> <li>Hardware key shipped separately</li> <li>User generates own keys on first boot</li> <li> <p>Risk: Supply chain trust</p> </li> <li> <p>Image Download (Balanced)</p> </li> <li>Verified image with checksums</li> <li>User writes own USB</li> <li>Hardware key acquired independently</li> <li> <p>Risk: Download integrity</p> </li> <li> <p>DIY Bootstrap (Secure)</p> </li> <li>Build from source</li> <li>Full audit capability</li> <li>Complete control</li> <li>Risk: Technical complexity</li> </ol>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#key-security-properties","title":"Key Security Properties","text":"<ul> <li>Forward Secrecy: Compromised USB doesn't reveal past work</li> <li>Key Isolation: Hardware keys never touch persistent storage</li> <li>Pseudonymous: No real names in Git history</li> <li>Amnesic Base: Tails forgets everything not explicitly persisted</li> </ul>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#master-build-process","title":"Master Build Process","text":"","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#1-create-base-tails-usb","title":"1. Create Base Tails USB","text":"Bash<pre><code># Verify Tails image\ngpg --keyid-format 0xlong --verify tails-amd64-*.img.sig\n\n# Write to USB (replace sdX with actual device)\nsudo dd if=tails-amd64-*.img of=/dev/sdX bs=16M oflag=direct status=progress\n</code></pre>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#2-configure-persistence","title":"2. Configure Persistence","text":"<p>Boot Tails and enable: - Persistent Folder - GnuPG - SSH Client - Dotfiles - Additional Software - Network Connections</p>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#3-install-core-software","title":"3. Install Core Software","text":"Bash<pre><code># Core dependencies\nsudo apt update\nsudo apt install -y libfuse2 git curl libfido2-1 opensc \\\n                    pcscd scdaemon yubikey-manager pcsc-tools\n\n# Obsidian (download via Tor Browser first)\nmkdir -p ~/Persistent/Obsidian\nmv ~/Tor\\ Browser/Obsidian-*.AppImage ~/Persistent/Obsidian/\nchmod +x ~/Persistent/Obsidian/*.AppImage\n</code></pre>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#4-configure-obsidian-plugins","title":"4. Configure Obsidian Plugins","text":"<p>Required plugins: - Git (for version control) - GPG Encrypt (for sensitive notes) - Kanban (for task tracking) - Dataview (for organizational queries)</p>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#5-create-security-scripts","title":"5. Create Security Scripts","text":"<p>See Scripts Section for complete scripts.</p>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#cloning-distribution","title":"Cloning &amp; Distribution","text":"","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#cloning-process","title":"Cloning Process","text":"Bash<pre><code># Using Tails Cloner\n# 1. Boot master USB\n# 2. Applications \u2192 Tails \u2192 Tails Cloner\n# 3. Select \"Clone current Tails\"\n# 4. Enable \"Clone Persistent Storage\"\n# 5. Set unique passphrase per user\n</code></pre>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#distribution-checklist","title":"Distribution Checklist","text":"<ul> <li> USB in tamper-evident bag</li> <li> Hardware key in separate package</li> <li> Printed quick-start guide</li> <li> Temporary passphrase card (destroy after use)</li> <li> Emergency contact info</li> </ul>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#first-boot-workflow","title":"First Boot Workflow","text":"","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#user-setup-sequence","title":"User Setup Sequence","text":"<ol> <li> <p>Boot &amp; Unlock Text Only<pre><code>Enter temporary passphrase \u2192 Start Tails\n</code></pre></p> </li> <li> <p>Generate Keys Bash<pre><code>~/Persistent/scripts/create-gpg-key.sh\n~/Persistent/scripts/create-ssh-keys-hardware.sh\n</code></pre></p> </li> <li> <p>Configure Git Bash<pre><code>git config --global user.name \"Comrade Pseudonym\"\ngit config --global user.email \"pseudo@protonmail.com\"\ngit config --global user.signingkey $GPG_KEY_ID\n</code></pre></p> </li> <li> <p>Change Passphrase Text Only<pre><code>Applications \u2192 Tails \u2192 Persistent Storage \u2192 Change Passphrase\n</code></pre></p> </li> <li> <p>Verify Setup Bash<pre><code>ssh -T git@github.com\ngit clone git@github.com:org/test-repo.git\n</code></pre></p> </li> </ol>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#security-scripts","title":"Security Scripts","text":"","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#hardware-key-ssh-generation","title":"Hardware Key SSH Generation","text":"Bash<pre><code>#!/bin/bash\n# create-ssh-keys-hardware.sh\nset -e\n\necho \"=== Hardware Security Key SSH Setup ===\"\necho \"Insert your security key now.\"\n\n# Try ed25519-sk first, fall back to ecdsa-sk\nif ssh-keygen -t ed25519-sk -O resident -O verify-required \\\n              -C \"$(date +%Y%m%d)\" -f ~/.ssh/id_ed25519_sk; then\n    echo \"Created ed25519-sk key\"\nelse\n    ssh-keygen -t ecdsa-sk -O resident -O verify-required \\\n               -C \"$(date +%Y%m%d)\" -f ~/.ssh/id_ecdsa_sk\n    echo \"Created ecdsa-sk key\"\nfi\n\n# Configure for GitHub\ncat &gt;&gt; ~/.ssh/config &lt;&lt; EOF\nHost github.com\n  IdentityFile ~/.ssh/id_*_sk\n  IdentitiesOnly yes\nEOF\n</code></pre>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#gpg-key-generation","title":"GPG Key Generation","text":"Bash<pre><code>#!/bin/bash\n# create-gpg-key.sh\ngpg --batch --gen-key &lt;&lt;EOF\nKey-Type: RSA\nKey-Length: 4096\nName-Real: $1\nName-Email: $2\nExpire-Date: 2y\n%commit\nEOF\n</code></pre>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#troubleshooting","title":"Troubleshooting","text":"","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#common-issues","title":"Common Issues","text":"Problem Solution Hardware key not detected <code>sudo service pcscd restart</code> Obsidian config lost Check symlinks in <code>~/.obsidian</code> Git auth fails Verify <code>~/.ssh/config</code> Persistence not mounting Check <code>/live/persistence/TailsData_unlocked/</code>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#emergency-procedures","title":"Emergency Procedures","text":"<ol> <li>Lost Hardware Key</li> <li>Revoke old SSH keys from all services</li> <li>Generate new keys with replacement</li> <li> <p>Update all repo access</p> </li> <li> <p>Compromised USB</p> </li> <li>Don't boot the USB</li> <li>Report immediately</li> <li> <p>Prepare for key rotation</p> </li> <li> <p>Forgotten Passphrase</p> </li> <li>No recovery possible</li> <li>Request new USB</li> <li>Regenerate all keys</li> </ol>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#maintenance","title":"Maintenance","text":"","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#regular-tasks","title":"Regular Tasks","text":"<ul> <li>Monthly: Security updates via Additional Software</li> <li>Quarterly: Verify all plugins still work</li> <li>Yearly: Fresh rebuild of master image</li> </ul>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#update-distribution","title":"Update Distribution","text":"Bash<pre><code># Create update package\ntar -czf druids-update-$(date +%Y%m).tar.gz \\\n    ~/Persistent/scripts/ \\\n    ~/Persistent/Obsidian/plugins/\n\n# Sign update\ngpg --sign --armor druids-update-*.tar.gz\n</code></pre>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#operational-security-notes","title":"Operational Security Notes","text":"","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#do","title":"DO","text":"<ul> <li>Keep USB and hardware key separated when not in use</li> <li>Use different pseudonyms across organizations</li> <li>Regular security check-ins with your cell</li> <li>Backup critical data (encrypted) off-device</li> </ul>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#dont","title":"DON'T","text":"<ul> <li>Use real names in any configuration</li> <li>Connect to personal accounts from Tails</li> <li>Skip the passphrase change on first boot</li> <li>Share hardware keys between people</li> </ul>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#appendix-plugin-configuration","title":"Appendix: Plugin Configuration","text":"","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#git-plugin-settings","title":"Git Plugin Settings","text":"JSON<pre><code>{\n  \"commitMessage\": \"{{date}} {{hostname}}\",\n  \"autoCommitInterval\": 5,\n  \"autoPush\": false,\n  \"disablePush\": false\n}\n</code></pre>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/advanced/druids-tails-deployment/#gpg-encrypt-settings","title":"GPG Encrypt Settings","text":"JSON<pre><code>{\n  \"recipientKeyId\": \"AUTO_DETECT\",\n  \"encryptByDefault\": false,\n  \"fileExtension\": \".gpg\"\n}\n</code></pre> <p>This document is L2 security tier. Distribute only through secure channels.</p>","tags":["tails","deployment","security","hardware-keys","reference"]},{"location":"implement/design/qm-implementation-guide/","title":"Queer Mandalorian Implementation Guide","text":"","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#overview","title":"Overview","text":"<p>This guide walks you through implementing the Queer Mandalorian theme in your DRUIDS documentation system. The theme transforms the standard MkDocs Material appearance into a revolutionary cyberpunk guerilla aesthetic.</p>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Working DRUIDS documentation system</li> <li>MkDocs Material theme installed</li> <li>Basic understanding of CSS</li> <li>Access to modify <code>mkdocs.yml</code></li> </ul>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#implementation-steps","title":"Implementation Steps","text":"","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#step-1-create-file-structure","title":"Step 1: Create File Structure","text":"<p>Create the following directory structure in your <code>docs</code> folder:</p> Text Only<pre><code>docs/\n\u251c\u2500\u2500 stylesheets/\n\u2502   \u251c\u2500\u2500 qm-overrides.css      # Material theme overrides\n\u2502   \u251c\u2500\u2500 queer-mandalorian.css # Main theme file\n\u2502   \u251c\u2500\u2500 qm-syntax.css         # Syntax highlighting\n\u2502   \u2514\u2500\u2500 qm-components.css     # Component styling\n</code></pre>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#step-2-update-mkdocs-configuration","title":"Step 2: Update MkDocs Configuration","text":"<p>Add the theme CSS files to your <code>mkdocs.yml</code>:</p> YAML<pre><code># mkdocs.yml\nextra_css:\n  - stylesheets/qm-overrides.css    # Load first\n  - stylesheets/queer-mandalorian.css\n  - stylesheets/qm-syntax.css\n  - stylesheets/qm-components.css\n</code></pre> <p>Important: Order matters! <code>qm-overrides.css</code> must load first to properly override Material defaults.</p>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#step-3-critical-overrides","title":"Step 3: Critical Overrides","text":"<p>The <code>qm-overrides.css</code> file handles Material-specific overrides:</p> CSS<pre><code>/* Example structure for qm-overrides.css */\n/* Navigation overrides */\n.md-nav { /* styles */ }\n\n/* Header overrides */\n.md-header { /* styles */ }\n\n/* Content overrides */\n.md-content { /* styles */ }\n</code></pre>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#step-4-component-implementation","title":"Step 4: Component Implementation","text":"","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#navigation-enhancement","title":"Navigation Enhancement","text":"<p>The navigation should reflect the cyberpunk aesthetic:</p> <ul> <li>Uppercase text with letter spacing</li> <li>Cyan hover effects with translateX animation</li> <li>Orange active states with arrow indicators</li> <li>Sharp edges (no border radius)</li> </ul>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#code-block-styling","title":"Code Block Styling","text":"<p>Terminal-inspired code blocks require:</p> <ul> <li>Transparent backgrounds with cyan borders</li> <li>Terminal prompt ($) prefixes</li> <li>Monospace fonts (JetBrains Mono preferred)</li> <li>Syntax highlighting in theme colors</li> </ul>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#security-indicators","title":"Security Indicators","text":"<p>Implement three-tier visual security:</p> <ul> <li>L0 (Public): Green with gradient background</li> <li>L1 (Member): Orange with gradient background  </li> <li>L2 (Cadre): Pink/Red with warning icon</li> </ul>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#step-5-typography-configuration","title":"Step 5: Typography Configuration","text":"<p>Configure the typography system:</p> <ol> <li>Headers: Impact or Arial Black, uppercase</li> <li>Body: Inter or system fonts, 19px base</li> <li>Code: JetBrains Mono or Fira Code</li> <li>Line Height: 1.75 for readability</li> </ol>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#step-6-color-implementation","title":"Step 6: Color Implementation","text":"<p>Apply the Dark Pride color palette consistently:</p> Text Only<pre><code>Primary Orange: #FF6B35 (inverted blue)\nRust: #B84A14 (H1 headers)\nCyan: #00D9FF (bright accents)\nDark Blue: #0A1628 (backgrounds)\nPurple: #BD10E0 (accents)\nPink: #FF006E (warnings)\nTeal: #00CFC1 (inverted pink)\nMagenta: #FF00FF (glitch effects)\n</code></pre>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#step-7-testing","title":"Step 7: Testing","text":"","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#create-test-pages","title":"Create Test Pages","text":"<p>Create comprehensive test pages:</p> Markdown<pre><code># docs/test-qm-all.md\n---\ntitle: \"Queer Mandalorian Theme Test\"\n---\n\n## Typography Test\n[Include all heading levels, paragraphs, lists]\n\n## Component Test  \n[Security indicators, code blocks, tables]\n\n## Color Test\n[All color combinations for contrast]\n</code></pre>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#accessibility-testing","title":"Accessibility Testing","text":"<ol> <li>Run contrast checker on all color combinations</li> <li>Test with screen readers</li> <li>Verify keyboard navigation</li> <li>Check reduced motion preferences</li> </ol>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#browser-testing","title":"Browser Testing","text":"<p>Test in: - Chrome/Edge 90+ - Firefox 88+ - Safari 14+ - Mobile browsers</p>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#step-8-performance-optimization","title":"Step 8: Performance Optimization","text":"<ol> <li>Minimize Animations: Keep glitch effects subtle</li> <li>Optimize Fonts: Use system fonts as fallbacks</li> <li>Reduce Repaints: Use transforms over position changes</li> <li>Lazy Load: Heavy effects only on interaction</li> </ol>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#step-9-documentation","title":"Step 9: Documentation","text":"<p>Document your implementation:</p> <ol> <li>Color choices and rationale</li> <li>Component modifications</li> <li>Accessibility decisions</li> <li>Browser-specific fixes</li> </ol>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#common-pitfalls","title":"Common Pitfalls","text":"","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#1-green-on-green-contrast","title":"1. Green-on-Green Contrast","text":"<p>Problem: Poor readability with similar colors Solution: Always use complementary colors (orange/blue, purple/yellow)</p>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#2-excessive-border-radius","title":"2. Excessive Border Radius","text":"<p>Problem: Material's rounded corners persist Solution: Use <code>!important</code> sparingly but effectively:</p> CSS<pre><code>* { border-radius: 0 !important; }\n/* Allow specific exceptions */\n.pill { border-radius: 4px !important; }\n</code></pre>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#3-code-block-readability","title":"3. Code Block Readability","text":"<p>Problem: Solid backgrounds too harsh Solution: Use transparent backgrounds (0.2-0.3 opacity)</p>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#4-navigation-hover-states","title":"4. Navigation Hover States","text":"<p>Problem: Hover effects not visible Solution: Combine color change with transform</p>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#integration-checklist","title":"Integration Checklist","text":"<ul> <li> File structure created</li> <li> CSS files added to mkdocs.yml</li> <li> Color variables defined</li> <li> Typography configured</li> <li> Navigation styled</li> <li> Code blocks themed</li> <li> Security indicators implemented</li> <li> Tables styled</li> <li> Accessibility tested</li> <li> Browser compatibility verified</li> <li> Performance optimized</li> <li> Documentation complete</li> </ul>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#debugging","title":"Debugging","text":"","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#debug-mode","title":"Debug Mode","text":"<p>Add debug class for development:</p> CSS<pre><code>.qm-debug * {\n  outline: 1px solid magenta !important;\n}\n</code></pre>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#common-issues","title":"Common Issues","text":"<ol> <li>Styles not applying: Check CSS file load order</li> <li>Colors incorrect: Verify CSS variable definitions</li> <li>Animations janky: Check GPU acceleration</li> <li>Mobile issues: Test responsive breakpoints</li> </ol>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#maintenance","title":"Maintenance","text":"","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#updating-the-theme","title":"Updating the Theme","text":"<p>When updating:</p> <ol> <li>Test changes in isolation</li> <li>Document what changed and why</li> <li>Update test pages</li> <li>Re-run accessibility tests</li> <li>Notify team of changes</li> </ol>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#version-control","title":"Version Control","text":"<p>Track theme versions:</p> CSS<pre><code>/* queer-mandalorian.css v1.0.0 */\n/* Last updated: 2025-07-01 */\n/* Author: Trans Hacker Collective */\n</code></pre>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-implementation-guide/#resources","title":"Resources","text":"<ul> <li>CSS Architecture Best Practices</li> <li>MkDocs Material Customization</li> <li>WCAG Guidelines</li> <li>Trans Pride Flag Colors</li> </ul> <p>\"Code is poetry, rebellion is art, and our theme is both.\" - Queer Mandalorian Collective</p>","tags":["theme","implementation","queer-mandalorian","css","mkdocs","how-to"]},{"location":"implement/design/qm-troubleshooting/","title":"Queer Mandalorian Theme Troubleshooting","text":"","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#overview","title":"Overview","text":"<p>This guide addresses common issues encountered when implementing the Queer Mandalorian theme and provides tested solutions based on real-world implementations.</p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#common-css-issues","title":"Common CSS Issues","text":"","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#green-on-green-contrast-problems","title":"Green-on-Green Contrast Problems","text":"<p>Symptom: Poor readability when similar colors overlap, especially in code blocks or highlighted sections.</p> <p>Solution: CSS<pre><code>/* Use complementary colors instead */\n.highlight {\n  background: rgba(10, 22, 40, 0.3); /* Dark transparent */\n  color: var(--qm-cyan);             /* Bright cyan text */\n}\n\n/* Avoid */\n.bad-example {\n  background: #00FF41;\n  color: #00D9FF; /* Too similar in brightness */\n}\n</code></pre></p> <p>Best Practice: Always test color combinations with a contrast checker.</p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#rounded-corners-persisting","title":"Rounded Corners Persisting","text":"<p>Symptom: Material Design's rounded corners appear despite overrides.</p> <p>Root Cause: CSS specificity issues or late-loading Material styles.</p> <p>Solution: CSS<pre><code>/* Force sharp edges with high specificity */\n.md-typeset *,\n.md-nav *,\n.md-header * {\n  border-radius: 0 !important;\n}\n\n/* Allow specific exceptions */\n.md-tag,\n.pill,\n.badge {\n  border-radius: 4px !important;\n}\n</code></pre></p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#excessive-negative-space","title":"Excessive Negative Space","text":"<p>Symptom: Large padding makes content feel disconnected and wastes screen space.</p> <p>Solution: CSS<pre><code>/* Tighten spacing */\n.md-typeset {\n  line-height: 1.75; /* Instead of 2+ */\n}\n\n.md-content__inner {\n  padding: 1rem 2rem; /* Reduced from defaults */\n}\n\n/* Increase font sizes proportionally */\n.md-typeset {\n  font-size: 1.1875rem; /* 19px base */\n}\n</code></pre></p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#icon-contrast-in-dark-theme","title":"Icon Contrast in Dark Theme","text":"<p>Symptom: Dark icons disappear on dark backgrounds.</p> <p>Solution: CSS<pre><code>/* Add glow effects for visibility */\n.md-icon {\n  filter: drop-shadow(0 0 2px var(--qm-cyan));\n}\n\n/* Or use bright colors */\n.icon-class {\n  color: var(--qm-primary-orange);\n  opacity: 0.9;\n}\n</code></pre></p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#code-highlighting-too-harsh","title":"Code Highlighting Too Harsh","text":"<p>Symptom: Solid background colors in code blocks are jarring.</p> <p>Solution: CSS<pre><code>/* Use transparent gradients */\n.highlight {\n  background: linear-gradient(\n    90deg,\n    rgba(10, 22, 40, 0.3) 0%,\n    rgba(10, 22, 40, 0.2) 100%\n  );\n}\n\n/* Syntax colors with reduced opacity */\n.highlight .k { /* Keywords */\n  color: rgba(255, 107, 53, 0.9);\n}\n</code></pre></p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#navigation-issues","title":"Navigation Issues","text":"","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#orange-navigation-bar-text-visibility","title":"Orange Navigation Bar Text Visibility","text":"<p>Symptom: White text on orange background is unreadable.</p> <p>Solution: CSS<pre><code>.md-tabs__link {\n  color: #2C3E50 !important; /* Dark gray instead of white */\n}\n\n.md-tabs__link:hover {\n  color: var(--qm-cyan) !important;\n}\n</code></pre></p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#active-navigation-state-not-clear","title":"Active Navigation State Not Clear","text":"<p>Symptom: Users can't tell which page they're on.</p> <p>Solution: CSS<pre><code>.md-nav__link--active {\n  color: var(--qm-primary-orange);\n  font-weight: 700;\n  position: relative;\n}\n\n.md-nav__link--active::before {\n  content: \"\u25b6\";\n  position: absolute;\n  left: -1.5rem;\n  color: var(--qm-magenta-glow);\n}\n</code></pre></p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#component-specific-issues","title":"Component-Specific Issues","text":"","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#mermaid-diagrams-background","title":"Mermaid Diagrams Background","text":"<p>Symptom: Mermaid diagrams have white backgrounds that clash with dark theme.</p> <p>Solution: CSS<pre><code>.mermaid {\n  background: transparent !important;\n}\n\n.mermaid * {\n  fill: var(--qm-text-primary) !important;\n  stroke: var(--qm-cyan) !important;\n}\n</code></pre></p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#table-readability","title":"Table Readability","text":"<p>Symptom: Tables blend into background or have poor contrast.</p> <p>Solution: CSS<pre><code>.md-typeset table {\n  border: 1px solid var(--qm-cyan);\n}\n\n.md-typeset table th {\n  background: var(--qm-dark-blue);\n  color: var(--qm-primary-orange);\n  font-weight: 700;\n}\n\n.md-typeset table tr:hover {\n  background: rgba(0, 217, 255, 0.1);\n}\n</code></pre></p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#security-indicators-overlapping","title":"Security Indicators Overlapping","text":"<p>Symptom: Security level badges overlap with content.</p> <p>Solution: CSS<pre><code>.security-l0,\n.security-l1,\n.security-l2 {\n  position: relative;\n  padding-right: 8rem; /* Space for badge */\n}\n\n.security-l2::before {\n  position: absolute;\n  right: 0.5rem;\n  top: 0.5rem;\n}\n</code></pre></p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#performance-issues","title":"Performance Issues","text":"","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#glitch-effects-causing-lag","title":"Glitch Effects Causing Lag","text":"<p>Symptom: Page stutters when hovering over headers.</p> <p>Solution: CSS<pre><code>/* Use GPU acceleration */\n@keyframes glitch {\n  0% { transform: translate3d(0, 0, 0); }\n  /* ... */\n}\n\n/* Reduce animation frequency */\nh1:hover {\n  animation: glitch 0.3s ease-in-out;\n  animation-iteration-count: 1; /* Run once */\n}\n</code></pre></p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#large-css-file-size","title":"Large CSS File Size","text":"<p>Symptom: Theme CSS is too large, causing slow loads.</p> <p>Solution: 1. Split CSS into component files 2. Use CSS custom properties to reduce repetition 3. Minify production CSS 4. Remove unused styles</p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#browser-specific-issues","title":"Browser-Specific Issues","text":"","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#firefox-gradient-rendering","title":"Firefox Gradient Rendering","text":"<p>Symptom: Gradients appear banded in Firefox.</p> <p>Solution: CSS<pre><code>/* Add more color stops */\nbackground: linear-gradient(\n  90deg,\n  rgba(255, 107, 53, 0.1) 0%,\n  rgba(255, 107, 53, 0.08) 25%,\n  rgba(255, 107, 53, 0.05) 50%,\n  rgba(255, 107, 53, 0.02) 75%,\n  transparent 100%\n);\n</code></pre></p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#safari-focus-outline","title":"Safari Focus Outline","text":"<p>Symptom: Focus outlines don't appear in Safari.</p> <p>Solution: CSS<pre><code>/* Force webkit focus */\n*:focus {\n  outline: 2px solid var(--qm-cyan) !important;\n  outline-offset: 2px !important;\n  -webkit-appearance: none;\n}\n</code></pre></p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#mobile-issues","title":"Mobile Issues","text":"","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#touch-targets-too-small","title":"Touch Targets Too Small","text":"<p>Symptom: Links and buttons hard to tap on mobile.</p> <p>Solution: CSS<pre><code>@media (max-width: 768px) {\n  .md-nav__link {\n    padding: 1rem; /* Increase from 0.5rem */\n    min-height: 44px; /* iOS minimum */\n  }\n}\n</code></pre></p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#horizontal-scroll","title":"Horizontal Scroll","text":"<p>Symptom: Page scrolls horizontally on mobile.</p> <p>Solution: CSS<pre><code>/* Prevent overflow */\nbody {\n  overflow-x: hidden;\n}\n\n/* Check for absolute positioned elements */\n.problem-element {\n  position: relative; /* Change from absolute */\n  width: 100%; /* Constrain width */\n}\n</code></pre></p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#debug-techniques","title":"Debug Techniques","text":"","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#visual-debugging","title":"Visual Debugging","text":"<p>Add debug mode to see element boundaries:</p> CSS<pre><code>.qm-debug * {\n  outline: 1px solid magenta !important;\n}\n\n.qm-debug *::before,\n.qm-debug *::after {\n  outline: 1px solid cyan !important;\n}\n</code></pre>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#css-variable-inspection","title":"CSS Variable Inspection","text":"<p>Check if variables are loading:</p> JavaScript<pre><code>// In browser console\ngetComputedStyle(document.documentElement)\n  .getPropertyValue('--qm-primary-orange');\n</code></pre>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#specificity-calculator","title":"Specificity Calculator","text":"<p>When overrides aren't working:</p> <ol> <li>Use browser inspector to see applied styles</li> <li>Check specificity score</li> <li>Increase specificity or use <code>!important</code> sparingly</li> </ol>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#testing-checklist","title":"Testing Checklist","text":"<p>Before deploying, verify:</p> <ul> <li> All text meets contrast requirements</li> <li> Navigation states are clear</li> <li> Code blocks are readable</li> <li> Tables have proper borders</li> <li> Security indicators don't overlap</li> <li> Mobile experience is usable</li> <li> Animations respect reduced motion</li> <li> Focus states are visible</li> <li> No horizontal scroll on mobile</li> <li> Page loads under 3 seconds</li> </ul>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/qm-troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you encounter issues not covered here:</p> <ol> <li>Check browser console for CSS errors</li> <li>Validate CSS with online tools</li> <li>Test in multiple browsers</li> <li>Create minimal reproduction</li> <li>Document with screenshots</li> <li>Share in community forums</li> </ol> <p>\"Every bug is a learning opportunity. Every fix makes the revolution stronger.\" - Trans Hacker Collective</p> <p>Backlinks:</p>","tags":["troubleshooting","debugging","queer-mandalorian","css","fixes"]},{"location":"implement/design/theme-development-guide/","title":"DRUIDS Theme Development Guide","text":"","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#overview","title":"Overview","text":"<p>This guide consolidates all theme development documentation for DRUIDS, with accessibility as the primary focus. Every theme must prioritize disability justice and inclusive design while maintaining revolutionary aesthetics.</p>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#core-principles","title":"Core Principles","text":"","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#accessibility-first","title":"Accessibility First","text":"<ol> <li>Disability Justice: Our revolution must be accessible to all comrades</li> <li>WCAG 2.1 AA Compliance: Minimum standard for all themes</li> <li>Progressive Enhancement: Core functionality without CSS/JS</li> <li>Multiple Indicators: Never rely solely on color for information</li> </ol>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#revolutionary-aesthetics","title":"Revolutionary Aesthetics","text":"<ol> <li>Anti-Oppression Design: Visual resistance to corporate aesthetics</li> <li>Community Identity: Themes express organizational values</li> <li>Security Visualization: Clear L0/L1/L2 indicators</li> <li>Cultural Significance: Honor revolutionary traditions</li> </ol>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#quick-start","title":"Quick Start","text":"","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#creating-your-first-theme","title":"Creating Your First Theme","text":"<ol> <li> <p>Start with Accessibility CSS<pre><code>/* Base your theme on proven accessible foundations */\n@import url('/stylesheets/accessibility-enhancements.css');\n</code></pre></p> </li> <li> <p>Test Early and Often Bash<pre><code># Use automated testing tools\nnpm run test:a11y\naxe-devtools  # Browser extension\n</code></pre></p> </li> <li> <p>Follow the Queer Mandalorian Example</p> </li> <li>Study <code>/stylesheets/queer-mandalorian.css</code> for best practices</li> <li>Review <code>qm-accessibility.md</code> for detailed testing</li> </ol>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#accessibility-requirements","title":"Accessibility Requirements","text":"","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#color-contrast","title":"Color Contrast","text":"<p>All themes MUST meet these contrast ratios:</p> Element Type Minimum Ratio Preferred Body text 4.5:1 7:1 (AAA) Large text 3:1 4.5:1 UI components 3:1 4.5:1 Focus indicators 3:1 4.5:1","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#security-level-indicators","title":"Security Level Indicators","text":"<p>Never use color alone. Combine multiple indicators:</p> CSS<pre><code>/* Example: L2 (Cadre) Security */\n.L2 {\n  /* Visual indicators */\n  color: var(--l2-text);\n  background: var(--l2-bg);\n  border: 2px solid var(--l2-border);\n\n  /* Pattern overlay for colorblind users */\n  background-image: repeating-linear-gradient(\n    45deg,\n    transparent,\n    transparent 10px,\n    rgba(255,0,0,0.1) 10px,\n    rgba(255,0,0,0.1) 20px\n  );\n\n  /* Icon indicator */\n  &amp;::before {\n    content: \"\ud83d\udd12\";\n    margin-right: 0.5em;\n  }\n\n  /* Screen reader text */\n  .sr-only::before {\n    content: \"Cadre Level Security: \";\n  }\n}\n</code></pre>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#keyboard-navigation","title":"Keyboard Navigation","text":"<ul> <li>All interactive elements must be keyboard accessible</li> <li>Visible focus indicators (not just browser defaults)</li> <li>Logical tab order</li> <li>Skip links for navigation</li> </ul>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#motion-and-animation","title":"Motion and Animation","text":"CSS<pre><code>/* Respect user preferences */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n</code></pre>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#theme-structure","title":"Theme Structure","text":"","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#required-files","title":"Required Files","text":"Text Only<pre><code>theme-name/\n\u251c\u2500\u2500 theme.css           # Main theme file\n\u251c\u2500\u2500 accessibility.css   # Accessibility overrides\n\u251c\u2500\u2500 variables.css      # CSS custom properties\n\u251c\u2500\u2500 README.md          # Documentation\n\u2514\u2500\u2500 test-results.md    # Accessibility test results\n</code></pre>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#css-architecture","title":"CSS Architecture","text":"<ol> <li> <p>CSS Custom Properties First CSS<pre><code>:root {\n  /* Colors with semantic names */\n  --text-primary: #e0e0e0;\n  --bg-primary: #0a0e27;\n\n  /* Spacing scale */\n  --space-xs: 0.25rem;\n  --space-sm: 0.5rem;\n  --space-md: 1rem;\n\n  /* Type scale */\n  --text-sm: 0.875rem;\n  --text-base: 1rem;\n  --text-lg: 1.25rem;\n}\n</code></pre></p> </li> <li> <p>Component-Based Structure CSS<pre><code>/* Base components */\n@import 'components/buttons.css';\n@import 'components/forms.css';\n@import 'components/navigation.css';\n\n/* Security levels */\n@import 'security/l0-public.css';\n@import 'security/l1-member.css';\n@import 'security/l2-cadre.css';\n</code></pre></p> </li> </ol>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#implementation-guide","title":"Implementation Guide","text":"","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#step-1-research-and-planning","title":"Step 1: Research and Planning","text":"<ol> <li>Understand Your Users</li> <li>Survey community accessibility needs</li> <li>Consider various disabilities (visual, motor, cognitive)</li> <li> <p>Plan for assistive technology compatibility</p> </li> <li> <p>Define Visual Identity</p> </li> <li>Choose colors that meet contrast requirements</li> <li>Select readable fonts (avoid thin weights)</li> <li>Design clear iconography</li> </ol>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#step-2-build-accessible-foundation","title":"Step 2: Build Accessible Foundation","text":"CSS<pre><code>/* Start with accessibility */\n* {\n  /* Ensure text is readable */\n  line-height: 1.5;\n  letter-spacing: 0.02em;\n}\n\n/* Focus styles */\n:focus {\n  outline: 3px solid var(--focus-color);\n  outline-offset: 2px;\n}\n\n/* Skip links */\n.skip-link {\n  position: absolute;\n  top: -40px;\n  left: 0;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  padding: 8px;\n  z-index: 100;\n  text-decoration: none;\n}\n\n.skip-link:focus {\n  top: 0;\n}\n</code></pre>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#step-3-add-revolutionary-aesthetics","title":"Step 3: Add Revolutionary Aesthetics","text":"<p>Build visual identity on top of accessible foundation:</p> CSS<pre><code>/* Example: Cyberpunk aesthetic with accessibility */\n.header {\n  /* Accessible base */\n  color: var(--text-primary);\n  background: var(--bg-primary);\n\n  /* Aesthetic enhancement */\n  background-image: \n    linear-gradient(45deg, transparent 30%, rgba(0,217,255,0.1) 50%, transparent 70%);\n  text-shadow: 0 0 20px rgba(0,217,255,0.5);\n\n  /* Ensure contrast maintained */\n  position: relative;\n  z-index: 1;\n}\n</code></pre>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#step-4-test-thoroughly","title":"Step 4: Test Thoroughly","text":"<ol> <li> <p>Automated Testing Bash<pre><code># Run accessibility tests\nnpm run test:a11y\n\n# Check contrast ratios\nnpx color-contrast-checker\n</code></pre></p> </li> <li> <p>Manual Testing</p> </li> <li>Navigate with keyboard only</li> <li>Test with screen readers (NVDA, JAWS, VoiceOver)</li> <li>Verify with browser zoom at 200%</li> <li> <p>Check with Windows High Contrast mode</p> </li> <li> <p>Real User Testing</p> </li> <li>Recruit testers with disabilities</li> <li>Gather feedback on actual usage</li> <li>Iterate based on findings</li> </ol>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#best-practices","title":"Best Practices","text":"","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#dos","title":"Do's \u2705","text":"<ul> <li>Start with accessibility, add aesthetics after</li> <li>Test with real assistive technologies</li> <li>Provide multiple ways to perceive information</li> <li>Document all accessibility features</li> <li>Include disabled comrades in design process</li> </ul>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#donts","title":"Don'ts \u274c","text":"<ul> <li>Don't use color as the only indicator</li> <li>Don't remove focus indicators</li> <li>Don't use fonts smaller than 14px</li> <li>Don't create seizure-inducing animations</li> <li>Don't assume your users' abilities</li> </ul>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#theme-examples","title":"Theme Examples","text":"","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#queer-mandalorian-accessibility-exemplar","title":"Queer Mandalorian (Accessibility Exemplar)","text":"<ul> <li>Full WCAG 2.1 AA compliance</li> <li>Revolutionary cyberpunk aesthetic</li> <li>Multiple security indicators</li> <li>Excellent keyboard navigation</li> <li>See: <code>/stylesheets/queer-mandalorian.css</code></li> </ul>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#cyberpunk-guerrilla","title":"Cyberpunk Guerrilla","text":"<ul> <li>High contrast design</li> <li>Reduced motion options</li> <li>Clear visual hierarchy</li> <li>See: <code>/stylesheets/cyberpunk-guerilla.css</code></li> </ul>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#testing-resources","title":"Testing Resources","text":"","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#tools","title":"Tools","text":"<ul> <li>axe DevTools: Browser extension for accessibility testing</li> <li>WAVE: Web Accessibility Evaluation Tool</li> <li>Contrast Ratio Checkers: Ensure color compliance</li> <li>Screen Readers: NVDA (free), JAWS, VoiceOver</li> </ul>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#testing-checklist","title":"Testing Checklist","text":"<ul> <li> All text meets contrast requirements</li> <li> Keyboard navigation works throughout</li> <li> Screen reader announces content correctly</li> <li> No information conveyed by color alone</li> <li> Focus indicators visible</li> <li> Forms have proper labels</li> <li> Images have alt text</li> <li> Animations respect prefers-reduced-motion</li> <li> Page works at 200% zoom</li> <li> No horizontal scrolling at standard widths</li> </ul>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#contributing","title":"Contributing","text":"<p>When submitting a new theme:</p> <ol> <li>Include full accessibility test results</li> <li>Document any known limitations</li> <li>Provide remediation for any AA failures</li> <li>Include screenshots with different color filters</li> <li>Test with at least one screen reader</li> </ol>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/design/theme-development-guide/#references","title":"References","text":"<ul> <li>WCAG 2.1 Guidelines</li> <li>WebAIM Resources</li> <li>Inclusive Design Principles</li> <li>Disability Justice Collective</li> </ul> <p>\"Nothing About Us Without Us\" - Disability rights movement</p> <p>Every theme we create must embody this principle.</p>","tags":["theme","accessibility","design","customization","wcag","disability-justice"]},{"location":"implement/getting-started/druids-installation-guide/","title":"DRUIDS Installation Guide","text":"<p>Get your revolutionary infrastructure running in under an hour</p> <p>Prerequisites: Review why this matters and see it in action first.</p> <p>Different contexts? Check Visual Learning Paths for installation paths by organizing type.</p>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#overview","title":"Overview","text":"<p>This guide covers three installation paths: 1. Quick Start - Pre-built DRUIDS-Tails USB (15 minutes) 2. Standard Install - Existing system setup (45 minutes) 3. Advanced Deploy - Multi-org federation (2+ hours)</p>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#prerequisites","title":"Prerequisites","text":"","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#hardware-requirements","title":"Hardware Requirements","text":"<p>Minimum: - 8GB RAM - 32GB storage - USB 3.0 port - 64-bit processor</p> <p>Recommended: - 16GB RAM - 128GB storage - USB 3.1+ ports - Hardware security key (Yubikey/Feitian)</p>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#knowledge-requirements","title":"Knowledge Requirements","text":"<p>Basic Path:  - Can follow instructions - Comfortable with passwords - Basic file management</p> <p>Advanced Path: - Command line basics - Understanding of Git (see Git essentials) - Network configuration</p> <p>Need to build skills first? Start with demystifying Git and essential commands.</p>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#path-1-quick-start-with-druids-tails","title":"Path 1: Quick Start with DRUIDS-Tails","text":"","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#step-1-obtain-druids-tails-usb","title":"Step 1: Obtain DRUIDS-Tails USB","text":"<p>Option A: Request from Organization 1. Contact your org's tech liaison 2. Verify distribution authenticity 3. Receive USB and hardware key</p> <p>Option B: Download and Create Bash<pre><code># Download verified image\nwget https://druids.dev/releases/druids-tails-latest.iso\nwget https://druids.dev/releases/druids-tails-latest.iso.sig\n\n# Verify signature\ngpg --verify druids-tails-latest.iso.sig\n\n# Write to USB (replace sdX with your device)\nsudo dd if=druids-tails-latest.iso of=/dev/sdX bs=16M status=progress\n</code></pre></p>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#step-2-first-boot","title":"Step 2: First Boot","text":"<ol> <li>Insert USB and restart computer</li> <li>Access boot menu (Usually F12, F2, or Esc)</li> <li>Select USB device</li> <li>At Tails Greeter:</li> <li>Enter temporary passphrase</li> <li>Enable persistent storage</li> <li>Start Tails</li> </ol>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#step-3-initial-configuration","title":"Step 3: Initial Configuration","text":"<p>The welcome wizard launches automatically:</p> <ol> <li> <p>Security Setup Text Only<pre><code>- Create new GPG key\n- Configure hardware security key\n- Generate SSH keys\n- Change persistent storage passphrase\n</code></pre></p> </li> <li> <p>Identity Configuration Text Only<pre><code>- Set Git pseudonym\n- Configure email (use ProtonMail/Tutanota)\n- Set organizational identifier\n</code></pre></p> </li> <li> <p>Vault Initialization Text Only<pre><code>- Choose vault location\n- Set encryption preferences\n- Configure sync method\n</code></pre></p> </li> </ol>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#step-4-verify-installation","title":"Step 4: Verify Installation","text":"Bash<pre><code># Check DRUIDS components\ndruids-status\n\n# Expected output:\n# \u2713 Tails: 6.15\n# \u2713 DRUIDS: 0.1.0\n# \u2713 Obsidian: 1.4.16\n# \u2713 Git: 2.39.2\n# \u2713 GPG: 2.2.40\n# \u2713 Persistent Storage: Unlocked\n# \u2713 Network: Tor Connected\n</code></pre>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#path-2-standard-installation-on-existing-system","title":"Path 2: Standard Installation on Existing System","text":"","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#supported-systems","title":"Supported Systems","text":"<ul> <li>Debian 12+</li> <li>Ubuntu 22.04+</li> <li>Fedora 38+</li> <li>Arch Linux (current)</li> <li>Tails 6.0+</li> </ul>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#step-1-install-core-dependencies","title":"Step 1: Install Core Dependencies","text":"<p>Debian/Ubuntu: Bash<pre><code>sudo apt update\nsudo apt install -y git gnupg2 curl wget age \\\n    syncthing obsidian tor torsocks\n</code></pre></p> <p>Fedora: Bash<pre><code>sudo dnf install -y git gnupg2 curl wget age \\\n    syncthing tor torsocks\n# Install Obsidian separately\n</code></pre></p> <p>Arch: Bash<pre><code>sudo pacman -S git gnupg curl wget age \\\n    syncthing tor torsocks\nyay -S obsidian-bin\n</code></pre></p>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#step-2-install-druids-scripts","title":"Step 2: Install DRUIDS Scripts","text":"Bash<pre><code># Clone DRUIDS repository\ngit clone https://github.com/druids-dev/druids-core.git\ncd druids-core\n\n# Run installer\n./install.sh --path=$HOME/.druids\n</code></pre>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#step-3-configure-security-tiers","title":"Step 3: Configure Security Tiers","text":"Bash<pre><code># Initialize DRUIDS\ndruids init\n\n# Configure security tiers\ndruids security setup\n\n# Choose your model:\n# 1. Single-user (personal organizing)\n# 2. Small cell (2-10 members)\n# 3. Organization (10+ members)\n# 4. Federation (multiple orgs)\n</code></pre>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#step-4-obsidian-configuration","title":"Step 4: Obsidian Configuration","text":"<ol> <li>Launch Obsidian</li> <li>Open vault: Choose <code>$HOME/.druids/vault</code></li> <li>Install community plugins:</li> <li>Git</li> <li>Obsidian GPG</li> <li>Kanban</li> <li>Dataview</li> <li> <p>Tasks</p> </li> <li> <p>Configure Git plugin:    Text Only<pre><code>- Repository path: .\n- Commit message: {{date}} {{hostname}}\n- Auto-commit: 5 minutes\n- Push on commit: No (security)\n</code></pre></p> </li> </ol>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#step-5-syncing-setup","title":"Step 5: Syncing Setup","text":"<p>Option A: Syncthing (Recommended) Bash<pre><code># Start Syncthing\nsystemctl --user enable syncthing\nsystemctl --user start syncthing\n\n# Access web UI\nfirefox http://localhost:8384\n\n# Add devices using their IDs\n# Share .druids/vault folder\n</code></pre></p> <p>Option B: Git Remote (Advanced) Bash<pre><code># Add encrypted remote\ngit remote add origin tor://your-onion-address.onion/vault.git\n\n# Configure push through Tor\ngit config --global http.proxy socks5h://127.0.0.1:9050\n</code></pre></p>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#path-3-advanced-multi-org-deployment","title":"Path 3: Advanced Multi-Org Deployment","text":"","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#architecture-overview","title":"Architecture Overview","text":"Text Only<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Org Node A    \u2502\u2500\u2500\u2500\u2500\u2502   Org Node B    \u2502\n\u2502  (10 members)   \u2502    \u2502  (15 members)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                      \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2502\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502 Federation Hub \u2502\n            \u2502  (Shared L1)   \u2502\n            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#step-1-deploy-infrastructure-node","title":"Step 1: Deploy Infrastructure Node","text":"Bash<pre><code># On dedicated server (VPS or local)\nwget https://druids.dev/releases/druids-server-latest.tar.gz\ntar -xzf druids-server-latest.tar.gz\ncd druids-server\n\n# Configure as federation hub\n./deploy.sh --mode=federation \\\n            --name=\"Regional Hub\" \\\n            --security=L1 \\\n            --port=7744\n</code></pre>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#step-2-organization-setup","title":"Step 2: Organization Setup","text":"<p>For each organization:</p> Bash<pre><code># Initialize org node\ndruids org init --name=\"Tenant Union Local 47\" \\\n                --hub=tor://federation-address.onion:7744 \\\n                --members=15\n\n# Generate org keys\ndruids org keygen --type=master\ndruids org keygen --type=member --count=15\n\n# Create member USBs\ndruids org create-media --template=druids-tails \\\n                       --count=15 \\\n                       --output=/media/batch/\n</code></pre>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#step-3-network-configuration","title":"Step 3: Network Configuration","text":"Bash<pre><code># Configure Tor hidden service\nsudo nano /etc/tor/torrc\n\n# Add:\nHiddenServiceDir /var/lib/tor/druids/\nHiddenServicePort 7744 127.0.0.1:7744\n\n# Restart Tor\nsudo systemctl restart tor\n\n# Get onion address\nsudo cat /var/lib/tor/druids/hostname\n</code></pre>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#step-4-security-hardening","title":"Step 4: Security Hardening","text":"Bash<pre><code># Enable firewall\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow 7744/tcp comment \"DRUIDS Federation\"\nsudo ufw enable\n\n# Configure fail2ban\nsudo cp druids-server/config/fail2ban/druids.conf /etc/fail2ban/filter.d/\nsudo systemctl restart fail2ban\n\n# Set up monitoring\ndruids monitor enable --alerts=email \\\n                     --threshold=3 \\\n                     --contact=security@org.dev\n</code></pre>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#post-installation","title":"Post-Installation","text":"","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#essential-first-steps","title":"Essential First Steps","text":"<ol> <li> <p>Create First Documents Bash<pre><code># Meeting template\ndruids new meeting --date=today\n\n# Security policy\ndruids new document --template=security-policy\n\n# Member roster (encrypted)\ndruids new roster --encrypt=L2\n</code></pre></p> </li> <li> <p>Test Sync Bash<pre><code># Create test file\necho \"Test sync $(date)\" &gt; vault/test-sync.md\n\n# Commit and sync\ndruids sync\n\n# Verify on other device\ndruids pull\n</code></pre></p> </li> <li> <p>Security Verification Bash<pre><code># Run security audit\ndruids security audit\n\n# Check encryption\ndruids security verify-encryption\n\n# Test recovery\ndruids security test-recovery\n</code></pre></p> </li> </ol>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#training-resources","title":"Training Resources","text":"<p>After installation, work through: 1. Onboarding Without Burnout 2. Daily Workflows 3. Security Playbook</p>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#common-issues","title":"Common Issues","text":"Problem Solution \"Cannot find vault\" Run <code>druids vault init</code> \"Sync failed\" Check <code>druids sync status</code> \"Permission denied\" Verify GPG key: <code>druids security check</code> \"Tor not connected\" <code>sudo systemctl restart tor</code>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#maintenance","title":"Maintenance","text":"","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#daily","title":"Daily","text":"Bash<pre><code># Quick status check\ndruids status\n</code></pre>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#weekly","title":"Weekly","text":"Bash<pre><code># Sync verification\ndruids sync verify\n\n# Backup check\ndruids backup status\n</code></pre>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#monthly","title":"Monthly","text":"Bash<pre><code># Security audit\ndruids security audit --full\n\n# Update components\ndruids update --check\n</code></pre>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/druids-installation-guide/#getting-help","title":"Getting Help","text":"<ol> <li>Documentation: <code>/docs</code> in your vault</li> <li>Logs: <code>druids logs --tail=50</code></li> <li>Debug mode: <code>druids --debug [command]</code></li> <li>Community: Via secure channels only</li> </ol> <p>Installation is just the beginning. The revolution requires practice.</p> <p>Backlinks:</p>","tags":["installation","setup","how-to","deployment"]},{"location":"implement/getting-started/migration-guides/from-discord/","title":"Breaking Discord's Chains: Migrating Your Organization Off Discord","text":"","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#why-discord-is-dangerous","title":"Why Discord Is Dangerous","text":"<p>Discord isn't your community - it's a surveillance platform:</p> <ul> <li>All messages permanently logged: Even \"deleted\" ones</li> <li>Voice calls monitored: AI transcription capabilities</li> <li>Real identity leaks: IP addresses, device IDs, payment info</li> <li>Corporate collaboration: Hands data to law enforcement</li> <li>January 6<sup>th</sup> precedent: Discord messages used as evidence</li> </ul> <p>Your \"secure server\" is their evidence locker.</p>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#prerequisites","title":"Prerequisites","text":"<ul> <li>Admin access to your Discord server</li> <li>3-4 hours for initial migration</li> <li>Trusted comrades to help coordinate</li> <li>Alternative platform chosen (see our recommendations)</li> <li>Git repository set up (see \"Your First Revolutionary Commit\")</li> </ul>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#step-1-map-your-discord-prison","title":"Step 1: Map Your Discord Prison","text":"<p>Before escaping, document what you're leaving:</p>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#inventory-channels","title":"Inventory Channels","text":"Markdown<pre><code># Discord Structure Inventory\n\n## Text Channels\n- #general - Daily organizing chat\n- #meeting-notes - Where we post minutes\n- #campaigns - Active campaign planning\n- #resources - Shared documents/links\n- #memes - Community building\n\n## Voice Channels\n- General Voice - Weekly meetings\n- Breakout Rooms - Committee work\n\n## Roles/Permissions\n- @organizers - Core planning group\n- @members - Verified members\n- @new - Onboarding\n\n## Pinned Messages\n- [List important pinned content]\n\n## Active Integrations\n- [Bots, webhooks, connected apps]\n</code></pre>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#download-critical-history","title":"Download Critical History","text":"Bash<pre><code># Using DiscordChatExporter (command line)\n# Install: https://github.com/Tyrrrz/DiscordChatExporter\n\n# Export each channel\ndotnet DiscordChatExporter.Cli.dll export \\\n  -t \"YOUR_BOT_TOKEN\" \\\n  -c CHANNEL_ID \\\n  -f HtmlDark \\\n  -o exports/\n\n# Or use the GUI version for easier export\n</code></pre> <p>Security Note: Download on trusted computer only. These exports contain everything.</p>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#automated-export-script","title":"Automated Export Script","text":"Bash<pre><code>#!/bin/bash\n# discord-export.sh - Automate full server export\n\n# Configuration\nTOKEN=\"YOUR_BOT_TOKEN\"\nSERVER_ID=\"YOUR_SERVER_ID\"\nEXPORT_DIR=\"./discord-export-$(date +%Y%m%d)\"\n\n# Create export directory\nmkdir -p \"$EXPORT_DIR\"\n\n# Get all channels (requires discord.py)\npython3 &lt;&lt; EOF\nimport discord\nimport asyncio\nimport json\n\nclient = discord.Client()\n\n@client.event\nasync def on_ready():\n    guild = client.get_guild($SERVER_ID)\n    channels = []\n\n    for channel in guild.text_channels:\n        channels.append({\n            'id': channel.id,\n            'name': channel.name,\n            'category': channel.category.name if channel.category else 'None'\n        })\n\n    with open('$EXPORT_DIR/channels.json', 'w') as f:\n        json.dump(channels, f, indent=2)\n\n    await client.close()\n\nclient.run('$TOKEN')\nEOF\n\n# Export each channel\nwhile IFS= read -r channel_id; do\n    channel_name=$(jq -r \".[] | select(.id==$channel_id) | .name\" \"$EXPORT_DIR/channels.json\")\n    echo \"Exporting #$channel_name...\"\n\n    dotnet DiscordChatExporter.Cli.dll export \\\n        -t \"$TOKEN\" \\\n        -c \"$channel_id\" \\\n        -f Json \\\n        -o \"$EXPORT_DIR/channels/\" \\\n        --dateformat \"yyyy-MM-dd HH:mm\"\ndone &lt; &lt;(jq -r '.[].id' \"$EXPORT_DIR/channels.json\")\n\n# Export server info, roles, members\necho \"Exporting server metadata...\"\n# Additional exports here\n</code></pre>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#step-2-prepare-your-liberation-infrastructure","title":"Step 2: Prepare Your Liberation Infrastructure","text":"","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#set-up-git-repository-structure","title":"Set Up Git Repository Structure","text":"Bash<pre><code># Create organized structure\nmkdir -p liberation/{announcements,resources,archive,meeting-minutes}\n\n# Create migration guide for comrades\ncat &gt; liberation/README.md &lt;&lt; EOF\n# [Organization Name] Liberation from Discord\n\nWe're moving off Discord to protect our organizing.\n\n## Why We're Moving\n- Discord logs everything permanently\n- Corporate surveillance endangers comrades\n- We need infrastructure we control\n\n## Where We're Going\n- Git: Permanent records, democratic process\n- [Chosen chat platform]: Encrypted real-time communication\n- Meeting minutes: Now in Git history\n\n## Timeline\n- Week 1: Core organizers train on new tools\n- Week 2: Migrate active campaigns\n- Week 3: General membership onboarding\n- Week 4: Discord server archived and locked\nEOF\n</code></pre>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#choose-replacement-tools","title":"Choose Replacement Tools","text":"<p>For different Discord functions:</p> <p>Real-time chat: - Matrix/Element: Federated, encrypted, self-hostable - Signal: Good for small groups (&lt;1000) - Mattermost: Self-hosted Slack alternative</p> <p>Voice meetings: - Jitsi Meet: No account needed, encrypted - Mumble: Low bandwidth, high security - BigBlueButton: Full meeting features</p> <p>Document storage: - Git: For permanent records - NextCloud: For active collaboration - Cryptpad: For sensitive drafts</p>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#step-3-export-and-transform-content","title":"Step 3: Export and Transform Content","text":"","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#meeting-notes-migration","title":"Meeting Notes Migration","text":"Bash<pre><code># Convert Discord meeting notes to Git\n# For each meeting in Discord:\n\n# 1. Copy content from Discord\n# 2. Create proper markdown file\ncat &gt; meetings/2025-06-15-general-meeting.md &lt;&lt; 'EOF'\n# General Meeting Minutes\nDate: 2025-06-15\nPorted from Discord by: Comrade 47\n\n[Original Discord content here]\n\n---\n*Migrated from Discord on 2025-07-02*\n*Original message ID: [ID for reference]*\nEOF\n\n# 3. Commit to Git\ngit add meetings/\ngit commit -m \"Migrate June 15 meeting minutes from Discord\n\n- Preserved original formatting\n- Removed member handles for security\n- Part of Discord liberation project\"\n</code></pre>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#resource-channel-migration","title":"Resource Channel Migration","text":"Bash<pre><code># Extract all links and documents\n# Create organized resource list\n\ncat &gt; resources/migrated-from-discord.md &lt;&lt; 'EOF'\n# Resources Migrated from Discord\n\n## Organizing Guides\n- [Title]: [URL]\n- Security Culture 101: https://crimethinc.com/2004/11/01/\n- [Continue with all resources]\n\n## Templates\n[Migrate all shared templates]\n\n## Important Links\n[Preserve institutional knowledge]\nEOF\n</code></pre>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#step-4-user-migration-process","title":"Step 4: User Migration Process","text":"","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#map-discord-roles-to-new-permissions","title":"Map Discord Roles to New Permissions","text":"Bash<pre><code># Create role mapping document\ncat &gt; migration/role-mapping.md &lt;&lt; 'EOF'\n# Discord \u2192 New Platform Role Mapping\n\n## Discord Roles \u2192 Git + Matrix Permissions\n\n### @admin (Discord) \u2192 Repository Owners (Git) + Space Admin (Matrix)\n- Can manage all settings\n- Merge permissions on protected branches\n- Can add/remove other admins\n\n### @organizer (Discord) \u2192 Repository Maintainers (Git) + Moderator (Matrix)\n- Can merge pull requests\n- Can manage issues/discussions\n- Can moderate chat rooms\n\n### @member (Discord) \u2192 Repository Contributors (Git) + Member (Matrix)\n- Can create branches\n- Can open pull requests\n- Full chat participation\n\n### @new (Discord) \u2192 Repository Readers (Git) + Guest (Matrix)\n- Read-only Git access\n- Limited chat rooms\n- Onboarding pathway\n\n## Permission Translation Table\n\n| Discord Permission | Git Equivalent | Matrix Equivalent |\n|-------------------|----------------|-------------------|\n| Manage Server | Org Owner | Space Admin |\n| Manage Channels | Repo Admin | Room Admin |\n| Manage Messages | PR Reviewer | Moderator |\n| Send Messages | Contributor | Member |\n| View Channels | Read Access | Room Access |\n| Voice Chat | - | Voice Room Access |\nEOF\n</code></pre>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#batch-user-migration-script","title":"Batch User Migration Script","text":"Python<pre><code>#!/usr/bin/env python3\n# migrate-users.py - Migrate Discord users to new platforms\n\nimport csv\nimport json\nimport subprocess\n\ndef export_discord_users(guild_id, token):\n    \"\"\"Export Discord user list with roles\"\"\"\n    # Use discord.py to get member list\n    members = []\n    # ... discord API calls ...\n\n    with open('discord-users.csv', 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(['username', 'discriminator', 'roles', 'joined_date'])\n        for member in members:\n            writer.writerow([\n                member['username'],\n                member['discriminator'],\n                ','.join(member['roles']),\n                member['joined_at']\n            ])\n    return 'discord-users.csv'\n\ndef create_git_users(csv_file):\n    \"\"\"Create Git access for migrated users\"\"\"\n    with open(csv_file, 'r') as f:\n        reader = csv.DictReader(f)\n        for row in reader:\n            username = row['username']\n            roles = row['roles'].split(',')\n\n            # Map Discord roles to Git permissions\n            if 'admin' in roles:\n                git_role = 'maintainer'\n            elif 'organizer' in roles:\n                git_role = 'developer'\n            else:\n                git_role = 'reporter'\n\n            # Add to Git platform (GitLab example)\n            cmd = f\"gitlab user create --username {username} --role {git_role}\"\n            print(f\"Creating Git user: {username} with role: {git_role}\")\n            # subprocess.run(cmd, shell=True)\n\ndef create_matrix_accounts(csv_file, homeserver):\n    \"\"\"Batch create Matrix accounts\"\"\"\n    accounts_created = []\n\n    with open(csv_file, 'r') as f:\n        reader = csv.DictReader(f)\n        for row in reader:\n            username = row['username'].lower()\n            # Generate secure random password\n            password = generate_secure_password()\n\n            # Create Matrix account\n            matrix_user = f\"@{username}:{homeserver}\"\n            accounts_created.append({\n                'discord_name': row['username'],\n                'matrix_id': matrix_user,\n                'temp_password': password\n            })\n\n    # Save credentials securely for distribution\n    with open('matrix-accounts.json', 'w') as f:\n        json.dump(accounts_created, f, indent=2)\n\n    return accounts_created\n\n# Main migration flow\nif __name__ == \"__main__\":\n    # 1. Export from Discord\n    user_file = export_discord_users(GUILD_ID, TOKEN)\n\n    # 2. Create Git accounts\n    create_git_users(user_file)\n\n    # 3. Create Matrix accounts  \n    matrix_accounts = create_matrix_accounts(user_file, \"our-homeserver.org\")\n\n    # 4. Generate migration packets for users\n    create_migration_packets(matrix_accounts)\n</code></pre>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#individual-user-migration-packet","title":"Individual User Migration Packet","text":"Bash<pre><code># Generate personalized migration instructions\ncat &gt; migration-packets/username-migration.md &lt;&lt; 'EOF'\n# Your Personal Migration Guide\n\nWelcome to freedom from corporate surveillance!\n\n## Your New Accounts\n\n### Git Repository Access\n- URL: https://git.our-org.net\n- Username: [your-username]\n- Temporary Password: [generated]\n- First Login: You'll be prompted to change password\n\n### Encrypted Chat (Matrix/Element)\n- Server: https://matrix.our-org.net  \n- Username: @[your-username]:our-org.net\n- Temporary Password: [generated]\n- Download Element: https://element.io\n\n## Quick Start Checklist\n\n- [ ] Log into Git repository\n- [ ] Change temporary password\n- [ ] Set up 2FA (required within 48 hours)\n- [ ] Join Matrix/Element\n- [ ] Join #general-migration room\n- [ ] Complete tool training (Saturday 2pm)\n\n## Your Discord Data\n\nYour Discord history export: [secure download link - expires in 7 days]\n\n## Support\n\nNeed help? Contact:\n- Tech support: #migration-help on Matrix\n- Or email: tech-support@our-org.net (encrypted)\nEOF\n</code></pre>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#step-5-coordinate-the-migration","title":"Step 5: Coordinate the Migration","text":"","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#phase-1-core-organizers-week-1","title":"Phase 1: Core Organizers (Week 1)","text":"<ol> <li>Train security committee on new tools</li> <li>Test workflows with small group</li> <li>Document pain points</li> <li>Create guides for broader membership</li> </ol>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#phase-2-active-campaigns-week-2","title":"Phase 2: Active Campaigns (Week 2)","text":"<p>Move active work first: - Current campaign channels - Upcoming event planning - Task assignments</p>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#phase-3-full-membership-week-3","title":"Phase 3: Full Membership (Week 3)","text":"Markdown<pre><code># Announcement for #general\n\n@everyone \n\n**DISCORD LIBERATION BEGINS NOW**\n\nComrades, we're moving off Discord to protect our organizing from corporate surveillance.\n\n**What's Happening:**\n- Discord permanently logs everything (even \"deleted\" messages)\n- Law enforcement regularly subpoenas Discord data\n- We're building infrastructure we control\n\n**Action Required:**\n1. Join our Matrix space: [link]\n2. Attend migration training: [Saturday 2pm]\n3. Download channel history if you need it: [deadline]\n\n**Timeline:**\n- Now-Sunday: Join new platforms\n- Monday: Begin using new tools\n- Next Sunday: Discord goes read-only\n- Two weeks: Discord deleted\n\nQuestions? Ask in #migration-help\n\nSolidarity forever! \u270a\n</code></pre>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#phase-4-archive-and-exit-week-4","title":"Phase 4: Archive and Exit (Week 4)","text":"<ol> <li>Set all channels to read-only</li> <li>Post final message with new platform info</li> <li>Export full server data (admin only)</li> <li>Delete server entirely</li> </ol>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#step-5-automation-scripts","title":"Step 5: Automation Scripts","text":"","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#channel-migration-script","title":"Channel Migration Script","text":"Bash<pre><code>#!/bin/bash\n# migrate-channels.sh - Convert Discord channels to Git structure\n\nEXPORT_DIR=\"./discord-export\"\nGIT_REPO=\"./liberation\"\n\n# Create directory structure matching Discord\nwhile IFS= read -r line; do\n    category=$(echo \"$line\" | jq -r '.category')\n    channel=$(echo \"$line\" | jq -r '.name')\n\n    # Sanitize names for filesystem\n    safe_category=$(echo \"$category\" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')\n    safe_channel=$(echo \"$channel\" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')\n\n    # Create Git directory structure\n    if [ \"$category\" != \"None\" ]; then\n        mkdir -p \"$GIT_REPO/$safe_category/$safe_channel\"\n    else\n        mkdir -p \"$GIT_REPO/$safe_channel\"\n    fi\n\n    # Process channel exports\n    if [ -f \"$EXPORT_DIR/channels/$channel.json\" ]; then\n        python3 process-discord-export.py \\\n            --input \"$EXPORT_DIR/channels/$channel.json\" \\\n            --output \"$GIT_REPO/$safe_category/$safe_channel\" \\\n            --format markdown\n    fi\ndone &lt; &lt;(jq -c '.[]' \"$EXPORT_DIR/channels.json\")\n\n# Commit the migration\ncd \"$GIT_REPO\"\ngit add .\ngit commit -m \"Migrate Discord channels to Git structure\n\n- Preserved channel organization\n- Converted messages to markdown\n- Removed personal data for privacy\n- Part of liberation from Discord surveillance\"\n</code></pre>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#message-conversion-script","title":"Message Conversion Script","text":"Python<pre><code>#!/usr/bin/env python3\n# process-discord-export.py - Convert Discord JSON to markdown\n\nimport json\nimport argparse\nfrom datetime import datetime\nimport re\nimport os\n\ndef sanitize_username(author):\n    \"\"\"Remove discriminators and personal info\"\"\"\n    # Remove #1234 discriminators\n    username = re.sub(r'#\\d{4}$', '', author.get('name', 'Unknown'))\n    # Use nickname if available\n    if author.get('nickname'):\n        return author['nickname']\n    return username\n\ndef convert_message(msg):\n    \"\"\"Convert Discord message to markdown format\"\"\"\n    timestamp = datetime.fromisoformat(msg['timestamp'].replace('Z', '+00:00'))\n    author = sanitize_username(msg['author'])\n    content = msg['content']\n\n    # Convert Discord mentions to generic\n    content = re.sub(r'&lt;@!?\\d+&gt;', '@member', content)\n    content = re.sub(r'&lt;#\\d+&gt;', '#channel', content)\n\n    # Format as markdown\n    formatted = f\"**{author}** - {timestamp.strftime('%Y-%m-%d %H:%M')}  \\n{content}\\n\"\n\n    # Handle attachments\n    if msg.get('attachments'):\n        formatted += \"\\n\ud83d\udcce Attachments:\\n\"\n        for att in msg['attachments']:\n            formatted += f\"- {att['fileName']} (not migrated for security)\\n\"\n\n    return formatted\n\ndef process_channel_export(input_file, output_dir):\n    \"\"\"Process entire channel export\"\"\"\n    with open(input_file, 'r', encoding='utf-8') as f:\n        data = json.load(f)\n\n    # Group messages by date\n    messages_by_date = {}\n\n    for msg in data['messages']:\n        date = msg['timestamp'][:10]  # YYYY-MM-DD\n        if date not in messages_by_date:\n            messages_by_date[date] = []\n        messages_by_date[date].append(msg)\n\n    # Create markdown files per day\n    for date, messages in messages_by_date.items():\n        output_file = os.path.join(output_dir, f\"{date}-archive.md\")\n\n        with open(output_file, 'w', encoding='utf-8') as f:\n            f.write(f\"# Discord Archive - {date}\\n\\n\")\n            f.write(\"*Migrated from Discord - personal data removed for security*\\n\\n\")\n\n            # Sort messages by timestamp\n            messages.sort(key=lambda x: x['timestamp'])\n\n            for msg in messages:\n                f.write(convert_message(msg))\n                f.write(\"\\n---\\n\\n\")\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--input', required=True)\n    parser.add_argument('--output', required=True)\n    parser.add_argument('--format', default='markdown')\n\n    args = parser.parse_args()\n\n    os.makedirs(args.output, exist_ok=True)\n    process_channel_export(args.input, args.output)\n</code></pre>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#verification-script","title":"Verification Script","text":"Bash<pre><code>#!/bin/bash\n# verify-migration.sh - Ensure complete migration\n\necho \"=== Discord Liberation Verification ===\"\necho\n\n# Check 1: All channels migrated\necho \"Checking channel migration...\"\nDISCORD_CHANNELS=$(jq -r '.[].name' discord-export/channels.json | wc -l)\nGIT_DIRS=$(find liberation -type d -name \"*-archive.md\" | wc -l)\necho \"Discord channels: $DISCORD_CHANNELS\"\necho \"Git directories: $GIT_DIRS\"\n\n# Check 2: User accounts created\necho -e \"\\nChecking user migration...\"\nDISCORD_USERS=$(wc -l &lt; discord-users.csv)\nMATRIX_ACCOUNTS=$(jq '. | length' matrix-accounts.json)\necho \"Discord users: $DISCORD_USERS\"\necho \"Matrix accounts created: $MATRIX_ACCOUNTS\"\n\n# Check 3: Permissions mapped\necho -e \"\\nChecking permission mapping...\"\ngrep -c \"admin\" discord-users.csv\ngrep -c \"maintainer\" git-permissions.log\n\n# Check 4: No sensitive data in Git\necho -e \"\\nScanning for sensitive data...\"\ngit grep -E \"[0-9]{3}-[0-9]{2}-[0-9]{4}\" || echo \"\u2713 No SSNs found\"\ngit grep -E \"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b\" || echo \"\u2713 No emails found\"\ngit grep -E \"#[0-9]{4}\" || echo \"\u2713 No Discord discriminators found\"\n\n# Generate report\ncat &gt; migration-report.md &lt;&lt; EOF\n# Discord Liberation Report\nGenerated: $(date)\n\n## Migration Statistics\n- Channels migrated: $DISCORD_CHANNELS\n- Users migrated: $DISCORD_USERS  \n- Messages archived: $(find liberation -name \"*.md\" -exec wc -l {} + | tail -1)\n- Total data size: $(du -sh liberation | cut -f1)\n\n## Verification Results\n$([ $DISCORD_CHANNELS -eq $GIT_DIRS ] &amp;&amp; echo \"\u2713 All channels migrated\" || echo \"\u26a0 Channel count mismatch\")\n$([ $DISCORD_USERS -eq $MATRIX_ACCOUNTS ] &amp;&amp; echo \"\u2713 All users migrated\" || echo \"\u26a0 User count mismatch\")\n\n## Next Steps\n1. Review this report with security committee\n2. Conduct user acceptance testing\n3. Schedule Discord deletion date\n4. Celebrate liberation!\nEOF\n\necho -e \"\\n\u2713 Verification complete. See migration-report.md\"\n</code></pre>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#step-6-establish-new-workflows","title":"Step 6: Establish New Workflows","text":"","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#meeting-flow-without-discord","title":"Meeting Flow Without Discord","text":"Bash<pre><code># Before Meeting\n- Agenda in Git repository\n- Reminder via Signal/Matrix\n\n# During Meeting\n- Jitsi/Mumble for voice\n- Collaborative notes in CryptPad\n- Screen sharing for documents\n\n# After Meeting\n- Minutes committed to Git\n- Action items in project management\n- No ephemeral Discord chaos\n</code></pre>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#daily-communication","title":"Daily Communication","text":"<p>Replace Discord habits: - Morning check-ins \u2192 Matrix/Signal - Quick questions \u2192 Designated support hours - Memes \u2192 Revolutionary culture channel - Announcements \u2192 Git + secure broadcast</p>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#common-challenges-and-solutions","title":"Common Challenges and Solutions","text":"","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#but-discord-is-convenient","title":"\"But Discord is convenient!\"","text":"<p>Response: Convenience for us is convenience for surveillance. Every \"easy\" feature is a data collection point.</p>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#members-resist-change","title":"\"Members resist change!\"","text":"<p>Solutions: - Lead by example - organizers first - Buddy system for learning - Celebrate early adopters - Make it about collective security, not individual preference</p>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#well-lose-our-history","title":"\"We'll lose our history!\"","text":"<p>Actually: You'll GAIN history. Discord can delete everything tomorrow. Git is forever.</p>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#alternative-tools-are-harder","title":"\"Alternative tools are harder!\"","text":"<p>Reality: They're different, not harder. We learned Discord; we can learn freedom.</p>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#security-considerations","title":"Security Considerations","text":"","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#during-migration","title":"During Migration","text":"<ul> <li>Use VPN when downloading Discord data</li> <li>Store exports encrypted</li> <li>Delete Discord exports after Git migration</li> <li>Never put Discord export links in Git</li> </ul>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#after-migration","title":"After Migration","text":"<ul> <li>Audit who has Discord export copies</li> <li>Establish retention policy</li> <li>Train on new platform security</li> <li>Regular security check-ins</li> </ul>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#post-migration-monitoring","title":"Post-Migration Monitoring","text":"","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#week-1-health-check","title":"Week 1 Health Check","text":"Bash<pre><code>#!/bin/bash\n# post-migration-check.sh - Monitor adoption success\n\necho \"=== Post-Migration Health Check ===\"\n\n# Active user check\necho \"Checking platform adoption...\"\nACTIVE_GIT=$(git shortlog -sn --since=\"1 week ago\" | wc -l)\nACTIVE_MATRIX=$(curl -s https://matrix.our-org.net/api/stats | jq '.active_users')\n\necho \"Active Git contributors: $ACTIVE_GIT\"\necho \"Active Matrix users: $ACTIVE_MATRIX\"\n\n# Migration issues tracker\necho -e \"\\nCommon issues reported:\"\ngrep -c \"help\" migration-support.log\ngrep -c \"error\" migration-support.log\ngrep -c \"confused\" migration-support.log\n\n# Success metrics\ncat &gt; week-1-report.md &lt;&lt; EOF\n# Migration Week 1 Report\n\n## Adoption Metrics\n- Git users active: $ACTIVE_GIT / $TOTAL_MEMBERS\n- Matrix daily active: $ACTIVE_MATRIX / $TOTAL_MEMBERS\n- Support tickets: $(wc -l &lt; migration-support.log)\n\n## Wins\n- [Document successes]\n\n## Challenges  \n- [Document issues]\n\n## Adjustments Needed\n- [Action items]\nEOF\n</code></pre>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#verification-checklist","title":"Verification Checklist","text":"<ul> <li> All active campaigns migrated</li> <li> Meeting minutes in Git</li> <li> Resources documented</li> <li> Members trained on new tools</li> <li> Discord data exported and secured</li> <li> Server deleted (not just \"archived\")</li> <li> New workflows documented</li> <li> Security protocols updated</li> <li> Post-migration monitoring active</li> <li> Success metrics tracked</li> </ul>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#what-youve-accomplished","title":"What You've Accomplished","text":"<p>By completing this migration: - Removed corporate surveillance from organizing - Built infrastructure you control - Practiced collective discipline - Protected comrades from state repression - Joined the revolutionary infrastructure movement</p>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-discord/#next-steps","title":"Next Steps","text":"<ol> <li>Deepen Security: Why Discord Democracy Fails</li> <li>Expand Liberation: Signal Isn't Enough</li> <li>Build Power: Democratic Centralism</li> </ol> <p>\"The revolutionary doesn't choose comfortable tools - they choose tools for revolution.\"</p> <p>Discord was built for gamers and sold to surveillance. We're building infrastructure for liberation.</p> <p>Backlinks:</p>","tags":["migration","discord","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/","title":"Escaping Google's Surveillance: Migrating Your Organization's Data","text":"<p>Why this matters: See our analysis of surveillance capitalism in organizing.</p> <p>Already convinced? Jump to Step 1 to begin liberation.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#the-material-reality","title":"The Material Reality","text":"<p>Google isn't your friend. They're a surveillance corporation that actively collaborates with the state:</p> <ul> <li>Project Maven: Google builds AI for military drone strikes</li> <li>Keyword Warrants: Police get data on everyone who searched specific terms</li> <li>Geofence Warrants: Everyone at a protest identified through location data</li> <li>Real Example: Inauguration protesters' entire Google accounts seized, years of organizing exposed</li> </ul> <p>Every document in Google Drive is a future evidence exhibit. Every shared folder is a network map for investigators. Every comment thread is a recorded conversation.</p> <p>This isn't paranoia. It's pattern recognition.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#before-you-start","title":"Before You Start","text":"","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#what-youll-need","title":"What You'll Need","text":"<ul> <li> Computer with Git installed (see installation guide)</li> <li> List of all Google Drives/folders your org uses</li> <li> 2-3 hours of focused time</li> <li> Trusted comrades to verify the migration</li> <li> Determination to break free from corporate surveillance</li> </ul> <p>New to Git? Don't worry - it's not programming and you only need 7 commands.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#security-considerations","title":"Security Considerations","text":"<p>DO NOT do this migration: - On organization wifi - From a personal Google account linked to your name - Without VPN if possible - While leaving browser logged into Google afterward</p> <p>DO this migration: - From a secure location - Using dedicated browser profile - With comrades aware it's happening - After backing up critical documents elsewhere first</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#step-1-inventory-your-digital-prison","title":"Step 1: Inventory Your Digital Prison","text":"<p>Before escaping, map what you're liberating:</p> Markdown<pre><code># Organization Data Inventory\n\n## Google Drive Folders\n- [ ] Meeting Minutes (2020-2025)\n- [ ] Campaign Planning Documents  \n- [ ] Member Resources\n- [ ] Financial Records (handle specially)\n- [ ] Graphics and Flyers\n\n## Google Docs Being Actively Edited\n- [ ] Current Campaign Strategy\n- [ ] Upcoming Event Planning\n- [ ] Active Proposals\n\n## Shared With External Organizations\n- [ ] Coalition Documents\n- [ ] Joint Statements\n</code></pre> <p>Reality Check: You probably have more than you think. Check: - \"Shared with me\" section - Trash (Google keeps deleted files) - Version history of sensitive docs - Comments that might contain real names</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#step-2-download-your-data","title":"Step 2: Download Your Data","text":"","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#method-1-google-takeout-complete-archive","title":"Method 1: Google Takeout (Complete Archive)","text":"<p>Best for comprehensive liberation:</p> <ol> <li>Go to takeout.google.com</li> <li>Click \"Deselect all\"</li> <li>Select ONLY \"Drive\"</li> <li>Click \"Next step\"</li> <li>Choose:</li> <li>Export once</li> <li>File type: .zip</li> <li>Size: 2GB chunks (easier to handle)</li> <li>Create export</li> <li>Wait for email (can take hours for large archives)</li> </ol> <p>Warning: This downloads EVERYTHING, including: - Files others shared with you - Revision history - Comments with potential real names - Deleted items in trash</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#method-2-selective-download-recommended","title":"Method 2: Selective Download (Recommended)","text":"<p>More secure, gives you control:</p> <ol> <li>Open Google Drive</li> <li>Navigate to each folder</li> <li>Right-click \u2192 Download</li> <li>Creates .zip with folder structure preserved</li> <li>Repeat for each organizational folder</li> </ol> <p>Pro tip: Download in chunks to avoid overwhelming your system or triggering Google's suspicion.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#what-about-google-docs","title":"What About Google Docs?","text":"<p>Google's proprietary formats need conversion:</p> <ul> <li>Google Docs \u2192 Downloads as .docx (Microsoft Word)</li> <li>Google Sheets \u2192 Downloads as .xlsx (Excel)  </li> <li>Google Slides \u2192 Downloads as .pptx (PowerPoint)</li> </ul> <p>You'll convert these to Markdown later for Git compatibility.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#step-3-cleanse-the-data","title":"Step 3: Cleanse the Data","text":"<p>Before importing to Git, remove surveillance traces:</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#remove-metadata","title":"Remove Metadata","text":"<p>Every file contains hidden data about you:</p> Bash<pre><code># Install metadata removal tool\nsudo apt install mat2  # Debian/Ubuntu\nbrew install mat2     # Mac\n\n# Clean all files in directory\nmat2 --inplace downloaded-files/*\n\n# Verify metadata removed\nmat2 --show cleaned-file.docx\n</code></pre>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#check-for-exposed-names","title":"Check for Exposed Names","text":"<p>Search for accidental identity leaks:</p> Bash<pre><code># Search for common name patterns\ngrep -r \"First Last\" downloaded-files/\ngrep -r \"@gmail.com\" downloaded-files/\ngrep -r \"phone:\" downloaded-files/\n</code></pre> <p>Replace any found with pseudonyms before proceeding.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#convert-to-markdown","title":"Convert to Markdown","text":"<p>For Git compatibility and future-proofing:</p> Bash<pre><code># Install pandoc for conversion\nsudo apt install pandoc\n\n# Convert all .docx files\nfor file in *.docx; do\n    pandoc \"$file\" -t markdown -o \"${file%.docx}.md\"\ndone\n</code></pre>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#step-4-initialize-your-liberation-repository","title":"Step 4: Initialize Your Liberation Repository","text":"<p>Time to create your organization's new home:</p> Bash<pre><code># Create repository directory\nmkdir ~/organizing/our-org-docs\ncd ~/organizing/our-org-docs\n\n# Initialize Git repository\ngit init\n\n# Create basic structure\nmkdir -p {meetings,campaigns,resources,graphics}\n\n# Create README\necho \"# [Organization Name] Liberation Archive\" &gt; README.md\necho \"Escaped from Google's surveillance: $(date)\" &gt;&gt; README.md\n</code></pre>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#step-5-import-your-liberated-data","title":"Step 5: Import Your Liberated Data","text":"<p>Move your cleaned files into the new structure:</p> Bash<pre><code># Move meeting minutes\nmv ~/Downloads/cleaned-export/meetings/* ./meetings/\n\n# Move campaign docs\nmv ~/Downloads/cleaned-export/campaigns/* ./campaigns/\n\n# Move resources\nmv ~/Downloads/cleaned-export/resources/* ./resources/\n</code></pre> <p>Organize thoughtfully - this is your chance to improve on Google's chaos.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#step-6-your-first-revolutionary-commit","title":"Step 6: Your First Revolutionary Commit","text":"<p>This moment matters. You're not just saving files - you're practicing digital self-determination:</p> Bash<pre><code># Configure Git with pseudonym\ngit config user.name \"Comrade 102\"\ngit config user.email \"comrade102@protonmail.com\"\n\n# Stage all liberated documents\ngit add .\n\n# Make your liberation commit\ngit commit -m \"Liberation from Google surveillance complete\n\n- Migrated 5 years of meeting minutes\n- Preserved campaign documentation  \n- Removed all metadata and real names\n- Began practice of revolutionary infrastructure\n\nNo more corporate surveillance. No more data harvesting.\nOur organizing, our control.\n\nDeath to digital landlords! \ud83d\udea9\"\n\n# View your revolutionary history\ngit log\n</code></pre>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#step-7-verification-and-cleanup","title":"Step 7: Verification and Cleanup","text":"","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#verify-migration-success","title":"Verify Migration Success","text":"<p>With trusted comrades, confirm:</p> <ul> <li> All critical documents transferred</li> <li> No real names in committed files</li> <li> Folder structure makes sense</li> <li> Git history shows your liberation commit</li> </ul>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#destroy-the-colonial-records","title":"Destroy the Colonial Records","text":"<p>After verification:</p> <ol> <li>Download your Google Takeout archive (keep encrypted backup)</li> <li>Delete files from Google Drive</li> <li>Empty Google Drive trash</li> <li>Remove Google permissions from browser</li> <li>Consider account deletion timeline</li> </ol> <p>Warning: Google keeps deleted data for up to 60 days. Plan accordingly.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#common-problems-and-solutions","title":"Common Problems and Solutions","text":"","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#the-download-is-huge","title":"\"The download is huge!\"","text":"<p>Google bloats exports. Focus on essential organizing documents first. Graphics and videos can migrate separately.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#conversion-broke-formatting","title":"\"Conversion broke formatting!\"","text":"<p>Markdown is simpler than Google Docs. This is good - fancy formatting was corporate distraction. Content matters, not fonts.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#found-real-names-after-committing","title":"\"Found real names after committing!\"","text":"<p>See our guide: Help, I Committed Sensitive Data!</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#comrades-resist-leaving-google","title":"\"Comrades resist leaving Google!\"","text":"<p>Normal. Share this guide. Show them RICO charges. Demonstrate the alternative. Change takes time.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#what-youve-accomplished","title":"What You've Accomplished","text":"<p>You've just: - Removed organizational data from corporate surveillance - Taken first step toward infrastructural autonomy - Practiced security culture concretely - Created foundation for democratic centralism</p> <p>Your documents are no longer evidence. They're revolutionary resources under collective control.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#next-steps","title":"Next Steps","text":"<ol> <li>Learn Git Basics: Your First Revolutionary Commit</li> <li>Set Up Security: Why Discord Democracy Fails</li> <li>Organize Workflows: Meeting Workflows That Work</li> <li>Break Other Chains: Breaking Discord's Chains</li> </ol>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/getting-started/migration-guides/from-google-docs/#remember","title":"Remember","text":"<p>Google made it easy because surveillance is profitable. DRUIDS requires discipline because liberation takes work.</p> <p>Every commit is a blow against digital feudalism. Every push spreads revolutionary infrastructure.</p> <p>\"The master's tools will never dismantle the master's house.\" - Audre Lorde</p> <p>But we can steal the tools, learn their craft, and build our own damn house.</p> <p>Welcome to revolutionary infrastructure, comrade.</p> <p>Backlinks:</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"implement/git/git-command-reference-card/","title":"Git Command Reference Card for Revolutionary Organizers","text":"<p>Print this card and keep it handy. 90% of organizing work uses these commands.</p> <p>Learning Git? See Git Isn't Programming and Git in 7 Commands</p> <p>Want visual guides? Check Visual Git Workflows</p>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#the-essential-seven","title":"THE ESSENTIAL SEVEN","text":"","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#1-git-status","title":"1. <code>git status</code>","text":"<p>See what's happening Bash<pre><code>git status\n# Shows: changed files, staged files, branch info\n</code></pre></p>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#2-git-add","title":"2. <code>git add</code>","text":"<p>Stage changes for commit Bash<pre><code>git add meeting-notes.md          # Add specific file\ngit add .                        # Add all changes\ngit add -p                       # Review changes interactively\n</code></pre></p>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#3-git-commit","title":"3. <code>git commit</code>","text":"<p>Save changes with message Bash<pre><code>git commit -m \"DECIDED[meeting](12-3-0){#97a5aa77d0f1ead3d2929e5a43a9e131}: Launch rent strike\"\ngit commit -am \"Update meeting notes\"  # Add + commit if files already tracked\n</code></pre></p>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#4-git-push","title":"4. <code>git push</code>","text":"<p>Share changes with comrades Bash<pre><code>git push                         # Push to default remote\ngit push origin main            # Push specific branch\ngit push --all                  # Push all branches\n</code></pre></p>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#5-git-pull","title":"5. <code>git pull</code>","text":"<p>Get latest changes Bash<pre><code>git pull                         # Fetch and merge changes\ngit pull --rebase               # Cleaner history (advanced)\n</code></pre></p>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#6-git-log","title":"6. <code>git log</code>","text":"<p>View history Bash<pre><code>git log --oneline               # Compact view\ngit log --grep=\"DECIDED\"        # Search decisions\ngit log --since=\"1 week ago\"    # Recent changes\ngit log --author=\"ComradeAlex\"  # Specific person's commits\n</code></pre></p>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#7-git-clone","title":"7. <code>git clone</code>","text":"<p>Copy repository Bash<pre><code>git clone https://git.server.org/repo.git\ngit clone git@server.org:repo.git  # SSH version\n</code></pre></p>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#daily-workflows","title":"DAILY WORKFLOWS","text":"","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#starting-your-day","title":"Starting Your Day","text":"Bash<pre><code>git pull                        # Get latest changes\ngit status                      # Check your workspace\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#after-a-meeting","title":"After A Meeting","text":"Bash<pre><code>git add meetings/2024-03-21-minutes.md\ngit commit -m \"DOCUMENTED[secretary]: General meeting 2024-03-21\"\ngit push\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#creating-a-proposal","title":"Creating A Proposal","text":"Bash<pre><code>git checkout -b proposal/new-campaign\n# Work on your proposal\ngit add proposal.md\ngit commit -m \"PROPOSED[yourname]: New tenant organizing campaign\"\ngit push origin proposal/new-campaign\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#reviewing-changes","title":"Reviewing Changes","text":"Bash<pre><code>git diff                        # See unstaged changes\ngit diff --staged              # See what will be committed\ngit show                       # See last commit\ngit show HEAD~3                # See 3 commits ago\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#organizing-specific-commands","title":"ORGANIZING-SPECIFIC COMMANDS","text":"","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#find-decisions","title":"Find Decisions","text":"Bash<pre><code>git log --grep=\"DECIDED\" --oneline\ngit log --grep=\"EMERGENCY\" --since=\"1 month ago\"\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#track-campaign-work","title":"Track Campaign Work","text":"Bash<pre><code>git log -- campaigns/rent-strike/\ngit blame campaigns/strategy.md  # Who wrote each line\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#meeting-history","title":"Meeting History","text":"Bash<pre><code>git log -- meetings/ --oneline\ngit show meetings/2024-03-15-minutes.md\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#find-information","title":"Find Information","text":"Bash<pre><code>git grep \"phone banking\"        # Search all files\ngit log -S \"union drive\"        # Find when text was added\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#branches-for-proposals","title":"BRANCHES FOR PROPOSALS","text":"","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#create-new-proposal","title":"Create New Proposal","text":"Bash<pre><code>git checkout -b proposal/description\ngit push -u origin proposal/description\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#switch-between-work","title":"Switch Between Work","text":"Bash<pre><code>git branch                      # List branches\ngit checkout main              # Switch to main\ngit checkout proposal/name     # Switch to proposal\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#merge-approved-proposal","title":"Merge Approved Proposal","text":"Bash<pre><code>git checkout main\ngit merge proposal/description\ngit push\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#emergency-commands","title":"EMERGENCY COMMANDS","text":"","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#undo-last-commit-not-pushed","title":"Undo Last Commit (NOT pushed)","text":"Bash<pre><code>git reset HEAD~1               # Undo commit, keep changes\ngit reset --hard HEAD~1        # Undo commit, discard changes\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#discard-local-changes","title":"Discard Local Changes","text":"Bash<pre><code>git checkout -- file.md        # Discard changes to file\ngit checkout -- .              # Discard all changes\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#emergency-backup","title":"Emergency Backup","text":"Bash<pre><code>git push backup --all --force  # Push everything to backup remote\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#see-deleted-content","title":"See Deleted Content","text":"Bash<pre><code>git log --diff-filter=D --summary  # Find deleted files\ngit show &lt;commit&gt;:path/to/file     # View deleted file\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#commit-message-formats","title":"COMMIT MESSAGE FORMATS","text":"","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#standard-organizing-commits","title":"Standard Organizing Commits","text":"Text Only<pre><code>DECIDED[body](vote){#4ca5d171acaac2c5ca261c97b0d40383}: Description\nORGANIZED[who]: What was organized\nDOCUMENTED[role]: What was documented\nPROPOSED[author]: Proposal title\nEMERGENCY[authority]: Urgent action\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#examples","title":"Examples","text":"Text Only<pre><code>DECIDED[general-meeting](15-2-1){#5c77733d9860e7a16e5bdcca5b192ba3}: Endorse transit strike\nORGANIZED[action-comm]: March route and permits secured\nDOCUMENTED[secretary]: February financial report\nPROPOSED[alice]: Switch to weekly meetings\nEMERGENCY[security]: Rotate all passwords after breach\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#security-reminders","title":"SECURITY REMINDERS","text":"","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#before-every-commit","title":"Before Every Commit","text":"<ul> <li> No real names</li> <li> No addresses</li> <li> No phone numbers</li> <li> No workplace names</li> <li> Only pseudonyms</li> </ul>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#check-what-youre-committing","title":"Check What You're Committing","text":"Bash<pre><code>git diff --staged              # Review before commit\ngit status                     # See all changes\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#common-problems","title":"COMMON PROBLEMS","text":"","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#rejected-push","title":"\"Rejected push\"","text":"Bash<pre><code>git pull                       # Get latest changes first\ngit push                       # Try again\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#merge-conflict","title":"\"Merge conflict\"","text":"Bash<pre><code># Edit conflicted files, then:\ngit add fixed-file.md\ngit commit -m \"Resolved conflict in meeting notes\"\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#wrong-branch","title":"\"Wrong branch\"","text":"Bash<pre><code>git checkout correct-branch    # Switch to right branch\ngit cherry-pick &lt;commit-id&gt;   # Bring commit over\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#learning-more","title":"LEARNING MORE","text":"","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#built-in-help","title":"Built-in Help","text":"Bash<pre><code>git help &lt;command&gt;             # Detailed help\ngit &lt;command&gt; -h              # Quick help\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#practice-commands","title":"Practice Commands","text":"Bash<pre><code>git log --graph --oneline     # Visualize history\ngit reflog                    # See everything you did\ngit stash                     # Temporarily save work\n</code></pre>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-command-reference-card/#quick-wins","title":"QUICK WINS","text":"<p>Your First Week: Focus on status, add, commit, push, pull</p> <p>Week Two: Add log and branches</p> <p>Week Three: Learn diff and grep</p> <p>Month Two: Everything else as needed</p> <p>Remember: Git is a tool for collective liberation. Every commit strengthens our organizational memory. Every push shares power with comrades.</p> <p>Print double-sided and laminate for durability!</p> <p>Ready to practice? Start with Your First Revolutionary Commit</p> <p>Teaching Git? Use our Git Workshop Template</p> <p>Backlinks:</p>","tags":["git","reference","commands","cheatsheet","printable"]},{"location":"implement/git/git-quick-reference/","title":"Git Quick Reference for Organizers","text":"<p>Print this page and keep it near your computer</p> <p>Learning Git? Start with Git Isn't Programming and Git in 7 Commands</p> <p>Need visual guides? Check out Visual Git Workflows</p>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#essential-daily-commands","title":"Essential Daily Commands","text":"","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#starting-work","title":"Starting Work","text":"Bash<pre><code># See current state\ngit status\n\n# Update from collective\ngit pull\n\n# Create new branch for proposal\ngit checkout -b proposals/rent-strike-2025\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#saving-work","title":"Saving Work","text":"Bash<pre><code># Stage all changes\ngit add .\n\n# Stage specific file\ngit add meetings/2025-07-02-minutes.md\n\n# Commit with message\ngit commit -m \"Add July 2 meeting minutes\n\n- Decided on rent strike strategy\n- Assigned organizing tasks\n- Next meeting July 9\"\n\n# Push to share with comrades\ngit push origin branch-name\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#viewing-history","title":"Viewing History","text":"Bash<pre><code># See commit history\ngit log --oneline\n\n# See detailed history\ngit log\n\n# See what changed\ngit diff\n\n# See who wrote what line\ngit blame file.md\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#democratic-centralism-commands","title":"Democratic Centralism Commands","text":"","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#freedom-of-discussion-branches","title":"Freedom of Discussion (Branches)","text":"Bash<pre><code># Create proposal branch\ngit checkout -b proposals/campaign-idea\n\n# Switch between branches\ngit checkout main\ngit checkout proposals/campaign-idea\n\n# List all branches\ngit branch -a\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#unity-of-action-merging","title":"Unity of Action (Merging)","text":"Bash<pre><code># Update branch with main\ngit checkout your-branch\ngit merge main\n\n# After approval, merge to main\ngit checkout main\ngit merge proposals/approved-campaign\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#common-scenarios","title":"Common Scenarios","text":"","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#i-made-a-mistake","title":"\"I made a mistake!\"","text":"Bash<pre><code># Undo last commit but keep changes\ngit reset HEAD~1\n\n# Completely undo last commit\ngit reset --hard HEAD~1\n\n# Fix commit message\ngit commit --amend -m \"Better message\"\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#i-need-to-save-work-temporarily","title":"\"I need to save work temporarily\"","text":"Bash<pre><code># Stash current changes\ngit stash\n\n# Do other work, then restore\ngit stash pop\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#whats-different-from-main","title":"\"What's different from main?\"","text":"Bash<pre><code># See changed files\ngit diff main --name-only\n\n# See actual changes\ngit diff main\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#i-want-to-find-something","title":"\"I want to find something\"","text":"Bash<pre><code># Search all files\ngit grep \"search term\"\n\n# Search history\ngit log --grep=\"keyword\"\n\n# Find when line was added\ngit log -S \"code snippet\"\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#security-commands","title":"Security Commands","text":"","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#identity-management","title":"Identity Management","text":"Bash<pre><code># Check current identity\ngit config user.name\ngit config user.email\n\n# Set identity for repo\ngit config user.name \"Comrade Rosa\"\ngit config user.email \"rosa@protonmail.com\"\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#cleaning-sensitive-data","title":"Cleaning Sensitive Data","text":"Bash<pre><code># Remove file from history (DANGEROUS)\ngit filter-branch --tree-filter \\\n  'rm -f passwords.txt' HEAD\n\n# Better: Use BFG Repo Cleaner\nbfg --delete-files passwords.txt\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#collaborative-workflows","title":"Collaborative Workflows","text":"","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#before-meeting","title":"Before Meeting","text":"Bash<pre><code># Create meeting branch\ngit checkout -b meetings/2025-07-02\n\n# Create minutes file\ntouch meetings/2025-07-02-general.md\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#after-meeting","title":"After Meeting","text":"Bash<pre><code># Add and commit minutes\ngit add meetings/\ngit commit -m \"Add July 2 general meeting minutes\"\n\n# Push for review\ngit push origin meetings/2025-07-02\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#reviewing-proposals","title":"Reviewing Proposals","text":"Bash<pre><code># Fetch all remote branches\ngit fetch --all\n\n# Checkout someone's proposal\ngit checkout origin/proposals/their-idea\n\n# Return to your work\ngit checkout -\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#troubleshooting","title":"Troubleshooting","text":"","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#permission-denied","title":"\"Permission denied\"","text":"Bash<pre><code># Check SSH keys\nssh -T git@github.com\n\n# Generate new SSH key if needed\nssh-keygen -t ed25519 -C \"rosa@protonmail.com\"\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#merge-conflict","title":"\"Merge conflict!\"","text":"Bash<pre><code># See conflicted files\ngit status\n\n# After editing conflicts\ngit add resolved-file.md\ngit commit -m \"Resolve merge conflict\"\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#i-committed-to-wrong-branch","title":"\"I committed to wrong branch\"","text":"Bash<pre><code># Move commit to correct branch\ngit checkout correct-branch\ngit cherry-pick commit-hash\ngit checkout wrong-branch\ngit reset --hard HEAD~1\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#aliases-for-efficiency","title":"Aliases for Efficiency","text":"<p>Add to <code>~/.gitconfig</code>: INI<pre><code>[alias]\n    # Shortcuts\n    st = status\n    co = checkout\n    br = branch\n    cm = commit -m\n\n    # Useful compounds\n    last = log -1 HEAD\n    unstage = reset HEAD --\n    visual = log --graph --oneline --all\n\n    # Revolutionary aliases\n    propose = checkout -b\n    decide = merge\n    remember = log --grep\n</code></pre></p>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#git-philosophy-for-organizers","title":"Git Philosophy for Organizers","text":"Git Concept Organizing Parallel Repository Collective memory Commit Decision point Branch Proposal/Discussion Merge Democratic decision History Accountability Blame Not punishment - understanding","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#emergency-contacts","title":"Emergency Contacts","text":"Bash<pre><code># If everything breaks\ngit reflog  # Shows all actions\ngit reset --hard HEAD@{1}  # Go back one step\n\n# Nuclear option - fresh start\ncd ..\nmv repo repo-backup\ngit clone [repository-url]\n</code></pre>","tags":["reference","git","commands","printable"]},{"location":"implement/git/git-quick-reference/#remember","title":"Remember","text":"<ul> <li>Commit early, commit often</li> <li>Write meaningful commit messages</li> <li>Pull before starting work</li> <li>Push after completing work</li> <li>Branches are free - use them</li> <li>History is permanent - be thoughtful</li> <li>When confused, ask comrades</li> </ul> <p>\"In Git, as in revolution, many branches lead to strong roots.\"</p> <p>Print double-sided and laminate for durability</p> <p>See also: Your First Revolutionary Commit</p> <p>Want a pocket reference? Get the Git Command Reference Card</p> <p>Teaching others? Use our Git Workshop Template</p> <p>Backlinks:</p>","tags":["reference","git","commands","printable"]},{"location":"implement/mkdocs/analytics-privacy-guide/","title":"Analytics &amp; Privacy Setup Guide","text":"<p>Learn how to implement analytics while respecting user privacy and complying with GDPR and other privacy regulations.</p>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#overview","title":"Overview","text":"<p>This guide covers:</p> <ul> <li>\ud83d\udd0d Google Analytics 4 setup with privacy controls</li> <li>\ud83d\udee1\ufe0f Privacy plugin configuration for GDPR compliance</li> <li>\ud83c\udf6a Cookie consent management</li> <li>\ud83d\udcca Feedback collection with user consent</li> <li>\ud83d\udd12 External asset privacy protection</li> </ul>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#google-analytics-4-setup","title":"Google Analytics 4 Setup","text":"","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#1-basic-configuration","title":"1. Basic Configuration","text":"YAML<pre><code># mkdocs.yml\nextra:\n  analytics:\n    provider: google\n    property: !ENV [GOOGLE_ANALYTICS_KEY, '']\n    feedback:\n      title: Was this page helpful?\n      ratings:\n        - icon: material/emoticon-happy-outline\n          name: This page was helpful\n          data: 1\n          note: Thanks for your feedback!\n        - icon: material/emoticon-sad-outline\n          name: This page could be improved\n          data: 0\n          note: &gt;-\n            Thanks for your feedback! Help us improve by\n            &lt;a href=\"https://github.com/yourusername/repo/issues/new\" target=\"_blank\"&gt;\n            opening an issue&lt;/a&gt;.\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#2-environment-variables","title":"2. Environment Variables","text":"<p>Set your Google Analytics property ID:</p> Bash<pre><code># .envrc\nexport GOOGLE_ANALYTICS_KEY=\"G-XXXXXXXXXX\"\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#3-privacy-enhanced-analytics","title":"3. Privacy-Enhanced Analytics","text":"JavaScript<pre><code>// Custom analytics with privacy controls\nwindow.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\n\n// Initialize with privacy settings\ngtag('js', new Date());\ngtag('config', 'G-XXXXXXXXXX', {\n  // Privacy-enhanced settings\n  'anonymize_ip': true,\n  'allow_google_signals': false,\n  'allow_ad_personalization_signals': false,\n  'cookie_expires': 63072000, // 2 years\n  'cookie_update': true,\n  'cookie_flags': 'SameSite=None;Secure'\n});\n\n// Respect user consent\ndocument.addEventListener('DOMContentLoaded', function() {\n  const consent = __md_get(\"__consent\");\n  if (consent &amp;&amp; consent.analytics) {\n    gtag('consent', 'update', {\n      'analytics_storage': 'granted'\n    });\n  } else {\n    gtag('consent', 'default', {\n      'analytics_storage': 'denied'\n    });\n  }\n});\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#privacy-plugin-configuration","title":"Privacy Plugin Configuration","text":"","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#1-basic-privacy-setup","title":"1. Basic Privacy Setup","text":"YAML<pre><code># mkdocs.yml\nplugins:\n  - material/privacy:\n      enabled: !ENV [CI, false]\n      external_assets: report\n      external_assets_dir: assets/external\n      external_links: true\n      external_links_attr_map:\n        target: _blank\n        rel: noopener\n      external_links_noopener: true\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#2-external-assets-management","title":"2. External Assets Management","text":"<p>The privacy plugin automatically:</p> <ul> <li>\ud83d\udce5 Downloads external assets (fonts, stylesheets, scripts)</li> <li>\ud83d\udd12 Self-hosts them to prevent tracking</li> <li>\ud83d\udcca Reports external dependencies for audit</li> <li>\ud83d\udeab Blocks unauthorized requests to external services</li> </ul>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#3-external-links-protection","title":"3. External Links Protection","text":"YAML<pre><code>plugins:\n  - material/privacy:\n      external_links: true\n      external_links_attr_map:\n        target: _blank\n        rel: noopener nofollow\n        class: external-link\n      external_links_noopener: true\n</code></pre> <p>This automatically adds security attributes to external links:</p> <ul> <li><code>target=\"_blank\"</code> - Opens in new tab</li> <li><code>rel=\"noopener\"</code> - Prevents window.opener access</li> <li><code>rel=\"nofollow\"</code> - Prevents SEO link juice transfer</li> </ul>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#cookie-consent-management","title":"Cookie Consent Management","text":"","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#1-gdpr-compliant-consent","title":"1. GDPR-Compliant Consent","text":"YAML<pre><code>extra:\n  consent:\n    title: Cookie consent\n    description: &gt;-\n      We use cookies to recognize your repeated visits and preferences, as well\n      as to measure the effectiveness of our documentation and whether users\n      find what they're searching for. With your consent, you're helping us to\n      make our documentation better.\n    actions:\n      - accept\n      - manage\n      - reject\n    cookies:\n      analytics:\n        name: Google Analytics\n        checked: false\n        description: &gt;-\n          Google Analytics helps us understand how visitors interact with our site.\n          This data is anonymized and helps us improve the user experience.\n      github:\n        name: GitHub\n        checked: true\n        description: &gt;-\n          GitHub integration enables features like edit links, issue reporting,\n          and discussions. This is essential for site functionality.\n      comments:\n        name: Comments (Giscus)\n        checked: false\n        description: &gt;-\n          Giscus enables commenting functionality through GitHub Discussions.\n          This requires GitHub authentication and stores your comments publicly.\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#2-consent-categories","title":"2. Consent Categories","text":"","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#essential-cookies-always-enabled","title":"Essential Cookies (Always Enabled)","text":"<ul> <li>GitHub integration - Required for edit links and issue reporting</li> <li>Site functionality - Navigation, search, theme preferences</li> <li>Security - CSRF protection, session management</li> </ul>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#optional-cookies-user-choice","title":"Optional Cookies (User Choice)","text":"<ul> <li>Analytics - Google Analytics for usage statistics</li> <li>Comments - Giscus for discussion functionality</li> <li>Social features - Social sharing and embeds</li> </ul>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#3-custom-consent-handling","title":"3. Custom Consent Handling","text":"JavaScript<pre><code>// Custom consent management\ndocument.addEventListener('DOMContentLoaded', function() {\n  // Listen for consent changes\n  document.addEventListener('consent', function(e) {\n    const consent = e.detail;\n\n    // Handle analytics consent\n    if (consent.analytics) {\n      enableAnalytics();\n    } else {\n      disableAnalytics();\n    }\n\n    // Handle comments consent\n    if (consent.comments) {\n      enableComments();\n    } else {\n      disableComments();\n    }\n  });\n});\n\nfunction enableAnalytics() {\n  gtag('consent', 'update', {\n    'analytics_storage': 'granted'\n  });\n}\n\nfunction disableAnalytics() {\n  gtag('consent', 'update', {\n    'analytics_storage': 'denied'\n  });\n}\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#feedback-collection","title":"Feedback Collection","text":"","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#1-privacy-aware-feedback","title":"1. Privacy-Aware Feedback","text":"YAML<pre><code>extra:\n  analytics:\n    feedback:\n      title: Was this page helpful?\n      ratings:\n        - icon: material/emoticon-happy-outline\n          name: This page was helpful\n          data: 1\n          note: &gt;-\n            Thanks for your feedback! This helps us improve our documentation.\n        - icon: material/emoticon-sad-outline\n          name: This page could be improved\n          data: 0\n          note: &gt;-\n            Thanks for your feedback! Help us improve this page by\n            &lt;a href=\"https://github.com/yourusername/repo/issues/new\" target=\"_blank\"&gt;\n            opening an issue&lt;/a&gt; or leaving a comment below.\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#2-anonymous-feedback-collection","title":"2. Anonymous Feedback Collection","text":"JavaScript<pre><code>// Collect feedback without personal data\nfunction submitFeedback(rating, page) {\n  // Only collect if analytics consent is given\n  const consent = __md_get(\"__consent\");\n  if (consent &amp;&amp; consent.analytics) {\n    gtag('event', 'page_feedback', {\n      'rating': rating,\n      'page_path': page,\n      'timestamp': Date.now()\n    });\n  }\n\n  // Always show thank you message\n  showFeedbackThankYou();\n}\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#data-protection-measures","title":"Data Protection Measures","text":"","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#1-ip-anonymization","title":"1. IP Anonymization","text":"JavaScript<pre><code>// Google Analytics with IP anonymization\ngtag('config', 'G-XXXXXXXXXX', {\n  'anonymize_ip': true,\n  'allow_google_signals': false,\n  'allow_ad_personalization_signals': false\n});\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#2-data-retention","title":"2. Data Retention","text":"YAML<pre><code># Set appropriate data retention periods\nextra:\n  analytics:\n    # Configure in Google Analytics dashboard:\n    # - User data retention: 14 months\n    # - Event data retention: 14 months\n    # - Reset on new activity: Yes\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#3-user-rights","title":"3. User Rights","text":"<p>Provide mechanisms for users to:</p> <ul> <li>Access their data - Link to Google Analytics data export</li> <li>Delete their data - Instructions for opting out</li> <li>Correct their data - Contact information for data issues</li> <li>Port their data - Data export capabilities</li> </ul>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#privacy-policy-integration","title":"Privacy Policy Integration","text":"","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#1-required-disclosures","title":"1. Required Disclosures","text":"<p>Your privacy policy should include:</p> Markdown<pre><code>## Data Collection\n\nWe collect the following data to improve our documentation:\n\n### Analytics Data (Optional)\n- **What we collect**: Page views, session duration, referrer information\n- **Why we collect it**: To understand how users interact with our documentation\n- **How long we keep it**: 14 months, then automatically deleted\n- **Your control**: You can opt out via cookie settings\n\n### Comments Data (Optional)\n- **What we collect**: GitHub username, comment content, timestamps\n- **Why we collect it**: To enable community discussions\n- **How long we keep it**: Until you delete your comments\n- **Your control**: You can delete comments anytime via GitHub\n\n### Essential Data (Required)\n- **What we collect**: Theme preferences, navigation state\n- **Why we collect it**: Essential site functionality\n- **How long we keep it**: Until you clear browser data\n- **Your control**: Clear browser data to remove\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#2-contact-information","title":"2. Contact Information","text":"Markdown<pre><code>## Data Protection Contact\n\nFor questions about data protection:\n- **Email**: privacy@yoursite.com\n- **Data Protection Officer**: dpo@yoursite.com\n- **Postal Address**: [Your address for GDPR compliance]\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#compliance-checklist","title":"Compliance Checklist","text":"","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#gdpr-compliance","title":"GDPR Compliance","text":"<ul> <li> Lawful basis for processing clearly stated</li> <li> Consent mechanism implemented and documented</li> <li> Data minimization - only collect necessary data</li> <li> Purpose limitation - use data only for stated purposes</li> <li> Storage limitation - automatic data deletion after retention period</li> <li> User rights - access, rectification, erasure, portability</li> <li> Privacy by design - privacy controls built into the system</li> <li> Data protection impact assessment completed if required</li> </ul>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#technical-measures","title":"Technical Measures","text":"<ul> <li> IP anonymization enabled in Google Analytics</li> <li> External assets self-hosted via privacy plugin</li> <li> Secure cookies with appropriate flags</li> <li> External links protected with noopener/nofollow</li> <li> Consent management properly implemented</li> <li> Data encryption in transit and at rest</li> </ul>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#documentation","title":"Documentation","text":"<ul> <li> Privacy policy comprehensive and up-to-date</li> <li> Cookie policy explains all cookies used</li> <li> Data processing records maintained</li> <li> User guides for exercising data rights</li> <li> Incident response plan for data breaches</li> </ul>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#testing-privacy-controls","title":"Testing Privacy Controls","text":"","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#1-consent-testing","title":"1. Consent Testing","text":"Bash<pre><code># Test consent functionality\n# 1. Visit site in incognito mode\n# 2. Verify consent banner appears\n# 3. Test \"Accept All\" functionality\n# 4. Test \"Reject All\" functionality\n# 5. Test \"Manage\" individual preferences\n# 6. Verify analytics only loads with consent\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#2-privacy-plugin-testing","title":"2. Privacy Plugin Testing","text":"Bash<pre><code># Test external asset handling\nmkdocs build --verbose\n\n# Check for external assets report\ncat site/assets/external/report.txt\n\n# Verify no external requests in browser dev tools\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#3-analytics-testing","title":"3. Analytics Testing","text":"JavaScript<pre><code>// Test analytics consent integration\nconsole.log('Consent state:', __md_get(\"__consent\"));\n\n// Test feedback submission\n// Should only send to GA if analytics consent given\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#troubleshooting","title":"Troubleshooting","text":"","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#common-issues","title":"Common Issues","text":"<p>Consent banner not appearing:</p> YAML<pre><code># Ensure consent is properly configured\nextra:\n  consent:\n    title: Cookie consent  # Required\n    description: \"...\"     # Required\n    actions: [accept, reject]  # At least these two\n</code></pre> <p>Analytics not loading:</p> Bash<pre><code># Check environment variable\necho $GOOGLE_ANALYTICS_KEY\n\n# Verify consent state in browser console\n__md_get(\"__consent\")\n</code></pre> <p>External assets not downloading:</p> YAML<pre><code># Check privacy plugin configuration\nplugins:\n  - material/privacy:\n      enabled: true  # Must be enabled\n      external_assets: report  # Must be set\n</code></pre>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#best-practices","title":"Best Practices","text":"","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#1-privacy-by-design","title":"1. Privacy by Design","text":"<ul> <li>Minimize data collection - only collect what you need</li> <li>Default to privacy - require opt-in for non-essential features</li> <li>Transparent communication - clearly explain data usage</li> <li>User control - provide easy opt-out mechanisms</li> </ul>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#2-performance-considerations","title":"2. Performance Considerations","text":"<ul> <li>Self-host assets to reduce external dependencies</li> <li>Lazy load analytics scripts until consent is given</li> <li>Optimize consent UI for fast loading and interaction</li> <li>Cache consent decisions to avoid repeated prompts</li> </ul>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/analytics-privacy-guide/#3-legal-compliance","title":"3. Legal Compliance","text":"<ul> <li>Regular audits of data collection practices</li> <li>Update policies when practices change</li> <li>Monitor regulations for changes in requirements</li> <li>Document decisions for compliance evidence</li> </ul> <p>Privacy and analytics setup requires careful balance between insights and user privacy. Always err on the side of protecting user privacy.</p> <p>Backlinks:</p>","tags":["analytics","privacy","gdpr","configuration","google-analytics"]},{"location":"implement/mkdocs/configuration-reference/","title":"Configuration Reference","text":"<p>This page provides a complete reference for all configuration options used in our MkDocs setup.</p>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#core-configuration-mkdocsyml","title":"Core Configuration (mkdocs.yml)","text":"","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#site-information","title":"Site Information","text":"YAML<pre><code>site_name: DRUIDS Wiki\nsite_description: Democratic Revolutionary Unified Information &amp; Documentation System\nsite_author: KS Socialist Book Club\nsite_url: https://druids.kssocialistbookclub.com\n\n# Repository\nrepo_name: ks-sbc/DRUIDS\nrepo_url: https://github.com/ks-sbc/DRUIDS\nedit_uri: edit/main/docs/\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#theme-configuration","title":"Theme Configuration","text":"YAML<pre><code>theme:\n  name: material\n  custom_dir: overrides\n  favicon: assets/favicons/favicon.ico\n  logo: assets/images/logo.svg\n\n  # Color palette\n  palette:\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      primary: custom\n      accent: custom\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#features","title":"Features","text":"<p>All available Material theme features:</p> YAML<pre><code>theme:\n  features:\n    # Announcements\n    - announce.dismiss\n\n    # Content features\n    - content.action.edit\n    - content.action.view\n    - content.code.annotate\n    - content.code.copy\n    - content.code.select\n    - content.footnote.tooltips\n    - content.tabs.link\n    - content.tooltips\n\n    # Header\n    - header.autohide\n\n    # Navigation\n    - navigation.expand\n    - navigation.footer\n    - navigation.indexes\n    - navigation.instant\n    - navigation.instant.prefetch\n    - navigation.instant.progress\n    - navigation.path\n    - navigation.prune\n    - navigation.sections\n    - navigation.tabs\n    - navigation.tabs.sticky\n    - navigation.top\n    - navigation.tracking\n\n    # Search\n    - search.highlight\n    - search.share\n    - search.suggest\n\n    # Table of contents\n    - toc.follow\n    - toc.integrate\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#plugins","title":"Plugins","text":"YAML<pre><code>plugins:\n  # Search functionality\n  - search\n\n  # Obsidian compatibility\n  - pub-obsidian:\n      obsidian_dir: .obsidian\n      templates_dir: _templates\n      backlinks:\n        enabled: true\n      callouts:\n        enabled: true\n        indentation: spaces\n      comments:\n        enabled: false\n      links:\n        wikilinks_enabled: true\n\n  # Git information\n  - git-revision-date-localized:\n      enable_creation_date: true\n      type: timeago\n      timezone: UTC\n      locale: en\n      fallback_to_build_date: false\n\n  # Content tagging\n  - tags\n\n  # Blog (when enabled)\n  # - blog:\n  #     enabled: true\n  #     blog_dir: blog\n  #     post_dir: posts\n  #     categories: true\n  #     archive: true\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#markdown-extensions","title":"Markdown Extensions","text":"YAML<pre><code>markdown_extensions:\n  # Standard extensions\n  - abbr\n  - admonition\n  - attr_list\n  - def_list\n  - footnotes\n  - md_in_html\n  - meta\n\n  # Table of contents\n  - toc:\n      permalink: true\n      title: On this page\n      toc_depth: 2-3\n\n  # PyMdown extensions\n  - pymdownx.arithmatex:\n      generic: true\n  - pymdownx.betterem:\n      smart_enable: all\n  - pymdownx.caret\n  - pymdownx.critic\n  - pymdownx.details\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.keys\n  - pymdownx.mark\n  - pymdownx.smartsymbols\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n  - pymdownx.tabbed:\n      alternate_style: true\n  - pymdownx.tasklist:\n      custom_checkbox: true\n  - pymdownx.tilde\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#extra-configuration","title":"Extra Configuration","text":"","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#javascript-and-css","title":"JavaScript and CSS","text":"YAML<pre><code>extra_javascript:\n  - assets/js/mathjax.js\n  - assets/js/giscus.js\n  - https://unpkg.com/mathjax@3/es5/tex-mml-chtml.js\n\nextra_css:\n  - assets/css/druids-theme.css\n  - assets/css/druids-layout.css\n  - assets/css/druids-components.css\n  - assets/css/druids-utilities.css\n  - assets/css/giscus.css\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#comments-giscus","title":"Comments (Giscus)","text":"YAML<pre><code>extra:\n  comments:\n    enabled: true\n    provider: giscus\n    giscus:\n      repo: ks-sbc/DRUIDS\n      repo-id: R_kgDOOsxCLA\n      category: General\n      category-id: DIC_kwDOOsxCLM4CsOJY\n      mapping: pathname\n      strict: 0\n      reactions: 1\n      emit-metadata: 0\n      input-position: top\n      theme: preferred_color_scheme\n      lang: en\n      loading: lazy\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#analytics-optional","title":"Analytics (Optional)","text":"YAML<pre><code>extra:\n  analytics:\n    provider: google\n    property: !ENV [GOOGLE_ANALYTICS_KEY, \"\"]\n    feedback:\n      title: Was this page helpful?\n      ratings:\n        - icon: material/emoticon-happy-outline\n          name: This page was helpful\n          data: 1\n          note: Thanks for your feedback!\n        - icon: material/emoticon-sad-outline\n          name: This page could be improved\n          data: 0\n          note: Thanks! Help us improve by filing an issue.\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#social-links","title":"Social Links","text":"YAML<pre><code>extra:\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/ks-sbc/DRUIDS\n      name: GitHub Repository\n    - icon: fontawesome/brands/mastodon\n      link: https://kolektiva.social/@kssbc\n      name: Follow on Mastodon\n    - icon: fontawesome/solid/rss\n      link: /feed_rss_created.xml\n      name: RSS Feed\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#environment-variables","title":"Environment Variables","text":"<p>Supported environment variables:</p> Bash<pre><code># Giscus configuration\nGISCUS_REPO_ID=\"your-repo-id\"\nGISCUS_CATEGORY_ID=\"your-category-id\"\n\n# Analytics (optional)\nGOOGLE_ANALYTICS_KEY=\"your-analytics-key\"\n\n# Build environment\nCI=true  # Disables certain features in CI\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#file-structure","title":"File Structure","text":"<p>Required directory structure:</p> Text Only<pre><code>project/\n\u251c\u2500\u2500 mkdocs.yml                  # Main configuration\n\u251c\u2500\u2500 dependencies/\n\u2502   \u251c\u2500\u2500 requirements.txt       # Python dependencies\n\u2502   \u2514\u2500\u2500 package.json          # Node.js dependencies\n\u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 pyproject.toml        # Python tooling config\n\u2502   \u2514\u2500\u2500 .prettierrc.json      # Code formatting config\n\u251c\u2500\u2500 justfile                   # Task automation\n\u251c\u2500\u2500 docs/                      # Documentation content\n\u2502   \u251c\u2500\u2500 index.md              # Homepage\n\u2502   \u251c\u2500\u2500 assets/               # Static assets\n\u2502   \u2502   \u251c\u2500\u2500 css/              # Custom CSS\n\u2502   \u2502   \u251c\u2500\u2500 js/               # Custom JavaScript\n\u2502   \u2502   \u251c\u2500\u2500 images/           # Images\n\u2502   \u2502   \u2514\u2500\u2500 fonts/            # Custom fonts\n\u2502   \u2514\u2500\u2500 website/              # This documentation\n\u251c\u2500\u2500 overrides/                 # Theme overrides\n\u2502   \u2514\u2500\u2500 partials/             # Template overrides\n\u2514\u2500\u2500 tests/                    # Validation scripts\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#validation","title":"Validation","text":"<p>Use these commands to validate configuration:</p> Bash<pre><code># Validate YAML syntax\njust validate-yaml\n\n# Validate MkDocs configuration\njust validate-config\n\n# Run all validations\njust validate\n\n# Test build\njust build --strict\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#common-customizations","title":"Common Customizations","text":"","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#custom-colors","title":"Custom Colors","text":"<p>In <code>docs/assets/css/druids-theme.css</code>:</p> CSS<pre><code>:root {\n  --md-primary-fg-color: #your-color;\n  --md-accent-fg-color: #your-accent;\n}\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#custom-fonts","title":"Custom Fonts","text":"CSS<pre><code>:root {\n  --md-text-font: \"Your Font\", sans-serif;\n  --md-code-font: \"Your Code Font\", monospace;\n}\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#navigation-structure","title":"Navigation Structure","text":"YAML<pre><code>nav:\n  - Home: index.md\n  - Documentation:\n      - Getting Started: getting-started.md\n      - User Guide: user-guide.md\n  - API Reference: api.md\n  - Blog: blog/index.md\n</code></pre>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#best-practices","title":"Best Practices","text":"<ol> <li>Use environment variables for sensitive data</li> <li>Enable strict mode for production builds</li> <li>Validate configuration before deploying</li> <li>Test locally with <code>mkdocs serve</code></li> <li>Keep plugins minimal for performance</li> <li>Document customizations for maintainability</li> </ol>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/configuration-reference/#troubleshooting","title":"Troubleshooting","text":"<p>See the Validation Guide for common issues and solutions.</p> <p>Backlinks:</p>","tags":["configuration","reference","mkdocs"]},{"location":"implement/mkdocs/css/","title":"CSS Aesthetic Reference - DRUIDS MkDocs Theme","text":"<p>This document extracts and documents all aesthetic properties from the CSS files in <code>docs/assets/css/</code>.</p>"},{"location":"implement/mkdocs/css/#1-color-schemes","title":"1. Color Schemes","text":""},{"location":"implement/mkdocs/css/#primary-color-palettes","title":"Primary Color Palettes","text":""},{"location":"implement/mkdocs/css/#druids-theme-colors-druids-themecss-druids-componentscss-druids-layoutcss","title":"DRUIDS Theme Colors (<code>druids-theme.css</code>, <code>druids-components.css</code>, <code>druids-layout.css</code>)","text":"CSS<pre><code>/* Primary Colors */\n--druids-orange: #FF6B35;        /* Neon orange - primary accent */\n--druids-rust: #B84A14;          /* Darker orange for headers */\n--druids-cyan: #00D9FF;          /* Bright cyan - links, highlights */\n--druids-dark-blue: #0A1628;     /* Deep blue for code blocks */\n\n/* Accent Colors */\n--druids-purple: #BD10E0;        /* Bright purple accent */\n--druids-pink: #FF006E;          /* Hot pink for warnings */\n--druids-teal: #00CFC1;          /* Teal accent */\n--druids-magenta: #FF00FF;       /* Magenta for glows */\n--druids-green: #00FF41;         /* Cyber green */\n--druids-yellow: #FFD23F;        /* Highlight yellow */\n\n/* Background Colors */\n--druids-bg-primary: #0A0E27;    /* Deep space black */\n--druids-bg-secondary: #0D1117;  /* Slightly lighter */\n--druids-bg-tertiary: #141933;   /* Code backgrounds */\n--druids-bg-code: rgba(10, 22, 40, 0.6);\n--druids-bg-hover: rgba(0, 217, 255, 0.1);\n\n/* Text Colors */\n--druids-text-primary: #E0E0E0;\n--druids-text-bright: #FFFFFF;\n--druids-text-muted: #B0B0B0;\n--druids-text-code: #00D9FF;\n</code></pre>"},{"location":"implement/mkdocs/css/#cyberpunk-guerrilla-colors-cyberpunk-guerrillacss","title":"Cyberpunk Guerrilla Colors (<code>cyberpunk-guerrilla.css</code>)","text":"CSS<pre><code>/* Extended color variations */\n--druids-cyber-dark: #0a0e27;\n--druids-cyber-darker: #050714;\n--druids-cyber-darkest: #020309;\n--druids-cyber-blue: #1a237e;\n--druids-cyber-blue-light: #283593;\n\n/* Neon variations with alpha */\n--druids-neon-orange-bright: #ff8c42;\n--druids-neon-orange-glow: #ff451f;\n--druids-cyber-green-dark: #00cc33;\n--druids-cyber-green-glow: #00ff4180;\n--druids-trans-pink-soft: #ff69b4;\n--druids-trans-pink-glow: #ff149380;\n--druids-cyber-cyan-dark: #00cccc;\n--druids-cyber-cyan-glow: #00ffff80;\n</code></pre>"},{"location":"implement/mkdocs/css/#queer-mandalorian-colors-queer-mandaloriancss","title":"Queer Mandalorian Colors (<code>queer-mandalorian.css</code>)","text":"CSS<pre><code>/* Trans pride inspired inverted colors */\n--qm-primary-orange: #FF6B35;    /* Inverted light blue */\n--qm-rust: #B84A14;              /* H1 headers */\n--qm-cyan: #00D9FF;              /* Bright accent */\n--qm-purple: #BD10E0;            /* Bright accent */\n--qm-pink: #FF006E;              /* Hot pink accent */\n--qm-teal: #00CFC1;              /* Inverted pink */\n--qm-magenta-glow: #FF00FF;      /* Glitch effects */\n</code></pre>"},{"location":"implement/mkdocs/css/#giscus-dark-theme-giscus-druidscss","title":"Giscus Dark Theme (<code>giscus-druids.css</code>)","text":"CSS<pre><code>--color-canvas-default: #0f172a;\n--color-canvas-subtle: #1e293b;\n--color-fg-default: #e2e8f0;\n--color-accent-fg: #34d399;\n--color-accent-emphasis: #10b981;\n</code></pre>"},{"location":"implement/mkdocs/css/#gradient-definitions","title":"Gradient Definitions","text":"CSS<pre><code>/* Primary gradients */\n--druids-gradient-primary: linear-gradient(135deg, var(--druids-bg-primary) 0%, var(--druids-bg-secondary) 100%);\n--druids-gradient-accent: linear-gradient(135deg, var(--druids-orange) 0%, var(--druids-pink) 100%);\n--druids-gradient-cyber: linear-gradient(90deg, var(--druids-cyan) 0%, var(--druids-purple) 100%);\n--druids-gradient-subtle: linear-gradient(180deg, rgba(255, 255, 255, 0.05) 0%, transparent 100%);\n\n/* Complex mesh gradients */\n--druids-bg-mesh: \n  radial-gradient(at 40% 20%, #1a237e33 0px, transparent 50%),\n  radial-gradient(at 80% 0%, #ff149333 0px, transparent 50%),\n  radial-gradient(at 0% 50%, #00ff4133 0px, transparent 50%),\n  radial-gradient(at 80% 50%, #ff6b3533 0px, transparent 50%),\n  radial-gradient(at 0% 100%, #00ffff33 0px, transparent 50%);\n\n/* Text gradients */\nh1: linear-gradient(90deg, var(--druids-cyber-cyan) 0%, var(--druids-trans-pink) 50%, var(--druids-neon-orange) 100%);\n</code></pre>"},{"location":"implement/mkdocs/css/#color-combinations","title":"Color Combinations","text":"<ul> <li>Primary/Secondary: Cyan (#00D9FF) + Orange (#FF6B35)</li> <li>Warning/Danger: Orange (#FF6B35) + Pink (#FF006E)</li> <li>Success/Info: Green (#00FF41) + Cyan (#00D9FF)</li> <li>Code blocks: Cyan borders with dark blue backgrounds</li> <li>Tables: Orange gradient backgrounds with cyan headers</li> </ul>"},{"location":"implement/mkdocs/css/#2-visual-effects","title":"2. Visual Effects","text":""},{"location":"implement/mkdocs/css/#box-shadows","title":"Box Shadows","text":"CSS<pre><code>/* Standard shadows */\nbox-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);  /* Small */\nbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);  /* Medium */\nbox-shadow: 0 8px 16px rgba(0, 0, 0, 0.4); /* Large */\n\n/* Colored glow shadows */\nbox-shadow: 0 0 20px var(--druids-cyber-cyan-glow);      /* Cyan glow */\nbox-shadow: 0 0 15px var(--druids-neon-orange-glow);     /* Orange glow */\nbox-shadow: 0 0 15px var(--druids-trans-pink-glow);      /* Pink glow */\nbox-shadow: 0 4px 12px rgba(0, 217, 255, 0.3);          /* Cyan shadow */\nbox-shadow: 0 4px 12px rgba(255, 107, 53, 0.3);         /* Orange shadow */\n\n/* Complex shadows */\n.druids-hero-banner:\n  inset 0 0 100px rgba(255, 107, 53, 0.2),\n  0 0 50px rgba(255, 0, 255, 0.3);\n\n/* Button hover shadows */\nbox-shadow: 0 6px 20px rgba(0, 217, 255, 0.5);\ntransform: translateY(-2px);\n</code></pre>"},{"location":"implement/mkdocs/css/#text-shadows","title":"Text Shadows","text":"CSS<pre><code>/* Standard text shadows */\ntext-shadow: 0 0 5px currentColor, 0 0 10px currentColor;\ntext-shadow: 0 0 10px var(--druids-cyber-cyan-glow);\ntext-shadow: 0 0 8px rgba(255, 107, 53, 0.5);\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n\n/* Glitch effect shadows */\ntext-shadow: 2px 2px 0 var(--qm-cyan), -2px -2px 0 var(--qm-magenta-glow);\n\n/* Hero banner complex shadow */\ntext-shadow: \n  0 0 20px rgba(255, 107, 53, 0.8),\n  0 0 40px rgba(255, 107, 53, 0.5),\n  2px 2px 4px rgba(0, 0, 0, 0.9);\n</code></pre>"},{"location":"implement/mkdocs/css/#glow-effects","title":"Glow Effects","text":"CSS<pre><code>/* Filter-based glows */\nfilter: drop-shadow(0 0 10px var(--druids-cyan));\n\n/* Sunflower multi-layer glow */\nfilter: \n  drop-shadow(0 0 30px #FFD700)\n  drop-shadow(0 0 50px #FF6B35)\n  drop-shadow(0 0 70px #FF00FF)\n  drop-shadow(0 0 90px rgba(255, 215, 0, 0.5))\n  saturate(2) brightness(1.3) contrast(1.2);\n\n/* Utility glow classes */\n.glow-cyan: box-shadow: 0 0 20px rgba(0, 217, 255, 0.5);\n.glow-orange: box-shadow: 0 0 20px rgba(255, 107, 53, 0.5);\n</code></pre>"},{"location":"implement/mkdocs/css/#blur-effects","title":"Blur Effects","text":"CSS<pre><code>backdrop-filter: blur(10px);  /* Header blur */\nbackdrop-filter: blur(5px);   /* Card blur */\n</code></pre>"},{"location":"implement/mkdocs/css/#transitions-and-animations","title":"Transitions and Animations","text":""},{"location":"implement/mkdocs/css/#transitions","title":"Transitions","text":"CSS<pre><code>transition: all 0.2s ease;\ntransition: all 0.3s ease;\ntransition: color 0.2s ease;\ntransition: width 0.3s ease;\ntransition: transform 0.3s ease;\n</code></pre>"},{"location":"implement/mkdocs/css/#animations","title":"Animations","text":"CSS<pre><code>/* Pulse animation */\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.5; }\n}\n\n/* Glow animation */\n@keyframes glow {\n  0%, 100% { text-shadow: 0 0 5px currentColor, 0 0 10px currentColor; }\n  50% { text-shadow: 0 0 10px currentColor, 0 0 20px currentColor, 0 0 30px currentColor; }\n}\n\n/* Glitch animation */\n@keyframes glitch {\n  0%, 100% { text-shadow: 2px 2px 0 var(--qm-cyan), -2px -2px 0 var(--qm-magenta-glow); }\n  25% { text-shadow: -2px 2px 0 var(--qm-cyan), 2px -2px 0 var(--qm-magenta-glow); }\n  50% { text-shadow: 2px -2px 0 var(--qm-cyan), -2px 2px 0 var(--qm-magenta-glow); }\n  75% { text-shadow: -2px -2px 0 var(--qm-cyan), 2px 2px 0 var(--qm-magenta-glow); }\n}\n\n/* Scan line animation */\n@keyframes scan {\n  0%, 100% { transform: translateY(0); opacity: 1; }\n  50% { transform: translateY(100px); opacity: 0; }\n}\n\n/* Grid movement */\n@keyframes grid-move {\n  0% { background-position: -1px -1px; }\n  100% { background-position: 49px 49px; }\n}\n\n/* Stripe slide */\n@keyframes stripe-slide {\n  0% { transform: translateX(0); }\n  100% { transform: translateX(40px); }\n}\n\n/* Hero pulse */\n@keyframes hero-pulse {\n  0%, 100% { transform: scale(1) rotate(0deg); }\n  25% { transform: scale(1.05) rotate(5deg); }\n  50% { transform: scale(1.1) rotate(-5deg); }\n  75% { transform: scale(1.05) rotate(3deg); }\n}\n\n/* Text glow animation */\n@keyframes text-glow {\n  from { text-shadow: 0 0 20px rgba(255, 107, 53, 0.8), 0 0 40px rgba(255, 107, 53, 0.5); }\n  to { text-shadow: 0 0 30px rgba(255, 107, 53, 1), 0 0 60px rgba(255, 107, 53, 0.7), 0 0 80px rgba(255, 0, 255, 0.4); }\n}\n\n/* Subtle glitch */\n@keyframes subtle-glitch {\n  0%, 100% { transform: translateX(0); }\n  20% { transform: translateX(-1px); }\n  40% { transform: translateX(1px); }\n  60% { transform: translateX(-1px); }\n  80% { transform: translateX(1px); }\n}\n\n/* Gradient shift */\n@keyframes gradient-shift {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n/* Fade pulse */\n@keyframes fade-pulse {\n  0%, 100% { opacity: 0.3; }\n  50% { opacity: 0.6; }\n}\n\n/* Subtle glow */\n@keyframes subtle-glow {\n  0%, 100% { opacity: 0.8; }\n  50% { opacity: 1; }\n}\n</code></pre>"},{"location":"implement/mkdocs/css/#transform-effects","title":"Transform Effects","text":"CSS<pre><code>transform: translateY(-2px);         /* Button hover lift */\ntransform: translateY(-4px);         /* Card hover lift */\ntransform: translateX(-50%);         /* Center horizontally */\ntransform: scale(1.15) rotate(10deg); /* Sunflower hover */\ntransform: translateX(40px);         /* Stripe animation */\n</code></pre>"},{"location":"implement/mkdocs/css/#3-typography-aesthetics","title":"3. Typography Aesthetics","text":""},{"location":"implement/mkdocs/css/#font-families","title":"Font Families","text":"CSS<pre><code>/* Headers */\n--druids-font-headers: 'Impact', 'Arial Black', -apple-system, sans-serif;\n--qm-font-headers: 'Impact', 'Arial Black', -apple-system, sans-serif;\n\n/* Body text */\n--druids-font-body: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n--qm-font-body: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n--md-text-font: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n\n/* Monospace/Code */\n--druids-font-mono: 'JetBrains Mono', 'Fira Code', 'Cascadia Code', monospace;\n--qm-font-mono: 'JetBrains Mono', 'Fira Code', 'Cascadia Code', monospace;\n--md-code-font: 'JetBrains Mono', 'Fira Code', 'Consolas', monospace;\n</code></pre>"},{"location":"implement/mkdocs/css/#font-sizes-and-scales","title":"Font Sizes and Scales","text":"CSS<pre><code>/* DRUIDS scale */\n--druids-text-xs: 0.875rem;    /* 14px */\n--druids-text-sm: 1rem;        /* 16px */\n--druids-text-base: 1.125rem;  /* 18px */\n--druids-text-lg: 1.25rem;     /* 20px */\n--druids-text-xl: 1.5rem;      /* 24px */\n--druids-text-2xl: 1.875rem;   /* 30px */\n--druids-text-3xl: 2.25rem;    /* 36px */\n--druids-text-4xl: 3rem;       /* 48px */\n\n/* Hero title massive size */\n.hero-title: 5rem !important;\n\n/* Smoothed typography scale */\n--qm-text-xs: 0.75rem;      /* 12px */\n--qm-text-sm: 0.875rem;     /* 14px */\n--qm-text-base: 1rem;       /* 16px */\n--qm-text-lg: 1.125rem;     /* 18px */\n--qm-text-xl: 1.25rem;      /* 20px */\n--qm-text-2xl: 1.5rem;      /* 24px */\n--qm-text-3xl: 1.875rem;    /* 30px */\n--qm-text-4xl: 2.25rem;     /* 36px */\n--qm-text-5xl: 3rem;        /* 48px */\n</code></pre>"},{"location":"implement/mkdocs/css/#letter-spacing","title":"Letter Spacing","text":"CSS<pre><code>/* Tracking values */\n--qm-tracking-tight: -0.025em;\n--qm-tracking-normal: 0;\n--qm-tracking-wide: 0.05em;\n--qm-tracking-wider: 0.1em;\n--qm-tracking-widest: 0.15em;\n\n/* Applied values */\nletter-spacing: 5px;    /* Hero title */\nletter-spacing: 4px;    /* H1 */\nletter-spacing: 2px;    /* H2, navigation titles */\nletter-spacing: 1.5px;  /* H3 */\nletter-spacing: 1px;    /* Tables, buttons */\n</code></pre>"},{"location":"implement/mkdocs/css/#line-height-ratios","title":"Line Height Ratios","text":"CSS<pre><code>/* Line height scale */\n--druids-line-height: 1.6;\n--qm-leading-tight: 1.25;\n--qm-leading-normal: 1.5;\n--qm-leading-relaxed: 1.75;\n\n/* Applied line heights */\nline-height: 1.2;  /* Tight headers */\nline-height: 1.4;  /* Code blocks */\nline-height: 1.6;  /* General text */\nline-height: 1.7;  /* Paragraphs */\n</code></pre>"},{"location":"implement/mkdocs/css/#text-decorations-and-effects","title":"Text Decorations and Effects","text":"CSS<pre><code>/* Text transforms */\ntext-transform: uppercase;  /* Headers, buttons, navigation */\ntext-transform: capitalize; /* Some elements */\n\n/* Font weights */\nfont-weight: 500;   /* Medium */\nfont-weight: 600;   /* Semi-bold */\nfont-weight: 700;   /* Bold */\nfont-weight: 800;   /* Extra bold */\nfont-weight: 900;   /* Black */\n\n/* Text decorations */\ntext-decoration: none;\ntext-decoration: underline;\ntext-decoration-style: dotted;\ntext-decoration-thickness: 2px;\ntext-underline-offset: 0.2em;\ntext-underline-offset: 4px;\ntext-decoration-skip-ink: auto;\n\n/* Special effects */\n-webkit-background-clip: text;\nbackground-clip: text;\n-webkit-text-fill-color: transparent;\n-webkit-font-smoothing: antialiased;\n-moz-osx-font-smoothing: grayscale;\ntext-rendering: optimizeLegibility;\n</code></pre>"},{"location":"implement/mkdocs/css/#4-border-and-shape-aesthetics","title":"4. Border and Shape Aesthetics","text":""},{"location":"implement/mkdocs/css/#border-styles-and-widths","title":"Border Styles and Widths","text":"CSS<pre><code>/* Border widths */\nborder: 1px solid;\nborder: 2px solid;\nborder: 3px solid;\nborder: 4px solid;  /* Left borders for sections */\nborder-left: 4px solid;\nborder-bottom: 2px solid;\n\n/* Border colors commonly used */\nborder-color: var(--druids-cyan);\nborder-color: var(--druids-orange);\nborder-color: var(--druids-purple);\nborder-color: rgba(0, 217, 255, 0.3);\nborder-color: rgba(255, 107, 53, 0.3);\n</code></pre>"},{"location":"implement/mkdocs/css/#border-radius-values","title":"Border Radius Values","text":"CSS<pre><code>/* DRUIDS theme (subtle rounding) */\n--druids-radius-sm: 4px;\n--druids-radius-md: 8px;\n--druids-radius-lg: 12px;\n\n/* Queer Mandalorian (sharp edges) */\nborder-radius: 0 !important;  /* Global reset */\nborder-radius: 4px !important;  /* Pills and badges only */\n\n/* Specific rounded elements */\nborder-radius: 20px;  /* Search input */\nborder-radius: 12px;  /* Tags */\nborder-radius: 6px;   /* Buttons in extra.css */\nborder-radius: 0 var(--druids-radius-md) 0 var(--druids-radius-sm);  /* Code header */\n</code></pre>"},{"location":"implement/mkdocs/css/#custom-shapes","title":"Custom Shapes","text":"CSS<pre><code>/* Cyber grid background pattern */\nbackground-image: \n  linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px),\n  linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px);\nbackground-size: 50px 50px;\n\n/* Tiger stripe pattern */\nbackground: repeating-linear-gradient(\n  45deg,\n  transparent,\n  transparent 20px,\n  rgba(255, 0, 255, 0.1) 20px,\n  rgba(255, 0, 255, 0.1) 40px\n);\n\n/* Decorative elements */\ncontent: \"\u25e3\u25e5\u25e3\u25e5\u25e3\u25e5\u25e3\u25e5\u25e3\u25e5\u25e3\u25e5\";  /* Hero banner decoration */\ncontent: \"\u25c6\";              /* HR decoration */\ncontent: \"//\";             /* Blockquote prefix */\ncontent: \"$ \";             /* Terminal prompt */\n</code></pre>"},{"location":"implement/mkdocs/css/#5-spacing-and-layout-patterns","title":"5. Spacing and Layout Patterns","text":""},{"location":"implement/mkdocs/css/#padding-patterns","title":"Padding Patterns","text":"CSS<pre><code>/* Common padding values */\npadding: 0.125rem 0.25rem;   /* Inline code */\npadding: 0.125rem 0.375rem;  /* Small elements */\npadding: 0.25rem 0.5rem;     /* Tags */\npadding: 0.25rem 0.75rem;    /* Code headers */\npadding: 0.375rem 0.75rem;   /* TOC links */\npadding: 0.5rem 0.75rem;     /* Nav links */\npadding: 0.5rem 1rem;        /* Search, buttons */\npadding: 0.75rem 1.25rem;    /* Table cells, admonition titles */\npadding: 0.75rem 1.5rem;     /* Buttons */\npadding: 1rem 1.5rem;        /* Blockquotes, cards */\npadding: 1rem 2rem;          /* Content areas */\npadding: 2rem;               /* Main content */\npadding: 4rem 2rem;          /* Hero banner */\n</code></pre>"},{"location":"implement/mkdocs/css/#margin-patterns","title":"Margin Patterns","text":"CSS<pre><code>/* Common margin values */\nmargin: 0.125rem 0;    /* Small spacing */\nmargin: 0.25rem 0;     /* List items */\nmargin: 0.375rem 0;    /* Navigation items */\nmargin: 0.5rem 0;      /* Task lists */\nmargin: 1rem 0;        /* Paragraphs, general elements */\nmargin: 1.5rem 0;      /* Cards, admonitions */\nmargin: 2rem 0 1rem;   /* Headers */\nmargin: 3rem 0;        /* HR separators */\nmargin-bottom: 3rem;   /* H1 */\n</code></pre>"},{"location":"implement/mkdocs/css/#layout-patterns","title":"Layout Patterns","text":"CSS<pre><code>/* Flexbox layouts */\ndisplay: flex;\nflex-direction: row/column;\njustify-content: center/space-between/flex-start/flex-end;\nalign-items: center/flex-start/flex-end;\nflex-grow: 1;\nflex-wrap: wrap;\ngap: 1rem;\n\n/* Grid layouts */\ndisplay: grid;\ngrid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\ngap: 1rem;\n\n/* Positioning */\nposition: relative/absolute/fixed/sticky;\nz-index: 1/2/999/1000/1001;\n</code></pre>"},{"location":"implement/mkdocs/css/#6-special-effects","title":"6. Special Effects","text":""},{"location":"implement/mkdocs/css/#hover-states","title":"Hover States","text":"CSS<pre><code>/* Color changes */\n:hover { color: var(--druids-orange); }\n:hover { color: var(--druids-trans-pink); }\n:hover { background: var(--druids-bg-hover); }\n:hover { background: rgba(0, 217, 255, 0.1); }\n\n/* Transform effects */\n:hover { transform: translateY(-2px); }\n:hover { transform: translateY(-4px); }\n:hover { transform: scale(1.15) rotate(10deg); }\n:hover { padding-left: 1.25rem; }  /* Navigation indent */\n\n/* Shadow intensification */\n:hover { box-shadow: 0 6px 20px rgba(0, 217, 255, 0.5); }\n:hover { box-shadow: 0 8px 24px rgba(0, 217, 255, 0.3); }\n\n/* Complex hover effects */\n:hover {\n  filter: \n    drop-shadow(0 0 40px #FFD700)\n    drop-shadow(0 0 70px #FF6B35)\n    drop-shadow(0 0 90px #FF00FF)\n    drop-shadow(0 0 110px rgba(255, 215, 0, 0.7))\n    saturate(3) brightness(1.5) contrast(1.4);\n}\n</code></pre>"},{"location":"implement/mkdocs/css/#focus-states","title":"Focus States","text":"CSS<pre><code>/* Standard focus */\n:focus {\n  outline: 2px solid var(--druids-cyan);\n  outline-offset: 2px;\n}\n\n/* Enhanced focus */\n:focus-visible {\n  outline: 3px solid var(--cyber-blue, #00D9FF);\n  outline-offset: 2px;\n}\n\n/* Input focus */\n:focus {\n  border-color: var(--druids-orange);\n  box-shadow: 0 0 0 2px rgba(255, 107, 53, 0.2);\n  box-shadow: 0 0 10px var(--druids-cyber-cyan-glow);\n}\n\n/* Giscus focus */\n*:focus-visible {\n  outline: 2px solid #34d399;\n  outline-offset: 2px;\n}\n</code></pre>"},{"location":"implement/mkdocs/css/#active-states","title":"Active States","text":"CSS<pre><code>/* Navigation active */\n.md-nav__link--active {\n  background: linear-gradient(90deg, rgba(0, 217, 255, 0.2), transparent);\n  color: var(--druids-cyan);\n  font-weight: 600;\n  border-left: 3px solid var(--druids-cyan);\n}\n\n/* Tab active */\n.md-tabs__link--active {\n  color: var(--druids-cyber-cyan);\n  text-shadow: 0 0 10px var(--druids-cyber-cyan-glow);\n}\n</code></pre>"},{"location":"implement/mkdocs/css/#disabled-states","title":"Disabled States","text":"CSS<pre><code>:disabled {\n  opacity: 0.5;\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n</code></pre>"},{"location":"implement/mkdocs/css/#selection-colors","title":"Selection Colors","text":"CSS<pre><code>::selection {\n  background: var(--druids-magenta);\n  color: var(--druids-bg-primary);\n}\n\n::selection {\n  background: var(--druids-trans-pink-glow);\n  color: var(--druids-text-primary);\n}\n\n::selection {\n  background-color: rgba(52, 211, 153, 0.3);\n  color: #ffffff;\n}\n</code></pre>"},{"location":"implement/mkdocs/css/#custom-scrollbars","title":"Custom Scrollbars","text":"CSS<pre><code>/* Width and height */\n::-webkit-scrollbar {\n  width: 8px/10px/12px;\n  height: 8px/10px/12px;\n}\n\n/* Track styling */\n::-webkit-scrollbar-track {\n  background: var(--druids-bg-secondary);\n  border: 1px solid var(--druids-cyber-blue-light);\n  border-radius: var(--druids-radius-sm);\n}\n\n/* Thumb styling */\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(180deg, var(--druids-cyan), var(--druids-purple));\n  border-radius: 6px;\n  border: 1px solid var(--druids-bg-secondary);\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(180deg, var(--druids-orange), var(--druids-pink));\n}\n\n/* Firefox scrollbar */\nscrollbar-width: thin;\nscrollbar-color: var(--druids-cyan) var(--druids-bg-secondary);\n</code></pre>"},{"location":"implement/mkdocs/css/#7-unique-design-elements","title":"7. Unique Design Elements","text":""},{"location":"implement/mkdocs/css/#security-indicators","title":"Security Indicators","text":"CSS<pre><code>/* L0 - Public (Green) */\n.security-l0 {\n  border-left: 4px solid #00FF41;\n  background: linear-gradient(90deg, rgba(0, 255, 65, 0.1) 0%, transparent 100%);\n}\n.security-l0::before { content: \"\ud83d\udfe2 L0 - PUBLIC\"; }\n\n/* L1 - Member (Orange) */\n.security-l1 {\n  border-left: 4px solid var(--qm-primary-orange);\n  background: linear-gradient(90deg, rgba(255, 107, 53, 0.1) 0%, transparent 100%);\n}\n.security-l1::before { content: \"\ud83d\udfe0 L1 - MEMBER\"; }\n\n/* L2 - Cadre (Red/Pink) */\n.security-l2 {\n  border-left: 4px solid var(--qm-pink);\n  background: linear-gradient(90deg, rgba(255, 0, 110, 0.1) 0%, transparent 100%);\n}\n.security-l2::before { content: \"\ud83d\udd34 L2 - CADRE \u26a0\"; animation: pulse 2s ease-in-out infinite; }\n</code></pre>"},{"location":"implement/mkdocs/css/#terminal-aesthetics","title":"Terminal Aesthetics","text":"CSS<pre><code>/* Code block terminal prompt */\npre code::before {\n  content: \"$ \";\n  color: var(--qm-cyan);\n  font-weight: bold;\n}\n\n/* Scan line effect */\n.md-typeset pre::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 2px;\n  background: linear-gradient(90deg, var(--druids-cyber-cyan) 0%, var(--druids-trans-pink) 50%, var(--druids-neon-orange) 100%);\n  animation: scan 3s ease-in-out infinite;\n}\n</code></pre>"},{"location":"implement/mkdocs/css/#hero-banner-elements","title":"Hero Banner Elements","text":"CSS<pre><code>/* Glowing sunflower with multiple filters */\n.glowing-sunflower {\n  filter: \n    drop-shadow(0 0 30px #FFD700)\n    drop-shadow(0 0 50px #FF6B35)\n    drop-shadow(0 0 70px #FF00FF)\n    drop-shadow(0 0 90px rgba(255, 215, 0, 0.5))\n    saturate(2) brightness(1.3) contrast(1.2);\n}\n\n/* Decorative pattern overlays */\n.druids-hero-banner::before {\n  background: repeating-linear-gradient(\n    45deg,\n    transparent,\n    transparent 20px,\n    rgba(255, 0, 255, 0.1) 20px,\n    rgba(255, 0, 255, 0.1) 40px\n  );\n}\n</code></pre>"},{"location":"implement/mkdocs/css/#mix-blend-modes","title":"Mix Blend Modes","text":"<p>While not extensively used in these files, the CSS supports:</p> CSS<pre><code>mix-blend-mode: multiply/screen/overlay;  /* For future enhancements */\n</code></pre>"},{"location":"implement/mkdocs/css/#backdrop-filters","title":"Backdrop Filters","text":"CSS<pre><code>backdrop-filter: blur(10px);  /* Header glass effect */\nbackdrop-filter: blur(5px);   /* Card glass effect */\n</code></pre>"},{"location":"implement/mkdocs/css/#files-and-their-primary-aesthetic-contributions","title":"Files and Their Primary Aesthetic Contributions","text":"<ol> <li><code>druids-theme.css</code>: Core color palette, typography sizes, gradients, base animations</li> <li><code>druids-components.css</code>: Code blocks, tables, admonitions, buttons, task lists, grids</li> <li><code>druids-layout.css</code>: Header/footer styling, navigation, search, spacing</li> <li><code>druids-utilities.css</code>: Utility classes, accessibility, print styles, responsive helpers</li> <li><code>cyberpunk-guerrilla.css</code>: Extended color variations, complex gradients, glow effects, cyber grid</li> <li><code>queer-mandalorian.css</code>: Sharp edges, glitch effects, security indicators, terminal aesthetics</li> <li><code>hero-banner.css</code>: Sunflower glow effects, animated stripes, complex text shadows</li> <li><code>typography-smoothing.css</code>: Font size refinements, line height adjustments, reading width optimization</li> <li><code>accessibility-enhancements.css</code>: High contrast modes, focus states, motion preferences</li> <li><code>giscus-druids.css</code>: Dark theme for comments, matching main theme</li> <li><code>giscus.css</code>: Basic Giscus integration styling</li> <li><code>final-typography-fix.css</code>: Typography overrides, shadow removal</li> <li><code>extra.css</code>: Material theme base with blue/green color scheme (appears to be older/different theme)</li> </ol>"},{"location":"implement/mkdocs/css/#common-aesthetic-patterns","title":"Common Aesthetic Patterns","text":"<ol> <li>Cyberpunk Aesthetic: Neon colors (cyan, orange, pink), glow effects, sharp contrasts</li> <li>Trans Pride Colors: Inverted color scheme drawing from trans flag colors</li> <li>Terminal/Hacker Theme: Monospace fonts, terminal prompts, scan lines</li> <li>Glassmorphism: Blur effects, transparency, layered backgrounds</li> <li>Brutalist Elements: Sharp edges (border-radius: 0), bold typography, high contrast</li> <li>Accessibility First: Clear focus states, motion preferences, high contrast support</li> <li>Revolutionary Aesthetic: Security levels, warning indicators, uppercase text</li> <li>Gradient Heavy: Linear and radial gradients used extensively for backgrounds and text</li> </ol> <p>Backlinks:</p>"},{"location":"implement/mkdocs/offline-usage-guide/","title":"Offline Usage Setup Guide","text":"<p>Transform your MkDocs Material site into a Progressive Web App (PWA) that works seamlessly offline.</p>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#overview","title":"Overview","text":"<p>The offline plugin enables:</p> <ul> <li>\ud83d\udcf1 Progressive Web App functionality</li> <li>\ud83d\udd04 Service Worker for caching</li> <li>\ud83d\udcf6 Offline browsing of visited pages</li> <li>\ud83d\ude80 Faster loading through intelligent caching</li> <li>\ud83d\udcf2 App-like experience on mobile devices</li> </ul>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#basic-offline-configuration","title":"Basic Offline Configuration","text":"","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#1-enable-offline-plugin","title":"1. Enable Offline Plugin","text":"YAML<pre><code># mkdocs.yml\nplugins:\n  - material/offline:\n      enabled: !ENV [CI, false]\n      offline: true\n      offline_on_serve: false\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#2-configuration-options","title":"2. Configuration Options","text":"YAML<pre><code>plugins:\n  - material/offline:\n      enabled: !ENV [CI, false]        # Enable in production\n      offline: true                    # Enable offline functionality\n      offline_on_serve: false          # Disable during development\n</code></pre> <p>Why <code>offline_on_serve: false</code>?</p> <ul> <li>Development servers change frequently</li> <li>Service workers cache aggressively</li> <li>Can interfere with live reloading</li> <li>Better to test offline functionality in production builds</li> </ul>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#progressive-web-app-features","title":"Progressive Web App Features","text":"","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#1-web-app-manifest","title":"1. Web App Manifest","text":"<p>The offline plugin automatically generates a <code>manifest.json</code>:</p> JSON<pre><code>{\n  \"name\": \"Your Documentation Site\",\n  \"short_name\": \"Docs\",\n  \"description\": \"Comprehensive documentation site\",\n  \"start_url\": \"/\",\n  \"display\": \"standalone\",\n  \"background_color\": \"#ffffff\",\n  \"theme_color\": \"#2563eb\",\n  \"icons\": [\n    {\n      \"src\": \"assets/images/icon-192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"assets/images/icon-512.png\",\n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ]\n}\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#2-custom-pwa-configuration","title":"2. Custom PWA Configuration","text":"<p>Enhance the PWA experience with custom configuration:</p> YAML<pre><code># mkdocs.yml\nextra:\n  pwa:\n    name: \"Documentation Hub\"\n    short_name: \"Docs\"\n    description: \"Your comprehensive documentation resource\"\n    theme_color: \"#2563eb\"\n    background_color: \"#ffffff\"\n    display: \"standalone\"\n    orientation: \"portrait\"\n    scope: \"/\"\n    start_url: \"/\"\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#3-pwa-icons","title":"3. PWA Icons","text":"<p>Create PWA icons in multiple sizes:</p> Bash<pre><code># Create icon directory\nmkdir -p docs/assets/images/icons\n\n# Required icon sizes for PWA\n# 192x192 - Android home screen\n# 512x512 - Android splash screen\n# 180x180 - iOS home screen (apple-touch-icon)\n# 32x32   - Browser favicon\n# 16x16   - Browser favicon\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#service-worker-functionality","title":"Service Worker Functionality","text":"","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#1-automatic-caching-strategy","title":"1. Automatic Caching Strategy","text":"<p>The offline plugin implements intelligent caching:</p> JavaScript<pre><code>// Automatic service worker features:\n// - Cache-first strategy for static assets\n// - Network-first strategy for HTML pages\n// - Stale-while-revalidate for API calls\n// - Background sync for form submissions\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#2-cache-management","title":"2. Cache Management","text":"YAML<pre><code># Configure caching behavior\nextra:\n  offline:\n    cache_strategy: \"cache-first\"     # or \"network-first\"\n    cache_max_age: 86400             # 24 hours in seconds\n    cache_max_entries: 100           # Maximum cached pages\n    precache_assets: true            # Precache critical assets\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#3-custom-service-worker","title":"3. Custom Service Worker","text":"<p>For advanced use cases, extend the service worker:</p> JavaScript<pre><code>// docs/assets/js/sw-custom.js\nself.addEventListener('install', function(event) {\n  console.log('Custom service worker installing...');\n\n  // Custom installation logic\n  event.waitUntil(\n    caches.open('custom-cache-v1').then(function(cache) {\n      return cache.addAll([\n        '/offline.html',\n        '/assets/css/offline.css'\n      ]);\n    })\n  );\n});\n\nself.addEventListener('fetch', function(event) {\n  // Custom fetch handling\n  if (event.request.url.includes('/api/')) {\n    event.respondWith(\n      fetch(event.request).catch(function() {\n        return new Response('Offline - API unavailable');\n      })\n    );\n  }\n});\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#offline-user-experience","title":"Offline User Experience","text":"","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#1-offline-indicator","title":"1. Offline Indicator","text":"<p>Add visual feedback for offline status:</p> CSS<pre><code>/* Offline indicator styling */\n.offline-indicator {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  background: #ef4444;\n  color: white;\n  text-align: center;\n  padding: 0.5rem;\n  z-index: 1000;\n  transform: translateY(-100%);\n  transition: transform 0.3s ease;\n}\n\n.offline-indicator.show {\n  transform: translateY(0);\n}\n</code></pre> JavaScript<pre><code>// Offline detection\nwindow.addEventListener('online', function() {\n  document.querySelector('.offline-indicator').classList.remove('show');\n});\n\nwindow.addEventListener('offline', function() {\n  document.querySelector('.offline-indicator').classList.add('show');\n});\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#2-offline-page","title":"2. Offline Page","text":"<p>Create a custom offline fallback page:</p> HTML<pre><code>&lt;!-- docs/offline.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Offline - Documentation&lt;/title&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n  &lt;style&gt;\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n      text-align: center;\n      padding: 2rem;\n      background: #f8fafc;\n    }\n    .offline-message {\n      max-width: 400px;\n      margin: 0 auto;\n      background: white;\n      padding: 2rem;\n      border-radius: 8px;\n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\"offline-message\"&gt;\n    &lt;h1&gt;\ud83d\udcf6 You're Offline&lt;/h1&gt;\n    &lt;p&gt;This page isn't available offline yet. Try visiting it while online first, then it will be cached for offline viewing.&lt;/p&gt;\n    &lt;button onclick=\"window.history.back()\"&gt;Go Back&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#3-cache-status-display","title":"3. Cache Status Display","text":"<p>Show users which pages are available offline:</p> JavaScript<pre><code>// Display cached pages\nasync function showCachedPages() {\n  if ('caches' in window) {\n    const cacheNames = await caches.keys();\n    const cache = await caches.open(cacheNames[0]);\n    const cachedRequests = await cache.keys();\n\n    const cachedPages = cachedRequests\n      .map(req =&gt; req.url)\n      .filter(url =&gt; url.endsWith('.html'))\n      .map(url =&gt; new URL(url).pathname);\n\n    console.log('Pages available offline:', cachedPages);\n  }\n}\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#mobile-app-experience","title":"Mobile App Experience","text":"","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#1-install-prompt","title":"1. Install Prompt","text":"<p>Encourage users to install your PWA:</p> JavaScript<pre><code>// PWA install prompt\nlet deferredPrompt;\n\nwindow.addEventListener('beforeinstallprompt', function(e) {\n  // Prevent Chrome 67 and earlier from automatically showing the prompt\n  e.preventDefault();\n\n  // Stash the event so it can be triggered later\n  deferredPrompt = e;\n\n  // Show custom install button\n  showInstallButton();\n});\n\nfunction showInstallButton() {\n  const installButton = document.createElement('button');\n  installButton.textContent = '\ud83d\udcf1 Install App';\n  installButton.className = 'install-button';\n  installButton.onclick = function() {\n    // Show the prompt\n    deferredPrompt.prompt();\n\n    // Wait for the user to respond to the prompt\n    deferredPrompt.userChoice.then(function(choiceResult) {\n      if (choiceResult.outcome === 'accepted') {\n        console.log('User accepted the install prompt');\n      }\n      deferredPrompt = null;\n    });\n  };\n\n  document.body.appendChild(installButton);\n}\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#2-app-like-navigation","title":"2. App-like Navigation","text":"<p>Enhance mobile navigation for app-like feel:</p> CSS<pre><code>/* App-like mobile navigation */\n@media (display-mode: standalone) {\n  /* Styles when running as PWA */\n  .md-header {\n    padding-top: env(safe-area-inset-top);\n  }\n\n  .md-container {\n    padding-bottom: env(safe-area-inset-bottom);\n  }\n\n  /* Hide browser UI elements */\n  .md-header__source {\n    display: none;\n  }\n}\n\n/* iOS Safari specific */\n@supports (-webkit-touch-callout: none) {\n  .md-header {\n    padding-top: max(env(safe-area-inset-top), 20px);\n  }\n}\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#3-splash-screen","title":"3. Splash Screen","text":"<p>Configure splash screen for better app experience:</p> HTML<pre><code>&lt;!-- In head section --&gt;\n&lt;meta name=\"apple-mobile-web-app-capable\" content=\"yes\"&gt;\n&lt;meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\"&gt;\n&lt;meta name=\"apple-mobile-web-app-title\" content=\"Docs\"&gt;\n\n&lt;!-- iOS splash screens --&gt;\n&lt;link rel=\"apple-touch-startup-image\" href=\"/assets/images/splash-2048x2732.png\" media=\"(device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2)\"&gt;\n&lt;link rel=\"apple-touch-startup-image\" href=\"/assets/images/splash-1668x2224.png\" media=\"(device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2)\"&gt;\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#performance-optimization","title":"Performance Optimization","text":"","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#1-critical-resource-preloading","title":"1. Critical Resource Preloading","text":"HTML<pre><code>&lt;!-- Preload critical resources --&gt;\n&lt;link rel=\"preload\" href=\"/assets/css/main.css\" as=\"style\"&gt;\n&lt;link rel=\"preload\" href=\"/assets/js/main.js\" as=\"script\"&gt;\n&lt;link rel=\"preload\" href=\"/assets/fonts/roboto.woff2\" as=\"font\" type=\"font/woff2\" crossorigin&gt;\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#2-lazy-loading-implementation","title":"2. Lazy Loading Implementation","text":"JavaScript<pre><code>// Lazy load non-critical content\nconst observer = new IntersectionObserver((entries) =&gt; {\n  entries.forEach(entry =&gt; {\n    if (entry.isIntersecting) {\n      const img = entry.target;\n      img.src = img.dataset.src;\n      img.classList.remove('lazy');\n      observer.unobserve(img);\n    }\n  });\n});\n\ndocument.querySelectorAll('img[data-src]').forEach(img =&gt; {\n  observer.observe(img);\n});\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#3-cache-optimization","title":"3. Cache Optimization","text":"YAML<pre><code># Optimize caching strategy\nextra:\n  offline:\n    # Cache static assets aggressively\n    static_cache_max_age: 31536000  # 1 year\n\n    # Cache HTML pages for shorter periods\n    page_cache_max_age: 86400       # 1 day\n\n    # Limit cache size to prevent storage issues\n    cache_max_size: 50              # 50MB\n    cache_max_entries: 200          # 200 pages\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#testing-offline-functionality","title":"Testing Offline Functionality","text":"","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#1-development-testing","title":"1. Development Testing","text":"Bash<pre><code># Build for production\nmkdocs build\n\n# Serve built site\ncd site &amp;&amp; python -m http.server 8000\n\n# Test offline functionality:\n# 1. Visit pages while online\n# 2. Disconnect network\n# 3. Navigate to cached pages\n# 4. Verify offline experience\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#2-browser-devtools-testing","title":"2. Browser DevTools Testing","text":"JavaScript<pre><code>// Test service worker in DevTools\n// 1. Open DevTools \u2192 Application \u2192 Service Workers\n// 2. Check \"Offline\" checkbox\n// 3. Navigate through site\n// 4. Verify cached resources in Cache Storage\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#3-lighthouse-pwa-audit","title":"3. Lighthouse PWA Audit","text":"Bash<pre><code># Install Lighthouse CLI\nnpm install -g lighthouse\n\n# Run PWA audit\nlighthouse http://localhost:8000 --view --preset=pwa\n\n# Check for:\n# - Service worker registration\n# - Web app manifest\n# - Offline functionality\n# - Install prompts\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#deployment-considerations","title":"Deployment Considerations","text":"","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#1-https-requirement","title":"1. HTTPS Requirement","text":"<p>PWAs require HTTPS in production:</p> YAML<pre><code># Ensure HTTPS in production\nsite_url: https://yourdomain.com  # Must be HTTPS\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#2-service-worker-scope","title":"2. Service Worker Scope","text":"<p>Configure service worker scope properly:</p> JavaScript<pre><code>// Service worker registration\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/sw.js', {\n    scope: '/'  // Ensure correct scope\n  });\n}\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#3-cache-invalidation","title":"3. Cache Invalidation","text":"<p>Handle cache updates properly:</p> JavaScript<pre><code>// Handle service worker updates\nnavigator.serviceWorker.addEventListener('controllerchange', function() {\n  // Reload page when new service worker takes control\n  window.location.reload();\n});\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#troubleshooting","title":"Troubleshooting","text":"","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#common-issues","title":"Common Issues","text":"<p>Service worker not registering:</p> JavaScript<pre><code>// Check for HTTPS requirement\nif (location.protocol !== 'https:' &amp;&amp; location.hostname !== 'localhost') {\n  console.warn('Service workers require HTTPS');\n}\n</code></pre> <p>Pages not caching:</p> JavaScript<pre><code>// Check cache storage in DevTools\ncaches.keys().then(console.log);\n</code></pre> <p>Install prompt not showing:</p> JavaScript<pre><code>// Check PWA criteria\n// - HTTPS\n// - Web app manifest\n// - Service worker\n// - User engagement signals\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#debug-service-worker","title":"Debug Service Worker","text":"JavaScript<pre><code>// Service worker debugging\nnavigator.serviceWorker.getRegistrations().then(function(registrations) {\n  console.log('Active service workers:', registrations);\n});\n\n// Check cache contents\ncaches.open('mkdocs-offline').then(function(cache) {\n  cache.keys().then(function(keys) {\n    console.log('Cached resources:', keys.map(k =&gt; k.url));\n  });\n});\n</code></pre>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#best-practices","title":"Best Practices","text":"","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#1-progressive-enhancement","title":"1. Progressive Enhancement","text":"<ul> <li>Start with basic functionality that works without JavaScript</li> <li>Layer on PWA features for enhanced experience</li> <li>Graceful degradation for unsupported browsers</li> </ul>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#2-cache-strategy","title":"2. Cache Strategy","text":"<ul> <li>Cache critical pages immediately after first visit</li> <li>Lazy cache less important content</li> <li>Regular cleanup of old cache entries</li> <li>Respect storage quotas to avoid eviction</li> </ul>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/offline-usage-guide/#3-user-communication","title":"3. User Communication","text":"<ul> <li>Clear offline indicators when network is unavailable</li> <li>Cache status feedback showing what's available offline</li> <li>Install prompts at appropriate moments</li> <li>Update notifications when new content is available</li> </ul> <p>Offline functionality transforms your documentation into a reliable resource that works anywhere, anytime.</p> <p>Backlinks:</p>","tags":["offline","pwa","service-worker","performance","mobile"]},{"location":"implement/mkdocs/setup-giscus/","title":"Setting up Giscus Comments","text":"<p>This guide explains how to set up and configure Giscus comments for your MkDocs Material site.</p>"},{"location":"implement/mkdocs/setup-giscus/#overview","title":"Overview","text":"<p>Giscus is a comments system powered by GitHub Discussions. It's privacy-friendly, free, and integrates seamlessly with MkDocs Material.</p>"},{"location":"implement/mkdocs/setup-giscus/#current-configuration-status","title":"Current Configuration Status","text":"<p>\u2705 Giscus is fully configured in this repository with:</p> <ul> <li>Repository: ks-sbc/DRUIDS</li> <li>Category: General Discussions</li> <li>Theme: Auto-syncs with Material theme</li> <li>Position: Comments at top</li> <li>Reactions: Enabled</li> </ul>"},{"location":"implement/mkdocs/setup-giscus/#how-it-works","title":"How It Works","text":"<ol> <li>Pages with <code>comments: true</code> in frontmatter show comments</li> <li>Comments are stored as GitHub Discussions</li> <li>Users need a GitHub account to comment</li> <li>Theme automatically syncs with site theme (light/dark)</li> </ol>"},{"location":"implement/mkdocs/setup-giscus/#setup-instructions","title":"Setup Instructions","text":""},{"location":"implement/mkdocs/setup-giscus/#step-1-enable-github-discussions","title":"Step 1: Enable GitHub Discussions","text":"<ol> <li>Go to your GitHub repository</li> <li>Click Settings \u2192 Features</li> <li>Check Discussions</li> </ol>"},{"location":"implement/mkdocs/setup-giscus/#step-2-configure-giscus","title":"Step 2: Configure Giscus","text":"<ol> <li>Visit giscus.app</li> <li>Enter your repository: <code>username/repository-name</code></li> <li>Configure settings:</li> <li>Mapping: <code>pathname</code> (recommended)</li> <li>Category: Create or select (e.g., \"General\")</li> <li>Theme: <code>preferred_color_scheme</code></li> <li>Features: Enable reactions</li> </ol>"},{"location":"implement/mkdocs/setup-giscus/#step-3-get-configuration-values","title":"Step 3: Get Configuration Values","text":"<p>From giscus.app, copy: - Repository ID - Category ID</p>"},{"location":"implement/mkdocs/setup-giscus/#step-4-update-mkdocs-configuration","title":"Step 4: Update MkDocs Configuration","text":"<p>In <code>mkdocs.yml</code>:</p> YAML<pre><code>extra:\n  comments:\n    enabled: true\n    provider: giscus\n    giscus:\n      repo: username/repository\n      repo-id: \"YOUR_REPO_ID\"\n      category: General\n      category-id: \"YOUR_CATEGORY_ID\"\n      mapping: pathname\n      strict: 0\n      reactions: 1\n      emit-metadata: 0\n      input-position: top\n      theme: preferred_color_scheme\n      lang: en\n      loading: lazy\n</code></pre>"},{"location":"implement/mkdocs/setup-giscus/#step-5-enable-comments-on-pages","title":"Step 5: Enable Comments on Pages","text":"<p>Add to page frontmatter:</p> YAML<pre><code>---\ncomments: true\n---\n</code></pre>"},{"location":"implement/mkdocs/setup-giscus/#file-structure","title":"File Structure","text":"<p>The integration requires these files:</p> Text Only<pre><code>overrides/\n\u2514\u2500\u2500 partials/\n    \u2514\u2500\u2500 comments.html    # Giscus integration\n\ndocs/\n\u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 css/\n\u2502   \u2502   \u2514\u2500\u2500 giscus.css  # Comment styling\n\u2502   \u2514\u2500\u2500 js/\n\u2502       \u2514\u2500\u2500 giscus.js   # Theme sync\n\u2514\u2500\u2500 giscus.json         # Security config\n</code></pre>"},{"location":"implement/mkdocs/setup-giscus/#features","title":"Features","text":"<p>\u2705 Automatic theme switching - Syncs with Material theme \u2705 Responsive design - Works on all devices \u2705 Privacy-friendly - No tracking \u2705 Moderation tools - Via GitHub \u2705 Reactions - Users can react \u2705 Notifications - Via GitHub</p>"},{"location":"implement/mkdocs/setup-giscus/#customization","title":"Customization","text":""},{"location":"implement/mkdocs/setup-giscus/#styling","title":"Styling","text":"<p>Edit <code>docs/assets/css/giscus.css</code>:</p> CSS<pre><code>.giscus {\n  max-width: 100%;\n  margin: 2rem 0;\n}\n\n.giscus-frame {\n  border: none;\n  width: 100%;\n}\n</code></pre>"},{"location":"implement/mkdocs/setup-giscus/#theme-synchronization","title":"Theme Synchronization","text":"<p>The theme automatically syncs via JavaScript in <code>comments.html</code>:</p> JavaScript<pre><code>function updateGiscusTheme() {\n  const theme = document.body.getAttribute('data-md-color-scheme');\n  // Theme update logic\n}\n</code></pre>"},{"location":"implement/mkdocs/setup-giscus/#security-configuration","title":"Security Configuration","text":"<p>Create <code>giscus.json</code> in your docs root:</p> JSON<pre><code>{\n  \"origins\": [\n    \"https://yourdomain.com\",\n    \"http://localhost:8000\"\n  ]\n}\n</code></pre>"},{"location":"implement/mkdocs/setup-giscus/#troubleshooting","title":"Troubleshooting","text":""},{"location":"implement/mkdocs/setup-giscus/#comments-not-appearing","title":"Comments Not Appearing","text":"<ol> <li>Verify GitHub Discussions is enabled</li> <li>Check repository is public</li> <li>Confirm configuration values are correct</li> <li>Look for console errors</li> </ol>"},{"location":"implement/mkdocs/setup-giscus/#theme-not-syncing","title":"Theme Not Syncing","text":"<ul> <li>Ensure Material theme palette is configured</li> <li>Check JavaScript is loading correctly</li> <li>Clear browser cache</li> </ul>"},{"location":"implement/mkdocs/setup-giscus/#testing-locally","title":"Testing Locally","text":"Bash<pre><code># Start dev server\nmkdocs serve\n\n# Visit a page with comments: true\n# Try commenting (requires GitHub login)\n</code></pre>"},{"location":"implement/mkdocs/setup-giscus/#best-practices","title":"Best Practices","text":"<ol> <li>Moderate regularly - Check GitHub Discussions</li> <li>Set guidelines - Create discussion guidelines</li> <li>Enable reactions - Encourage engagement</li> <li>Test thoroughly - Before deploying</li> </ol>"},{"location":"implement/mkdocs/setup-giscus/#next-steps","title":"Next Steps","text":"<ul> <li>Test comments on a page with <code>comments: true</code></li> <li>Customize styling if needed</li> <li>Set up moderation guidelines</li> <li>Monitor GitHub Discussions</li> </ul> <p>Backlinks:</p>"},{"location":"implement/mkdocs/website-validations/","title":"MkDocs Validation System","text":"<p>This project includes a comprehensive validation system to prevent common MkDocs configuration and content issues.</p>"},{"location":"implement/mkdocs/website-validations/#what-it-prevents","title":"\ud83d\udee1\ufe0f What It Prevents","text":"<ul> <li>Configuration errors: Invalid YAML, missing files, broken plugin configurations</li> <li>Blog post issues: Missing frontmatter, invalid authors, incorrect categories</li> <li>Template errors: Broken Jinja2 syntax, unsafe variable access</li> <li>Icon issues: Invalid icon references that cause build failures</li> <li>Build failures: Catches issues before they break the build process</li> </ul>"},{"location":"implement/mkdocs/website-validations/#tools-included","title":"\ud83d\udd27 Tools Included","text":""},{"location":"implement/mkdocs/website-validations/#1-validation-scripts","title":"1. Validation Scripts","text":"<ul> <li><code>tests/validate_config.py</code> - Validates MkDocs configuration</li> <li><code>tests/validate_blog_posts.py</code> - Validates blog post frontmatter and content</li> <li><code>tests/test_mkdocs_config.py</code> - Comprehensive pytest test suite</li> <li><code>scripts/validate-all.sh</code> - Runs all validations with colored output</li> </ul>"},{"location":"implement/mkdocs/website-validations/#2-just-commands","title":"2. Just Commands","text":"<p>Use Just for easy command running:</p> Bash<pre><code># Install dependencies and set up validation\njust init\n\n# Run all validation checks\njust validate\n\n# Run comprehensive checks (validate + test + build)\njust check-all\n\n# Quick development check\njust dev-check\n\n# Create a new blog post with proper template\njust new-post \"My New Post Title\"\n\n# Validate a specific blog post\njust validate-post docs/blog/posts/my-post.md\n</code></pre>"},{"location":"implement/mkdocs/website-validations/#3-git-hooks","title":"3. Git Hooks","text":"<p>Install git hooks to run validation automatically:</p> Bash<pre><code># Install pre-commit and pre-push hooks\n./scripts/install-hooks.sh\n\n# Or use pre-commit (recommended)\npip install pre-commit\npre-commit install\n</code></pre>"},{"location":"implement/mkdocs/website-validations/#4-github-actions","title":"4. GitHub Actions","text":"<p>Automated validation runs on every push and pull request:</p> <ul> <li>YAML validation</li> <li>Configuration validation</li> <li>Blog post validation</li> <li>Build testing</li> <li>Optional link checking</li> </ul>"},{"location":"implement/mkdocs/website-validations/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<ol> <li>Install dependencies:</li> </ol> Bash<pre><code>just init\n</code></pre> <ol> <li>Run validation:</li> </ol> Bash<pre><code>just validate\n</code></pre> <ol> <li>Install git hooks:</li> </ol> Bash<pre><code>./scripts/install-hooks.sh\n</code></pre> <ol> <li>Test everything:</li> </ol> Bash<pre><code>just check-all\n</code></pre>"},{"location":"implement/mkdocs/website-validations/#validation-checklist","title":"\ud83d\udccb Validation Checklist","text":""},{"location":"implement/mkdocs/website-validations/#configuration-validation","title":"Configuration Validation","text":"<ul> <li>\u2705 MkDocs configuration loads successfully</li> <li>\u2705 All referenced files exist</li> <li>\u2705 Blog plugin configuration is valid</li> <li>\u2705 Theme icons are valid</li> <li>\u2705 Template overrides have correct syntax</li> </ul>"},{"location":"implement/mkdocs/website-validations/#blog-post-validation","title":"Blog Post Validation","text":"<ul> <li>\u2705 All posts have valid frontmatter</li> <li>\u2705 Required fields (date) are present</li> <li>\u2705 Authors configuration matches plugin settings</li> <li>\u2705 Categories are in allowed list</li> <li>\u2705 Excerpt separators are present</li> </ul>"},{"location":"implement/mkdocs/website-validations/#build-validation","title":"Build Validation","text":"<ul> <li>\u2705 MkDocs builds without errors</li> <li>\u2705 Strict mode passes</li> <li>\u2705 No template rendering errors</li> <li>\u2705 All plugins load correctly</li> </ul>"},{"location":"implement/mkdocs/website-validations/#common-issues-caught","title":"\ud83d\udd0d Common Issues Caught","text":""},{"location":"implement/mkdocs/website-validations/#1-authors-configuration-mismatch","title":"1. Authors Configuration Mismatch","text":"<p>Problem: Authors enabled in config but no <code>.authors.yml</code> file Solution: Either disable authors or create the authors file</p>"},{"location":"implement/mkdocs/website-validations/#2-invalid-icon-references","title":"2. Invalid Icon References","text":"<p>Problem: Using non-existent FontAwesome icons Solution: Use valid icon names from supported icon sets</p>"},{"location":"implement/mkdocs/website-validations/#3-missing-blog-post-frontmatter","title":"3. Missing Blog Post Frontmatter","text":"<p>Problem: Blog posts without proper YAML frontmatter Solution: Ensure all posts have required fields</p>"},{"location":"implement/mkdocs/website-validations/#4-template-variable-access","title":"4. Template Variable Access","text":"<p>Problem: Unsafe access to <code>page.meta</code> without checking if <code>page</code> exists Solution: Use safe access patterns: <code>page and page.meta and page.meta.field</code></p>"},{"location":"implement/mkdocs/website-validations/#customization","title":"\ud83d\udee0\ufe0f Customization","text":""},{"location":"implement/mkdocs/website-validations/#adding-new-validations","title":"Adding New Validations","text":"<ol> <li>Add to validation scripts:</li> </ol> Python<pre><code># In tests/validate_config.py\ndef validate_custom_feature(config):\n    # Your validation logic\n    pass\n</code></pre> <ol> <li>Add to pytest:</li> </ol> Python<pre><code># In tests/test_mkdocs_config.py\ndef test_custom_feature(self, config):\n    # Your test logic\n    assert condition, \"Error message\"\n</code></pre> <ol> <li>Add to justfile:</li> </ol> Bash<pre><code># Custom validation command\nvalidate-custom:\n    @echo \"\ud83d\udd0d Running custom validation...\"\n    python tests/validate_custom.py\n</code></pre>"},{"location":"implement/mkdocs/website-validations/#configuring-pre-commit","title":"Configuring Pre-commit","text":"<p>Edit <code>.pre-commit-config.yaml</code> to add or modify hooks:</p> YAML<pre><code>- repo: local\n  hooks:\n    - id: custom-validation\n      name: Custom Validation\n      entry: python tests/validate_custom.py\n      language: python\n      files: ^(mkdocs\\.yml|docs/.*\\.md)$\n</code></pre>"},{"location":"implement/mkdocs/website-validations/#performance","title":"\ud83d\udcca Performance","text":"<p>The validation system is designed to be fast:</p> <ul> <li>Configuration validation: ~0.1s</li> <li>Blog post validation: ~0.2s</li> <li>Full build test: ~2-5s</li> <li>Complete validation suite: ~5-10s</li> </ul>"},{"location":"implement/mkdocs/website-validations/#integration","title":"\ud83d\udd17 Integration","text":""},{"location":"implement/mkdocs/website-validations/#vs-code","title":"VS Code","text":"<p>Add to <code>.vscode/tasks.json</code>:</p> JSON<pre><code>{\n    \"label\": \"Validate MkDocs\",\n    \"type\": \"shell\",\n    \"command\": \"just validate\",\n    \"group\": \"build\",\n    \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\"\n    }\n}\n</code></pre>"},{"location":"implement/mkdocs/website-validations/#ide-integration","title":"IDE Integration","text":"<p>Most IDEs can run Just commands directly or you can create run configurations for the validation scripts.</p>"},{"location":"implement/mkdocs/website-validations/#troubleshooting","title":"\ud83c\udd98 Troubleshooting","text":""},{"location":"implement/mkdocs/website-validations/#validation-fails-but-build-works","title":"Validation Fails But Build Works","text":"<p>This usually means the validation is too strict. Check the specific error and adjust the validation rules if needed.</p>"},{"location":"implement/mkdocs/website-validations/#git-hooks-not-running","title":"Git Hooks Not Running","text":"<p>Ensure hooks are executable:</p> Bash<pre><code>chmod +x .git/hooks/pre-commit\nchmod +x .git/hooks/pre-push\n</code></pre>"},{"location":"implement/mkdocs/website-validations/#missing-dependencies","title":"Missing Dependencies","text":"<p>Install all required dependencies:</p> Bash<pre><code>pip install -r dependencies/requirements.txt\n</code></pre>"},{"location":"implement/mkdocs/website-validations/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>MkDocs Configuration</li> <li>MkDocs Material Setup</li> <li>Pre-commit Hooks</li> <li>Just Command Runner</li> </ul> <p>Backlinks:</p>"},{"location":"implement/obsidian-setup/_index/","title":"Obsidian Git User Guide","text":"<p>This section provides detailed guidance on integrating Git workflows with Obsidian for DRUIDS users.</p>","tags":["obsidian","git","workflow","guide"]},{"location":"implement/obsidian-setup/_index/#available-guides","title":"Available Guides","text":"<ul> <li>Obsidian Git Workflow Guide</li> <li>Obsidian Offline Git Workflow Guide</li> <li>Automated Backup and Synchronization </li> <li>Commit Signing with GPG and Hardware Keys</li> <li>Configuring Automatic Commits</li> <li>Handling Merge Conflicts</li> <li>Merge Request Process</li> </ul>","tags":["obsidian","git","workflow","guide"]},{"location":"implement/obsidian-setup/commit-signing-gpg-hardware-keys/","title":"Commit Signing with GPG and Hardware Keys","text":"","tags":["gpg","commit-signing","security","hardware-keys","git"]},{"location":"implement/obsidian-setup/commit-signing-gpg-hardware-keys/#commit-signing-with-gpg-and-hardware-keys","title":"Commit Signing with GPG (and Hardware Keys)","text":"<p>Commit signing is an important security practice that adds a layer of trust and accountability to your Git history. It cryptographically verifies that commits and tags were made by a specific user and that they haven't been tampered with since they were made. This is typically achieved using GnuPG (GPG).</p>","tags":["gpg","commit-signing","security","hardware-keys","git"]},{"location":"implement/obsidian-setup/commit-signing-gpg-hardware-keys/#1-introduction-to-commit-signing","title":"1. Introduction to Commit Signing","text":"<ul> <li>What are GPG Signed Commits?     When you sign a commit, you use your private GPG key to create a unique digital signature for that commit. This signature is then attached to the commit.</li> <li>Why are they Important?</li> <li>Authenticity: Signed commits help prove that you are the one who made the commit. Anyone can configure their Git <code>user.name</code> and <code>user.email</code> to impersonate someone else, but they cannot fake a GPG signature without access to the private key.</li> <li>Integrity: The signature ensures that the commit (including its content, author, and timestamp) has not been altered since it was signed. If any part of the commit changes, the signature will no longer be valid.</li> <li>Trust: In collaborative or sensitive environments, signed commits provide a higher degree of confidence in the source and integrity of changes.</li> </ul>","tags":["gpg","commit-signing","security","hardware-keys","git"]},{"location":"implement/obsidian-setup/commit-signing-gpg-hardware-keys/#2-obsidian-gits-role","title":"2. Obsidian-Git's Role","text":"<ul> <li>Respects System Configuration: Obsidian-Git itself does not directly manage GPG keys or signing configurations. Instead, it invokes your system's Git installation. Therefore, Obsidian-Git will respect the global or repository-specific Git configuration for commit signing.</li> <li>No Specific UI for GPG Keys: You will generally not find settings within the Obsidian-Git plugin UI to input GPG keys or directly enable signing. This setup is done at the Git and GPG level on your operating system.</li> </ul>","tags":["gpg","commit-signing","security","hardware-keys","git"]},{"location":"implement/obsidian-setup/commit-signing-gpg-hardware-keys/#3-setting-up-your-system-for-gpg-signed-commits-general-steps","title":"3. Setting Up Your System for GPG Signed Commits (General Steps)","text":"<p>Configuring your system to sign Git commits with GPG involves several steps. The following is a general outline; refer to detailed GPG and Git documentation for platform-specific instructions.</p> <ol> <li>Prerequisite: Install GPG:<ul> <li>Ensure GnuPG is installed on your system. (e.g., <code>gpg --version</code> in your terminal). If not, download and install it from gnupg.org.</li> </ul> </li> <li>Generate or Import a GPG Key:<ul> <li>If you don't have a GPG key, you'll need to generate one: <code>gpg --full-generate-key</code>. Follow the prompts.</li> <li>If you already have a GPG key, you can import it.</li> <li>List your keys with <code>gpg --list-secret-keys --keyid-format LONG</code>. Copy the GPG key ID (the long string of characters) of the key you want to use for signing.</li> </ul> </li> <li> <p>Configure Git:</p> <ul> <li> <p>Tell Git which key to use for signing:</p> Bash<pre><code>git config --global user.signingkey YOUR_GPG_KEY_ID\n</code></pre> <p>(Replace <code>YOUR_GPG_KEY_ID</code> with your actual GPG key ID).     * Optionally, tell Git to sign all commits by default:</p> Bash<pre><code>git config --global commit.gpgsign true\n</code></pre> <p>If you don't set this, you'd have to use <code>git commit -S</code> for every commit, which isn't practical for Obsidian-Git automation.     * Optionally, sign tags as well (recommended if you create annotated tags):</p> Bash<pre><code>git config --global tag.gpgsign true\n</code></pre> </li> <li> <p>These settings can be applied globally (<code>--global</code>) or per-repository (by omitting <code>--global</code> when inside a repository). For Obsidian vaults, global configuration is usually easiest.</p> </li> <li><code>GPG_TTY</code> (Shell Environment - If Needed):</li> <li> <p>In some terminal environments, GPG might need to know which TTY (teletypewriter or terminal) to use for passphrase prompts. You might need to set this in your shell profile (e.g., <code>.bashrc</code>, <code>.zshrc</code>):</p> Bash<pre><code>export GPG_TTY=$(tty)\n</code></pre> </li> <li> <p>This is more relevant if you are signing from the command line and your GPG agent isn't configured.</p> </li> </ul> </li> </ol>","tags":["gpg","commit-signing","security","hardware-keys","git"]},{"location":"implement/obsidian-setup/commit-signing-gpg-hardware-keys/#4-using-hardware-keys-conceptual-overview","title":"4. Using Hardware Keys (Conceptual Overview)","text":"<p>Using a hardware security key (like a YubiKey or Nitrokey) to store your GPG private key significantly enhances security, as the private key never leaves the hardware device.</p> <ul> <li>Advanced GPG Setup: This involves generating your GPG private key (or a subkey) directly on the hardware device or transferring it securely.</li> <li>Obsidian-Git Interaction: Obsidian-Git (via Git, via GPG) will interact with the hardware key when a signature is required. You'll typically be prompted by the hardware key (e.g., to touch it) to authorize the signing operation.</li> <li>Complexity:</li> <li>Detailed setup of GPG with hardware keys is complex and highly specific to your operating system, GPG version, and the hardware key model.</li> <li>Users MUST refer to the official documentation provided by their hardware key manufacturer and the GnuPG project. (This level of detail is beyond the scope of this Obsidian-Git user guide; the focus here is that Obsidian-Git can work with it once your system is configured).</li> </ul>","tags":["gpg","commit-signing","security","hardware-keys","git"]},{"location":"implement/obsidian-setup/commit-signing-gpg-hardware-keys/#5-how-obsidian-git-makes-signed-commits","title":"5. How Obsidian-Git Makes Signed Commits","text":"<ul> <li>If your Git environment is correctly configured with <code>commit.gpgsign true</code> and a valid <code>user.signingkey</code>, then any commits made through Obsidian-Git's interface (manual or automatic backups) should automatically be GPG signed.</li> <li>Obsidian-Git simply calls <code>git commit</code>, and Git handles the signing process as per its configuration.</li> </ul>","tags":["gpg","commit-signing","security","hardware-keys","git"]},{"location":"implement/obsidian-setup/commit-signing-gpg-hardware-keys/#6-verification","title":"6. Verification","text":"<p>You can verify that your commits are being signed:</p> <ul> <li>Terminal:</li> <li>Navigate to your vault's directory in a terminal.</li> <li>Run <code>git log --show-signature</code>. You'll see details about the GPG signature for each signed commit, including the key ID and whether the signature is good.</li> <li>Git Hosting Platforms (e.g., GitHub, GitLab):</li> <li>Platforms like GitHub will display a \"Verified\" badge next to commits that are signed with a GPG key they can link to a user's uploaded public GPG key. Unsigned or unverified commits will not have this badge or may show as \"Unverified.\"</li> </ul>","tags":["gpg","commit-signing","security","hardware-keys","git"]},{"location":"implement/obsidian-setup/commit-signing-gpg-hardware-keys/#7-limitations-and-important-considerations","title":"7. Limitations and Important Considerations","text":"<ul> <li>Mobile Platforms:</li> <li>Commit signing is highly unlikely to work with Obsidian-Git on mobile devices (iOS, Android). The <code>isomorphic-git</code> library used by Obsidian-Git on mobile typically does not have the capability to interact with system GPG tools or hardware keys. Assume commits made from mobile will be unsigned.</li> <li>Passphrase Prompts &amp; GPG Agent:</li> <li>When GPG signs a commit, it may need the passphrase for your private key. If Git is invoked by a background process (like Obsidian-Git's automatic backups), there might be no interactive terminal to enter the passphrase.</li> <li>Solution: Configure a GPG agent (e.g., <code>gpg-agent</code> on Linux/macOS, Kleopatra on Windows as part of Gpg4win). A GPG agent can cache your passphrase for a session or a set period, allowing Git to use the key without a prompt each time. This is crucial for automated signed commits.</li> <li>Initial Setup Complexity:</li> <li>Setting up GPG, generating keys, and configuring Git and a GPG agent can be challenging, especially for users less familiar with command-line tools and cryptographic concepts. This is generally considered an advanced user feature.</li> <li>Recommendation for Security Tiers:</li> <li>For enhanced security and integrity, GPG signing is strongly recommended for any commits made to sensitive branches like <code>L1-internal</code> and especially <code>L2-secure</code> (as outlined in the \"Branch Management Strategy for Security Tiers\" section).</li> </ul>","tags":["gpg","commit-signing","security","hardware-keys","git"]},{"location":"implement/obsidian-setup/commit-signing-gpg-hardware-keys/#8-troubleshooting","title":"8. Troubleshooting","text":"<p>If your commits are not being signed as expected:</p> <ol> <li>Verify Git Configuration:<ul> <li>Check <code>git config user.signingkey</code> and <code>git config commit.gpgsign</code> (globally and in the local repository).</li> </ul> </li> <li>Verify GPG Setup:<ul> <li>Ensure your GPG key is listed in <code>gpg --list-secret-keys</code>.</li> <li>Check that the key is not expired or revoked.</li> </ul> </li> <li>GPG Agent:<ul> <li>Ensure your GPG agent is running and has your passphrase cached if you expect passphrase-less signing.</li> <li>Try signing a commit manually from the terminal (<code>git commit -S -m \"Test signing\"</code>) to see if GPG prompts or errors appear there.</li> </ul> </li> <li>Key Validity/Trust: For verification on platforms like GitHub, ensure your public GPG key has been uploaded to your GitHub account and that the email address associated with the GPG key is a verified email on your GitHub account.</li> </ol> <p>While setting up GPG commit signing requires some initial effort, it provides significant security benefits by ensuring the authenticity and integrity of your commit history. For vaults with sensitive information or collaborative projects, it's a worthwhile investment.</p> <p>Backlinks:</p>","tags":["gpg","commit-signing","security","hardware-keys","git"]},{"location":"implement/obsidian-setup/complete-setup-guide/","title":"Complete Obsidian-Git Integration Setup Guide","text":"","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#overview","title":"Overview","text":"<p>This guide provides comprehensive instructions for setting up Obsidian with Git integration, covering everything from initial installation to advanced troubleshooting. It's designed for organizers who want to use Obsidian as their primary interface for DRUIDS while maintaining full Git functionality.</p>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic computer literacy</li> <li>Obsidian installed (free from obsidian.md)</li> <li>Git installed on your system</li> <li>A Git repository (GitHub, GitLab, or self-hosted)</li> </ul>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#desktop-setup-windowsmaclinux","title":"Desktop Setup (Windows/Mac/Linux)","text":"","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#step-1-install-required-software","title":"Step 1: Install Required Software","text":"","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#install-git","title":"Install Git","text":"<p>Windows: Bash<pre><code># Download from https://git-scm.com/download/win\n# Run installer with default options\n# Verify installation:\ngit --version\n</code></pre></p> <p>macOS: Bash<pre><code># Using Homebrew\nbrew install git\n\n# Or download from https://git-scm.com/download/mac\n# Verify:\ngit --version\n</code></pre></p> <p>Linux: Bash<pre><code># Debian/Ubuntu\nsudo apt update\nsudo apt install git\n\n# Fedora\nsudo dnf install git\n\n# Arch\nsudo pacman -S git\n\n# Verify:\ngit --version\n</code></pre></p>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#install-obsidian","title":"Install Obsidian","text":"<ol> <li>Download from obsidian.md</li> <li>Run installer for your platform</li> <li>Launch Obsidian</li> </ol>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#step-2-set-up-your-vault","title":"Step 2: Set Up Your Vault","text":"","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#option-a-clone-existing-repository","title":"Option A: Clone Existing Repository","text":"Bash<pre><code># Navigate to where you want your vault\ncd ~/Documents\n\n# Clone your repository\ngit clone https://github.com/your-org/your-vault.git my-obsidian-vault\n\n# Or using SSH (recommended for security)\ngit clone git@github.com:your-org/your-vault.git my-obsidian-vault\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#option-b-create-new-vault-with-git","title":"Option B: Create New Vault with Git","text":"Bash<pre><code># Create vault directory\nmkdir ~/Documents/my-obsidian-vault\ncd ~/Documents/my-obsidian-vault\n\n# Initialize Git\ngit init\n\n# Create initial structure\nmkdir -p .obsidian attachments templates\necho \"# My DRUIDS Vault\" &gt; README.md\n\n# Create .gitignore\ncat &gt; .gitignore &lt;&lt; 'EOF'\n# Obsidian cache and workspace\n.obsidian/workspace*\n.obsidian/cache\n.obsidian/plugins/*/data.json\n.trash/\n\n# OS files\n.DS_Store\nThumbs.db\n\n# Temporary files\n*.tmp\n*.bak\n~*\n\n# Sensitive data (customize as needed)\nsecrets/\nprivate/\nEOF\n\n# Initial commit\ngit add .\ngit commit -m \"Initial vault setup\"\n\n# Add remote (replace with your repository URL)\ngit remote add origin https://github.com/your-org/your-vault.git\ngit push -u origin main\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#step-3-install-and-configure-obsidian-git-plugin","title":"Step 3: Install and Configure Obsidian-Git Plugin","text":"","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#install-the-plugin","title":"Install the Plugin","text":"<ol> <li>Open Obsidian</li> <li>Open Settings (gear icon)</li> <li>Navigate to Community plugins</li> <li>Click \"Turn on community plugins\"</li> <li>Click \"Browse\" and search for \"Obsidian Git\"</li> <li>Click \"Install\" then \"Enable\"</li> </ol>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#configure-plugin-settings","title":"Configure Plugin Settings","text":"<ol> <li>Go to Settings \u2192 Community plugins \u2192 Obsidian Git</li> <li>Configure these essential settings:</li> </ol> YAML<pre><code># Auto backup\nVault backup interval (minutes): 15\nAuto pull interval (minutes): 15\nCommit message: \"vault backup: {{date}}\"\nAuto backup after file change: true\nAuto pull on startup: true\n\n# Performance\nDisable push: false\nPull before push: true\n\n# Advanced\nShow status bar: true\nDisable BranchBar: false\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#step-4-authentication-setup","title":"Step 4: Authentication Setup","text":"","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#ssh-keys-recommended","title":"SSH Keys (Recommended)","text":"Bash<pre><code># Generate SSH key\nssh-keygen -t ed25519 -C \"your-email@example.com\"\n\n# Start SSH agent\neval \"$(ssh-agent -s)\"\n\n# Add key to agent\nssh-add ~/.ssh/id_ed25519\n\n# Copy public key\ncat ~/.ssh/id_ed25519.pub\n# Add this to your GitHub/GitLab SSH keys\n\n# Test connection\nssh -T git@github.com\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#https-with-credential-manager","title":"HTTPS with Credential Manager","text":"<p>Windows: Bash<pre><code># Git Credential Manager is included with Git for Windows\ngit config --global credential.helper manager-core\n</code></pre></p> <p>macOS: Bash<pre><code># Use keychain\ngit config --global credential.helper osxkeychain\n</code></pre></p> <p>Linux: Bash<pre><code># Use libsecret\nsudo apt install libsecret-1-0 libsecret-1-dev\ngit config --global credential.helper /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret\n</code></pre></p>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#step-5-test-your-setup","title":"Step 5: Test Your Setup","text":"<ol> <li>Make a test change in Obsidian</li> <li>Wait for auto-backup or use Ctrl/Cmd+P \u2192 \"Obsidian Git: Commit all changes\"</li> <li>Check status bar for sync status</li> <li>Verify on remote repository</li> </ol>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#mobile-setup-iosandroid","title":"Mobile Setup (iOS/Android)","text":"","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#ios-setup-with-working-copy","title":"iOS Setup with Working Copy","text":"<ol> <li>Install Apps:</li> <li>Obsidian from App Store</li> <li> <p>Working Copy from App Store (Git client)</p> </li> <li> <p>Clone Repository in Working Copy:</p> </li> <li>Open Working Copy</li> <li>Tap \"+\" \u2192 \"Clone repository\"</li> <li>Enter repository URL</li> <li> <p>Configure authentication</p> </li> <li> <p>Link to Obsidian:</p> </li> <li>In Working Copy, tap repository</li> <li>Tap \"Share\" \u2192 \"Link Repository\"</li> <li>Choose \"Obsidian\"</li> <li> <p>Select folder location</p> </li> <li> <p>Setup Sync Workflow:</p> </li> <li>Create iOS Shortcuts for:<ul> <li>Pull latest changes</li> <li>Commit and push</li> </ul> </li> <li>Add to home screen for quick access</li> </ol>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#android-setup-with-termux","title":"Android Setup with Termux","text":"<ol> <li>Install Apps:</li> <li>Obsidian from Play Store</li> <li>Termux from F-Droid</li> <li> <p>Termux:API addon</p> </li> <li> <p>Setup Termux: Bash<pre><code># Update packages\npkg update &amp;&amp; pkg upgrade\n\n# Install Git\npkg install git openssh\n\n# Setup storage access\ntermux-setup-storage\n\n# Navigate to shared storage\ncd /storage/emulated/0/Documents\n\n# Clone repository\ngit clone https://github.com/your-org/your-vault.git\n</code></pre></p> </li> <li> <p>Configure Obsidian:</p> </li> <li>Open vault from Documents folder</li> <li>Install Obsidian Git plugin</li> <li> <p>Note: Plugin has limited functionality on mobile</p> </li> <li> <p>Create Sync Scripts: Bash<pre><code># Create sync script\ncat &gt; ~/sync-vault.sh &lt;&lt; 'EOF'\n#!/data/data/com.termux/files/usr/bin/bash\ncd /storage/emulated/0/Documents/your-vault\ngit pull\ngit add .\ngit commit -m \"Mobile sync: $(date)\"\ngit push\nEOF\n\nchmod +x ~/sync-vault.sh\n\n# Add to Termux:Widget for easy access\nmkdir -p ~/.shortcuts\ncp ~/sync-vault.sh ~/.shortcuts/\n</code></pre></p> </li> </ol>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#common-setup-issues-and-solutions","title":"Common Setup Issues and Solutions","text":"","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#issue-permission-denied-publickey","title":"Issue: \"Permission denied (publickey)\"","text":"<p>Solution: Bash<pre><code># Check SSH key is loaded\nssh-add -l\n\n# If not, add it\nssh-add ~/.ssh/id_ed25519\n\n# Ensure correct permissions\nchmod 700 ~/.ssh\nchmod 600 ~/.ssh/id_ed25519\nchmod 644 ~/.ssh/id_ed25519.pub\n</code></pre></p>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#issue-failed-to-connect-to-repository","title":"Issue: \"Failed to connect to repository\"","text":"<p>Solution: 1. Check internet connection 2. Verify repository URL 3. Test Git outside Obsidian: Bash<pre><code>cd /path/to/vault\ngit remote -v\ngit fetch origin\n</code></pre></p>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#issue-merge-conflicts-detected","title":"Issue: \"Merge conflicts detected\"","text":"<p>Solution: 1. Don't panic - your data is safe 2. Open conflicted files in Obsidian 3. Look for conflict markers: Text Only<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nYour version\n=======\nRemote version\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/main\n</code></pre> 4. Edit to keep desired content 5. Remove conflict markers 6. Commit resolution</p>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#issue-plugin-not-working-after-obsidian-update","title":"Issue: Plugin not working after Obsidian update","text":"<p>Solution: 1. Check for plugin updates 2. Disable and re-enable plugin 3. Clear Obsidian cache:    - Settings \u2192 About \u2192 Clear cache 4. Reinstall plugin if needed</p>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#issue-auto-backup-not-working","title":"Issue: Auto-backup not working","text":"<p>Checklist: Bash<pre><code># 1. Check Git configuration\ngit config --list\n\n# 2. Verify authentication works\ngit fetch\n\n# 3. Check for uncommitted changes\ngit status\n\n# 4. Review plugin console\n# Ctrl+Shift+I \u2192 Console tab\n\n# 5. Test manual commit\n# Ctrl/Cmd+P \u2192 \"Obsidian Git: Commit all changes\"\n</code></pre></p>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#advanced-configuration","title":"Advanced Configuration","text":"","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#multiple-vaults-with-different-security-levels","title":"Multiple Vaults with Different Security Levels","text":"Bash<pre><code># Create separate vaults\n~/Documents/\n\u251c\u2500\u2500 druids-public/      # L0 - Public information\n\u251c\u2500\u2500 druids-internal/    # L1 - Internal only\n\u2514\u2500\u2500 druids-secure/      # L2 - Highly sensitive\n\n# Each with own Git repository and branch strategy\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#custom-commit-messages","title":"Custom Commit Messages","text":"JavaScript<pre><code>// In .obsidian/plugins/obsidian-git/data.json\n{\n  \"commitMessage\": \"{{date}} - {{hostname}} - {{numFiles}} files\",\n  \"commitDateFormat\": \"YYYY-MM-DD HH:mm:ss\",\n  // ... other settings\n}\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#pre-commit-hooks","title":"Pre-commit Hooks","text":"Bash<pre><code># .git/hooks/pre-commit\n#!/bin/bash\n\n# Check for sensitive data\nif git diff --cached | grep -E \"(password|secret|private_key)\" ; then\n    echo \"Error: Possible sensitive data detected\"\n    exit 1\nfi\n\n# Ensure no large files\nfind . -size +10M | grep -v .git | while read file; do\n    if git diff --cached --name-only | grep -q \"$file\"; then\n        echo \"Error: Large file detected: $file\"\n        exit 1\n    fi\ndone\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#sync-across-multiple-devices","title":"Sync Across Multiple Devices","text":"YAML<pre><code># Device-specific branches strategy\nmain                 # Protected, requires PR\ndevices/laptop       # Auto-push from laptop\ndevices/phone        # Auto-push from phone\ndevices/tablet       # Auto-push from tablet\n\n# Merge via PR when ready\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#performance-optimization","title":"Performance Optimization","text":"","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#large-vault-optimization","title":"Large Vault Optimization","text":"Bash<pre><code># Add to .gitignore\n# Large files\n*.pdf\n*.mp4\n*.zip\n\n# Cache directories\n.obsidian/cache/\n.obsidian/workspace/\n\n# Use Git LFS for large files\ngit lfs track \"*.pdf\"\ngit lfs track \"*.png\"\ngit lfs track \"*.jpg\"\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#reduce-sync-frequency-for-battery","title":"Reduce Sync Frequency for Battery","text":"YAML<pre><code># Mobile settings\nVault backup interval: 60  # Once per hour\nAuto pull interval: 60     # Once per hour\nAuto backup after file change: false\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#security-best-practices","title":"Security Best Practices","text":"","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#1-never-commit-sensitive-data","title":"1. Never Commit Sensitive Data","text":"Bash<pre><code># Add to .gitignore\nsecrets/\npasswords.md\n*.key\n*.pem\n.env\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#2-use-separate-vaults-for-different-security-levels","title":"2. Use Separate Vaults for Different Security Levels","text":"Bash<pre><code># Public vault\ngit remote add origin https://github.com/org/public-notes.git\n\n# Private vault (different repository)\ngit remote add origin git@private-server:org/secure-notes.git\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#3-enable-2fa-on-git-hosting","title":"3. Enable 2FA on Git Hosting","text":"<ul> <li>GitHub: Settings \u2192 Security \u2192 Two-factor authentication</li> <li>GitLab: Settings \u2192 Account \u2192 Two-Factor Authentication</li> <li>Use hardware key when possible</li> </ul>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#4-regular-security-audits","title":"4. Regular Security Audits","text":"Bash<pre><code># Check for sensitive data in history\ngit log -p | grep -i \"password\\|secret\\|key\\|token\"\n\n# List large files\nfind .git/objects -size +5M\n\n# Check commit authors\ngit log --format='%aN &lt;%aE&gt;' | sort -u\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#troubleshooting-flowchart","title":"Troubleshooting Flowchart","text":"Text Only<pre><code>Problem with Obsidian-Git?\n\u251c\u2500 Sync not working?\n\u2502  \u251c\u2500 Check internet connection\n\u2502  \u251c\u2500 Verify Git credentials\n\u2502  \u251c\u2500 Test manual Git commands\n\u2502  \u2514\u2500 Review plugin settings\n\u251c\u2500 Merge conflicts?\n\u2502  \u251c\u2500 Pull latest changes\n\u2502  \u251c\u2500 Resolve conflicts manually\n\u2502  \u2514\u2500 Commit resolution\n\u251c\u2500 Performance issues?\n\u2502  \u251c\u2500 Check vault size\n\u2502  \u251c\u2500 Review .gitignore\n\u2502  \u251c\u2500 Optimize sync frequency\n\u2502  \u2514\u2500 Consider Git LFS\n\u2514\u2500 Security concerns?\n   \u251c\u2500 Audit commit history\n   \u251c\u2500 Check .gitignore\n   \u251c\u2500 Review access permissions\n   \u2514\u2500 Enable 2FA\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#quick-reference-commands","title":"Quick Reference Commands","text":"Bash<pre><code># Daily operations\ngit status                    # Check current state\ngit pull                      # Get latest changes\ngit add .                     # Stage all changes\ngit commit -m \"message\"       # Commit changes\ngit push                      # Push to remote\n\n# Troubleshooting\ngit log --oneline -10         # Recent commits\ngit diff                      # Unstaged changes\ngit diff --staged             # Staged changes\ngit remote -v                 # Check remotes\ngit config --list             # Check configuration\n\n# Recovery\ngit reset --hard HEAD         # Discard all changes\ngit checkout -- file.md       # Discard file changes\ngit clean -fd                 # Remove untracked files\n</code></pre>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/complete-setup-guide/#getting-help","title":"Getting Help","text":"<ul> <li>Plugin issues: github.com/denolehov/obsidian-git/issues</li> <li>DRUIDS support: Check your organization's tech support channel</li> <li>Git help: <code>git help &lt;command&gt;</code></li> <li>Community: Obsidian Discord server</li> </ul> <p>Remember: Git is your safety net. Even if something goes wrong, your history is preserved and recoverable.</p> <p>Backlinks:</p>","tags":["obsidian","git","setup","installation","mobile","troubleshooting"]},{"location":"implement/obsidian-setup/configuring-automatic-commits/","title":"Configuring Automatic Commits in Obsidian-Git","text":"","tags":["obsidian","git","automatic-commits","configuration","backup"]},{"location":"implement/obsidian-setup/configuring-automatic-commits/#configuring-automatic-commits-in-obsidian-git","title":"Configuring Automatic Commits in Obsidian-Git","text":"<p>Automating commits can be a great way to ensure your notes are regularly backed up to your remote repository. Obsidian-Git offers several options to configure automatic operations. Here's how to set it up:</p>","tags":["obsidian","git","automatic-commits","configuration","backup"]},{"location":"implement/obsidian-setup/configuring-automatic-commits/#1-accessing-plugin-settings","title":"1. Accessing Plugin Settings","text":"<p>To configure automatic commits, you first need to access the Obsidian-Git plugin settings:</p> <ol> <li>Open Obsidian.</li> <li>Go to Settings (usually a gear icon in the bottom-left).</li> <li>In the sidebar of the Settings window, scroll down to Community plugins.</li> <li>Find Obsidian Git in your list of installed plugins and click on its name. If you have many plugins, you can use the search bar at the top of the \"Community plugins\" section.</li> </ol> <p>This will open the settings panel for Obsidian-Git.</p>","tags":["obsidian","git","automatic-commits","configuration","backup"]},{"location":"implement/obsidian-setup/configuring-automatic-commits/#2-enabling-auto-sync","title":"2. Enabling Auto-Sync","text":"<p>Obsidian-Git allows you to schedule automatic operations at regular intervals.</p> <ul> <li>Set Auto-Sync Interval:</li> <li>Look for the option labeled Vault backup interval (minutes) or a similar wording.</li> <li> <p>Enter a numerical value representing the time in minutes between automatic operations. For example, <code>15</code> would mean the plugin attempts to perform the selected operations every 15 minutes. Choose an interval that suits your workflow \u2013 frequent enough to capture changes, but not so frequent that it becomes disruptive.</p> </li> <li> <p>Enable Automatic Operations:</p> </li> <li> <p>You'll typically find checkboxes or toggles for the following operations:</p> <ul> <li>Auto Backup on interval: This is the master switch for enabling automatic operations. Ensure this is turned ON.</li> <li>Auto Pull on interval: If you want your local vault to automatically fetch changes from your remote repository, enable this. This is useful if you edit your notes on multiple devices.</li> <li>Auto Push on interval: If you want your local commits to be automatically pushed to your remote repository, enable this.</li> </ul> <p>It's generally recommended to enable auto pull and auto push if you are enabling auto backup to keep your local and remote repositories synchronized.</p> </li> </ul>","tags":["obsidian","git","automatic-commits","configuration","backup"]},{"location":"implement/obsidian-setup/configuring-automatic-commits/#3-configuring-the-commit-message","title":"3. Configuring the Commit Message","text":"<p>A clear and descriptive commit message is crucial for understanding the history of your changes.</p> <ul> <li>Setting the Automatic Commit Message:</li> <li>Find the setting labeled Commit message for auto backup or similar.</li> <li> <p>In this field, you can define the message that will be used for all automatic commits.</p> </li> <li> <p>Strategies for Meaningful Automatic Commit Messages:</p> </li> <li>Limitations: Currently, Obsidian-Git primarily supports static commit messages for automatic backups. This means the same message will be used for every automatic commit. While there might be community discussions or feature requests for more dynamic messages (e.g., including the names of changed files or a timestamp), it's best to assume this capability is limited unless explicitly stated in the plugin's current version.</li> <li>Good Static Message Examples:<ul> <li><code>\"chore: automatic backup\"</code></li> <li><code>\"docs: periodic vault sync\"</code></li> <li><code>\"style: auto-save notes\"</code></li> <li><code>\"feat: regular snapshot of notes\"</code></li> <li>If you want to include a timestamp (though the commit itself is timestamped by Git), you could use a generic message like: <code>\"chore: vault backup (auto)\"</code> and rely on Git's commit history for the exact time.</li> </ul> </li> <li>Recommendation for Critical Changes: For significant or complex changes, it is highly recommended to perform a manual commit. This allows you to write a detailed and specific commit message that accurately describes the changes made, which is invaluable for future reference. Don't rely on automatic commits for changes that need careful documentation.</li> </ul>","tags":["obsidian","git","automatic-commits","configuration","backup"]},{"location":"implement/obsidian-setup/configuring-automatic-commits/#4-prerequisite-authentication-for-auto-push","title":"4. Prerequisite: Authentication for Auto-Push","text":"<p>For the Auto Push on interval feature to work, your system must be configured to authenticate with your Git remote (e.g., GitHub, GitLab) without requiring manual password entry each time. This typically involves:</p> <ul> <li>HTTPS: Using a Git credential manager (like Git Credential Manager Core) or caching credentials.</li> <li>SSH: Setting up SSH keys and adding the public key to your remote Git provider.</li> </ul> <p>If authentication is not set up correctly, automatic pushes will likely fail. Refer to Git documentation and your remote provider's instructions for setting up non-interactive authentication.</p>","tags":["obsidian","git","automatic-commits","configuration","backup"]},{"location":"implement/obsidian-setup/configuring-automatic-commits/#5-testing-the-setup","title":"5. Testing the Setup","text":"<p>After configuring automatic commits, it's important to test that it's working as expected:</p> <ol> <li>Make a Small Change: Open a note in your Obsidian vault and make a minor, easily identifiable change.</li> <li>Wait for the Interval: Wait for the specified auto-sync interval to pass. For example, if you set it to 5 minutes, wait at least that long.</li> <li>Check Git History:<ul> <li>You can use the Obsidian-Git plugin's interface (if it offers a history view) or a dedicated Git client (like GitKraken, Sourcetree, or the command line <code>git log</code>) to inspect the commit history of your repository.</li> <li>Look for a new commit with the automatic commit message you configured.</li> <li>Verify that the commit includes the small change you made.</li> </ul> </li> <li>Check Remote Repository (if auto-push is enabled): If you enabled auto-push, navigate to your remote repository (e.g., on GitHub) and check if the new commit has been pushed.</li> </ol> <p>If you don't see the expected commit, review your settings, ensure there are actual changes to commit, and check for any error messages within Obsidian (sometimes shown in the top-right corner or in the developer console).</p>","tags":["obsidian","git","automatic-commits","configuration","backup"]},{"location":"implement/obsidian-setup/configuring-automatic-commits/#6-initial-setup-for-new-repositories","title":"6. Initial Setup for New Repositories","text":"<p>If you are setting up Obsidian-Git in a vault that is not yet a Git repository:</p> <ol> <li>Initialize the Repository: You must first initialize a Git repository in your vault's root folder. You can usually do this via a command in the Obsidian-Git plugin settings (e.g., \"Initialize repository\") or manually using the <code>git init</code> command in your vault's directory via a terminal.</li> <li>First Commit: Make an initial commit of your existing files. This can be done manually through the plugin or command line.</li> <li>Configure Remote (Optional but Recommended): Add a remote repository URL (<code>git remote add origin &lt;your-repo-url&gt;</code>) and push your initial commit (<code>git push -u origin main</code> or <code>git push -u origin master</code>) if you want to back up to a remote service.</li> </ol> <p>Once the repository is initialized and ideally connected to a remote, the automatic commit features will function as described above.</p> <p>By following these steps, you can effectively configure automatic commits in Obsidian-Git, helping you maintain a consistent backup and version history of your valuable notes. Remember to balance automation with the need for clear, manual commit messages for significant changes.</p> <p>Backlinks:</p>","tags":["obsidian","git","automatic-commits","configuration","backup"]},{"location":"implement/obsidian-setup/handling-merge-conflicts/","title":"Handling Merge Conflicts","text":"","tags":["git","merge-conflicts","collaboration","resolution","workflow"]},{"location":"implement/obsidian-setup/handling-merge-conflicts/#handling-merge-conflicts","title":"Handling Merge Conflicts","text":"<p>Merge conflicts are a common occurrence in collaborative projects using Git. They happen when Git is unable to automatically reconcile differences between your local changes and changes from the remote repository (or another branch). While they can seem intimidating at first, understanding how to handle them is a key skill for smooth collaboration.</p>","tags":["git","merge-conflicts","collaboration","resolution","workflow"]},{"location":"implement/obsidian-setup/handling-merge-conflicts/#1-what-are-merge-conflicts-and-why-do-they-occur","title":"1. What are Merge Conflicts and Why Do They Occur?","text":"<p>A merge conflict arises when:</p> <ul> <li>You try to pull changes from a remote repository, and the incoming changes modify the same lines of a file that you have also modified locally (and haven't pushed yet).</li> <li>You try to merge one branch into another (e.g., a feature branch back into <code>main</code>), and both branches have made changes to the same part of the same file since they diverged.</li> <li>You try to rebase your work onto an updated branch, and similar overlapping changes exist.</li> </ul> <p>Git is excellent at merging changes automatically when they occur in different parts of a file or in different files. However, when the same lines are edited in conflicting ways, Git doesn't know which version is correct. It then flags the file as conflicted and asks you to resolve it manually.</p>","tags":["git","merge-conflicts","collaboration","resolution","workflow"]},{"location":"implement/obsidian-setup/handling-merge-conflicts/#2-conflict-detection","title":"2. Conflict Detection","text":"<p>Here's how you'll typically know you have a merge conflict:</p> <ul> <li>Obsidian-Git Notifications/Errors:</li> <li>When you perform an operation like \"Obsidian Git: Pull\" or \"Obsidian Git: Sync Unsynced Changes,\" the plugin may show an error message or notification indicating that a merge conflict has occurred and the merge has failed or needs attention.</li> <li>The Obsidian status bar might also display messages related to a merge conflict.</li> <li>Git Conflict Markers in Files:</li> <li> <p>Git directly modifies the conflicted file(s) to show you where the conflicts are. It inserts special markers:</p> Text Only<pre><code>```\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nThis is your local version of the text.\n(Content from your current branch)\n=======\nThis is the incoming version of the text from the remote or other branch.\n(Content from the branch you are trying to merge/pull)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; [commit hash or branch name]\n```\n</code></pre> </li> <li> <p><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>: Indicates the start of the conflicting lines from your current local branch (often referred to as \"ours\" or \"yours\").</p> </li> <li><code>=======</code>: Separates your changes from the incoming changes.</li> <li><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; [commit hash/branch name]</code>: Indicates the end of the conflicting lines from the branch being merged (often referred to as \"theirs\" or \"incoming\").</li> <li>Identifying Conflicted Files:</li> <li>Obsidian-Git Source Control View: The Obsidian-Git plugin usually has a dedicated \"Source Control\" view in the left sidebar. Conflicted files will often be highlighted here, typically under a \"Merge Changes\" or \"Conflicts\" section.</li> <li><code>git status</code> (Terminal): If you are comfortable with the command line, opening a terminal in your vault's root directory and running <code>git status</code> will clearly list any files that are \"unmerged\" or have conflicts.</li> </ul>","tags":["git","merge-conflicts","collaboration","resolution","workflow"]},{"location":"implement/obsidian-setup/handling-merge-conflicts/#3-conflict-resolution-steps-file-by-file","title":"3. Conflict Resolution Steps (File by File)","text":"<p>You need to resolve conflicts in each affected file one by one:</p> <ol> <li>Open the Conflicted File in Obsidian:<ul> <li>Navigate to the conflicted file (identified via Obsidian-Git's UI or <code>git status</code>) and open it in the Obsidian editor.</li> </ul> </li> <li>Interpret the Conflict Markers:<ul> <li>Locate the <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>, <code>=======</code>, and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> markers.</li> <li>The content between <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code> and <code>=======</code> is your version (what was on your branch before the pull/merge).</li> <li>The content between <code>=======</code> and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ...</code> is the incoming version (what Git is trying to bring in from the remote or another branch).</li> </ul> </li> <li> <p>Manually Edit to Resolve:</p> <ul> <li>Your task is to edit this section of the file to reflect the final desired state. You have several choices for each conflict block:<ul> <li>Keep Your Changes: Delete the incoming changes and the conflict markers, leaving only your version.</li> <li>Keep Their Changes: Delete your changes and the conflict markers, leaving only the incoming version.</li> <li>Combine/Rewrite: Manually edit the text, possibly taking parts from both versions, or rewriting the section entirely to integrate both ideas or create a new correct version. This is common for more complex conflicts.</li> </ul> </li> <li> <p>Example:</p> <ul> <li> <p>Before Resolution:</p> Markdown<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nMy preferred title for this section is \"Advanced Techniques\".\n=======\nThe team decided the title should be \"Expert Methods\".\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature-branch-title-update\n</code></pre> </li> <li> <p>After Resolution (choosing \"Expert Methods\" and adding a note):</p> Markdown<pre><code>The team decided the title should be \"Expert Methods\".\n(Note: Previously considered \"Advanced Techniques\" but updated for consistency.)\n</code></pre> </li> </ul> </li> </ul> </li> <li> <p>Crucially: Delete ALL Conflict Markers:</p> <ul> <li>Once you have edited the content to your satisfaction, you must delete all the conflict marker lines (<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ...</code>).</li> <li>The file should look like normal content again, with no Git-specific markers left. If you forget this step, the markers will be committed as actual text in your file.</li> </ul> </li> <li>Save the File: Save your changes in Obsidian.</li> <li>Communicate for Complex Conflicts:<ul> <li>If you're unsure how to resolve a conflict, especially if the changes are complex or involve someone else's work, communicate with your collaborators. Discuss the conflicting changes to decide on the best resolution together. It's better to ask than to make a mistake that overwrites important work.</li> </ul> </li> </ol>","tags":["git","merge-conflicts","collaboration","resolution","workflow"]},{"location":"implement/obsidian-setup/handling-merge-conflicts/#4-staging-and-committing-the-resolution","title":"4. Staging and Committing the Resolution","text":"<p>Once you have resolved the conflicts in a file and saved it:</p> <ol> <li>Stage the Resolved File:<ul> <li>In Obsidian-Git's Source Control view, the resolved file should now appear as \"modified\" rather than \"conflicted.\"</li> <li>Use the \"Stage current file\" option (often a \"+\" icon next to the file) or \"Stage all changes\" if you've resolved all conflicts.</li> <li>Alternatively, from the command palette: \"Obsidian Git: Stage current file\" or \"Obsidian Git: Stage all changes\".</li> </ul> </li> <li>Commit the Merge:<ul> <li>After all conflicted files have been resolved and staged, you need to make a commit to finalize the merge.</li> <li>Use the \"Obsidian Git: Commit staged changes\" command.</li> <li>Git usually provides a default merge commit message (e.g., \"Merge branch 'feature-xyz'\" or \"Merge remote-tracking branch 'origin/main'\"). You can often keep this default message, or add more details if necessary.</li> <li>If you were in the middle of a <code>pull</code> that caused conflicts, this commit finalizes the pull operation.</li> </ul> </li> </ol>","tags":["git","merge-conflicts","collaboration","resolution","workflow"]},{"location":"implement/obsidian-setup/handling-merge-conflicts/#5-pushing-the-resolved-merge","title":"5. Pushing the Resolved Merge","text":"<p>After successfully committing the merge resolution:</p> <ul> <li>If the conflicts occurred during a <code>pull</code> or <code>sync</code>, your local branch is now up-to-date and includes both your previous local changes and the incoming changes, properly merged.</li> <li>You may need to push your changes (including the merge commit) back to the remote if you had local commits that were part of the conflict:</li> <li>Use \"Obsidian Git: Push\".</li> </ul>","tags":["git","merge-conflicts","collaboration","resolution","workflow"]},{"location":"implement/obsidian-setup/handling-merge-conflicts/#6-option-aborting-a-merge","title":"6. Option: Aborting a Merge","text":"<p>If you encounter conflicts and feel overwhelmed, or if you realize you've made a mistake during resolution before committing the merge, you can often abort the merge process:</p> <ul> <li>How to Abort:</li> <li>Terminal: The most reliable way is often via the terminal. Open a terminal in your vault's root directory and run:Text Only<pre><code>```bash\ngit merge --abort\n```\n\n(If the conflict arose from a `git pull`, which is a fetch then a merge, `git merge --abort` is still the command to use. If it was from a `git rebase`, you'd use `git rebase --abort`.)\n</code></pre> <ul> <li>Obsidian-Git Command: Check if your version of Obsidian-Git offers a command like \"Abort merge\" or \"Reset merge.\" This is less common.</li> <li>Caution and Why:</li> <li>Aborting will revert your working directory back to the state it was in before you attempted the merge/pull. Any manual resolutions you made will be lost.</li> <li>Use this if you want a clean slate to re-attempt the merge, or if you want to set aside your local changes to get a clean version of the remote branch first.</li> </ul> </li> </ul>","tags":["git","merge-conflicts","collaboration","resolution","workflow"]},{"location":"implement/obsidian-setup/handling-merge-conflicts/#7-tips-for-prevention-complex-conflicts","title":"7. Tips for Prevention &amp; Complex Conflicts","text":"<ul> <li>Pull/Sync Frequently: The more often you pull changes from the remote (especially before starting new work or when working on shared files), the smaller and less frequent merge conflicts are likely to be.</li> <li>Communicate: When working on the same files as others, communicate about what you're planning to change to avoid overlapping work.</li> <li>Feature Branches: Using feature branches for new work isolates changes and means conflicts are usually handled when merging the feature branch, rather than directly in main shared branches.</li> <li>External Merge Tools: For very complex conflicts involving many lines or intricate code/text, dedicated external Git merge tools (e.g., VS Code's built-in merge editor, Sourcetree, Meld, KDiff3) can provide a more visual and powerful way to resolve differences. You would typically configure Git to use one of these tools.</li> <li>Seek Help: If you're stuck on a particularly nasty conflict, don't hesitate to ask a more experienced Git user on your team for assistance.</li> </ul> <p>Resolving merge conflicts is a normal part of using Git in a team. With practice, you'll become more comfortable identifying and resolving them. Always take your time, understand the changes, and communicate when needed.</p> <p>Backlinks:</p>","tags":["git","merge-conflicts","collaboration","resolution","workflow"]},{"location":"implement/obsidian-setup/merge-request-process/","title":"Merge Request (Pull Request) Process for Democratic Approval","text":"","tags":["pull-requests","merge-requests","collaboration","approval","workflow"]},{"location":"implement/obsidian-setup/merge-request-process/#merge-request-pull-request-process-for-democratic-approval","title":"Merge Request (Pull Request) Process for Democratic Approval","text":"<p>For collaborative vaults, especially those employing the security tier branching strategy, a formal process for proposing, reviewing, and integrating changes is essential. This is typically achieved through Merge Requests (MRs) or Pull Requests (PRs). This guide focuses on using GitHub's Pull Request system, but the principles apply to other Git hosting platforms like GitLab or Bitbucket.</p>","tags":["pull-requests","merge-requests","collaboration","approval","workflow"]},{"location":"implement/obsidian-setup/merge-request-process/#1-clarifying-roles-obsidian-git-vs-git-hosting-platform","title":"1. Clarifying Roles: Obsidian-Git vs. Git Hosting Platform","text":"<p>It's important to understand the distinct roles of Obsidian-Git and your Git hosting platform (e.g., GitHub):</p> <ul> <li>Obsidian-Git (Local Operations):</li> <li>Used for all local Git operations within your Obsidian vault.</li> <li>Creating new branches (e.g., feature branches off a security tier branch like <code>L1-internal</code>).</li> <li>Making and committing changes to your notes.</li> <li>Pushing your local branches (especially feature branches) to the remote repository.</li> <li> <p>Pulling changes from the remote repository to update your local branches.</p> </li> <li> <p>Git Hosting Platform (e.g., GitHub - Remote Operations &amp; Collaboration):</p> </li> <li>Hosts the central/remote Git repository.</li> <li>Manages user access and permissions.</li> <li>Facilitates the Pull Request (PR) creation, review, discussion, and approval process.</li> <li>Handles the merging of approved feature branches into the target (e.g., security tier) branches.</li> <li>Can enforce branch protection rules (e.g., requiring reviews before merging).</li> </ul> <p>You will use Obsidian-Git to prepare your changes and then switch to your web browser to interact with GitHub for the collaborative review and merge process.</p>","tags":["pull-requests","merge-requests","collaboration","approval","workflow"]},{"location":"implement/obsidian-setup/merge-request-process/#2-local-workflow-obsidian-obsidian-git","title":"2. Local Workflow (Obsidian &amp; Obsidian-Git)","text":"<p>Before a Pull Request can be created, you need to prepare your changes locally:</p> <ol> <li>Ensure your Target Branch is Up-to-Date:<ul> <li>Before creating a feature branch, switch to the base branch you intend to eventually merge into (e.g., <code>main</code>, <code>L1-internal</code>).</li> <li>Use \"Obsidian Git: Pull\" to ensure this local branch has the latest changes from the remote.</li> </ul> </li> <li>Create/Checkout a Feature Branch:<ul> <li>Open the command palette (Ctrl/Cmd+P) in Obsidian.</li> <li>Type \"Obsidian Git: Create new branch\".</li> <li>Name your branch descriptively, often prefixed with <code>feature/</code>, <code>fix/</code>, or your initials, and indicating its purpose and parent branch if complex (e.g., <code>feature/L1-internal-user-authentication-docs</code> or <code>johndoe/L1-update-contact-list</code>).</li> <li>This new branch will be based on your currently active branch.</li> </ul> </li> <li>Make and Commit Changes Locally:<ul> <li>Work on your notes, creating new content or modifying existing files.</li> <li>Use \"Obsidian Git: Stage all\" or stage individual files.</li> <li>Use \"Obsidian Git: Commit staged changes.\" Write clear, concise commit messages for each logical change. It's good practice to make several small commits rather than one massive one.</li> </ul> </li> <li>Push the Feature Branch to the Remote Repository:<ul> <li>Once your changes are committed locally and you're ready for review, push your feature branch to the remote repository.</li> <li>Open the command palette and run \"Obsidian Git: Push\". If it's the first time pushing this new branch, Git might require you to set an upstream: <code>git push --set-upstream origin your-feature-branch-name</code>. Obsidian-Git may handle this for you, or you might need to run this from a terminal if you encounter issues.</li> </ul> </li> </ol>","tags":["pull-requests","merge-requests","collaboration","approval","workflow"]},{"location":"implement/obsidian-setup/merge-request-process/#3-creating-the-pull-request-on-github","title":"3. Creating the Pull Request (on GitHub)","text":"<p>With your feature branch pushed to the remote, you can now create a Pull Request:</p> <ol> <li>Navigate to GitHub: Open your repository in your web browser. GitHub usually detects a newly pushed branch and displays a prompt to create a Pull Request. If not:<ul> <li>Go to the \"Pull requests\" tab.</li> <li>Click \"New pull request\".</li> </ul> </li> <li>Select Branches:<ul> <li>Base Branch: Choose the branch you want your changes to be merged into. This will typically be one of your security tier branches (e.g., <code>main</code>, <code>L1-internal</code>, <code>L2-secure</code>).</li> <li>Compare Branch: Choose your feature branch that contains the changes.</li> </ul> </li> <li>PR Description - Crucial for Review:<ul> <li>Title: Write a clear, concise title that summarizes the purpose of the PR.</li> <li>Description: This is very important.<ul> <li>Clearly explain the purpose of the changes.</li> <li>Summarize the key modifications made.</li> <li>Explain how these changes align with the vault's principles or goals.</li> <li>If it addresses a specific issue, link to it.</li> <li>Provide any context reviewers might need (e.g., screenshots, links to discussions).</li> <li>A good PR description helps reviewers understand the changes quickly and speeds up the approval process.</li> </ul> </li> </ul> </li> <li>Create Pull Request: Click the \"Create pull request\" button.</li> </ol>","tags":["pull-requests","merge-requests","collaboration","approval","workflow"]},{"location":"implement/obsidian-setup/merge-request-process/#4-review-and-democratic-approval-process-on-github","title":"4. Review and Democratic Approval Process (on GitHub)","text":"<p>This is where the collaborative \"democratic\" aspect comes into play:</p> <ol> <li>Assign Reviewers (or Request Reviews):<ul> <li>Depending on repository settings or team norms, you might assign specific reviewers from the right-hand sidebar on the PR page.</li> <li>Alternatively, team members may proactively pick up PRs for review.</li> </ul> </li> <li>Discussion and Feedback:<ul> <li>Reviewers will examine the \"Files changed\" tab in the PR.</li> <li>They can leave comments on specific lines of code/text, ask questions, or request modifications.</li> <li>Use GitHub's commenting features to discuss the changes. Keep discussions professional and constructive.</li> </ul> </li> <li>Signifying Approval:<ul> <li>GitHub's \"Approve\" Feature: Reviewers can formally approve the changes by clicking \"Review changes\" and selecting \"Approve.\"</li> <li>Comment Conventions: Some teams also use comment conventions like <code>+1</code>, <code>LGTM</code> (Looks Good To Me), or specific emojis to signify approval, though GitHub's formal approval feature is generally preferred for clarity.</li> </ul> </li> <li>Branch Protection Rules (Recommended):<ul> <li>Repository administrators can set up branch protection rules on GitHub (e.g., for <code>main</code>, <code>L1-internal</code>, <code>L2-secure</code>).</li> <li>These rules can enforce that a certain number of approvals are required before a PR can be merged. They can also require that status checks (like automated tests) pass.</li> </ul> </li> <li>Iterative Review:<ul> <li>The PR author should monitor feedback.</li> <li>If changes are requested, the author makes further commits to their local feature branch (in Obsidian, using Obsidian-Git).</li> <li>After committing, the author pushes these new commits to the same feature branch on the remote. The Pull Request on GitHub will automatically update to show the new commits.</li> <li>This review-update cycle continues until all reviewers are satisfied and have approved the changes.</li> </ul> </li> </ol>","tags":["pull-requests","merge-requests","collaboration","approval","workflow"]},{"location":"implement/obsidian-setup/merge-request-process/#5-merging-the-pull-request-on-github","title":"5. Merging the Pull Request (on GitHub)","text":"<p>Once the PR has received the necessary approvals and any required checks have passed:</p> <ol> <li>Who Merges: Typically, the PR author (if they have merge permissions), a designated maintainer, or anyone with appropriate permissions can merge the PR. This depends on your team's workflow and branch protection rules.</li> <li>When to Merge: Only merge after all discussions are resolved and the required approvals are obtained.</li> <li>Merge Strategies (Brief Note): GitHub offers several ways to merge:<ul> <li>Create a merge commit: Keeps all commits from the feature branch and adds a merge commit. This preserves detailed history but can make the main branch history look complex.</li> <li>Squash and merge: Combines all commits from the feature branch into a single commit on the base branch. This creates a cleaner, linear history on the main branch. Often preferred for feature branches.</li> <li>Rebase and merge: Re-applies commits from the feature branch onto the base branch. Use with caution, especially in shared branches.</li> <li>Choose a strategy that suits your team's preference for history readability. \"Squash and merge\" is often a good default for feature branches.</li> </ul> </li> <li>Deleting the Feature Branch Post-Merge:<ul> <li>GitHub usually offers an option to automatically delete the feature branch after the PR is merged. This is good practice to keep the repository clean. The branch still exists in the commit history if needed but is removed from the list of active branches.</li> </ul> </li> </ol>","tags":["pull-requests","merge-requests","collaboration","approval","workflow"]},{"location":"implement/obsidian-setup/merge-request-process/#6-post-merge-updating-local-repositories","title":"6. Post-Merge: Updating Local Repositories","text":"<p>Once the PR is merged into the target branch on GitHub (e.g., <code>L1-internal</code>):</p> <ol> <li>All Collaborators (including the PR author) Must Update Their Local Clones:<ul> <li>Switch to the corresponding local branch (e.g., <code>L1-internal</code>) in Obsidian using \"Obsidian Git: Checkout branch\".</li> <li>Run \"Obsidian Git: Pull\" to fetch the newly merged changes from the remote repository.</li> <li>This ensures everyone's local version of the tier branch is up-to-date.</li> </ul> </li> </ol>","tags":["pull-requests","merge-requests","collaboration","approval","workflow"]},{"location":"implement/obsidian-setup/merge-request-process/#7-forward-reference-to-automation","title":"7. Forward Reference to Automation","text":"<p>Manual PR processes can be enhanced with automation:</p> <ul> <li>GitHub Actions (to be detailed in a later section) can be configured to:</li> <li>Send notifications about new PRs or review requests.</li> <li>Run automated checks (e.g., markdown linting, spell checking) on the changes in a PR.</li> <li>Potentially automate merging if certain conditions are met (use with caution).</li> </ul> <p>By following this Pull Request process, teams can ensure that changes are properly reviewed, discussed, and approved before being integrated into key branches, maintaining the integrity and security of the shared Obsidian vault. This democratic approach fosters collaboration and quality.</p> <p>Backlinks:</p>","tags":["pull-requests","merge-requests","collaboration","approval","workflow"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/","title":"Obsidian-Git: Comprehensive Workflow Guide for Secure and Collaborative Vault Management","text":"","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#introduction","title":"Introduction","text":"<p>This guide provides a comprehensive overview of workflows and best practices for using the Obsidian-Git plugin. Its purpose is to help users leverage Obsidian-Git for robust version control, data backup, and effective collaboration, with a particular emphasis on maintaining security for sensitive notes and implementing democratic approval processes for shared vaults.</p> <p>By understanding and implementing the strategies outlined here, you can enhance your productivity, safeguard your valuable information, and work more effectively with others in a shared Obsidian environment.</p> <p>This guide covers key topics including:</p> <ul> <li>Setting up and configuring automatic commits and synchronization.</li> <li>Implementing a branch management strategy for different security tiers of notes.</li> <li>Following a structured Merge Request (Pull Request) process for democratic approvals.</li> <li>Handling and resolving merge conflicts.</li> <li>Advanced security practices like commit signing with GPG and hardware keys.</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Configuring Automatic Commits</li> <li>Automated Backup and Synchronization</li> <li>Branch Management Strategy for Security Tiers</li> <li>Merge Request (Pull Request) Process for Democratic Approval</li> <li>Handling Merge Conflicts</li> <li>Commit Signing with GPG (and Hardware Keys)</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#configuring-automatic-commits-in-obsidian-git","title":"Configuring Automatic Commits in Obsidian-Git","text":"<p>Automating commits can be a great way to ensure your notes are regularly backed up to your remote repository. Obsidian-Git offers several options to configure automatic operations. Here's how to set it up:</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#1-accessing-plugin-settings","title":"1. Accessing Plugin Settings","text":"<p>To configure automatic commits, you first need to access the Obsidian-Git plugin settings:</p> <ol> <li>Open Obsidian.</li> <li>Go to Settings (usually a gear icon in the bottom-left).</li> <li>In the sidebar of the Settings window, scroll down to Community plugins.</li> <li>Find Obsidian Git in your list of installed plugins and click on its name. If you have many plugins, you can use the search bar at the top of the \"Community plugins\" section.</li> </ol> <p>This will open the settings panel for Obsidian-Git.</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#2-enabling-auto-sync","title":"2. Enabling Auto-Sync","text":"<p>Obsidian-Git allows you to schedule automatic operations at regular intervals.</p> <ul> <li>Set Auto-Sync Interval:</li> <li>Look for the option labeled Vault backup interval (minutes) or a similar wording.</li> <li> <p>Enter a numerical value representing the time in minutes between automatic operations. For example, <code>15</code> would mean the plugin attempts to perform the selected operations every 15 minutes. Choose an interval that suits your workflow \u2013 frequent enough to capture changes, but not so frequent that it becomes disruptive.</p> </li> <li> <p>Enable Automatic Operations:</p> </li> <li> <p>You'll typically find checkboxes or toggles for the following operations:</p> <ul> <li>Auto Backup on interval: This is the master switch for enabling automatic operations. Ensure this is turned ON.</li> <li>Auto Pull on interval: If you want your local vault to automatically fetch changes from your remote repository, enable this. This is useful if you edit your notes on multiple devices.</li> <li>Auto Push on interval: If you want your local commits to be automatically pushed to your remote repository, enable this.</li> </ul> <p>It's generally recommended to enable auto pull and auto push if you are enabling auto backup to keep your local and remote repositories synchronized.</p> </li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#3-configuring-the-commit-message","title":"3. Configuring the Commit Message","text":"<p>A clear and descriptive commit message is crucial for understanding the history of your changes.</p> <ul> <li>Setting the Automatic Commit Message:</li> <li>Find the setting labeled Commit message for auto backup or similar.</li> <li> <p>In this field, you can define the message that will be used for all automatic commits.</p> </li> <li> <p>Strategies for Meaningful Automatic Commit Messages:</p> </li> <li>Limitations: Currently, Obsidian-Git primarily supports static commit messages for automatic backups. This means the same message will be used for every automatic commit. While there might be community discussions or feature requests for more dynamic messages (e.g., including the names of changed files or a timestamp), it's best to assume this capability is limited unless explicitly stated in the plugin's current version.</li> <li>Good Static Message Examples:<ul> <li><code>\"chore: automatic backup\"</code></li> <li><code>\"docs: periodic vault sync\"</code></li> <li><code>\"style: auto-save notes\"</code></li> <li><code>\"feat: regular snapshot of notes\"</code></li> <li>If you want to include a timestamp (though the commit itself is timestamped by Git), you could use a generic message like: <code>\"chore: vault backup (auto)\"</code> and rely on Git's commit history for the exact time.</li> </ul> </li> <li>Recommendation for Critical Changes: For significant or complex changes, it is highly recommended to perform a manual commit. This allows you to write a detailed and specific commit message that accurately describes the changes made, which is invaluable for future reference. Don't rely on automatic commits for changes that need careful documentation.</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#4-prerequisite-authentication-for-auto-push","title":"4. Prerequisite: Authentication for Auto-Push","text":"<p>For the Auto Push on interval feature to work, your system must be configured to authenticate with your Git remote (e.g., GitHub, GitLab) without requiring manual password entry each time. This typically involves:</p> <ul> <li>HTTPS: Using a Git credential manager (like Git Credential Manager Core) or caching credentials.</li> <li>SSH: Setting up SSH keys and adding the public key to your remote Git provider.</li> </ul> <p>If authentication is not set up correctly, automatic pushes will likely fail. Refer to Git documentation and your remote provider's instructions for setting up non-interactive authentication.</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#5-testing-the-setup","title":"5. Testing the Setup","text":"<p>After configuring automatic commits, it's important to test that it's working as expected:</p> <ol> <li>Make a Small Change: Open a note in your Obsidian vault and make a minor, easily identifiable change.</li> <li>Wait for the Interval: Wait for the specified auto-sync interval to pass. For example, if you set it to 5 minutes, wait at least that long.</li> <li>Check Git History:<ul> <li>You can use the Obsidian-Git plugin's interface (if it offers a history view) or a dedicated Git client (like GitKraken, Sourcetree, or the command line <code>git log</code>) to inspect the commit history of your repository.</li> <li>Look for a new commit with the automatic commit message you configured.</li> <li>Verify that the commit includes the small change you made.</li> </ul> </li> <li>Check Remote Repository (if auto-push is enabled): If you enabled auto-push, navigate to your remote repository (e.g., on GitHub) and check if the new commit has been pushed.</li> </ol> <p>If you don't see the expected commit, review your settings, ensure there are actual changes to commit, and check for any error messages within Obsidian (sometimes shown in the top-right corner or in the developer console).</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#6-initial-setup-for-new-repositories","title":"6. Initial Setup for New Repositories","text":"<p>If you are setting up Obsidian-Git in a vault that is not yet a Git repository:</p> <ol> <li>Initialize the Repository: You must first initialize a Git repository in your vault's root folder. You can usually do this via a command in the Obsidian-Git plugin settings (e.g., \"Initialize repository\") or manually using the <code>git init</code> command in your vault's directory via a terminal.</li> <li>First Commit: Make an initial commit of your existing files. This can be done manually through the plugin or command line.</li> <li>Configure Remote (Optional but Recommended): Add a remote repository URL (<code>git remote add origin &lt;your-repo-url&gt;</code>) and push your initial commit (<code>git push -u origin main</code> or <code>git push -u origin master</code>) if you want to back up to a remote service.</li> </ol> <p>Once the repository is initialized and ideally connected to a remote, the automatic commit features will function as described above.</p> <p>By following these steps, you can effectively configure automatic commits in Obsidian-Git, helping you maintain a consistent backup and version history of your valuable notes. Remember to balance automation with the need for clear, manual commit messages for significant changes.</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#automated-backup-and-synchronization","title":"Automated Backup and Synchronization","text":"<p>Automating the backup and synchronization of your Obsidian vault with Obsidian-Git can significantly enhance your workflow, data safety, and collaboration capabilities. This section guides you through configuring and understanding these automated processes.</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#1-purpose-of-automation","title":"1. Purpose of Automation","text":"<p>Setting up automated backup and synchronization offers several key benefits:</p> <ul> <li>Data Safety: Regular, automatic commits and pushes ensure your notes are frequently backed up to a remote repository, protecting against local data loss (e.g., hardware failure).</li> <li>Version History: Consistent commits create a detailed version history, allowing you to revert to previous states of your notes if needed.</li> <li>Seamless Collaboration: For shared vaults, automation helps keep everyone's local version more aligned with the central repository, reducing merge conflicts when changes are pulled from others.</li> <li>Cross-Device Synchronization: If you use Obsidian on multiple devices, automated sync keeps your notes consistent across all of them.</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#2-accessing-obsidian-git-settings","title":"2. Accessing Obsidian-Git Settings","text":"<p>As a reminder, you can access the Obsidian-Git plugin settings by:</p> <ol> <li>Opening Obsidian.</li> <li>Navigating to Settings (gear icon).</li> <li>Selecting Community plugins from the sidebar.</li> <li>Clicking on Obsidian Git from your list of installed plugins.</li> </ol>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#3-core-configuration-scheduled-sync","title":"3. Core Configuration (Scheduled Sync)","text":"<p>The primary automation feature is the scheduled execution of Git operations.</p> <ul> <li>Enabling and Setting the Interval:</li> <li>Look for an option like Vault backup interval (minutes) or Auto-Sync Interval.</li> <li>Enable this feature (often a toggle switch).</li> <li> <p>Set a numerical value for the interval in minutes (e.g., <code>15</code> for every 15 minutes, <code>60</code> for every hour). Choose an interval that balances frequency with performance and potential disruption. For active note-takers, 15-30 minutes is common.</p> </li> <li> <p>Recommended Operational Order: Pull, then Commit, then Push:</p> </li> <li>To minimize merge conflicts and ensure you're working with the latest version of your notes, the ideal sequence of automated operations is:         1. Pull: Fetch changes from the remote repository and merge them into your local current branch. This ensures you have others' latest work before committing your own.         2. Commit: Commit any local changes you've made to your notes.         3. Push: Push your local commits (including any new changes you just pulled and merged, and your own new commits) to the remote repository.</li> <li> <p>Configuration:</p> <ul> <li>Separate Options: Some versions of Obsidian-Git might have separate toggles for \"Auto Pull on interval,\" \"Auto Backup on interval\" (for commits), and \"Auto Push on interval.\" If so, enable all three to achieve the full Pull -&gt; Commit -&gt; Push sequence. The plugin is generally designed to perform them in this logical order if all are enabled for the interval.</li> <li>Combined \"Sync\" Option: Newer versions or other Git plugins might offer a single \"Auto Sync on interval\" or similar option. This typically implies the Pull -&gt; Commit -&gt; Push sequence. Check the plugin's documentation if unclear.</li> <li>If only \"Auto Backup/Commit\" and \"Auto Push\" are available: Enabling these will commit your local changes and then push them. However, without an \"Auto Pull\" first, you risk pushing changes that might conflict with un-pulled remote changes. Prioritize plugins or configurations that allow for an automatic pull before commit and push if possible.</li> </ul> </li> <li> <p>Commit Message Guidance:</p> </li> <li>Refer to the \"Configuring Automatic Commits\" section for detailed advice on setting a meaningful Commit message for auto backup. A good static message like <code>\"chore: automatic vault sync\"</code> or <code>\"docs: periodic backup\"</code> is usually sufficient for automated commits.</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#4-additional-feature-auto-pull-on-startup","title":"4. Additional Feature: Auto-Pull on Startup","text":"<ul> <li>What it is: Many versions of Obsidian-Git offer an option like Pull updates on startup or Auto-pull on Obsidian launch.</li> <li>Benefit: When enabled, Obsidian-Git will automatically attempt to pull the latest changes from your remote repository every time you open your Obsidian vault.</li> <li>Recommendation: It is highly recommended to enable this feature. This helps ensure you start each Obsidian session with the most up-to-date version of your notes, especially important if you collaborate or use multiple devices.</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#5-prerequisites-for-successful-automation","title":"5. Prerequisites for Successful Automation","text":"<p>For automated operations to work reliably, ensure the following are in place:</p> <ol> <li>Initialized Git Repository: Your vault must be an initialized Git repository.</li> <li>Configured Remote: A remote repository (e.g., on GitHub, GitLab) must be added to your local Git configuration (e.g., named <code>origin</code>). Automated push and pull need a destination/source.</li> <li>Correct Git Authentication: Your system must be set up to authenticate with the remote repository without requiring manual password/passphrase entry each time. This usually involves SSH keys or a credential manager for HTTPS. (Refer to \"Configuring Automatic Commits\" - Prerequisite: Authentication for Auto-Push).</li> <li>Absence of Unresolved Merge Conflicts: If your repository has existing unresolved merge conflicts, automated operations (especially commit and push) will likely fail until the conflicts are resolved manually.</li> </ol>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#6-monitoring-and-verification","title":"6. Monitoring and Verification","text":"<p>While automation is convenient, it's not \"set it and forget it.\" Periodically check that it's working:</p> <ul> <li>Plugin Status Indicators:</li> <li>Obsidian-Git may have icons or messages in Obsidian's status bar indicating its last sync time or current status (e.g., \"synced X minutes ago,\" \"syncing,\" \"error\"). Pay attention to these.</li> <li>Manual History Checks:</li> <li>Local: Occasionally use \"Obsidian Git: Open Source Control View\" and check the commit history. You should see your automated commits with the message you configured.</li> <li>Remote: Log into your Git hosting platform (e.g., GitHub) and verify that these commits are appearing on the remote repository.</li> <li>Error Messages:</li> <li>If Obsidian-Git encounters an error during an automated operation, it might display a notification. Don't ignore these. Investigate them promptly.</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#7-troubleshooting-basic-automation-failures","title":"7. Troubleshooting Basic Automation Failures","text":"<p>If you notice automated operations are not working:</p> <ol> <li>Check Authentication: This is the most common culprit. Test if you can manually push/pull from a terminal or using Obsidian-Git's manual commands. If prompted for credentials, your authentication isn't set up for non-interactive use.</li> <li>Check for Merge Conflicts: Manually run \"Obsidian Git: Pull.\" If it reports conflicts, resolve them. (See \"Handling Merge Conflicts\" section).</li> <li>Internet Connection: Ensure you have a stable internet connection.</li> <li>Plugin Settings: Double-check that the auto-sync interval is enabled and the desired operations (pull, commit, push) are selected.</li> <li>Try Manual Operations: Attempt a manual \"Obsidian Git: Pull,\" then \"Obsidian Git: Commit all changes,\" then \"Obsidian Git: Push.\" This can often give more specific error messages that help diagnose the problem.</li> <li>Obsidian Developer Console: For more cryptic issues, you can open the Obsidian Developer Console (usually Ctrl+Shift+I or Cmd+Option+I, then go to the \"Console\" tab) to look for error messages from the plugin.</li> </ol>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#8-branch-considerations-for-sync","title":"8. Branch Considerations for Sync","text":"<ul> <li>Sync Operates on the Current Branch: Automated sync operations (pull, commit, push) will always apply to the Git branch that is currently checked out in your Obsidian vault.</li> <li>Cautions for L1/L2 Sensitive Branches (Reiteration):</li> <li>As mentioned in \"Branch Management Strategy for Security Tiers,\" if you have globally enabled \"Auto Push on interval,\" this will attempt to push any branch you are currently on, including potentially sensitive branches like <code>L1-internal</code> or <code>L2-secure</code>.</li> <li>For these sensitive branches, you might prefer:<ul> <li>Manual Push: Disable global auto-push and use \"Obsidian Git: Push\" manually after reviewing changes on these branches.</li> <li>Temporarily Disable Auto-Push: If practical, disable the \"Auto Push on interval\" setting before switching to a sensitive branch and re-enable it when switching back to a less sensitive one (e.g., <code>main</code>). This is more error-prone.</li> </ul> </li> <li>Always be mindful of which branch you are on when relying on automated push operations.</li> </ul> <p>By carefully configuring and monitoring automated backup and synchronization, you can leverage Obsidian-Git to maintain a robust and reliable system for your notes, ensuring they are safe, versioned, and accessible.</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#branch-management-strategy-for-security-tiers","title":"Branch Management Strategy for Security Tiers","text":"<p>When managing notes with varying levels of sensitivity within a single Obsidian vault, a robust branch management strategy is crucial. This strategy helps prevent accidental exposure of sensitive information and allows for controlled collaboration. This guide outlines a tier-based branching model using Obsidian-Git.</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#1-core-principles","title":"1. Core Principles","text":"<p>This strategy revolves around the following core principles:</p> <ol> <li>Branch per Tier: Each distinct security or sensitivity level will have its own dedicated Git branch.</li> <li>Default to Lowest Tier: The vault should typically default to the lowest sensitivity tier branch (e.g., <code>main</code> for public/unclassified information). This minimizes the risk of accidentally committing sensitive information to a less secure branch.</li> <li>Conscious Switching: Moving to a higher sensitivity tier branch requires a deliberate, conscious action by the user.</li> <li>No Direct Merge Down of Sensitive Information: Information from a higher sensitivity branch (e.g., <code>L2-secure</code>) should never be directly merged into a lower sensitivity branch (e.g., <code>L1-internal</code> or <code>main</code>). If information needs to be declassified, it must be done manually by copying and pasting, ensuring no sensitive remnants remain.</li> <li>Optional Feature Branches: For complex changes within a specific tier, users can create temporary feature branches off their current tier branch (e.g., <code>L1-internal-feature-x</code>). These should be merged back into their parent tier branch upon completion.</li> </ol>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#2-tier-branch-details","title":"2. Tier Branch Details","text":"<p>Here's a breakdown of the recommended branches:</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#main-l0-publicunclassified","title":"<code>main</code> (L0 - Public/Unclassified)","text":"<ul> <li>Purpose: This branch is for notes and information that are considered public, unclassified, or safe for general sharing. It's the default branch your vault should be on most of the time.</li> <li>Typical Obsidian-Git Workflow:</li> <li>Automatic commits and pushes can be safely enabled for this branch.</li> <li>Regular synchronization with the remote <code>main</code> branch.</li> <li>Collaboration Notes:</li> <li>Suitable for open collaboration.</li> <li>Changes made here can be freely shared.</li> <li>If collaborating, ensure all collaborators understand this is the public tier.</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#l1-internal-l1-internal-use-only","title":"<code>L1-internal</code> (L1 - Internal Use Only)","text":"<ul> <li>Purpose: This branch is for notes containing information that is not for public release but is suitable for internal team members or personal private use. This might include internal project details, meeting notes not meant for external eyes, or drafts of documents before they are sanitized for public release.</li> <li>Explicit Switching Workflow with Obsidian-Git:<ol> <li>Before Switching:<ul> <li>Ensure all changes on your current branch (e.g., <code>main</code>) are committed or stashed. Use the Obsidian-Git \"Commit all changes\" or \"Commit staged changes\" command.</li> <li>Verify your current branch status using the Obsidian-Git status bar or <code>git status</code> command.</li> </ul> </li> <li>Switch Branch: Use the Obsidian-Git command palette (Ctrl/Cmd+P) to search for and select \"Obsidian Git: Checkout branch\" and choose <code>L1-internal</code>.</li> <li>After Switching:<ul> <li>Verify you are on the <code>L1-internal</code> branch.</li> <li>Pull the latest changes for <code>L1-internal</code> from the remote to ensure your local branch is up-to-date before making new commits: \"Obsidian Git: Pull\".</li> </ul> </li> </ol> </li> <li>Crucial Pre/Post Switching Commit Discipline:</li> <li>ALWAYS commit or stash pending changes on your current branch BEFORE switching to <code>L1-internal</code>. Failure to do so can result in unclassified changes being accidentally brought into the <code>L1-internal</code> branch or vice-versa.</li> <li>ALWAYS commit your <code>L1-internal</code> changes BEFORE switching back to <code>main</code> (or any other branch).</li> <li>Auto-Commit/Push Considerations:</li> <li>Auto-Commit: Can be useful, but ensure the commit message for auto-backups is generic enough (e.g., <code>\"chore: L1 internal sync\"</code>).</li> <li>Auto-Push: Exercise caution. If you frequently switch branches, you might prefer to manually push changes on <code>L1-internal</code> to have more control and avoid accidentally pushing incomplete or sensitive work prematurely. If auto-push is enabled globally, consider temporarily disabling it when working on <code>L1-internal</code> if this is a concern (see \"Plugin Limitations\" below).</li> <li>Collaboration Notes:</li> <li>Suitable for collaboration with trusted internal team members.</li> <li>Ensure collaborators are aware they are on the <code>L1-internal</code> branch and understand its sensitivity level.</li> <li>The remote repository for <code>L1-internal</code> should have access controls limiting it to authorized personnel.</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#l2-secure-l2-highly-sensitive","title":"<code>L2-secure</code> (L2 - Highly Sensitive)","text":"<ul> <li>Purpose: This branch is for notes containing highly sensitive, confidential, or restricted information. Access should be strictly controlled. This could include personal identifiable information (PII), trade secrets, critical security information, etc.</li> <li>Explicit Switching Workflow:</li> <li>Follow the same rigorous pre/post switching commit discipline as with <code>L1-internal</code>.</li> <li>The commands are the same: \"Obsidian Git: Checkout branch\" to <code>L2-secure</code>, and \"Obsidian Git: Pull\" after switching.</li> <li>Extreme Care Notes (Commit Discipline):</li> <li>Meticulous attention to detail is paramount. Double-check the current branch before every commit.</li> <li>Ensure no uncommitted changes from lower tiers are accidentally carried over.</li> <li>Before pushing, review the changes staged for commit very carefully.</li> <li>Recommendations for Auto-Push:</li> <li>Strongly Recommended: Disable global auto-push if you use this tier.</li> <li>Always use manual push for the <code>L2-secure</code> branch. This provides a final checkpoint to ensure only intended information is transmitted.</li> <li>Automatic commits can still be used locally, but the push to the remote should be a deliberate manual action.</li> <li>Collaboration Notes:</li> <li>Collaboration on this tier should be minimal and only with individuals who absolutely require access.</li> <li>All collaborators must be thoroughly trained on the handling procedures for this level of data.</li> <li>Stricter Remote Repository Access Controls:</li> <li>The remote repository hosting the <code>L2-secure</code> branch (if pushed at all) MUST have highly restrictive access controls. This might involve separate private repositories, branch protection rules, and multi-factor authentication for all users with access. Consider if this tier should even have a remote, or if it should remain local-only or pushed to a highly secured, air-gapped, or end-to-end encrypted storage.</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#3-implementation-notes-considerations","title":"3. Implementation Notes &amp; Considerations","text":"<ul> <li>Potential Plugin Limitations (Global Auto-Sync):</li> <li>Obsidian-Git's auto-sync settings (backup interval, auto-pull, auto-push) are typically global. This means if auto-push is enabled, it will attempt to push any branch you are currently on after a commit.</li> <li>Mitigation for L1/L2:<ul> <li>Manual Push: The simplest approach is to disable global auto-push in Obsidian-Git settings and manually push changes for <code>L1-internal</code> and <code>L2-secure</code> using the \"Obsidian Git: Push\" command.</li> <li>Temporary Disable: If you prefer to keep auto-push for <code>main</code>, you could temporarily disable the \"Auto Push on interval\" setting before switching to <code>L1-internal</code> or <code>L2-secure</code>, and re-enable it when switching back to <code>main</code>. This is more cumbersome and error-prone.</li> </ul> </li> <li>Importance of User Training:</li> <li>All users of the vault must be trained on this branching strategy.</li> <li>Key training points:<ul> <li>Always commit (or stash) changes before switching branches.</li> <li>Always verify the current active branch before committing sensitive information (Obsidian's status bar usually shows the current Git branch if the plugin is active).</li> <li>Understand the sensitivity level of each branch.</li> </ul> </li> <li>The Role of <code>.gitignore</code>:</li> <li>Utilize a comprehensive <code>.gitignore</code> file to prevent common Obsidian files (cache, workspace settings if not shared, etc.) and any OS-specific files (e.g., <code>.DS_Store</code>, <code>thumbs.db</code>) from being committed to any branch.</li> <li>You might also consider <code>.gitignore</code> for specific large files or temporary files that don't need to be versioned within any security tier.</li> <li>Handling Accidental Commits:</li> <li>Mistakes can happen. If sensitive information is accidentally committed to the wrong branch (e.g., L1 data to <code>main</code>):<ul> <li>Do NOT push the change if it hasn't been pushed yet!</li> <li>A detailed procedure for remediating such incidents (e.g., using <code>git reset</code>, <code>git rebase -i</code>, or filtering branch history) should be documented and understood by users. This is a more advanced Git topic and will be covered in a separate \"Incident Response\" section (placeholder). For now, the immediate action is to avoid pushing and seek help if unsure.</li> </ul> </li> <li>Future Security Enhancements (Forward Reference):</li> <li>For <code>L1-internal</code> and especially <code>L2-secure</code> branches, consider implementing additional security measures:<ul> <li>Signed Commits: Use GPG keys to sign commits, verifying the author's identity. Obsidian-Git may have settings to enable this if your Git environment is configured for it. (See \"Commit Signing with GPG (and Hardware Keys))\"</li> <li>Hardware Keys: For ultimate security on <code>L2-secure</code> pushes, consider requiring hardware security keys (like YubiKey) for signing commits or authenticating to the remote repository. (See \"Commit Signing with GPG (and Hardware Keys))\"</li> </ul> </li> </ul> <p>This branch management strategy provides a framework for handling notes of varying sensitivity. Its effectiveness relies on user diligence, proper configuration, and awareness of the potential risks and mitigation techniques. Always prioritize the security of sensitive information.</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#merge-request-pull-request-process-for-democratic-approval","title":"Merge Request (Pull Request) Process for Democratic Approval","text":"<p>For collaborative vaults, especially those employing the security tier branching strategy, a formal process for proposing, reviewing, and integrating changes is essential. This is typically achieved through Merge Requests (MRs) or Pull Requests (PRs). This guide focuses on using GitHub's Pull Request system, but the principles apply to other Git hosting platforms like GitLab or Bitbucket.</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#1-clarifying-roles-obsidian-git-vs-git-hosting-platform","title":"1. Clarifying Roles: Obsidian-Git vs. Git Hosting Platform","text":"<p>It's important to understand the distinct roles of Obsidian-Git and your Git hosting platform (e.g., GitHub):</p> <ul> <li>Obsidian-Git (Local Operations):</li> <li>Used for all local Git operations within your Obsidian vault.</li> <li>Creating new branches (e.g., feature branches off a security tier branch like <code>L1-internal</code>).</li> <li>Making and committing changes to your notes.</li> <li>Pushing your local branches (especially feature branches) to the remote repository.</li> <li> <p>Pulling changes from the remote repository to update your local branches.</p> </li> <li> <p>Git Hosting Platform (e.g., GitHub - Remote Operations &amp; Collaboration):</p> </li> <li>Hosts the central/remote Git repository.</li> <li>Manages user access and permissions.</li> <li>Facilitates the Pull Request (PR) creation, review, discussion, and approval process.</li> <li>Handles the merging of approved feature branches into the target (e.g., security tier) branches.</li> <li>Can enforce branch protection rules (e.g., requiring reviews before merging).</li> </ul> <p>You will use Obsidian-Git to prepare your changes and then switch to your web browser to interact with GitHub for the collaborative review and merge process.</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#2-local-workflow-obsidian-obsidian-git","title":"2. Local Workflow (Obsidian &amp; Obsidian-Git)","text":"<p>Before a Pull Request can be created, you need to prepare your changes locally:</p> <ol> <li>Ensure your Target Branch is Up-to-Date:<ul> <li>Before creating a feature branch, switch to the base branch you intend to eventually merge into (e.g., <code>main</code>, <code>L1-internal</code>).</li> <li>Use \"Obsidian Git: Pull\" to ensure this local branch has the latest changes from the remote.</li> </ul> </li> <li>Create/Checkout a Feature Branch:<ul> <li>Open the command palette (Ctrl/Cmd+P) in Obsidian.</li> <li>Type \"Obsidian Git: Create new branch\".</li> <li>Name your branch descriptively, often prefixed with <code>feature/</code>, <code>fix/</code>, or your initials, and indicating its purpose and parent branch if complex (e.g., <code>feature/L1-internal-user-authentication-docs</code> or <code>johndoe/L1-update-contact-list</code>).</li> <li>This new branch will be based on your currently active branch.</li> </ul> </li> <li>Make and Commit Changes Locally:<ul> <li>Work on your notes, creating new content or modifying existing files.</li> <li>Use \"Obsidian Git: Stage all\" or stage individual files.</li> <li>Use \"Obsidian Git: Commit staged changes.\" Write clear, concise commit messages for each logical change. It's good practice to make several small commits rather than one massive one.</li> </ul> </li> <li>Push the Feature Branch to the Remote Repository:<ul> <li>Once your changes are committed locally and you're ready for review, push your feature branch to the remote repository.</li> <li>Open the command palette and run \"Obsidian Git: Push\". If it's the first time pushing this new branch, Git might require you to set an upstream: <code>git push --set-upstream origin your-feature-branch-name</code>. Obsidian-Git may handle this for you, or you might need to run this from a terminal if you encounter issues.</li> </ul> </li> </ol>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#3-creating-the-pull-request-on-github","title":"3. Creating the Pull Request (on GitHub)","text":"<p>With your feature branch pushed to the remote, you can now create a Pull Request:</p> <ol> <li>Navigate to GitHub: Open your repository in your web browser. GitHub usually detects a newly pushed branch and displays a prompt to create a Pull Request. If not:<ul> <li>Go to the \"Pull requests\" tab.</li> <li>Click \"New pull request\".</li> </ul> </li> <li>Select Branches:<ul> <li>Base Branch: Choose the branch you want your changes to be merged into. This will typically be one of your security tier branches (e.g., <code>main</code>, <code>L1-internal</code>, <code>L2-secure</code>).</li> <li>Compare Branch: Choose your feature branch that contains the changes.</li> </ul> </li> <li>PR Description - Crucial for Review:<ul> <li>Title: Write a clear, concise title that summarizes the purpose of the PR.</li> <li>Description: This is very important.<ul> <li>Clearly explain the purpose of the changes.</li> <li>Summarize the key modifications made.</li> <li>Explain how these changes align with the vault's principles or goals.</li> <li>If it addresses a specific issue, link to it.</li> <li>Provide any context reviewers might need (e.g., screenshots, links to discussions).</li> <li>A good PR description helps reviewers understand the changes quickly and speeds up the approval process.</li> </ul> </li> </ul> </li> <li>Create Pull Request: Click the \"Create pull request\" button.</li> </ol>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#4-review-and-democratic-approval-process-on-github","title":"4. Review and Democratic Approval Process (on GitHub)","text":"<p>This is where the collaborative \"democratic\" aspect comes into play:</p> <ol> <li>Assign Reviewers (or Request Reviews):<ul> <li>Depending on repository settings or team norms, you might assign specific reviewers from the right-hand sidebar on the PR page.</li> <li>Alternatively, team members may proactively pick up PRs for review.</li> </ul> </li> <li>Discussion and Feedback:<ul> <li>Reviewers will examine the \"Files changed\" tab in the PR.</li> <li>They can leave comments on specific lines of code/text, ask questions, or request modifications.</li> <li>Use GitHub's commenting features to discuss the changes. Keep discussions professional and constructive.</li> </ul> </li> <li>Signifying Approval:<ul> <li>GitHub's \"Approve\" Feature: Reviewers can formally approve the changes by clicking \"Review changes\" and selecting \"Approve.\"</li> <li>Comment Conventions: Some teams also use comment conventions like <code>+1</code>, <code>LGTM</code> (Looks Good To Me), or specific emojis to signify approval, though GitHub's formal approval feature is generally preferred for clarity.</li> </ul> </li> <li>Branch Protection Rules (Recommended):<ul> <li>Repository administrators can set up branch protection rules on GitHub (e.g., for <code>main</code>, <code>L1-internal</code>, <code>L2-secure</code>).</li> <li>These rules can enforce that a certain number of approvals are required before a PR can be merged. They can also require that status checks (like automated tests) pass.</li> </ul> </li> <li>Iterative Review:<ul> <li>The PR author should monitor feedback.</li> <li>If changes are requested, the author makes further commits to their local feature branch (in Obsidian, using Obsidian-Git).</li> <li>After committing, the author pushes these new commits to the same feature branch on the remote. The Pull Request on GitHub will automatically update to show the new commits.</li> <li>This review-update cycle continues until all reviewers are satisfied and have approved the changes.</li> </ul> </li> </ol>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#5-merging-the-pull-request-on-github","title":"5. Merging the Pull Request (on GitHub)","text":"<p>Once the PR has received the necessary approvals and any required checks have passed:</p> <ol> <li>Who Merges: Typically, the PR author (if they have merge permissions), a designated maintainer, or anyone with appropriate permissions can merge the PR. This depends on your team's workflow and branch protection rules.</li> <li>When to Merge: Only merge after all discussions are resolved and the required approvals are obtained.</li> <li>Merge Strategies (Brief Note): GitHub offers several ways to merge:<ul> <li>Create a merge commit: Keeps all commits from the feature branch and adds a merge commit. This preserves detailed history but can make the main branch history look complex.</li> <li>Squash and merge: Combines all commits from the feature branch into a single commit on the base branch. This creates a cleaner, linear history on the main branch. Often preferred for feature branches.</li> <li>Rebase and merge: Re-applies commits from the feature branch onto the base branch. Use with caution, especially in shared branches.</li> <li>Choose a strategy that suits your team's preference for history readability. \"Squash and merge\" is often a good default for feature branches.</li> </ul> </li> <li>Deleting the Feature Branch Post-Merge:<ul> <li>GitHub usually offers an option to automatically delete the feature branch after the PR is merged. This is good practice to keep the repository clean. The branch still exists in the commit history if needed but is removed from the list of active branches.</li> </ul> </li> </ol>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#6-post-merge-updating-local-repositories","title":"6. Post-Merge: Updating Local Repositories","text":"<p>Once the PR is merged into the target branch on GitHub (e.g., <code>L1-internal</code>):</p> <ol> <li>All Collaborators (including the PR author) Must Update Their Local Clones:<ul> <li>Switch to the corresponding local branch (e.g., <code>L1-internal</code>) in Obsidian using \"Obsidian Git: Checkout branch\".</li> <li>Run \"Obsidian Git: Pull\" to fetch the newly merged changes from the remote repository.</li> <li>This ensures everyone's local version of the tier branch is up-to-date.</li> </ul> </li> </ol>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#7-forward-reference-to-automation","title":"7. Forward Reference to Automation","text":"<p>Manual PR processes can be enhanced with automation:</p> <ul> <li>GitHub Actions (to be detailed in a later section) can be configured to:</li> <li>Send notifications about new PRs or review requests.</li> <li>Run automated checks (e.g., markdown linting, spell checking) on the changes in a PR.</li> <li>Potentially automate merging if certain conditions are met (use with caution).</li> </ul> <p>By following this Pull Request process, teams can ensure that changes are properly reviewed, discussed, and approved before being integrated into key branches, maintaining the integrity and security of the shared Obsidian vault. This democratic approach fosters collaboration and quality.</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#handling-merge-conflicts","title":"Handling Merge Conflicts","text":"<p>Merge conflicts are a common occurrence in collaborative projects using Git. They happen when Git is unable to automatically reconcile differences between your local changes and changes from the remote repository (or another branch). While they can seem intimidating at first, understanding how to handle them is a key skill for smooth collaboration.</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#1-what-are-merge-conflicts-and-why-do-they-occur","title":"1. What are Merge Conflicts and Why Do They Occur?","text":"<p>A merge conflict arises when:</p> <ul> <li>You try to pull changes from a remote repository, and the incoming changes modify the same lines of a file that you have also modified locally (and haven't pushed yet).</li> <li>You try to merge one branch into another (e.g., a feature branch back into <code>main</code>), and both branches have made changes to the same part of the same file since they diverged.</li> <li>You try to rebase your work onto an updated branch, and similar overlapping changes exist.</li> </ul> <p>Git is excellent at merging changes automatically when they occur in different parts of a file or in different files. However, when the same lines are edited in conflicting ways, Git doesn't know which version is correct. It then flags the file as conflicted and asks you to resolve it manually.</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#2-conflict-detection","title":"2. Conflict Detection","text":"<p>Here's how you'll typically know you have a merge conflict:</p> <ul> <li>Obsidian-Git Notifications/Errors:</li> <li>When you perform an operation like \"Obsidian Git: Pull\" or \"Obsidian Git: Sync Unsynced Changes,\" the plugin may show an error message or notification indicating that a merge conflict has occurred and the merge has failed or needs attention.</li> <li>The Obsidian status bar might also display messages related to a merge conflict.</li> <li>Git Conflict Markers in Files:</li> <li> <p>Git directly modifies the conflicted file(s) to show you where the conflicts are. It inserts special markers:</p> Text Only<pre><code>```\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nThis is your local version of the text.\n(Content from your current branch)\n=======\nThis is the incoming version of the text from the remote or other branch.\n(Content from the branch you are trying to merge/pull)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; [commit hash or branch name]\n```\n</code></pre> </li> <li> <p><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>: Indicates the start of the conflicting lines from your current local branch (often referred to as \"ours\" or \"yours\").</p> </li> <li><code>=======</code>: Separates your changes from the incoming changes.</li> <li><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; [commit hash/branch name]</code>: Indicates the end of the conflicting lines from the branch being merged (often referred to as \"theirs\" or \"incoming\").</li> <li>Identifying Conflicted Files:</li> <li>Obsidian-Git Source Control View: The Obsidian-Git plugin usually has a dedicated \"Source Control\" view in the left sidebar. Conflicted files will often be highlighted here, typically under a \"Merge Changes\" or \"Conflicts\" section.</li> <li><code>git status</code> (Terminal): If you are comfortable with the command line, opening a terminal in your vault's root directory and running <code>git status</code> will clearly list any files that are \"unmerged\" or have conflicts.</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#3-conflict-resolution-steps-file-by-file","title":"3. Conflict Resolution Steps (File by File)","text":"<p>You need to resolve conflicts in each affected file one by one:</p> <ol> <li>Open the Conflicted File in Obsidian:<ul> <li>Navigate to the conflicted file (identified via Obsidian-Git's UI or <code>git status</code>) and open it in the Obsidian editor.</li> </ul> </li> <li>Interpret the Conflict Markers:<ul> <li>Locate the <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>, <code>=======</code>, and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> markers.</li> <li>The content between <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code> and <code>=======</code> is your version (what was on your branch before the pull/merge).</li> <li>The content between <code>=======</code> and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ...</code> is the incoming version (what Git is trying to bring in from the remote or another branch).</li> </ul> </li> <li> <p>Manually Edit to Resolve:</p> <ul> <li>Your task is to edit this section of the file to reflect the final desired state. You have several choices for each conflict block:<ul> <li>Keep Your Changes: Delete the incoming changes and the conflict markers, leaving only your version.</li> <li>Keep Their Changes: Delete your changes and the conflict markers, leaving only the incoming version.</li> <li>Combine/Rewrite: Manually edit the text, possibly taking parts from both versions, or rewriting the section entirely to integrate both ideas or create a new correct version. This is common for more complex conflicts.</li> </ul> </li> <li> <p>Example:</p> <ul> <li> <p>Before Resolution:</p> Markdown<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nMy preferred title for this section is \"Advanced Techniques\".\n=======\nThe team decided the title should be \"Expert Methods\".\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature-branch-title-update\n</code></pre> </li> <li> <p>After Resolution (choosing \"Expert Methods\" and adding a note):</p> Markdown<pre><code>The team decided the title should be \"Expert Methods\".\n(Note: Previously considered \"Advanced Techniques\" but updated for consistency.)\n</code></pre> </li> </ul> </li> </ul> </li> <li> <p>Crucially: Delete ALL Conflict Markers:</p> <ul> <li>Once you have edited the content to your satisfaction, you must delete all the conflict marker lines (<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ...</code>).</li> <li>The file should look like normal content again, with no Git-specific markers left. If you forget this step, the markers will be committed as actual text in your file.</li> </ul> </li> <li>Save the File: Save your changes in Obsidian.</li> <li>Communicate for Complex Conflicts:<ul> <li>If you're unsure how to resolve a conflict, especially if the changes are complex or involve someone else's work, communicate with your collaborators. Discuss the conflicting changes to decide on the best resolution together. It's better to ask than to make a mistake that overwrites important work.</li> </ul> </li> </ol>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#4-staging-and-committing-the-resolution","title":"4. Staging and Committing the Resolution","text":"<p>Once you have resolved the conflicts in a file and saved it:</p> <ol> <li>Stage the Resolved File:<ul> <li>In Obsidian-Git's Source Control view, the resolved file should now appear as \"modified\" rather than \"conflicted.\"</li> <li>Use the \"Stage current file\" option (often a \"+\" icon next to the file) or \"Stage all changes\" if you've resolved all conflicts.</li> <li>Alternatively, from the command palette: \"Obsidian Git: Stage current file\" or \"Obsidian Git: Stage all changes\".</li> </ul> </li> <li>Commit the Merge:<ul> <li>After all conflicted files have been resolved and staged, you need to make a commit to finalize the merge.</li> <li>Use the \"Obsidian Git: Commit staged changes\" command.</li> <li>Git usually provides a default merge commit message (e.g., \"Merge branch 'feature-xyz'\" or \"Merge remote-tracking branch 'origin/main'\"). You can often keep this default message, or add more details if necessary.</li> <li>If you were in the middle of a <code>pull</code> that caused conflicts, this commit finalizes the pull operation.</li> </ul> </li> </ol>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#5-pushing-the-resolved-merge","title":"5. Pushing the Resolved Merge","text":"<p>After successfully committing the merge resolution:</p> <ul> <li>If the conflicts occurred during a <code>pull</code> or <code>sync</code>, your local branch is now up-to-date and includes both your previous local changes and the incoming changes, properly merged.</li> <li>You may need to push your changes (including the merge commit) back to the remote if you had local commits that were part of the conflict:</li> <li>Use \"Obsidian Git: Push\".</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#6-option-aborting-a-merge","title":"6. Option: Aborting a Merge","text":"<p>If you encounter conflicts and feel overwhelmed, or if you realize you've made a mistake during resolution before committing the merge, you can often abort the merge process:</p> <ul> <li>How to Abort:</li> <li>Terminal: The most reliable way is often via the terminal. Open a terminal in your vault's root directory and run:Text Only<pre><code>```bash\ngit merge --abort\n```\n\n(If the conflict arose from a `git pull`, which is a fetch then a merge, `git merge --abort` is still the command to use. If it was from a `git rebase`, you'd use `git rebase --abort`.)\n</code></pre> <ul> <li>Obsidian-Git Command: Check if your version of Obsidian-Git offers a command like \"Abort merge\" or \"Reset merge.\" This is less common.</li> <li>Caution and Why:</li> <li>Aborting will revert your working directory back to the state it was in before you attempted the merge/pull. Any manual resolutions you made will be lost.</li> <li>Use this if you want a clean slate to re-attempt the merge, or if you want to set aside your local changes to get a clean version of the remote branch first.</li> </ul> </li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#7-tips-for-prevention-complex-conflicts","title":"7. Tips for Prevention &amp; Complex Conflicts","text":"<ul> <li>Pull/Sync Frequently: The more often you pull changes from the remote (especially before starting new work or when working on shared files), the smaller and less frequent merge conflicts are likely to be.</li> <li>Communicate: When working on the same files as others, communicate about what you're planning to change to avoid overlapping work.</li> <li>Feature Branches: Using feature branches for new work isolates changes and means conflicts are usually handled when merging the feature branch, rather than directly in main shared branches.</li> <li>External Merge Tools: For very complex conflicts involving many lines or intricate code/text, dedicated external Git merge tools (e.g., VS Code's built-in merge editor, Sourcetree, Meld, KDiff3) can provide a more visual and powerful way to resolve differences. You would typically configure Git to use one of these tools.</li> <li>Seek Help: If you're stuck on a particularly nasty conflict, don't hesitate to ask a more experienced Git user on your team for assistance.</li> </ul> <p>Resolving merge conflicts is a normal part of using Git in a team. With practice, you'll become more comfortable identifying and resolving them. Always take your time, understand the changes, and communicate when needed.</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#commit-signing-with-gpg-and-hardware-keys","title":"Commit Signing with GPG (and Hardware Keys)","text":"<p>Commit signing is an important security practice that adds a layer of trust and accountability to your Git history. It cryptographically verifies that commits and tags were made by a specific user and that they haven't been tampered with since they were made. This is typically achieved using GnuPG (GPG).</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#1-introduction-to-commit-signing","title":"1. Introduction to Commit Signing","text":"<ul> <li>What are GPG Signed Commits?     When you sign a commit, you use your private GPG key to create a unique digital signature for that commit. This signature is then attached to the commit.</li> <li>Why are they Important?</li> <li>Authenticity: Signed commits help prove that you are the one who made the commit. Anyone can configure their Git <code>user.name</code> and <code>user.email</code> to impersonate someone else, but they cannot fake a GPG signature without access to the private key.</li> <li>Integrity: The signature ensures that the commit (including its content, author, and timestamp) has not been altered since it was signed. If any part of the commit changes, the signature will no longer be valid.</li> <li>Trust: In collaborative or sensitive environments, signed commits provide a higher degree of confidence in the source and integrity of changes.</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#2-obsidian-gits-role","title":"2. Obsidian-Git's Role","text":"<ul> <li>Respects System Configuration: Obsidian-Git itself does not directly manage GPG keys or signing configurations. Instead, it invokes your system's Git installation. Therefore, Obsidian-Git will respect the global or repository-specific Git configuration for commit signing.</li> <li>No Specific UI for GPG Keys: You will generally not find settings within the Obsidian-Git plugin UI to input GPG keys or directly enable signing. This setup is done at the Git and GPG level on your operating system.</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#3-setting-up-your-system-for-gpg-signed-commits-general-steps","title":"3. Setting Up Your System for GPG Signed Commits (General Steps)","text":"<p>Configuring your system to sign Git commits with GPG involves several steps. The following is a general outline; refer to detailed GPG and Git documentation for platform-specific instructions.</p> <ol> <li>Prerequisite: Install GPG:<ul> <li>Ensure GnuPG is installed on your system. (e.g., <code>gpg --version</code> in your terminal). If not, download and install it from gnupg.org.</li> </ul> </li> <li>Generate or Import a GPG Key:<ul> <li>If you don't have a GPG key, you'll need to generate one: <code>gpg --full-generate-key</code>. Follow the prompts.</li> <li>If you already have a GPG key, you can import it.</li> <li>List your keys with <code>gpg --list-secret-keys --keyid-format LONG</code>. Copy the GPG key ID (the long string of characters) of the key you want to use for signing.</li> </ul> </li> <li> <p>Configure Git:</p> <ul> <li> <p>Tell Git which key to use for signing:</p> Bash<pre><code>git config --global user.signingkey YOUR_GPG_KEY_ID\n</code></pre> <p>(Replace <code>YOUR_GPG_KEY_ID</code> with your actual GPG key ID).     * Optionally, tell Git to sign all commits by default:</p> Bash<pre><code>git config --global commit.gpgsign true\n</code></pre> <p>If you don't set this, you'd have to use <code>git commit -S</code> for every commit, which isn't practical for Obsidian-Git automation.     * Optionally, sign tags as well (recommended if you create annotated tags):</p> Bash<pre><code>git config --global tag.gpgsign true\n</code></pre> </li> <li> <p>These settings can be applied globally (<code>--global</code>) or per-repository (by omitting <code>--global</code> when inside a repository). For Obsidian vaults, global configuration is usually easiest.</p> </li> <li><code>GPG_TTY</code> (Shell Environment - If Needed):</li> <li> <p>In some terminal environments, GPG might need to know which TTY (teletypewriter or terminal) to use for passphrase prompts. You might need to set this in your shell profile (e.g., <code>.bashrc</code>, <code>.zshrc</code>):</p> Bash<pre><code>export GPG_TTY=$(tty)\n</code></pre> </li> <li> <p>This is more relevant if you are signing from the command line and your GPG agent isn't configured.</p> </li> </ul> </li> </ol>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#4-using-hardware-keys-conceptual-overview","title":"4. Using Hardware Keys (Conceptual Overview)","text":"<p>Using a hardware security key (like a YubiKey or Nitrokey) to store your GPG private key significantly enhances security, as the private key never leaves the hardware device.</p> <ul> <li>Advanced GPG Setup: This involves generating your GPG private key (or a subkey) directly on the hardware device or transferring it securely.</li> <li>Obsidian-Git Interaction: Obsidian-Git (via Git, via GPG) will interact with the hardware key when a signature is required. You'll typically be prompted by the hardware key (e.g., to touch it) to authorize the signing operation.</li> <li>Complexity:</li> <li>Detailed setup of GPG with hardware keys is complex and highly specific to your operating system, GPG version, and the hardware key model.</li> <li>Users MUST refer to the official documentation provided by their hardware key manufacturer and the GnuPG project. (This level of detail is beyond the scope of this Obsidian-Git user guide; the focus here is that Obsidian-Git can work with it once your system is configured).</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#5-how-obsidian-git-makes-signed-commits","title":"5. How Obsidian-Git Makes Signed Commits","text":"<ul> <li>If your Git environment is correctly configured with <code>commit.gpgsign true</code> and a valid <code>user.signingkey</code>, then any commits made through Obsidian-Git's interface (manual or automatic backups) should automatically be GPG signed.</li> <li>Obsidian-Git simply calls <code>git commit</code>, and Git handles the signing process as per its configuration.</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#6-verification","title":"6. Verification","text":"<p>You can verify that your commits are being signed:</p> <ul> <li>Terminal:</li> <li>Navigate to your vault's directory in a terminal.</li> <li>Run <code>git log --show-signature</code>. You'll see details about the GPG signature for each signed commit, including the key ID and whether the signature is good.</li> <li>Git Hosting Platforms (e.g., GitHub, GitLab):</li> <li>Platforms like GitHub will display a \"Verified\" badge next to commits that are signed with a GPG key they can link to a user's uploaded public GPG key. Unsigned or unverified commits will not have this badge or may show as \"Unverified.\"</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#7-limitations-and-important-considerations","title":"7. Limitations and Important Considerations","text":"<ul> <li>Mobile Platforms:</li> <li>Commit signing is highly unlikely to work with Obsidian-Git on mobile devices (iOS, Android). The <code>isomorphic-git</code> library used by Obsidian-Git on mobile typically does not have the capability to interact with system GPG tools or hardware keys. Assume commits made from mobile will be unsigned.</li> <li>Passphrase Prompts &amp; GPG Agent:</li> <li>When GPG signs a commit, it may need the passphrase for your private key. If Git is invoked by a background process (like Obsidian-Git's automatic backups), there might be no interactive terminal to enter the passphrase.</li> <li>Solution: Configure a GPG agent (e.g., <code>gpg-agent</code> on Linux/macOS, Kleopatra on Windows as part of Gpg4win). A GPG agent can cache your passphrase for a session or a set period, allowing Git to use the key without a prompt each time. This is crucial for automated signed commits.</li> <li>Initial Setup Complexity:</li> <li>Setting up GPG, generating keys, and configuring Git and a GPG agent can be challenging, especially for users less familiar with command-line tools and cryptographic concepts. This is generally considered an advanced user feature.</li> <li>Recommendation for Security Tiers:</li> <li>For enhanced security and integrity, GPG signing is strongly recommended for any commits made to sensitive branches like <code>L1-internal</code> and especially <code>L2-secure</code> (as outlined in the \"Branch Management Strategy for Security Tiers\" section).</li> </ul>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-git-workflow-guide/#8-troubleshooting","title":"8. Troubleshooting","text":"<p>If your commits are not being signed as expected:</p> <ol> <li>Verify Git Configuration:<ul> <li>Check <code>git config user.signingkey</code> and <code>git config commit.gpgsign</code> (globally and in the local repository).</li> </ul> </li> <li>Verify GPG Setup:<ul> <li>Ensure your GPG key is listed in <code>gpg --list-secret-keys</code>.</li> <li>Check that the key is not expired or revoked.</li> </ul> </li> <li>GPG Agent:<ul> <li>Ensure your GPG agent is running and has your passphrase cached if you expect passphrase-less signing.</li> <li>Try signing a commit manually from the terminal (<code>git commit -S -m \"Test signing\"</code>) to see if GPG prompts or errors appear there.</li> </ul> </li> <li>Key Validity/Trust: For verification on platforms like GitHub, ensure your public GPG key has been uploaded to your GitHub account and that the email address associated with the GPG key is a verified email on your GitHub account.</li> </ol> <p>While setting up GPG commit signing requires some initial effort, it provides significant security benefits by ensuring the authenticity and integrity of your commit history. For vaults with sensitive information or collaborative projects, it's a worthwhile investment.</p>","tags":["obsidian","git","workflow","collaboration","security"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/","title":"Guide: Offline Obsidian Vault Synchronization with Git (Air-Gapped/\"Sneakernet\")","text":"","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#1-introduction","title":"1. Introduction","text":"","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#purpose-of-this-guide","title":"Purpose of This Guide","text":"<p>This guide provides detailed procedures for synchronizing an Obsidian vault between two or more computers that are not directly networked, such as an air-gapped system (like a well-configured Tails OS) and an internet-connected machine, using Git and a removable storage medium (e.g., a USB flash drive). This is often referred to as a \"sneakernet\" workflow.</p>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#benefits-over-basic-file-sync","title":"Benefits Over Basic File Sync","text":"<p>Using Git for offline synchronization offers significant advantages over basic file copying methods (like <code>rsync</code>):</p> <ul> <li>Version History: Git tracks every change, allowing you to revert to previous versions of notes or your entire vault.</li> <li>Branching: You can work on different features or drafts in isolated branches and merge them later.</li> <li>Conflict Resolution: Git provides mechanisms to identify and help resolve conflicts when changes are made to the same file on different machines.</li> <li>Data Integrity: Git's hashing mechanisms help ensure data integrity during transfers.</li> </ul>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#when-to-use-this-workflow","title":"When to Use This Workflow","text":"<ul> <li>When one or more machines are intentionally air-gapped for security.</li> <li>When direct network connections between machines are unavailable, unreliable, or untrusted.</li> <li>When using Tails OS and wanting to synchronize vault changes with a non-Tails machine.</li> </ul>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#assumed-basic-git-knowledge","title":"Assumed Basic Git Knowledge","text":"<p>This guide assumes you have a basic understanding of Git concepts and commands, including:</p> <ul> <li><code>git add</code>, <code>git commit</code></li> <li><code>git branch</code>, <code>git checkout</code></li> <li><code>git merge</code>, <code>git fetch</code>, <code>git pull</code>, <code>git push</code></li> <li>Understanding what a \"remote\" repository is (even if it's on a USB drive).</li> </ul>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#2-prerequisites","title":"2. Prerequisites","text":"<ul> <li>Obsidian Vault as a Git Repository: Your Obsidian vault must be initialized as a Git repository on both machines you intend to sync between.</li> <li>To do this: In your vault's root directory, run <code>git init</code> (if not already a Git repository).</li> <li>Git Installed on Both Machines:</li> <li>Machine A (e.g., Tails OS): Git is usually pre-installed. Verify with <code>git --version</code>.</li> <li>Machine B (e.g., your main desktop/laptop): Install Git if it's not already present (see official Git downloads).</li> <li><code>obsidian-git</code> Plugin (Recommended, Optional):</li> <li>While not strictly necessary for this manual workflow, having the <code>obsidian-git</code> plugin installed in Obsidian on both machines can make committing changes and managing local branches more convenient from within Obsidian. This guide focuses on terminal commands for the sync process itself.</li> <li>Secure USB Flash Drive: This will be your \"sneakernet\" transfer medium.</li> <li>Security Note: Encryption of Transfer Medium.         &gt; [!IMPORTANT]         &gt; Git bundles and bare repositories are NOT encrypted at rest by Git itself. If your vault's content or commit history is sensitive and the USB drive could be lost or stolen, it is **strongly recommended to encrypt the USB drive itself.         &gt; Operator Action: Use tools like VeraCrypt (cross-platform) or LUKS (Linux) to create a full-disk encrypted USB drive. This encryption/decryption occurs outside of Git. Perform this one-time setup on a trusted system.         &gt; When using Tails OS, you might need to install <code>veracrypt</code> via \"Additional Software\" persistence to use VeraCrypt volumes. Tails can typically unlock LUKS volumes if the drive was formatted with LUKS on another Linux system.</li> <li>(Optional but Recommended) GPG Signing Setup: If you sign your Git commits, ensure GPG is configured on both machines, and your GPG key (ideally hardware-backed, like a Feitian K9D) is accessible.</li> </ul>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#3-core-concepts-for-offline-git-sync","title":"3. Core Concepts for Offline Git Sync","text":"<ul> <li>\"Sneakernet\": Manually transferring data between computers using removable media (like a USB drive).</li> <li>USB as Transport: The USB drive acts as a temporary transport mechanism for Git data (bundles or as a portable bare repository).</li> <li>Importance of Regular Commits: Commit your changes frequently on each machine with meaningful messages. This makes synchronization smoother and version history more useful.</li> <li>Synchronization Discipline: Establish a regular routine for syncing. If you make changes on both machines without syncing, you will encounter merge conflicts (which Git can help resolve). Aim to sync before switching machines if possible.</li> </ul>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#4-method-1-using-git-bundle-recommended-for-flexibility","title":"4. Method 1: Using <code>git bundle</code> (Recommended for Flexibility)","text":"<p>The <code>git bundle</code> command creates a single file that archives Git objects and references. This method is flexible and doesn't require the USB drive to be formatted as a Git repository itself.</p>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#a-understanding-git-bundle","title":"A. Understanding <code>git bundle</code>","text":"<p>A bundle file (<code>.bundle</code>) is like a portable, read-only Git repository snapshot. It contains all necessary Git objects and references (like branches and tags) to update another repository or to clone from.</p> <ul> <li><code>git bundle create &lt;file&gt; &lt;refs&gt;</code>: Creates a bundle file.</li> <li>Using specific refs like <code>HEAD main develop</code> bundles only those branches and the objects reachable from them. This is efficient for routine synchronization of active branches.</li> <li>Using <code>--all</code> bundles all references in the repository, including all local branches and tags. This is useful for creating a full backup for cloning or archival purposes but results in a larger file.</li> </ul>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#b-initial-synchronization-cloning-a-vault-via-bundle-optional","title":"B. Initial Synchronization (Cloning a Vault via Bundle - Optional)","text":"<p>If setting up a vault on a new machine (Machine T) from an existing one (Machine S):</p> <ol> <li> <p>On Machine S (Existing Vault):</p> <ul> <li><code>cd /path/to/your/vault_on_S</code></li> <li><code>git add . &amp;&amp; git commit -m \"Prepare for initial bundle\"</code></li> <li> <p>Create a full bundle: (Operator Variable: Replace <code>&lt;usb_path_on_S&gt;</code> with your USB mount point and <code>&lt;bundle_name.bundle&gt;</code> with your chosen filename.)</p> Bash<pre><code>git bundle create &lt;usb_path_on_S&gt;/&lt;bundle_name.bundle&gt; --all\n</code></pre> </li> </ul> </li> <li> <p>Transfer USB to Machine T.</p> </li> <li>On Machine T (New Vault Location):<ul> <li><code>mkdir /path/to/new_vault_location_on_T &amp;&amp; cd /path/to/new_vault_location_on_T</code></li> <li> <p>Clone from the bundle: (Operator Variable: Adjust <code>&lt;usb_path_on_T&gt;</code>, <code>&lt;bundle_name.bundle&gt;</code>, and <code>&lt;main_branch_name&gt;</code>.)</p> Bash<pre><code>git clone -b &lt;main_branch_name&gt; &lt;usb_path_on_T&gt;/&lt;bundle_name.bundle&gt; .\n</code></pre> <p>(The <code>.</code> clones into the current directory. <code>-b &lt;main_branch_name&gt;</code> checks out that specific branch.)</p> </li> </ul> </li> </ol>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#c-routine-synchronization-workflow-eg-machine-s-machine-t","title":"C. Routine Synchronization Workflow (e.g., Machine S \u2192 Machine T)","text":"<p>Sync changes from Machine S (e.g., Tails) to Machine T (e.g., main desktop).</p> <ol> <li> <p>On Machine S (Source - e.g., Tails OS):</p> <ul> <li><code>cd ~/Persistent/MyVaults/YourVaultName/</code> (Operator Variable: Path to your vault)</li> <li>Commit changes: <code>git add . &amp;&amp; git commit -m \"Sync from Tails - $(date +%Y-%m-%d)\"</code></li> <li> <p>Create a bundle of relevant branches:</p> <ul> <li>Operator Variables:<ul> <li><code>&lt;usb_mount_point_tails&gt;</code>: e.g., <code>/media/amnesia/YOUR_USB_LABEL/</code></li> <li><code>&lt;bundle_filename.bundle&gt;</code>: e.g., <code>vault_update.bundle</code></li> <li><code>main</code>: Branch(es) to sync (e.g., <code>HEAD main develop</code>)</li> </ul> </li> </ul> Bash<pre><code>git bundle create &lt;usb_mount_point_tails&gt;/&lt;bundle_filename.bundle&gt; HEAD main\n</code></pre> </li> </ul> </li> <li> <p>Securely Transfer USB to Machine T.</p> </li> <li> <p>On Machine T (Destination - e.g., Main Desktop):</p> <ul> <li><code>cd /path/to/your/vault_on_T</code> (Operator Variable: Path to your vault)</li> <li> <p>(Optional) Inspect bundle: (Operator Variable: Adjust <code>&lt;usb_path_on_T&gt;</code> and <code>&lt;bundle_filename.bundle&gt;</code>)</p> Bash<pre><code>git ls-remote &lt;usb_path_on_T&gt;/&lt;bundle_filename.bundle&gt;\n</code></pre> </li> <li> <p>Fetch changes into a temporary local branch (Recommended Practice):</p> <ul> <li>This fetches <code>main</code> from the bundle into a new local branch <code>main_from_S</code>.</li> <li>Operator Variables:<ul> <li><code>&lt;usb_path_on_T&gt;/&lt;bundle_filename.bundle&gt;</code></li> <li><code>main:main_from_S</code>: Fetches <code>main</code> ref from bundle into local <code>main_from_S</code>.</li> </ul> </li> </ul> Bash<pre><code>git fetch &lt;usb_path_on_T&gt;/&lt;bundle_filename.bundle&gt; main:main_from_S\n</code></pre> </li> <li> <p>Review Changes (Crucial):</p> Bash<pre><code>git log main..main_from_S  # Commits in main_from_S not yet in local main\ngit diff main..main_from_S # File changes\n</code></pre> </li> <li> <p>Merge the Changes:</p> Bash<pre><code>git checkout main\ngit merge main_from_S\n</code></pre> <p>Resolve conflicts if any (Section 6).     * (Optional) Delete temporary branch: <code>git branch -d main_from_S</code></p> </li> </ul> </li> </ol>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#d-syncing-back-machine-t-machine-s","title":"D. Syncing Back (Machine T \u2192 Machine S)","text":"<p>Reverse the process, creating a bundle on Machine T and fetching/merging on Machine S, using a differently named temporary branch (e.g., <code>main_from_T</code>).</p>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#e-branch-management-with-bundles","title":"E. Branch Management with Bundles","text":"<ul> <li>When creating: <code>git bundle create &lt;file&gt; HEAD main develop featureX</code></li> <li>When fetching: <code>git fetch &lt;file&gt; main:temp_main develop:temp_develop featureX:temp_featureX</code></li> </ul>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#5-method-2-using-a-bare-repository-on-usb-drive-alternative-portable-remote","title":"5. Method 2: Using a Bare Repository on USB Drive (Alternative \"Portable Remote\")","text":"<p>This treats the USB drive as a Git remote. Requires a one-time setup of a bare repository on the USB.</p>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#a-understanding-bare-repositories","title":"A. Understanding Bare Repositories","text":"<p>A bare repository (<code>--bare</code>) contains only the Git history and references (contents of a typical <code>.git</code> folder), with no working copy of files. It's used as a central point for <code>push</code> and <code>fetch</code>.</p> <p>**[!CAUTION] Do not run <code>git add</code> or <code>git commit</code> commands directly within the bare repository folder (e.g., <code>MyVault.git</code>) on the USB drive, as it has no working files. All commits should be made in your actual Obsidian vault repositories on Machine S or Machine T.</p>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#b-one-time-setup-on-usb-drive","title":"B. One-Time Setup on USB Drive","text":"<ol> <li>Insert USB. Operator Variable: Identify <code>&lt;usb_mount_point&gt;</code> (e.g., <code>/media/amnesia/YOUR_USB_LABEL/</code> on Tails, <code>/Volumes/YOUR_USB_LABEL/</code> on macOS, <code>/mnt/usb/</code> on other Linux).</li> <li> <p>Operator Variable: Choose a name like <code>MyVault.git</code> for the bare repo folder.</p> Bash<pre><code># On either Machine S or T, once:\nmkdir -p &lt;usb_mount_point&gt;/MyVault.git \ncd &lt;usb_mount_point&gt;/MyVault.git\ngit init --bare\n</code></pre> </li> </ol>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#c-connecting-existing-vaults-to-the-usb-bare-repository-initial-setup","title":"C. Connecting Existing Vaults to the USB Bare Repository (Initial Setup)","text":"<ul> <li> <p>On Machine S (e.g., Tails - connecting to this new USB remote):</p> <ol> <li><code>cd ~/Persistent/MyVaults/YourVaultName/</code> (Operator Variable)</li> <li> <p>Add remote: (Operator Variables: <code>usb_sneakernet_remote</code> is your chosen name for the remote; <code>&lt;usb_mount_point_tails&gt;/MyVault.git</code> is the path.)</p> Bash<pre><code>git remote add usb_sneakernet_remote &lt;usb_mount_point_tails&gt;/MyVault.git\n</code></pre> </li> <li> <p>Push existing branches:</p> Bash<pre><code>git push -u usb_sneakernet_remote main # And any other branches\n</code></pre> </li> </ol> </li> <li> <p>On Machine T (e.g., Main Desktop):</p> </li> <li> <p>If cloning from USB for the first time:</p> Text Only<pre><code>```bash\n# Operator Variables: &lt;usb_path_on_T&gt;, YourLocalVaultName\ngit clone &lt;usb_path_on_T&gt;/MyVault.git YourLocalVaultName \ncd YourLocalVaultName\ngit remote rename origin usb_sneakernet_remote # Optional: for clarity\n```\n</code></pre> </li> <li> <p>If vault exists, add USB as remote: <code>cd /path/to/your/vault_on_T</code> (Operator Variable)         <code>git remote add usb_sneakernet_remote &lt;usb_path_on_T&gt;/MyVault.git</code> <code>git fetch usb_sneakernet_remote</code> <code>git merge usb_sneakernet_remote/main</code> (or rebase, onto your local <code>main</code>)</p> </li> </ul>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#d-routine-synchronization-workflow-bare-repo-method","title":"D. Routine Synchronization Workflow (Bare Repo Method)","text":"<ol> <li> <p>On Machine with New Changes (e.g., Machine S - Tails):</p> <ul> <li><code>cd ~/Persistent/MyVaults/YourVaultName/</code> (Operator Variable)</li> <li><code>git add . &amp;&amp; git commit -m \"Sync from Tails\"</code></li> <li> <p>Push to USB: (Operator Variable: <code>usb_sneakernet_remote</code> and <code>main</code>)</p> Bash<pre><code>git push usb_sneakernet_remote main\n</code></pre> </li> </ul> </li> <li> <p>Transfer USB.</p> </li> <li> <p>On Other Machine (e.g., Machine T - Main Desktop):</p> <ul> <li><code>cd /path/to/your/vault_on_T</code> (Operator Variable)</li> <li> <p>Fetch from USB: (Operator Variable: <code>usb_sneakernet_remote</code> and <code>main</code>)</p> Bash<pre><code>git fetch usb_sneakernet_remote main\n</code></pre> </li> <li> <p>Review: <code>git log main..usb_sneakernet_remote/main</code>, <code>git diff main..usb_sneakernet_remote/main</code></p> </li> <li> <p>Merge:</p> Bash<pre><code>git checkout main\ngit merge usb_sneakernet_remote/main\n</code></pre> <p>(Or <code>git pull usb_sneakernet_remote main</code> which does fetch + merge). Resolve conflicts.</p> </li> </ul> </li> </ol>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#e-pros-cons-of-bare-repo-on-usb-vs-bundle","title":"E. Pros &amp; Cons of Bare Repo on USB vs. Bundle","text":"<ul> <li>Bare Repo Pros: Familiar <code>push</code>/<code>fetch</code>/<code>pull</code> workflow. Simpler for routine syncs once remotes configured.</li> <li>Bare Repo Cons: USB is \"live\" Git data; corruption is more impactful. USB needs a folder acting as a Git repo.</li> <li>Bundle Pros: Single file is easy to copy/archive. USB needs no special Git formatting. Bundles are generally read-only sources for fetching, which can feel safer.</li> <li>Bundle Cons: More verbose fetch commands (mapping refs to temporary branches).</li> </ul>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#6-handling-merge-conflicts-general-advice","title":"6. Handling Merge Conflicts (General Advice)","text":"<p>If changes on the same lines in the same file occurred on both machines since the last sync, Git will pause the merge and require manual resolution.</p> <ol> <li>Identify Conflicts: <code>git status</code> shows unmerged paths.</li> <li> <p>Edit Files: Open conflicted files. Git adds conflict markers:</p> Markdown<pre><code>Here is some content without conflict.\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nThis is content from your current branch (e.g., local main).\n=======\nThis is the conflicting content from the branch you are trying to merge (e.g., main_from_S or usb_sneakernet_remote/main).\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; main_from_S \nAnd here is more content without conflict.\n</code></pre> </li> <li> <p>Resolve: Manually edit the file to keep desired changes and remove the <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> markers.</p> </li> <li>Stage Resolved Files: <code>git add &lt;resolved_file_name&gt;</code></li> <li>Complete Merge: <code>git commit</code> (Git usually pre-fills a merge commit message) or <code>git merge --continue</code>.</li> </ol> <p>Consult official Git documentation for advanced conflict resolution.</p>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/obsidian-offline-git-workflow-guide/#7-security-and-best-practices-for-offline-git-sync","title":"7. Security and Best Practices for Offline Git Sync","text":"<ul> <li>USB Drive Security: Use dedicated, trusted USBs. Avoid untrusted computers. Store securely.</li> <li>Encryption of USB Drive (Re-emphasize):     &gt; [!IMPORTANT] Operator Action: Encrypt your USB drive.     &gt; If your vault's history or content is sensitive, encrypt the USB drive itself (VeraCrypt/LUKS). Git does not encrypt data on the USB.</li> <li>GPG Commit Signing: Signatures persist, verifying authenticity across systems.</li> <li>Regular Syncs: Minimize divergence and conflict complexity.</li> <li>Consistent Branch Names: (e.g., <code>main</code>) simplifies workflows.</li> <li>Sync vs. Backup: This is for synchronization. Maintain separate, dedicated backups.</li> <li>Cross-Reference: See \"Guide: Air-Gapped Backup and Synchronization for Obsidian on Tails OS.\"</li> </ul> <p>This Git-based offline workflow provides a robust method for maintaining version control and synchronizing your Obsidian vault in air-gapped or \"sneakernet\" scenarios.</p>","tags":["obsidian","git","offline","air-gapped","synchronization","sneakernet"]},{"location":"implement/obsidian-setup/pr-workflow/","title":"Obsidian to GitHub PR Workflow","text":"","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#overview","title":"Overview","text":"<p>This document describes the secure workflow for creating pull requests starting from Obsidian and ending in GitHub, using a combination of Meta Bind buttons, templates, and GitHub Actions.</p>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#architecture","title":"Architecture","text":"<pre><code>graph LR\n    A[Obsidian PR Draft] --&gt;|Meta Bind Export| B[PR Queue Folder]\n    B --&gt;|Obsidian-Git Sync| C[GitHub Repo]\n    C --&gt;|GitHub Action| D[Draft PR Created]\n    D --&gt;|Manual Review| E[PR Submitted]</code></pre>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#security-model","title":"Security Model","text":"","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#what-we-dont-do","title":"What We DON'T Do","text":"<ul> <li>\u274c Direct GitHub API calls from Obsidian (credential exposure risk)</li> <li>\u274c Automatic PR creation without review (security bypass risk)</li> <li>\u274c JavaScript execution with system access (code injection risk)</li> </ul>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#what-we-do","title":"What We DO","text":"<ul> <li>\u2705 Use Meta Bind for safe UI interactions and data collection</li> <li>\u2705 Export to monitored folder for GitHub Action processing</li> <li>\u2705 Maintain security tier separation and validation</li> <li>\u2705 Require manual review before final submission</li> </ul>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#step-by-step-workflow","title":"Step-by-Step Workflow","text":"","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#1-create-pr-draft-in-obsidian","title":"1. Create PR Draft in Obsidian","text":"<ol> <li>Create new note from <code>OBSIDIAN_PR_DRAFT.md</code> template</li> <li>Fill in all metadata fields using Meta Bind inputs</li> <li>Write PR description, changes, and testing details</li> </ol>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#2-validate-and-export","title":"2. Validate and Export","text":"<ol> <li>Click \"Validate PR\" button to check completeness</li> <li>Review the validation results</li> <li>Click \"Export to GitHub\" to create queue file</li> </ol>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#3-automated-processing","title":"3. Automated Processing","text":"<p>The <code>.github/pr-queue/</code> folder is monitored by a GitHub Action that:</p> <ol> <li>Detects new PR draft files</li> <li>Validates security classifications</li> <li>Creates a draft PR with the content</li> <li>Adds appropriate labels and reviewers</li> <li>Notifies the author</li> </ol>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#4-manual-review-and-submission","title":"4. Manual Review and Submission","text":"<ol> <li>Author reviews the draft PR on GitHub</li> <li>Makes any final adjustments</li> <li>Marks PR as \"Ready for Review\"</li> <li>Democratic process begins</li> </ol>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#meta-bind-button-configuration","title":"Meta Bind Button Configuration","text":"","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#safe-button-actions","title":"Safe Button Actions","text":"YAML<pre><code># Copy to Clipboard - SAFE\n- type: copyToClipboard\n  text: \"formatted content\"\n\n# Create Note - SAFE\n- type: createNote\n  folderPath: \".github/pr-queue\"\n\n# Run Command - SAFE (if command is trusted)\n- type: command\n  command: \"druids:validate-pr\"\n\n# Update Metadata - SAFE\n- type: updateMetadata\n  bindTarget: \"status\"\n  value: \"ready\"\n</code></pre>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#unsafe-actions-to-avoid","title":"Unsafe Actions to Avoid","text":"YAML<pre><code># Run JavaScript - RISKY\n- type: runInlineJS\n  code: \"arbitrary code execution\"\n\n# Run JS File - RISKY  \n- type: runJSFile\n  file: \"could access system\"\n</code></pre>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#github-action-for-pr-creation","title":"GitHub Action for PR Creation","text":"YAML<pre><code>name: Process PR Queue\n\non:\n  push:\n    paths:\n      - '.github/pr-queue/*.md'\n\njobs:\n  create-pr:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Parse PR Draft\n        id: parse\n        run: |\n          # Extract metadata and content from PR draft file\n\n      - name: Validate Security\n        run: |\n          # Ensure security classifications are appropriate\n\n      - name: Create Draft PR\n        uses: peter-evans/create-pull-request@v5\n        with:\n          draft: true\n          title: ${{ steps.parse.outputs.title }}\n          body: ${{ steps.parse.outputs.body }}\n          branch: ${{ steps.parse.outputs.branch }}\n</code></pre>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#best-practices","title":"Best Practices","text":"","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#for-users","title":"For Users","text":"<ol> <li>Always validate before exporting</li> <li>Review draft PRs before marking ready</li> <li>Don't store credentials in Obsidian</li> <li>Use templates for consistency</li> </ol>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#for-admins","title":"For Admins","text":"<ol> <li>Monitor the pr-queue folder</li> <li>Audit GitHub Actions regularly  </li> <li>Restrict Meta Bind JS execution</li> <li>Maintain secure templates</li> </ol>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#advantages-of-this-approach","title":"Advantages of This Approach","text":"<ol> <li>Security: No credentials in Obsidian, validated workflow</li> <li>Flexibility: Draft in familiar environment</li> <li>Automation: Reduces manual steps while maintaining control</li> <li>Traceability: Clear audit trail from draft to PR</li> <li>Democratic: Supports DRUIDS principles</li> </ol>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>Templater Integration: Auto-generate PR content</li> <li>Dataview Queries: Show PR status in Obsidian</li> <li>QuickAdd Macros: Streamline common PR types</li> <li>Status Sync: Update Obsidian when PR status changes</li> </ol>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/obsidian-setup/pr-workflow/#related-documentation","title":"Related Documentation","text":"<ul> <li>Obsidian Git Workflow Guide</li> <li>Merge Request Process</li> <li>Proposal Process Workflow</li> </ul> <p>Backlinks:</p>","tags":["obsidian","github","pull-requests","workflow","automation"]},{"location":"implement/security/","title":"Security Implementation","text":"<p>Operational security protocols for revolutionary infrastructure</p>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#overview","title":"Overview","text":"<p>This section provides comprehensive security implementation guides for DRUIDS-based organizing. Security isn't paranoia - it's collective protection and strategic thinking.</p>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#core-security-documents","title":"Core Security Documents","text":"","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#essential-protocols","title":"Essential Protocols","text":"<ul> <li>Security Playbook - Daily operational security practices</li> <li>Security Audits - Regular security assessments</li> <li>When They Come Knocking - Crisis response protocols</li> </ul>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#data-protection","title":"Data Protection","text":"<ul> <li>Committed Sensitive Data - Emergency data scrubbing</li> <li>Git History Scrubbing - Technical history cleaning</li> <li>Metadata Stripping - Automated data sanitization</li> </ul>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#security-model","title":"Security Model","text":"","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#three-tier-information-architecture","title":"Three-Tier Information Architecture","text":"<p>L0 (Public): Information we want widely accessible - Public campaigns and education - General organizing principles - Open-source documentation</p> <p>L1 (Members): Information for committed organizers - Internal strategy and planning - Member contact information - Tactical discussions</p> <p>L2 (Cadre): Information for core leadership - Sensitive operations - Security-critical planning - Risk assessment details</p>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#implementation-priorities","title":"Implementation Priorities","text":"","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#immediate-week-1","title":"Immediate (Week 1)","text":"<ol> <li>Review Security Playbook</li> <li>Set up encrypted communications</li> <li>Establish pseudonym discipline</li> <li>Configure basic operational security</li> </ol>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#short-term-month-1","title":"Short-term (Month 1)","text":"<ol> <li>Conduct first security audit</li> <li>Train all members on protocols</li> <li>Implement L0/L1/L2 repository structure</li> <li>Test crisis response procedures</li> </ol>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#ongoing","title":"Ongoing","text":"<ol> <li>Regular security reviews</li> <li>Update protocols based on threat changes</li> <li>Continuous security education</li> <li>Monitor for security incidents</li> </ol>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#common-security-mistakes","title":"Common Security Mistakes","text":"","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#individual-vs-collective-thinking","title":"Individual vs. Collective Thinking","text":"<ul> <li>Mistake: \"I have nothing to hide\"</li> <li>Reality: Your security affects everyone you organize with</li> </ul>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#technology-solutionism","title":"Technology Solutionism","text":"<ul> <li>Mistake: \"This app solves our security\"</li> <li>Reality: Security requires practices, not just tools</li> </ul>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#operational-isolation","title":"Operational Isolation","text":"<ul> <li>Mistake: \"Security is too complicated for new members\"</li> <li>Reality: Good security culture includes everyone</li> </ul>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#threat-scenarios","title":"Threat Scenarios","text":"","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#surveillance","title":"Surveillance","text":"<ul> <li>State monitoring of public organizing</li> <li>Corporate data mining from platform use</li> <li>Infiltrator information gathering</li> </ul>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#response-protocols","title":"Response Protocols","text":"<ul> <li>Documentation practices that assume monitoring</li> <li>Communication protocols for sensitive information</li> <li>Digital hygiene to minimize attack surface</li> </ul>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#repression","title":"Repression","text":"<ul> <li>Legal harassment and arrest</li> <li>Workplace retaliation for organizing</li> <li>Community pressure and isolation</li> </ul>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#mitigation-strategies","title":"Mitigation Strategies","text":"<ul> <li>Compartmentalization of sensitive information</li> <li>Support networks for targeted members</li> <li>Legal resources and know-your-rights training</li> </ul>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#getting-help","title":"Getting Help","text":"","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#internal-resources","title":"Internal Resources","text":"<ul> <li>Security team members</li> <li>Experienced organizers</li> <li>Peer support networks</li> </ul>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#external-resources","title":"External Resources","text":"<ul> <li>Digital security trainings</li> <li>Legal defense organizations</li> <li>Community security groups</li> </ul>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/#crisis-support","title":"Crisis Support","text":"<ul> <li>Emergency protocols</li> <li>Legal hotlines and support</li> <li>Rapid response networks</li> </ul> <p>Remember: Security culture is love culture. We protect each other because we believe in our collective future.</p> <p>Backlinks:</p>","tags":["security","implementation","protocols","operational-security"]},{"location":"implement/security/git-history-scrubbing/","title":"Git History Scrubbing Guide","text":"<p>\u26a0\ufe0f WARNING: These procedures rewrite Git history. This is a destructive operation that requires coordination with all team members. Always backup before proceeding.</p>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#when-to-use-this-guide","title":"When to Use This Guide","text":"<p>You need Git history scrubbing when:</p> <ul> <li>Real names appear in commit authors</li> <li>Personal email addresses are exposed</li> <li>Sensitive information was committed (passwords, keys, personal data)</li> <li>Accidental commits to wrong security tier</li> <li>Privacy audit reveals historical exposure</li> </ul>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#prerequisites","title":"Prerequisites","text":"","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#1-full-backup","title":"1. Full Backup","text":"Bash<pre><code># Create complete backup\ncd /path/to/repo\ntar -czf repo-backup-$(date +%Y%m%d).tar.gz .\n\n# Or clone to backup location\ngit clone --mirror . ../repo-backup-$(date +%Y%m%d)\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#2-team-coordination","title":"2. Team Coordination","text":"<ul> <li>Notify all contributors - They'll need to re-clone</li> <li>Set maintenance window - No commits during cleanup</li> <li>Document what's being removed - For verification</li> </ul>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#3-install-bfg-repo-cleaner","title":"3. Install BFG Repo-Cleaner","text":"Bash<pre><code># Download BFG (faster than git-filter-branch)\nwget https://repo1.maven.org/maven2/com/madgag/bfg/1.14.0/bfg-1.14.0.jar\n\n# Verify Java is installed\njava --version\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#method-1-bfg-repo-cleaner-recommended","title":"Method 1: BFG Repo-Cleaner (Recommended)","text":"<p>BFG is faster and simpler than git-filter-branch for most cases.</p>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#remove-names-from-commit-authors","title":"Remove Names from Commit Authors","text":"<ol> <li>Create mailmap file mapping old names to pseudonyms:</li> </ol> Bash<pre><code>cat &gt; mailmap.txt &lt;&lt; EOF\nYourPseudonym &lt;member@ksbc.org&gt; Real Name &lt;personal@email.com&gt;\nComradeTwo &lt;member@ksbc.org&gt; Another Name &lt;their@email.com&gt;\nEOF\n</code></pre> <ol> <li>Run BFG to update authors:</li> </ol> Bash<pre><code>java -jar bfg-1.14.0.jar \\\n  --convert-to-git-lfs '*.{pdf,doc,docx}' \\\n  --replace-text mailmap.txt \\\n  --no-blob-protection \\\n  repo.git\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#remove-sensitive-files","title":"Remove Sensitive Files","text":"Bash<pre><code># Remove specific file from all history\njava -jar bfg-1.14.0.jar --delete-files secret-file.txt repo.git\n\n# Remove files by pattern\njava -jar bfg-1.14.0.jar --delete-files '*.key' repo.git\n\n# Remove folders\njava -jar bfg-1.14.0.jar --delete-folders .credentials repo.git\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#replace-text-in-files","title":"Replace Text in Files","text":"<ol> <li>Create replacements file:</li> </ol> Bash<pre><code>cat &gt; replacements.txt &lt;&lt; EOF\npersonal.email@example.com==&gt;member@ksbc.org\n\"John Smith\"==&gt;[REDACTED]\n555-123-4567==&gt;[PHONE-REDACTED]\nPassword123!==&gt;***REMOVED***\nEOF\n</code></pre> <ol> <li>Run replacement:</li> </ol> Bash<pre><code>java -jar bfg-1.14.0.jar --replace-text replacements.txt repo.git\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#clean-repository","title":"Clean Repository","text":"<p>After BFG operations:</p> Bash<pre><code>cd repo.git\ngit reflog expire --expire=now --all\ngit gc --prune=now --aggressive\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#method-2-git-filter-branch-complex-cases","title":"Method 2: git-filter-branch (Complex Cases)","text":"<p>For cases BFG can't handle, use git-filter-branch.</p>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#change-all-author-emailsnames","title":"Change All Author Emails/Names","text":"Bash<pre><code>git filter-branch --env-filter '\nOLD_EMAIL=\"personal@email.com\"\nNEW_NAME=\"YourPseudonym\"\nNEW_EMAIL=\"member@ksbc.org\"\n\nif [ \"$GIT_COMMITTER_EMAIL\" = \"$OLD_EMAIL\" ]; then\n    export GIT_COMMITTER_NAME=\"$NEW_NAME\"\n    export GIT_COMMITTER_EMAIL=\"$NEW_EMAIL\"\nfi\nif [ \"$GIT_AUTHOR_EMAIL\" = \"$OLD_EMAIL\" ]; then\n    export GIT_AUTHOR_NAME=\"$NEW_NAME\"\n    export GIT_AUTHOR_EMAIL=\"$NEW_EMAIL\"\nfi\n' --tag-name-filter cat -- --branches --tags\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#remove-specific-commits","title":"Remove Specific Commits","text":"Bash<pre><code># Find commit with sensitive data\ngit log --oneline --all -- sensitive-file.txt\n\n# Remove specific commit\ngit filter-branch --commit-filter '\n    if [ \"$GIT_COMMIT\" = \"abc123def456\" ]; then\n        skip_commit \"$@\";\n    else\n        git commit-tree \"$@\";\n    fi' HEAD\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#remove-file-from-all-history","title":"Remove File from All History","text":"Bash<pre><code>git filter-branch --force --index-filter \\\n  'git rm --cached --ignore-unmatch path/to/sensitive-file' \\\n  --prune-empty --tag-name-filter cat -- --all\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#method-3-git-filter-repo-modern-alternative","title":"Method 3: git-filter-repo (Modern Alternative)","text":"<p>Newer and faster than git-filter-branch.</p>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#install","title":"Install","text":"Bash<pre><code>pip install git-filter-repo\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#use-cases","title":"Use Cases","text":"Bash<pre><code># Change email/name\ngit filter-repo --mailmap mailmap.txt\n\n# Remove file\ngit filter-repo --path sensitive-file.txt --invert-paths\n\n# Replace text\ngit filter-repo --replace-text replacements.txt\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#verification-steps","title":"Verification Steps","text":"","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#1-check-authors","title":"1. Check Authors","text":"Bash<pre><code># List all historical authors\ngit log --format=\"%an &lt;%ae&gt;\" | sort | uniq\n\n# Verify no real names remain\ngit log --format=\"%an &lt;%ae&gt;\" | grep -i \"john\\|smith\\|real\"\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#2-search-content","title":"2. Search Content","text":"Bash<pre><code># Search all history for sensitive strings\ngit grep \"personal@email.com\" $(git rev-list --all)\n\n# Check for phone numbers\ngit grep -E \"[0-9]{3}-[0-9]{3}-[0-9]{4}\" $(git rev-list --all)\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#3-verify-file-removal","title":"3. Verify File Removal","text":"Bash<pre><code># Ensure file is gone from all commits\ngit log --all --oneline -- removed-file.txt\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#force-push-team-coordination","title":"Force Push &amp; Team Coordination","text":"","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#1-force-push-to-remote","title":"1. Force Push to Remote","text":"Bash<pre><code># This rewrites remote history!\ngit push origin --force --all\ngit push origin --force --tags\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#2-team-instructions","title":"2. Team Instructions","text":"<p>Send this to all team members:</p> Text Only<pre><code>URGENT: Git History Rewritten\n\nWe've cleaned sensitive data from our repository history.\nYou MUST re-clone the repository:\n\n1. Backup any uncommitted work\n2. Delete your local repository\n3. Re-clone fresh:\n   git clone [repository-url]\n4. Re-apply any local changes\n\nDO NOT pull/merge from your old local copy - it will \nreintroduce the removed data!\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#common-pitfalls-solutions","title":"Common Pitfalls &amp; Solutions","text":"","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#pitfall-1-incomplete-removal","title":"Pitfall 1: Incomplete Removal","text":"<p>Problem: Sensitive data still visible in some commits Solution: Run verification steps thoroughly, check all branches</p>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#pitfall-2-team-member-pushes-old-history","title":"Pitfall 2: Team Member Pushes Old History","text":"<p>Problem: Someone pulls/pushes from old clone Solution:</p> <ul> <li>Lock repository during cleanup</li> <li>Use branch protection rules</li> <li>Monitor for reintroduction</li> </ul>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#pitfall-3-forks-and-mirrors","title":"Pitfall 3: Forks and Mirrors","text":"<p>Problem: Forks still contain sensitive data Solution:</p> <ul> <li>Contact fork owners</li> <li>Request DMCA takedown if necessary</li> <li>Monitor for re-exposure</li> </ul>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#pitfall-4-cached-views","title":"Pitfall 4: Cached Views","text":"<p>Problem: GitHub/GitLab still shows old data Solution:</p> <ul> <li>Contact support for cache clearing</li> <li>May take 24-48 hours to fully propagate</li> </ul>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#emergency-response-procedure","title":"Emergency Response Procedure","text":"<p>If sensitive data is currently exposed:</p>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#1-immediate-actions-first-15-minutes","title":"1. Immediate Actions (First 15 minutes)","text":"Bash<pre><code># Make repository private (if possible)\n# GitHub: Settings \u2192 Danger Zone \u2192 Change visibility\n\n# Remove sensitive file immediately\ngit rm sensitive-file\ngit commit -m \"Emergency removal\"\ngit push\n\n# This doesn't remove history but stops bleeding\n</code></pre>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#2-communication-first-hour","title":"2. Communication (First hour)","text":"<ul> <li>Notify security team</li> <li>Alert affected members</li> <li>Document exposure timeline</li> </ul>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#3-cleanup-first-24-hours","title":"3. Cleanup (First 24 hours)","text":"<ul> <li>Follow full scrubbing procedure</li> <li>Verify complete removal</li> <li>Re-enable repository access</li> </ul>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#recovery-procedures","title":"Recovery Procedures","text":"","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#if-something-goes-wrong","title":"If Something Goes Wrong","text":"<ol> <li>Restore from backup:</li> </ol> Bash<pre><code># If you have mirror backup\ncd /path/to/new/location\ngit clone --mirror ../repo-backup-20250630\n\n# If you have tarball\ntar -xzf repo-backup-20250630.tar.gz\n</code></pre> <ol> <li>Restore specific commits:</li> </ol> Bash<pre><code># Find lost commits in reflog\ngit reflog\n\n# Cherry-pick needed commits\ngit cherry-pick abc123\n</code></pre> <ol> <li> <p>Contact Git hosting support:</p> </li> <li> <p>GitHub: support@github.com</p> </li> <li>GitLab: Open support ticket</li> <li>Request restoration from their backups</li> </ol>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#prevention-best-practices","title":"Prevention Best Practices","text":"<ol> <li>Pre-commit hooks: Install check-no-names.sh</li> <li>Regular audits: Run privacy-audit.sh weekly</li> <li>Education: Ensure all members read pseudonym guide</li> <li>Git configuration: Template for new contributors</li> <li>Review process: Check new contributor's first commits</li> </ol>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/git-history-scrubbing/#quick-command-reference","title":"Quick Command Reference","text":"Bash<pre><code># Backup\ngit clone --mirror . ../backup\n\n# BFG - Remove file\njava -jar bfg.jar --delete-files secret.txt repo.git\n\n# BFG - Replace text\njava -jar bfg.jar --replace-text replacements.txt repo.git\n\n# Filter-branch - Change author\ngit filter-branch --env-filter 'export GIT_AUTHOR_NAME=\"NewName\"'\n\n# Verify authors\ngit log --format=\"%an &lt;%ae&gt;\" | sort | uniq\n\n# Force push\ngit push --force --all\n\n# Clean repository\ngit reflog expire --expire=now --all\ngit gc --prune=now --aggressive\n</code></pre> <p>Remember: Git history rewriting is serious. When in doubt, make another backup.</p> <p>Backlinks:</p>","tags":["security","git","privacy","remediation","critical"]},{"location":"implement/security/help-committed-sensitive-data/","title":"Help, I Committed Sensitive Data! Emergency Recovery Guide","text":"","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#stop-dont-panic-dont-push","title":"STOP! Don't Panic, Don't Push","text":"<p>If you just committed sensitive data, DO NOT PUSH TO THE REMOTE REPOSITORY. If you already pushed, skip to the \"Already Pushed\" section immediately.</p>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#quick-assessment","title":"Quick Assessment","text":"<p>What got committed? This determines urgency:</p>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#critical-act-within-minutes","title":"CRITICAL (Act within minutes):","text":"<ul> <li>Government names</li> <li>Home addresses  </li> <li>Phone numbers</li> <li>Social Security Numbers</li> <li>Bank/financial info</li> <li>Unencrypted passwords</li> </ul>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#high-act-within-hours","title":"HIGH (Act within hours):","text":"<ul> <li>Workplace names</li> <li>License plates</li> <li>Email addresses</li> <li>Meeting locations</li> <li>Tactical plans</li> </ul>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#medium-act-within-day","title":"MEDIUM (Act within day):","text":"<ul> <li>Pseudonym connections</li> <li>Internal debates</li> <li>Resource amounts</li> <li>Partner organizations</li> </ul>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#quick-decision-flowchart","title":"Quick Decision Flowchart","text":"Text Only<pre><code>Did you push to remote?\n\u251c\u2500 NO \u2192 Have you made other commits after?\n\u2502   \u251c\u2500 NO \u2192 Use Option 1: Amend\n\u2502   \u2514\u2500 YES \u2192 Use Option 2: Interactive Rebase\n\u2502\n\u2514\u2500 YES \u2192 Is the repo public?\n    \u251c\u2500 YES \u2192 EMERGENCY PROTOCOL\n    \u2502   \u251c\u2500 Contact security team NOW\n    \u2502   \u251c\u2500 Document in security incident\n    \u2502   \u2514\u2500 Coordinate democratic rewrite\n    \u2502\n    \u2514\u2500 NO \u2192 How many people have access?\n        \u251c\u2500 &lt; 10 \u2192 Coordinate quick rewrite\n        \u2514\u2500 &gt; 10 \u2192 Full democratic process\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#if-you-havent-pushed-yet","title":"If You Haven't Pushed Yet","text":"","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#option-1-amend-the-last-commit-simplest","title":"Option 1: Amend the Last Commit (Simplest)","text":"<p>If the sensitive data is ONLY in your last commit:</p> Bash<pre><code># 1. Remove or fix the sensitive file\nnano sensitive-file.txt  # Delete the sensitive parts\n\n# 2. Stage the fix\ngit add sensitive-file.txt\n\n# 3. Amend the commit (keeps same message)\ngit commit --amend\n\n# 4. Verify the sensitive data is gone\ngit show HEAD\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#option-2-interactive-rebase-multiple-commits","title":"Option 2: Interactive Rebase (Multiple Commits)","text":"<p>If sensitive data is in recent commits:</p> Bash<pre><code># 1. Start interactive rebase for last 5 commits\ngit rebase -i HEAD~5\n\n# 2. In the editor, change 'pick' to 'edit' \n# for commits with sensitive data\n\n# 3. Git will stop at each 'edit' commit\n# Fix the files, then:\ngit add fixed-file.txt\ngit commit --amend\ngit rebase --continue\n\n# 4. Repeat for each problematic commit\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#option-3-remove-entire-file-from-history-filter-branch","title":"Option 3: Remove Entire File from History (filter-branch)","text":"<p>If a file should never have been committed:</p> Bash<pre><code># Remove file from all history\ngit filter-branch --force --index-filter \\\n  \"git rm --cached --ignore-unmatch path/to/sensitive-file\" \\\n  --prune-empty --tag-name-filter cat -- --all\n\n# Clean up\nrm -rf .git/refs/original/\ngit reflog expire --expire=now --all\ngit gc --prune=now --aggressive\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#option-4-bfg-repo-cleaner-faster-alternative","title":"Option 4: BFG Repo Cleaner (Faster Alternative)","text":"<p>BFG is simpler and faster than filter-branch for removing sensitive data:</p> Bash<pre><code># 1. Install BFG (if not installed)\n# macOS: brew install bfg\n# Linux: Download from https://rtyley.github.io/bfg-repo-cleaner/\n\n# 2. Clone a fresh copy (BFG works on bare repos)\ngit clone --mirror git@github.com:your-org/repo.git\n\n# 3. Remove sensitive data patterns\n# Remove files by name:\nbfg --delete-files sensitive-file.txt repo.git\n\n# Remove text from all files:\nbfg --replace-text passwords.txt repo.git\n\n# Where passwords.txt contains:\n# PASSWORD1==&gt;REMOVED\n# secret-key==&gt;REMOVED\n# real-name==&gt;REDACTED\n\n# 4. Clean up the repo\ncd repo.git\ngit reflog expire --expire=now --all\ngit gc --prune=now --aggressive\n\n# 5. Push the cleaned history\ngit push --force\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#option-5-nuclear-option-start-fresh","title":"Option 5: Nuclear Option - Start Fresh","text":"<p>When history is too compromised or complex:</p> Bash<pre><code># 1. Export current state (no history)\ngit archive --format=tar HEAD &gt; current-state.tar\n\n# 2. Create new repo\ncd ..\nmkdir repo-clean\ncd repo-clean\ngit init\n\n# 3. Import clean state\ntar -xf ../current-state.tar\ngit add .\ngit commit -m \"Initial commit - clean history after security incident\"\n\n# 4. Push to new remote (after democratic decision)\ngit remote add origin git@github.com:your-org/repo-clean.git\ngit push -u origin main\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#if-you-already-pushed","title":"If You Already Pushed","text":"","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#1-immediate-damage-control","title":"1. Immediate Damage Control","text":"Bash<pre><code># Contact your security point person IMMEDIATELY\n# They need to know:\n# - What was exposed\n# - When it was pushed  \n# - Who has repo access\n# - Whether it's public/private\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#2-document-the-decision","title":"2. Document the Decision","text":"<p>This requires collective decision because rewriting public history affects everyone:</p> Bash<pre><code># Create security incident record\nmkdir -p security/incidents/$(date +%Y)\ncat &gt; security/incidents/$(date +%Y)/$(date +%Y%m%d)-data-exposure.md &lt;&lt; EOF\n# Security Incident: Sensitive Data Exposure\n\n**Date**: $(date)\n**Severity**: CRITICAL/HIGH/MEDIUM\n**Discovered by**: [Your pseudonym]\n\n## What Was Exposed\n- [Specific data types]\n- [Affected comrades]\n- [Commits involved]\n\n## Immediate Actions Taken\n- [ ] Notified security committee\n- [ ] Contacted affected comrades\n- [ ] Assessed downstream exposure\n\n## Collective Decision Required\nRewriting public history requires democratic decision.\nCalling emergency security meeting.\nEOF\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#3-coordinate-the-rewrite","title":"3. Coordinate the Rewrite","text":"<p>After democratic approval:</p> Bash<pre><code># 1. Everyone must pull before you rewrite\n# Send urgent message: \"FREEZE ALL PUSHES - SECURITY INCIDENT\"\n\n# 2. Perform the rewrite (same as local methods above)\ngit filter-branch --force --index-filter \\\n  \"git rm --cached --ignore-unmatch path/to/sensitive-file\" \\\n  --prune-empty --tag-name-filter cat -- --all\n\n# 3. Force push (requires consensus!)\ngit push origin --force --all\ngit push origin --force --tags\n\n# 4. Everyone must re-clone or reset\n# Send instructions to all members\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#emergency-communication-protocol","title":"Emergency Communication Protocol","text":"","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#secure-notification-template","title":"Secure Notification Template","text":"Text Only<pre><code>SECURITY ALERT - ACTION REQUIRED\n\nSeverity: [CRITICAL/HIGH/MEDIUM]\nAction needed by: [time]\n\nA security incident requires us to rewrite Git history.\n\nDO NOT PUSH until further notice.\n\nInstructions:\n1. Note any uncommitted work\n2. Wait for all-clear signal\n3. Follow reset instructions when sent\n\nDetails in Signal group.\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#reset-instructions-for-other-members","title":"Reset Instructions for Other Members","text":"<p>After rewrite is complete:</p> Bash<pre><code># For other members to sync after rewrite\n# Option 1: Fresh clone (safest)\ncd ..\nmv repo-name repo-name-backup\ngit clone [repo-url]\n\n# Option 2: Hard reset (if they have no local changes)\ngit fetch origin\ngit reset --hard origin/main\ngit clean -fd\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#verification-steps","title":"Verification Steps","text":"","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#after-local-cleanup","title":"After Local Cleanup","text":"Bash<pre><code># 1. Verify file is gone from all commits\ngit log --all --full-history -- path/to/sensitive-file\n# Should return nothing\n\n# 2. Search for sensitive strings in history\ngit grep \"sensitive-string\" $(git rev-list --all)\n# Should return nothing\n\n# 3. Check file isn't in any branch\ngit branch -a --contains $(git hash-object path/to/sensitive-file)\n# Should return nothing\n\n# 4. Verify object is truly gone\ngit fsck --full --unreachable\n# Run garbage collection\ngit gc --prune=now --aggressive\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#after-remote-cleanup","title":"After Remote Cleanup","text":"Bash<pre><code># 1. Fresh clone to verify\ncd /tmp\ngit clone git@github.com:your-org/repo.git verify-clean\ncd verify-clean\n\n# 2. Search entire history\ngit log --all --full-history -p | grep -i \"sensitive-pattern\"\n# Should return nothing\n\n# 3. Check all branches\nfor branch in $(git branch -r | grep -v HEAD); do\n  echo \"Checking $branch\"\n  git checkout $branch\n  grep -r \"sensitive-pattern\" .\ndone\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#preventing-future-incidents","title":"Preventing Future Incidents","text":"","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#pre-commit-hooks","title":"Pre-Commit Hooks","text":"<p>Install this comprehensive hook to catch sensitive data:</p> Bash<pre><code>#!/bin/bash\n# .git/hooks/pre-commit\n\n# Color codes for output\nRED='\\033[0;31m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# More comprehensive patterns\ndeclare -A patterns=(\n  [\"SSN\"]=\"[0-9]{3}-[0-9]{2}-[0-9]{4}\"\n  [\"Phone\"]=\"(\\+?1[-.\\s]?)?\\(?[0-9]{3}\\)?[-.\\s]?[0-9]{3}[-.\\s]?[0-9]{4}\"\n  [\"Email\"]=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\"\n  [\"Credit Card\"]=\"[0-9]{4}[-\\s]?[0-9]{4}[-\\s]?[0-9]{4}[-\\s]?[0-9]{4}\"\n  [\"API Key\"]=\"(api[_-]?key|apikey|api_secret)[\\s]*[:=][\\s]*['\\\"]?[A-Za-z0-9]{20,}['\\\"]?\"\n  [\"Password\"]=\"(password|passwd|pwd)[\\s]*[:=][\\s]*['\\\"]?[^\\s'\\\"]{8,}['\\\"]?\"\n  [\"Private Key\"]=\"-----BEGIN (RSA |DSA |EC |OPENSSH )?PRIVATE KEY-----\"\n  [\"AWS Key\"]=\"AKIA[0-9A-Z]{16}\"\n  [\"Street Address\"]=\"[0-9]{1,5}\\s+[A-Za-z\\s]{4,50}\\s+(Street|St|Avenue|Ave|Road|Rd|Boulevard|Blvd|Lane|Ln|Drive|Dr|Court|Ct|Circle|Cir|Plaza|Pl)\"\n)\n\n# Files to check\nfiles=$(git diff --cached --name-only --diff-filter=AM)\n\nif [ -z \"$files\" ]; then\n  exit 0\nfi\n\nfound_issues=0\n\nfor file in $files; do\n  # Skip binary files\n  if file \"$file\" | grep -q \"binary\"; then\n    continue\n  fi\n\n  for pattern_name in \"${!patterns[@]}\"; do\n    pattern=\"${patterns[$pattern_name]}\"\n    if git diff --cached \"$file\" | grep -E \"$pattern\" &gt; /dev/null; then\n      echo -e \"${RED}[BLOCKED]${NC} Possible $pattern_name found in $file\"\n      echo -e \"${YELLOW}Pattern:${NC} $pattern\"\n      echo \"Review your changes and remove sensitive data before committing.\"\n      ((found_issues++))\n    fi\n  done\ndone\n\n# Check for files that shouldn't be committed\ndangerous_files=(\n  \".env\"\n  \".env.local\"\n  \".env.production\"\n  \"secrets.yml\"\n  \"secrets.yaml\"\n  \"credentials\"\n  \"id_rsa\"\n  \"id_dsa\"\n  \"id_ecdsa\"\n  \"*.pem\"\n  \"*.key\"\n  \"*.p12\"\n  \"*.pfx\"\n)\n\nfor file in $files; do\n  for dangerous in \"${dangerous_files[@]}\"; do\n    if [\"$file\" == $dangerous](\"$file\" == $dangerous.md){#cac55ad880c3a46bee6df73c2bc8c2c8}; then\n      echo -e \"${RED}[BLOCKED]${NC} Attempting to commit dangerous file: $file\"\n      echo \"Add this file to .gitignore instead.\"\n      ((found_issues++))\n    fi\n  done\ndone\n\nif [ $found_issues -gt 0 ]; then\n  echo -e \"\\n${RED}Commit blocked:${NC} $found_issues security issues found.\"\n  echo \"Fix these issues and try again.\"\n  exit 1\nfi\n\n# Make hook executable\nchmod +x .git/hooks/pre-commit\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#security-checklist","title":"Security Checklist","text":"<p>Before every commit:</p> <ul> <li> No government names</li> <li> No personal addresses</li> <li> No phone numbers  </li> <li> No workplace details</li> <li> No unmasked locations</li> <li> No financial information</li> <li> Only organizing pseudonyms</li> </ul>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#lessons-from-real-incidents","title":"Lessons from Real Incidents","text":"","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#case-1-meeting-minutes-disaster","title":"Case 1: Meeting Minutes Disaster","text":"<p>What happened: Secretary committed raw meeting notes with everyone's full names Impact: 30 comrades exposed Response: Emergency rewrite within 2 hours Lesson: Always use pseudonyms, even in notes</p>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#case-2-screenshot-with-address","title":"Case 2: Screenshot With Address","text":"<p>What happened: Strategy map screenshot included organizer's home address Impact: One comrade had to relocate Response: Immediate rewrite, security assessment Lesson: Always review images for metadata/content</p>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#case-3-debug-log-with-database","title":"Case 3: Debug Log With Database","text":"<p>What happened: Developer committed debug log with database passwords Impact: Had to rotate all credentials Response: Rewrite plus full security audit Lesson: Never commit logs, use .gitignore</p>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#democratic-rewrite-protocol","title":"Democratic Rewrite Protocol","text":"<p>Rewriting history is serious. It requires:</p> <ol> <li>Immediate notification of security committee</li> <li>Assessment of exposure and impact</li> <li>Democratic decision on response</li> <li>Coordinated action to minimize disruption</li> <li>Post-incident review to prevent recurrence</li> </ol> <p>Template motion for emergency meeting:</p> Markdown<pre><code>## Emergency Motion: Security Rewrite\n\n**Situation**: Sensitive data committed to repository\n**Exposed**: [Specific data]\n**Risk Assessment**: [Immediate dangers]\n\n**Proposed Action**: \n1. Freeze all repository activity\n2. Rewrite history to remove exposure\n3. Force push clean history\n4. All members re-sync repositories\n\n**Vote Required**: Emergency security protocol allows \nsecurity committee to act with 3 member approval.\n\n[ ] Approve emergency rewrite\n[ ] Deny - seek alternatives\n[ ] Abstain\n</code></pre>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#technical-details","title":"Technical Details","text":"","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#understanding-gits-object-model","title":"Understanding Git's Object Model","text":"<p>When you commit sensitive data:</p> Text Only<pre><code>Working Directory \u2192 Staging Area \u2192 Local Repo \u2192 Remote Repo\n     (edit)           (add)         (commit)      (push)\n</code></pre> <p>Each stage requires different recovery methods: - Working Directory: Just edit the file - Staging Area: Use <code>git reset</code> - Local Repo: Use <code>git commit --amend</code> or rebase - Remote Repo: Requires force push after local cleanup</p>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#why-rebase-is-necessary","title":"Why Rebase Is Necessary","text":"<p>Git's content-addressed storage means: - Every commit has a unique SHA based on content - Child commits reference parent SHAs - Changing any commit changes all subsequent SHAs - This is why everyone must re-sync after rewrite</p>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#remember","title":"Remember","text":"<ol> <li>Speed matters - Government names exposed for hours can destroy lives</li> <li>Democracy matters - Rewriting shared history requires consent</li> <li>Prevention matters - Every incident is a learning opportunity</li> <li>Solidarity matters - We protect each other from our mistakes</li> </ol> <p>The revolutionary movement has a long history of security breaches from simple mistakes. DRUIDS gives us tools to recover. Use them wisely, democratically, and quickly when needed.</p> <p>\"In the sphere of security, as in every other sphere, we can only learn by our mistakes.\" - Lenin</p> <p>Learn, recover, and strengthen security culture for next time.</p>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#common-gotchas-and-edge-cases","title":"Common Gotchas and Edge Cases","text":"","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#pull-requests-and-forks","title":"Pull Requests and Forks","text":"<p>Problem: Sensitive data in a PR from a fork Solution:  Bash<pre><code># 1. Close the PR immediately\n# 2. Contact the fork owner to clean their repo\n# 3. Even after cleaning, GitHub may cache PR diffs\n# 4. Contact GitHub support if critical data exposed\n</code></pre></p>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#git-submodules","title":"Git Submodules","text":"<p>Problem: Sensitive data in a submodule Solution: Bash<pre><code># Clean both the submodule AND parent repo\n# 1. Clean submodule repository first\ncd path/to/submodule\n# Run cleanup procedures\n\n# 2. Update submodule reference in parent\ncd ../..\ngit submodule update --remote\ngit add path/to/submodule\ngit commit -m \"Update submodule after security cleanup\"\n</code></pre></p>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#large-files-and-git-lfs","title":"Large Files and Git LFS","text":"<p>Problem: Sensitive data in LFS-tracked files Solution: Bash<pre><code># BFG handles LFS, but filter-branch doesn't\n# Use BFG or manually clean:\ngit lfs untrack sensitive-file\ngit rm --cached sensitive-file\ngit add .gitattributes\ngit commit -m \"Remove sensitive LFS file\"\n# Then run history cleanup\n</code></pre></p>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#cicd-and-automated-systems","title":"CI/CD and Automated Systems","text":"<p>Problem: CI systems may have cached the sensitive data Actions Required: - Clear CI build caches - Rotate any credentials that CI had access to - Check if CI logs contain sensitive data - Update CI to pull fresh after rewrite</p>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#archivedtagged-releases","title":"Archived/Tagged Releases","text":"<p>Problem: Sensitive data in tagged releases Solution: Bash<pre><code># Delete and recreate tags after cleanup\ngit tag -d v1.0.0\ngit push origin :refs/tags/v1.0.0\n# After cleanup:\ngit tag v1.0.0\ngit push origin v1.0.0\n</code></pre></p>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/help-committed-sensitive-data/#remember-these-edge-cases","title":"Remember These Edge Cases","text":"<ol> <li>GitHub/GitLab cache PR diffs even after force push</li> <li>Webhooks may have sent the sensitive commit data</li> <li>Git reflog keeps references for 90 days by default</li> <li>Mirrors and backups may have the old history</li> <li>IDE local history might retain sensitive files</li> <li>Shell history might contain sensitive commands</li> </ol> <p>Always assume data is compromised if it touched any external system.</p> <p>Backlinks:</p>","tags":["security","emergency","git-rebase","sensitive-data","recovery"]},{"location":"implement/security/metadata-stripping-pipeline/","title":"Metadata Stripping Pipeline: Automating Security","text":"","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#overview","title":"Overview","text":"<p>Every photo, document, and file contains hidden metadata that can destroy operational security. This guide sets up automated systems to strip dangerous metadata before it ever enters your repository.</p>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic command line knowledge</li> <li>Git repository set up</li> <li>Admin access to install tools</li> <li>30 minutes for initial setup</li> </ul>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#what-is-metadata-and-why-it-kills","title":"What Is Metadata and Why It Kills","text":"","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#the-hidden-danger-in-every-file","title":"The Hidden Danger in Every File","text":"Bash<pre><code># What you see: cute_cat.jpg\n# What metadata reveals:\nexiftool cute_cat.jpg\n\nGPS Position         : 40.7128\u00b0 N, 74.0060\u00b0 W  # Your exact location\nDate/Time Original   : 2024:03:21 18:45:23     # When you were there\nCamera Model Name    : iPhone 12 Pro           # Your device\nOwner Name           : Sarah's iPhone          # Your identity\nSoftware             : Instagram               # Your apps\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#real-world-consequences","title":"Real World Consequences","text":"<p>Case 1: FBI tracked January 6 participants through photo EXIF data Case 2: Vice journalist exposed confidential source through PDF metadata Case 3: Activist's home raided after photo contained GPS coordinates</p>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#installing-the-tools","title":"Installing the Tools","text":"","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#core-tools-installation","title":"Core Tools Installation","text":"Bash<pre><code># Ubuntu/Debian\nsudo apt-get update\nsudo apt-get install -y \\\n    exiftool \\      # Swiss army knife of metadata\n    mat2 \\          # Metadata removal tool\n    imagemagick \\   # Image processing\n    poppler-utils \\ # PDF handling\n    git-filter-repo # Git history cleaning\n\n# macOS (with Homebrew)\nbrew install exiftool mat2 imagemagick poppler git-filter-repo\n\n# Verify installation\nexiftool -ver\nmat2 --version\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#python-dependencies","title":"Python Dependencies","text":"Bash<pre><code># For advanced automation\npip3 install --user \\\n    python-magic \\  # File type detection\n    pillow \\        # Image processing\n    pypdf2          # PDF manipulation\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#basic-manual-stripping","title":"Basic Manual Stripping","text":"","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#quick-commands-for-immediate-use","title":"Quick Commands for Immediate Use","text":"Bash<pre><code># Strip ALL metadata from image\nexiftool -all= dangerous-photo.jpg\n\n# Strip metadata from PDF\nexiftool -all= meeting-notes.pdf\n\n# Strip entire directory\nexiftool -all= -r sensitive-folder/\n\n# Using mat2 (more thorough)\nmat2 protest-photo.jpg\nmat2 --inplace *.pdf  # Strip in place\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#what-gets-stripped","title":"What Gets Stripped","text":"Bash<pre><code># Before stripping\nexiftool IMG_1234.jpg | wc -l\n# Output: 246 lines of metadata\n\n# After stripping  \nexiftool -all= IMG_1234.jpg\nexiftool IMG_1234_original.jpg | wc -l\n# Output: 8 lines (only essential image data)\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#automated-git-pipeline","title":"Automated Git Pipeline","text":"","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#setting-up-pre-commit-hooks","title":"Setting Up Pre-Commit Hooks","text":"<p>Never accidentally commit metadata again:</p> Bash<pre><code>#!/bin/bash\n# .git/hooks/pre-commit\n# Make executable: chmod +x .git/hooks/pre-commit\n\necho \"\ud83d\udd0d Checking for metadata in staged files...\"\n\n# Get list of staged files\nfiles=$(git diff --cached --name-only --diff-filter=ACM)\n\n# Check each file\nfor file in $files; do\n    # Skip if file doesn't exist (deleted)\n    [ -f \"$file\" ] || continue\n\n    # Get file extension\n    ext=\"${file##*.}\"\n\n    case \"$ext\" in\n        jpg|jpeg|png|gif|bmp|tiff)\n            echo \"Stripping metadata from image: $file\"\n            exiftool -all= \"$file\" -overwrite_original\n            git add \"$file\"\n            ;;\n        pdf)\n            echo \"Stripping metadata from PDF: $file\"\n            exiftool -all= \"$file\" -overwrite_original\n            git add \"$file\"\n            ;;\n        mp4|mov|avi)\n            echo \"WARNING: Video $file may contain metadata\"\n            echo \"Run: exiftool -all= '$file'\"\n            ;;\n    esac\ndone\n\necho \"\u2705 Metadata stripping complete\"\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#advanced-pipeline-script","title":"Advanced Pipeline Script","text":"<p>Create comprehensive automation:</p> Bash<pre><code>#!/bin/bash\n# scripts/security/metadata-strip.sh\n\nset -e  # Exit on error\n\n# Configuration\nLOGFILE=\"logs/metadata-strip.log\"\nQUARANTINE=\"quarantine/\"\nPROCESSED=\"processed/\"\n\n# Ensure directories exist\nmkdir -p \"$(dirname \"$LOGFILE\")\" \"$QUARANTINE\" \"$PROCESSED\"\n\n# Logging function\nlog() {\n    echo \"[$(date +'%Y-%m-%d %H:%M:%S')] $*\" | tee -a \"$LOGFILE\"\n}\n\n# Process single file\nprocess_file() {\n    local file=\"$1\"\n    local basename=$(basename \"$file\")\n\n    log \"Processing: $file\"\n\n    # Backup original to quarantine\n    cp \"$file\" \"$QUARANTINE/$basename.original\"\n\n    # Detect file type\n    filetype=$(file -b --mime-type \"$file\")\n\n    case \"$filetype\" in\n        image/*)\n            # Strip EXIF, keep copyright if needed\n            exiftool -all= -TagsFromFile @ -ColorSpaceTags \\\n                    -overwrite_original \"$file\"\n            ;;\n        application/pdf)\n            # Strip all PDF metadata\n            exiftool -all= -overwrite_original \"$file\"\n            # Additional PDF cleaning\n            qpdf --linearize --replace-input \"$file\"\n            ;;\n        video/*)\n            # Videos need special handling\n            ffmpeg -i \"$file\" -map_metadata -1 -c:v copy -c:a copy \\\n                   \"$PROCESSED/$basename\" 2&gt;/dev/null\n            mv \"$PROCESSED/$basename\" \"$file\"\n            ;;\n        *)\n            log \"Unknown type: $filetype for $file\"\n            ;;\n    esac\n\n    log \"\u2713 Stripped: $file\"\n}\n\n# Main processing\nif [ $# -eq 0 ]; then\n    # Process all files in current directory\n    find . -type f \\( -iname \"*.jpg\" -o -iname \"*.jpeg\" -o -iname \"*.png\" \\\n                      -o -iname \"*.pdf\" -o -iname \"*.mp4\" -o -iname \"*.mov\" \\) \\\n          -exec \"$0\" {} \\;\nelse\n    # Process specific file\n    process_file \"$1\"\nfi\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#git-integration","title":"Git Integration","text":"","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#global-git-filters","title":"Global Git Filters","text":"<p>Apply metadata stripping to ALL repositories:</p> Bash<pre><code># Configure global filters\ngit config --global filter.stripmetadata.clean \\\n    'mat2 --inplace %f &amp;&amp; cat %f'\n\n# Create global attributes\necho \"*.jpg filter=stripmetadata\" &gt;&gt; ~/.gitattributes_global\necho \"*.jpeg filter=stripmetadata\" &gt;&gt; ~/.gitattributes_global\necho \"*.png filter=stripmetadata\" &gt;&gt; ~/.gitattributes_global\necho \"*.pdf filter=stripmetadata\" &gt;&gt; ~/.gitattributes_global\n\n# Enable global attributes\ngit config --global core.attributesfile ~/.gitattributes_global\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#repository-specific-configuration","title":"Repository-Specific Configuration","text":"<p>For maximum control per repository:</p> Bash<pre><code># In your repository root\ncat &gt; .gitattributes &lt;&lt; 'EOF'\n# Strip metadata from images\n*.jpg filter=stripmetadata\n*.jpeg filter=stripmetadata\n*.png filter=stripmetadata\n*.gif filter=stripmetadata\n\n# Strip metadata from documents\n*.pdf filter=stripmetadata\n*.doc filter=stripmetadata\n*.docx filter=stripmetadata\n\n# Videos (warn only due to size)\n*.mp4 filter=warn-metadata\n*.mov filter=warn-metadata\nEOF\n\n# Configure filters\ngit config filter.stripmetadata.clean 'exiftool -all= %f -overwrite_original &amp;&amp; cat %f'\ngit config filter.warn-metadata.clean 'echo \"WARNING: Video may contain metadata\" &amp;&amp; cat'\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#handling-specific-file-types","title":"Handling Specific File Types","text":"","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#images-the-biggest-risk","title":"Images: The Biggest Risk","text":"Bash<pre><code># Complete image sanitization\nsanitize_image() {\n    local input=\"$1\"\n    local output=\"${input%.*}_safe.${input##*.}\"\n\n    # Remove ALL metadata\n    exiftool -all= \"$input\" -o \"$output\"\n\n    # Extra paranoid: Re-encode image\n    convert \"$output\" -strip -resize 100% -quality 95 \"$output\"\n\n    # Verify no metadata remains\n    if exiftool \"$output\" | grep -E \"(GPS|Date|Serial|Owner)\"; then\n        echo \"ERROR: Metadata still present!\"\n        return 1\n    fi\n\n    mv \"$output\" \"$input\"\n}\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#pdfs-hidden-danger","title":"PDFs: Hidden Danger","text":"Bash<pre><code># PDF deep cleaning\nclean_pdf() {\n    local input=\"$1\"\n\n    # Method 1: exiftool\n    exiftool -all= \"$input\" -overwrite_original\n\n    # Method 2: qpdf (more thorough)\n    qpdf --linearize --remove-unreferenced-resources=yes \\\n         --empty --replace-input \"$input\"\n\n    # Method 3: Ghostscript (nuclear option)\n    gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 \\\n       -dPDFSETTINGS=/prepress -sOutputFile=\"${input}.clean\" \"$input\"\n\n    mv \"${input}.clean\" \"$input\"\n}\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#office-documents-metadata-nightmare","title":"Office Documents: Metadata Nightmare","text":"Bash<pre><code># LibreOffice conversion method (most thorough)\nclean_office_doc() {\n    local input=\"$1\"\n    local temp=\"${input%.*}_temp.pdf\"\n    local output=\"${input%.*}_clean.${input##*.}\"\n\n    # Convert to PDF (strips most metadata)\n    libreoffice --headless --convert-to pdf \"$input\"\n\n    # Strip PDF metadata\n    exiftool -all= \"${input%.*}.pdf\" -overwrite_original\n\n    # Convert back if needed\n    # Or keep as PDF for distribution\n}\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#verification-pipeline","title":"Verification Pipeline","text":"","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#trust-but-verify","title":"Trust But Verify","text":"Bash<pre><code>#!/bin/bash\n# scripts/verify-metadata.sh\n\nverify_file() {\n    local file=\"$1\"\n    echo \"Checking: $file\"\n\n    # Extract remaining metadata\n    metadata=$(exiftool \"$file\" 2&gt;/dev/null)\n\n    # Check for dangerous fields\n    dangerous_fields=\"GPS|Latitude|Longitude|Owner|Serial|Author|Creator|Producer|Company\"\n\n    if echo \"$metadata\" | grep -E \"$dangerous_fields\"; then\n        echo \"\u274c DANGER: Sensitive metadata found in $file\"\n        return 1\n    else\n        echo \"\u2705 SAFE: $file contains no sensitive metadata\"\n        return 0\n    fi\n}\n\n# Verify entire repository\nfind . -type f \\( -iname \"*.jpg\" -o -iname \"*.pdf\" \\) | while read file; do\n    verify_file \"$file\" || exit 1\ndone\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#continuous-integration","title":"Continuous Integration","text":"","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#github-actions-workflow","title":"GitHub Actions Workflow","text":"YAML<pre><code># .github/workflows/metadata-check.yml\nname: Metadata Security Check\n\non: [push, pull_request]\n\njobs:\n  metadata-scan:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Install tools\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y exiftool mat2\n\n    - name: Check for metadata\n      run: |\n        # Find all images and documents\n        files=$(find . -type f \\( -iname \"*.jpg\" -o -iname \"*.jpeg\" \\\n                                  -o -iname \"*.png\" -o -iname \"*.pdf\" \\))\n\n        # Check each file\n        for file in $files; do\n          echo \"Checking $file...\"\n\n          # Look for GPS data\n          if exiftool \"$file\" | grep -i \"GPS\"; then\n            echo \"::error::GPS data found in $file\"\n            exit 1\n          fi\n\n          # Look for personal info\n          if exiftool \"$file\" | grep -E \"(Owner|Author|Creator)\"; then\n            echo \"::warning::Personal metadata in $file\"\n          fi\n        done\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#emergency-response","title":"Emergency Response","text":"","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#when-metadata-leaks-happen","title":"When Metadata Leaks Happen","text":"Bash<pre><code># If metadata was already committed\n# 1. Remove from history\ngit filter-repo --path sensitive-photo.jpg --invert-paths\n\n# 2. Clean all historical versions\ngit filter-branch --index-filter \\\n    'git ls-files -s | grep \".jpg\" | while read mode object stage file; do\n        cleaned=$(exiftool -all= \"$file\" -o -)\n        new_object=$(echo \"$cleaned\" | git hash-object -w --stdin)\n        git update-index --cacheinfo \"$mode,$new_object,$file\"\n    done' -- --all\n\n# 3. Force push (requires team coordination)\ngit push --force-with-lease\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#best-practices","title":"Best Practices","text":"","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#do","title":"DO:","text":"<ul> <li>\u2713 Strip metadata BEFORE committing</li> <li>\u2713 Verify stripping worked</li> <li>\u2713 Automate everything possible</li> <li>\u2713 Keep original files offline only</li> <li>\u2713 Train all members on risks</li> <li>\u2713 Regular audits of repository</li> </ul>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#dont","title":"DON'T:","text":"<ul> <li>\u2717 Trust any device's \"privacy\" settings</li> <li>\u2717 Assume cloud services strip metadata</li> <li>\u2717 Share photos directly from phones</li> <li>\u2717 Forget about video metadata</li> <li>\u2717 Skip verification steps</li> <li>\u2717 Process files on compromised devices</li> </ul>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#common-mistakes","title":"Common Mistakes","text":"","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#but-i-turned-off-location-services","title":"\"But I turned off location services!\"","text":"<p>Device settings aren't reliable. Always strip manually.</p>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#the-platform-said-it-removes-metadata","title":"\"The platform said it removes metadata\"","text":"<ul> <li>Twitter: Removes some, not all</li> <li>Facebook: Keeps everything internally</li> <li>Signal: Good but verify</li> <li>Discord: Keeps everything</li> </ul>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#its-just-a-screenshot","title":"\"It's just a screenshot\"","text":"<p>Screenshots can contain: - Device information - App data - Timestamp - Sometimes even location</p>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#building-a-security-culture","title":"Building a Security Culture","text":"<p>Make metadata stripping part of daily practice:</p> Bash<pre><code># Add to .bashrc/.zshrc\nalias strip='exiftool -all= -overwrite_original'\nalias stripdir='exiftool -all= -r -overwrite_original'\nalias checkdata='exiftool'\n\n# Quick strip function\nstripfile() {\n    exiftool -all= \"$1\" -overwrite_original\n    echo \"\u2705 Stripped: $1\"\n}\n</code></pre>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/metadata-stripping-pipeline/#next-steps","title":"Next Steps","text":"<ol> <li>Install the tools TODAY</li> <li>Set up pre-commit hooks</li> <li>Audit existing repository</li> <li>Train all members</li> <li>Create organization-specific pipeline</li> <li>Regular security audits</li> </ol> <p>Remember: Metadata has put comrades in prison. Every photo you share, every document you commit, every file you upload could contain the evidence that destroys lives.</p> <p>Strip first. Verify second. Share third.</p> <p>\"In intelligence work, there are no small mistakes.\" - Markus Wolf</p> <p>Make metadata stripping as automatic as breathing. Your freedom depends on it.</p> <p>Backlinks:</p>","tags":["security","metadata","automation","privacy","technical"]},{"location":"implement/security/security-audits-for-organizers/","title":"Security Audits for Revolutionary Organizations","text":"","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#quick-start-checklist-do-this-first","title":"Quick Start Checklist (Do This First!)","text":"","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#physical-security-5-minutes","title":"\u2610 Physical Security (5 minutes)","text":"<ul> <li> Devices locked when not in use</li> <li> Sensitive documents secured</li> <li> Meeting location swept for recording devices</li> <li> No photography of sensitive materials</li> <li> \"Clean\" devices for sensitive meetings</li> </ul>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#digital-security-10-minutes","title":"\u2610 Digital Security (10 minutes)","text":"<ul> <li> Password manager being used</li> <li> 2FA enabled on critical accounts</li> <li> Software updates installed</li> <li> VPN active for organizing work</li> <li> Encrypted storage enabled</li> </ul>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#communication-security-5-minutes","title":"\u2610 Communication Security (5 minutes)","text":"<ul> <li> Using Signal/encrypted messaging</li> <li> No sensitive info in emails</li> <li> Meeting links not public</li> <li> Phone numbers protected</li> <li> Metadata removed from files</li> </ul>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#common-vulnerabilities-in-organizing-contexts","title":"Common Vulnerabilities in Organizing Contexts","text":"","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#1-the-activist-phone-problem","title":"1. The Activist Phone Problem","text":"<p>Vulnerability: Using personal phones for organizing Risk: Complete social graph exposure, location tracking, message interception Remediation: Bash<pre><code># Separate organizing identity\n- Get dedicated organizing phone/number\n- Use GrapheneOS or CalyxOS\n- Never link to personal accounts\n- Keep powered off when not organizing\n</code></pre></p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#2-the-meeting-link-leak","title":"2. The Meeting Link Leak","text":"<p>Vulnerability: Reusing Zoom/Jitsi links publicly Risk: Infiltration, recording, disruption Remediation: Bash<pre><code># Secure meeting protocol\n- Generate unique links per meeting\n- Require passwords + waiting room\n- Share links only via Signal\n- Never post links publicly\n- Have backup communication channel\n</code></pre></p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#3-the-git-history-exposure","title":"3. The Git History Exposure","text":"<p>Vulnerability: Real names/locations in Git history Risk: Complete member identification Remediation: Bash<pre><code># Clean Git history\ngit filter-branch --env-filter '\nexport GIT_AUTHOR_NAME=\"Comrade47\"\nexport GIT_AUTHOR_EMAIL=\"comrade47@protonmail.com\"\nexport GIT_COMMITTER_NAME=\"Comrade47\"\nexport GIT_COMMITTER_EMAIL=\"comrade47@protonmail.com\"\n' --tag-name-filter cat -- --branches --tags\n\n# Prevent future exposure\ngit config user.name \"YourPseudonym\"\ngit config user.email \"pseudonym@protonmail.com\"\n</code></pre></p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#4-the-cloud-storage-trap","title":"4. The Cloud Storage Trap","text":"<p>Vulnerability: Using Google Drive/Dropbox for organizing docs Risk: Corporate surveillance, sudden deletion, legal requests Remediation: Bash<pre><code># Migrate to secure alternatives\n- Set up Nextcloud instance\n- Use Cryptpad for collaboration\n- Git for permanent records\n- Local encrypted backups\n</code></pre></p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#5-the-social-media-opsec-fail","title":"5. The Social Media OPSEC Fail","text":"<p>Vulnerability: Organizing on Facebook/Twitter Risk: Network mapping, predictive policing, infiltration Remediation: - Move organizing off corporate platforms - Use purpose-specific accounts - Never connect personal/organizing identities - Assume all posts are monitored</p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#automated-security-scanning-tools","title":"Automated Security Scanning Tools","text":"","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#git-repository-scanner","title":"Git Repository Scanner","text":"<p>Save as <code>security-scan.sh</code>:</p> Bash<pre><code>#!/bin/bash\n# Automated security scanner for organizing repositories\n\necho \"=== DRUIDS Security Scanner v1.0 ===\"\necho \"Starting scan at $(date)\"\necho \"\"\n\n# Check for exposed secrets\necho \"[*] Scanning for exposed secrets...\"\ngit grep -E \"(password|api_key|secret|token|private_key)\" || echo \"\u2713 No obvious secrets found\"\n\n# Check for personal information\necho -e \"\\n[*] Scanning for personal information...\"\ngit grep -E \"([0-9]{3}-[0-9]{2}-[0-9]{4}|[0-9]{3}\\.[0-9]{3}\\.[0-9]{4})\" || echo \"\u2713 No SSNs found\"\ngit grep -E \"\\b[A-Z][a-z]+ [A-Z][a-z]+\\b\" | grep -v -E \"(Comrade|Worker|Organizer)\" | head -20 || echo \"\u2713 No obvious real names\"\n\n# Check commit authors\necho -e \"\\n[*] Checking commit authors...\"\ngit log --format='%aN &lt;%aE&gt;' | sort -u | grep -E \"(@gmail|@yahoo|@hotmail|real.*name)\" || echo \"\u2713 No personal emails found\"\n\n# Check for dangerous files\necho -e \"\\n[*] Checking for dangerous files...\"\nfind . -name \"*.env\" -o -name \"*password*\" -o -name \"*secret*\" -o -name \"*.key\" | grep -v \".git\" || echo \"\u2713 No dangerous files found\"\n\n# Check file permissions\necho -e \"\\n[*] Checking file permissions...\"\nfind . -type f -perm /077 -ls 2&gt;/dev/null | grep -v \".git\" || echo \"\u2713 No world-writable files\"\n\n# Repository statistics\necho -e \"\\n[*] Repository statistics:\"\necho \"Total commits: $(git rev-list --all --count)\"\necho \"Contributors: $(git log --format='%aN' | sort -u | wc -l)\"\necho \"Branches: $(git branch -a | wc -l)\"\necho \"Tags: $(git tag | wc -l)\"\n\necho -e \"\\n[\u2713] Scan complete at $(date)\"\n</code></pre>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#network-security-scanner","title":"Network Security Scanner","text":"<p>Save as <code>network-scan.py</code>:</p> Python<pre><code>#!/usr/bin/env python3\n\"\"\"Network security scanner for organizing infrastructure\"\"\"\n\nimport subprocess\nimport socket\nimport ssl\nimport sys\n\ndef scan_domain(domain):\n    \"\"\"Basic security scan of organizing domain\"\"\"\n    print(f\"\\n[*] Scanning {domain}...\")\n\n    # Check DNS\n    try:\n        ip = socket.gethostbyname(domain)\n        print(f\"\u2713 Resolves to: {ip}\")\n    except:\n        print(f\"\u2717 DNS resolution failed\")\n        return\n\n    # Check common ports\n    ports = {\n        80: \"HTTP\",\n        443: \"HTTPS\", \n        22: \"SSH\",\n        25: \"SMTP\",\n        3306: \"MySQL\",\n        5432: \"PostgreSQL\"\n    }\n\n    print(\"\\n[*] Port scan:\")\n    for port, service in ports.items():\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(1)\n        result = sock.connect_ex((ip, port))\n        if result == 0:\n            print(f\"  - Port {port} ({service}): OPEN\")\n        sock.close()\n\n    # Check SSL certificate\n    if check_port_open(domain, 443):\n        print(\"\\n[*] SSL Certificate check:\")\n        try:\n            context = ssl.create_default_context()\n            with socket.create_connection((domain, 443), timeout=5) as sock:\n                with context.wrap_socket(sock, server_hostname=domain) as ssock:\n                    cert = ssock.getpeercert()\n                    print(f\"  \u2713 Valid until: {cert['notAfter']}\")\n        except Exception as e:\n            print(f\"  \u2717 SSL Error: {e}\")\n\ndef check_port_open(host, port):\n    \"\"\"Check if port is open\"\"\"\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.settimeout(1)\n    result = sock.connect_ex((host, port))\n    sock.close()\n    return result == 0\n\nif __name__ == \"__main__\":\n    if len(sys.argv) &lt; 2:\n        print(\"Usage: python3 network-scan.py domain.com\")\n        sys.exit(1)\n\n    scan_domain(sys.argv[1])\n</code></pre>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#device-security-checker","title":"Device Security Checker","text":"<p>Save as <code>device-check.sh</code>:</p> Bash<pre><code>#!/bin/bash\n# Device security checker for organizers\n\necho \"=== Device Security Audit ===\"\necho \"\"\n\n# Check disk encryption\necho \"[*] Disk Encryption Status:\"\nif command -v dmsetup &amp;&gt; /dev/null; then\n    sudo dmsetup status | grep -q crypt &amp;&amp; echo \"\u2713 Disk encryption enabled\" || echo \"\u2717 Disk encryption NOT enabled\"\nelse\n    echo \"\u26a0 Cannot verify disk encryption\"\nfi\n\n# Check firewall\necho -e \"\\n[*] Firewall Status:\"\nif command -v ufw &amp;&gt; /dev/null; then\n    sudo ufw status | grep -q \"Status: active\" &amp;&amp; echo \"\u2713 Firewall active\" || echo \"\u2717 Firewall inactive\"\nelif command -v iptables &amp;&gt; /dev/null; then\n    sudo iptables -L | grep -q \"Chain\" &amp;&amp; echo \"\u2713 iptables rules present\" || echo \"\u2717 No iptables rules\"\nfi\n\n# Check updates\necho -e \"\\n[*] System Updates:\"\nif command -v apt &amp;&gt; /dev/null; then\n    updates=$(apt list --upgradable 2&gt;/dev/null | grep -c upgradable)\n    [ $updates -eq 0 ] &amp;&amp; echo \"\u2713 System up to date\" || echo \"\u2717 $updates updates available\"\nfi\n\n# Check for suspicious processes\necho -e \"\\n[*] Suspicious Processes:\"\nps aux | grep -E \"(keylog|capture|sniff)\" | grep -v grep || echo \"\u2713 No obvious keyloggers\"\n\n# Check SSH configuration\necho -e \"\\n[*] SSH Security:\"\nif [ -f /etc/ssh/sshd_config ]; then\n    grep -q \"PasswordAuthentication no\" /etc/ssh/sshd_config &amp;&amp; echo \"\u2713 Password auth disabled\" || echo \"\u26a0 Password auth enabled\"\n    grep -q \"PermitRootLogin no\" /etc/ssh/sshd_config &amp;&amp; echo \"\u2713 Root login disabled\" || echo \"\u26a0 Root login allowed\"\nfi\n\necho -e \"\\n[\u2713] Device check complete\"\n</code></pre>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#monthly-security-audit","title":"Monthly Security Audit","text":"","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#personnel-security-l1","title":"Personnel Security (L1)","text":"<ol> <li>Access Review</li> <li> Review who has access to repositories</li> <li> Check for inactive members still in systems</li> <li> Verify emergency contacts updated</li> <li> Run automated scan: <code>./security-scan.sh</code></li> </ol> Bash<pre><code># Automated access audit\ngit log --format='%aN' --since=\"6 months ago\" | sort -u &gt; active-users.txt\ngit log --format='%aN' | sort -u &gt; all-users.txt\ncomm -13 active-users.txt all-users.txt &gt; inactive-users.txt\necho \"Inactive users to review:\"\ncat inactive-users.txt\n</code></pre> <ol> <li>Password Audit</li> <li> All passwords unique and strong</li> <li> Shared passwords rotated</li> <li> Recovery codes backed up securely</li> <li> Check password manager health:</li> </ol> Bash<pre><code># Password audit checklist\necho \"=== Password Audit ===\"\necho \"1. Open password manager\"\necho \"2. Run security audit/watchtower\"\necho \"3. Fix any weak/duplicate passwords\"\necho \"4. Update shared vault passwords\"\necho \"5. Verify 2FA on all critical accounts\"\n</code></pre> <ol> <li>Device Security</li> <li> Full disk encryption enabled</li> <li> Auto-lock configured (5 minutes)</li> <li> Find My Device/remote wipe ready</li> <li> Backups encrypted and tested</li> <li> Run device checker: <code>./device-check.sh</code></li> </ol>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#operational-security-l1","title":"Operational Security (L1)","text":"<ol> <li>Meeting Security</li> <li> Using secure video platforms</li> <li> Recording policies followed</li> <li> Minutes properly classified (L0/L1/L2)</li> <li> <p> No phones during sensitive discussions</p> </li> <li> <p>Communication Audit</p> </li> <li> Signal disappearing messages enabled</li> <li> Email signatures don't leak info</li> <li> Social media OPSEC maintained</li> <li> <p> Metadata stripped from shared files</p> </li> <li> <p>Git Security</p> </li> <li> No secrets in commit history</li> <li> Proper .gitignore configured</li> <li> Commits use pseudonyms consistently</li> <li>Action: <code>git secrets --scan</code></li> </ol>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#infrastructure-security-l2","title":"Infrastructure Security (L2)","text":"<ol> <li>Repository Audit</li> <li> Access logs reviewed</li> <li> Unusual activity investigated</li> <li> Backups tested and verified</li> <li> <p> Encryption keys rotated quarterly</p> </li> <li> <p>Emergency Procedures</p> </li> <li> Panic button procedures known</li> <li> Legal contacts accessible</li> <li> Raid response plan current</li> <li> Data destruction ready if needed</li> </ol>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#quarterly-deep-audit","title":"Quarterly Deep Audit","text":"","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#comprehensive-security-review","title":"Comprehensive Security Review","text":"","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#phase-1-threat-assessment-week-1","title":"Phase 1: Threat Assessment (Week 1)","text":"<p>Current Threat Landscape Analysis: Bash<pre><code># Document current threats\ncat &gt; audits/Q4-2024-threats.md &lt;&lt; EOF\n# Q4 2024 Threat Assessment\n\n## State Surveillance\n- Local police capabilities: [assess]\n- Federal interest level: [low/medium/high]\n- Recent operations in area: [document]\n\n## Corporate Threats  \n- Platform deplatforming risk: [assess]\n- Employment retaliation risk: [assess]\n- Financial service denial: [assess]\n\n## Fascist/Right-wing Threats\n- Local group activity: [document]\n- Doxxing attempts: [number]\n- Physical threat level: [assess]\n\n## Infiltration Indicators\n- Suspicious new members: [list]\n- Unusual questions/interest: [note]\n- Technical anomalies: [describe]\nEOF\n</code></pre></p> <p>Adversary Capability Matrix: | Adversary | Technical | Physical | Legal | Financial | |-----------|-----------|----------|--------|-----------| | Local Police | Medium | High | High | Low | | Federal Agencies | High | High | High | Medium | | Corporations | High | Low | Medium | High | | Fascist Groups | Low | Medium | Low | Low |</p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#phase-2-technical-audit-week-2","title":"Phase 2: Technical Audit (Week 2)","text":"<p>Infrastructure Deep Scan: Bash<pre><code>#!/bin/bash\n# Quarterly infrastructure audit\n\necho \"=== Quarterly Security Deep Scan ===\"\n\n# Scan all repositories\nfor repo in $(find ~/organizing -name \".git\" -type d); do\n    echo \"Scanning: $repo\"\n    cd $(dirname $repo)\n    ./security-scan.sh\n    echo \"---\"\ndone\n\n# Check all domains\nfor domain in $(cat infrastructure/domains.txt); do\n    python3 network-scan.py $domain\ndone\n\n# Audit all servers\nansible all -m shell -a \"uname -a; uptime; df -h\"\n</code></pre></p> <p>Penetration Testing Checklist: - [ ] Password spray against services - [ ] Check for default credentials - [ ] Test backup restoration - [ ] Verify encryption at rest - [ ] Check network segmentation - [ ] Test incident response</p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#phase-3-personnel-security-review-week-3","title":"Phase 3: Personnel Security Review (Week 3)","text":"<p>Member Security Practices Audit: Bash<pre><code># Create security survey\ncat &gt; audits/security-survey.md &lt;&lt; EOF\n# Member Security Self-Assessment\n\nName (pseudonym): ________________\nDate: ________________\n\n## Device Security\n- [ ] Full disk encryption enabled\n- [ ] Strong device passwords/biometrics\n- [ ] Auto-lock configured\n- [ ] Regular updates installed\n\n## Account Security  \n- [ ] Using password manager\n- [ ] 2FA on all critical accounts\n- [ ] No password reuse\n- [ ] Recovery codes secured\n\n## Operational Security\n- [ ] Separate organizing identity\n- [ ] Using Signal for sensitive comms\n- [ ] Following meeting security protocols\n- [ ] No sensitive data on personal devices\n\n## Training Needs\nWhat security topics need clarification?\n_________________________________\nEOF\n</code></pre></p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#phase-4-remediation-planning-week-4","title":"Phase 4: Remediation Planning (Week 4)","text":"<p>Risk Prioritization Matrix: Text Only<pre><code>         Impact \u2192\n    \u2193    Low    Medium    High\nLikely   \ud83d\udfe1      \ud83d\udfe0       \ud83d\udd34\nPossible \ud83d\udfe2      \ud83d\udfe1       \ud83d\udfe0  \nUnlikely \ud83d\udfe2      \ud83d\udfe2       \ud83d\udfe1\n\n\ud83d\udd34 Critical - Fix immediately\n\ud83d\udfe0 High - Fix within 30 days\n\ud83d\udfe1 Medium - Fix within 90 days\n\ud83d\udfe2 Low - Track and monitor\n</code></pre></p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#security-audit-by-threat-level","title":"Security Audit by Threat Level","text":"","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#threat-level-green-normal-operations","title":"Threat Level: GREEN (Normal Operations)","text":"<p>Focus: Maintaining good practices</p> Bash<pre><code># Weekly tasks\n- [ ] Review access logs\n- [ ] Update software\n- [ ] Backup verification\n- [ ] Security news review\n\n# Monthly tasks  \n- [ ] Password rotation\n- [ ] Access review\n- [ ] Device audit\n- [ ] Training refresher\n</code></pre>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#threat-level-yellow-elevated-concern","title":"Threat Level: YELLOW (Elevated Concern)","text":"<p>Trigger: Increased state attention, threats received</p> Bash<pre><code># Immediate actions\n- [ ] Notify all members of elevation\n- [ ] Review and update emergency contacts\n- [ ] Ensure backups are current\n- [ ] Brief legal support\n\n# Enhanced monitoring\n- [ ] Daily log reviews\n- [ ] Increase meeting security\n- [ ] Limit new member access\n- [ ] Prepare grab bags\n</code></pre>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#threat-level-orange-high-alert","title":"Threat Level: ORANGE (High Alert)","text":"<p>Trigger: Active surveillance confirmed, immediate threats</p> Bash<pre><code># Immediate lockdown\n- [ ] Freeze new access\n- [ ] Audit all accounts\n- [ ] Move to high-security comms only\n- [ ] Implement buddy system\n\n# Operational changes\n- [ ] In-person meetings only\n- [ ] Rotate meeting locations  \n- [ ] Use burner devices\n- [ ] Legal team on standby\n</code></pre>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#threat-level-red-emergency","title":"Threat Level: RED (Emergency)","text":"<p>Trigger: Raids, arrests, active targeting</p> <p>See: When They Come Knocking</p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#incident-response-procedures","title":"Incident Response Procedures","text":"","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#security-incident-playbook","title":"Security Incident Playbook","text":"<p>1. Identification (0-1 hour) Bash<pre><code># Document everything\necho \"Incident detected: $(date)\" &gt; incident.log\necho \"Type: [breach|exposure|infiltration|legal]\" &gt;&gt; incident.log\necho \"Severity: [low|medium|high|critical]\" &gt;&gt; incident.log\necho \"Affected systems: \" &gt;&gt; incident.log\n</code></pre></p> <p>2. Containment (1-4 hours) Bash<pre><code># Immediate actions by incident type\n\n# Data exposure\ngit checkout main\ngit reset --hard [safe-commit]\ngit push --force\n\n# Account compromise  \n# Revoke all sessions\n# Force password reset\n# Review access logs\n\n# Device compromise\n# Isolate device\n# Revoke all keys\n# Wipe if necessary\n</code></pre></p> <p>3. Eradication (4-24 hours) - Remove malicious access - Patch vulnerabilities - Update security controls - Reset compromised credentials</p> <p>4. Recovery (1-7 days) - Restore normal operations - Verify security controls - Monitor for recurrence - Update documentation</p> <p>5. Lessons Learned (Within 2 weeks) Markdown<pre><code>## Incident Post-Mortem\n\n**What happened?**\n[Factual timeline]\n\n**Why did it happen?**\n[Root cause analysis]\n\n**What worked well?**\n[Effective responses]\n\n**What didn't work?**\n[Gaps identified]\n\n**Action items:**\n- [ ] Update procedures\n- [ ] Additional training\n- [ ] New controls needed\n</code></pre></p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#incident-review","title":"Incident Review","text":"<ul> <li> All incidents documented</li> <li> Lessons learned captured</li> <li> Procedures updated</li> <li> Near-misses analyzed</li> <li> Training updated</li> </ul>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#security-findings-template","title":"Security Findings Template","text":"YAML<pre><code>date: YYYY-MM-DD\nauditor: [pseudonym]\ntype: monthly|quarterly|incident\nclassification: L0|L1|L2\n\nfindings:\n  - severity: critical|high|medium|low\n    category: personnel|operational|infrastructure\n    description: |\n      Clear description of issue\n    remediation: |\n      Specific steps to fix\n    assigned_to: [pseudonym]\n    due_date: YYYY-MM-DD\n\ncompleted_items:\n  - Regular password rotation\n  - Device encryption verified\n  - [etc]\n\nnext_audit: YYYY-MM-DD\n</code></pre>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#enhanced-remediation-tracking","title":"Enhanced Remediation Tracking","text":"","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#remediation-management-system","title":"Remediation Management System","text":"<p>1. Finding Classification: Bash<pre><code># Create structured finding report\ncat &gt; findings/2024-Q4-001.md &lt;&lt; EOF\n# Security Finding 2024-Q4-001\n\n**Date**: $(date)\n**Auditor**: SecurityWG\n**Severity**: High\n**Category**: Access Control\n\n## Description\nInactive members still have repository access after 6 months of inactivity.\n\n## Risk Assessment\n- **Likelihood**: Medium\n- **Impact**: High  \n- **Risk Score**: 7/10\n\n## Evidence\ngit log shows 5 users with no commits in 6+ months still have write access.\n\n## Remediation Plan\n1. Review all user access quarterly\n2. Implement automatic access expiration\n3. Create offboarding checklist\n\n## Assigned To\n- Technical: @ComradeTech\n- Process: @ComradeOps\n- Due Date: 2024-12-15\nEOF\n\ngit add findings/\ngit commit -m \"SECURITY[high]: Document inactive user access finding\"\n</code></pre></p> <p>2. Remediation Workflow: Bash<pre><code># Track remediation progress\ngit checkout -b remediation/2024-Q4-001\n\n# Implement fixes\n./scripts/audit-users.sh &gt; inactive-users.txt\n# Remove access for inactive users\n\n# Document changes\ncat &gt;&gt; findings/2024-Q4-001.md &lt;&lt; EOF\n\n## Remediation Progress\n- [x] Identified 5 inactive users (2024-11-20)\n- [x] Contacted users for confirmation (2024-11-22)\n- [x] Removed access for 4 confirmed inactive (2024-11-25)\n- [ ] Implement automated quarterly review\nEOF\n\ngit add findings/2024-Q4-001.md\ngit commit -m \"SECURITY[remediation]: Remove inactive user access\"\n</code></pre></p> <p>3. Verification Process: Bash<pre><code># Verify remediation effectiveness\ncat &gt; findings/2024-Q4-001-verify.sh &lt;&lt; 'EOF'\n#!/bin/bash\n# Verify no inactive users have access\n\necho \"=== Access Verification ===\"\nfor user in $(git log --format='%aN' | sort -u); do\n    last_commit=$(git log --author=\"$user\" -1 --format=\"%ar\")\n    if [$last_commit == *\"months\"*]($last_commit == *\"months\"*.md){#50d1c4113a7b3b51b2dfb93bec2d2829} &amp;&amp; [${last_commit%% *} -gt 6](${last_commit%% *} -gt 6.md){#8ccb298d13b5c6f0346b85128d6d4df1}; then\n        echo \"WARNING: $user last committed $last_commit\"\n    fi\ndone\nEOF\n\nchmod +x findings/2024-Q4-001-verify.sh\n./findings/2024-Q4-001-verify.sh\n</code></pre></p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#remediation-metrics-dashboard","title":"Remediation Metrics Dashboard","text":"Bash<pre><code># Generate remediation metrics\ncat &gt; reports/security-metrics.sh &lt;&lt; 'EOF'\n#!/bin/bash\n\necho \"=== Security Remediation Metrics ===\"\necho \"Generated: $(date)\"\necho \"\"\n\n# Open findings\necho \"Open Findings:\"\ngrep -l \"Status: Open\" findings/*.md | wc -l\n\n# By severity\necho -e \"\\nBy Severity:\"\necho \"Critical: $(grep -l \"Severity: Critical\" findings/*.md | grep -l \"Status: Open\" | wc -l)\"\necho \"High: $(grep -l \"Severity: High\" findings/*.md | grep -l \"Status: Open\" | wc -l)\"\necho \"Medium: $(grep -l \"Severity: Medium\" findings/*.md | grep -l \"Status: Open\" | wc -l)\"\necho \"Low: $(grep -l \"Severity: Low\" findings/*.md | grep -l \"Status: Open\" | wc -l)\"\n\n# Average remediation time\necho -e \"\\nAverage Remediation Time:\"\n# Calculate from git history\nEOF\n\nchmod +x reports/security-metrics.sh\n</code></pre>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#red-flags-requiring-immediate-action","title":"Red Flags Requiring Immediate Action","text":"<p>\ud83d\udea8 STOP and get help if you find:</p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#technical-red-flags","title":"Technical Red Flags","text":"<ul> <li>Active malware/spyware indicators</li> <li>Unauthorized access in logs</li> <li>Unexpected outbound connections</li> <li>Modified security tools</li> <li>Disabled logging/monitoring</li> </ul>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#physical-red-flags","title":"Physical Red Flags","text":"<ul> <li>Missing devices with org data</li> <li>Signs of physical tampering</li> <li>Unexpected \"maintenance\" visits</li> <li>New people asking questions</li> <li>Surveillance indicators</li> </ul>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#legal-red-flags","title":"Legal Red Flags","text":"<ul> <li>Subpoenas or warrants</li> <li>Grand jury summons</li> <li>Asset freeze notices</li> <li>FOIA requests about your org</li> <li>Law enforcement contact</li> </ul> <p>Emergency Response: See Security Emergency Response Plan</p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#building-revolutionary-security-culture","title":"Building Revolutionary Security Culture","text":"","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#make-it-collective-not-individual","title":"Make It Collective, Not Individual","text":"<p>Transform security from burden to collective power:</p> Bash<pre><code># Rotate security roles monthly\ncat &gt; security/rotation-schedule.md &lt;&lt; EOF\n# Security Role Rotation\n\n## January: Team A\n- Audit Lead: @Comrade1\n- Tool Maintenance: @Comrade2\n- Training: @Comrade3\n\n## February: Team B\n[continues...]\nEOF\n\n# Security skill sharing sessions\n- Monthly security caf\u00e9\n- Pair security audits\n- \"I got phished\" storytelling\n- Celebrate security wins\n</code></pre>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#make-it-material-not-abstract","title":"Make It Material, Not Abstract","text":"<p>Connect to real organizing conditions:</p> Markdown<pre><code>## Threat Scenarios We Train For\n\n### Scenario 1: Employer Retaliation\n\"Your boss finds your organizing Twitter\"\n- Practice: Identity separation\n- Tool: Compartmentalization\n- Skill: OPSEC discipline\n\n### Scenario 2: Police Raid\n\"They're at the door with a warrant\"\n- Practice: Device encryption\n- Tool: Panic buttons\n- Skill: Legal rights\n\n### Scenario 3: Infiltrator Exposed\n\"The new enthusiastic member is a cop\"\n- Practice: Information silos\n- Tool: Access controls\n- Skill: Verification culture\n</code></pre>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#make-it-sustainable-not-heroic","title":"Make It Sustainable, Not Heroic","text":"<p>Build systems, not heroes:</p> Bash<pre><code># Automate security tasks\ncat &gt; cron/security-tasks &lt;&lt; EOF\n# Daily\n0 9 * * * /opt/security/daily-scan.sh\n\n# Weekly  \n0 10 * * 1 /opt/security/backup-verify.sh\n\n# Monthly\n0 10 1 * * /opt/security/access-audit.sh\n\n# Quarterly\n0 10 1 */3 * /opt/security/full-audit.sh\nEOF\n\n# Create security habits\n- Password manager in onboarding\n- Security check before actions\n- Verification as culture\n- Learning from incidents\n</code></pre>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#security-as-revolutionary-practice","title":"Security as Revolutionary Practice","text":"<p>Remember: Our security isn't paranoia - it's preparation. Every security measure we take is an act of love for our comrades and our movement.</p> <p>The state has resources, but we have each other. Their surveillance assumes we're individuals; our security builds collective power.</p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#quick-reference-cards","title":"Quick Reference Cards","text":"","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#daily-security-habit-card","title":"Daily Security Habit Card","text":"Text Only<pre><code>Morning:\n\u2610 Check device encryption active\n\u2610 Verify VPN connected\n\u2610 Review calendar for OPSEC\n\nDuring Work:\n\u2610 Lock screen when away\n\u2610 Verify links before clicking  \n\u2610 Check sender before replying\n\nEvening:\n\u2610 Review what was shared today\n\u2610 Secure devices for night\n\u2610 Check for security updates\n</code></pre>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-audits-for-organizers/#monthly-audit-card","title":"Monthly Audit Card","text":"Text Only<pre><code>Week 1: Personnel\n\u2610 Access review\n\u2610 Password audit\n\u2610 Device check\n\nWeek 2: Infrastructure  \n\u2610 Run scans\n\u2610 Check logs\n\u2610 Verify backups\n\nWeek 3: Operations\n\u2610 Meeting security\n\u2610 Comms audit\n\u2610 Training needs\n\nWeek 4: Planning\n\u2610 Review findings\n\u2610 Assign fixes\n\u2610 Update docs\n</code></pre> <p>Remember: The best security system is one that gets used. Start where you are, improve consistently, protect each other.</p> <p>Backlinks:</p>","tags":["security","audit","tools","vulnerabilities","remediation"]},{"location":"implement/security/security-playbook/","title":"Security Implementation Playbook","text":"<p>Real security for small revolutionary organizations - Not paranoia, not theater, just practical protection against documented threats.</p>","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#start-here-your-2-hour-security-workshop","title":"Start Here: Your 2-Hour Security Workshop","text":"","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#part-1-threat-model-reality-check-30-minutes","title":"Part 1: Threat Model Reality Check (30 minutes)","text":"<p>Exercise: List Your Actual Threats</p> <p>Get your core organizers together and honestly assess:</p> <ol> <li>Law Enforcement Threats</li> <li>Local police interest level (Low/Medium/High)</li> <li>Federal attention (FBI, DHS, etc.)</li> <li>Past raids or surveillance in your area</li> <li> <p>Legal vulnerabilities (arrests, warrants)</p> </li> <li> <p>Corporate/Employer Threats</p> </li> <li>Members' job security risks</li> <li>Corporate surveillance concerns</li> <li> <p>Industry-specific retaliation</p> </li> <li> <p>Internal Threats</p> </li> <li>Burnout and single points of failure</li> <li>Information silos</li> <li>Personality conflicts</li> <li> <p>Potential infiltration</p> </li> <li> <p>Technical Threats</p> </li> <li>Device seizure likelihood</li> <li>Hacking sophistication needed</li> <li>Social engineering risks</li> </ol> <p>Output: Threat priority list (what keeps you up at night?)</p>","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#part-2-map-threats-to-security-tiers-45-minutes","title":"Part 2: Map Threats to Security Tiers (45 minutes)","text":"<p>Use this classification flowchart:</p> Text Only<pre><code>Is this information already public or meant to be?\n    YES \u2192 L0 (Green) - Public Tier\n    NO \u2193\n\nWould disclosure harm the organization but not individuals?\n    YES \u2192 L1 (Brown) - Member Tier  \n    NO \u2193\n\nCould this get someone arrested, fired, or physically harmed?\n    YES \u2192 L2 (Red) - Cadre Tier\n</code></pre> <p>Common L0 (Public) Examples:</p> <ul> <li>Educational materials</li> <li>Public event announcements</li> <li>Already-published positions</li> <li>General meeting minutes (sanitized)</li> </ul> <p>Common L1 (Member) Examples:</p> <ul> <li>Internal discussions and debates</li> <li>Member contact information</li> <li>Financial records</li> <li>Strategic planning (non-sensitive)</li> <li>Meeting minutes (full version)</li> </ul> <p>Common L2 (Cadre) Examples:</p> <ul> <li>Direct action planning</li> <li>Legal defense strategies</li> <li>Infiltration concerns</li> <li>Member vulnerabilities</li> <li>Anything involving illegality</li> </ul>","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#part-3-implement-practical-security-45-minutes","title":"Part 3: Implement Practical Security (45 minutes)","text":"<p>Immediate Actions (Do Today):</p> <ol> <li>Password Audit</li> <li>List all organizational accounts</li> <li>Identify who has access</li> <li>Create password manager vault</li> <li> <p>Generate new strong passwords</p> </li> <li> <p>Communication Channels</p> </li> <li>Public: Keep Discord/social media</li> <li>Member: Move to DRUIDS L1 vault</li> <li> <p>Sensitive: Create L2 procedures</p> </li> <li> <p>Document Migration</p> </li> <li>Export Google Docs</li> <li>Sort by security tier</li> <li>Import to appropriate vaults</li> </ol> <p>This Week Actions:</p> <ol> <li>Device Security Basics</li> </ol> Bash<pre><code># Minimum viable security\n- Full disk encryption on all devices\n- Screen lock with password (not biometric)\n- Separate user accounts for DRUIDS work\n- Regular backups to encrypted drives\n</code></pre> <ol> <li>Access Control Setup</li> <li>L0: Anyone can clone public repo</li> <li>L1: Member onboarding checklist</li> <li> <p>L2: Strict need-to-know basis</p> </li> <li> <p>Visual Security Training</p> </li> <li>Show green/brown/red borders</li> <li>Practice classification exercises</li> <li>Common mistakes workshop</li> </ol>","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#raidlegal-threat-procedures","title":"Raid/Legal Threat Procedures","text":"","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#before-preparation","title":"Before (Preparation)","text":"<p>Technical Preparation:</p> <ul> <li>L2 content NEVER on primary devices</li> <li>Use dedicated machines for sensitive work</li> <li>Enable full disk encryption everywhere</li> <li>Regular encrypted backups offsite</li> </ul> <p>Legal Preparation:</p> <ul> <li>Know your rights card for all members</li> <li>Lawyer contact info distributed</li> <li>Legal fund established</li> <li>Power of attorney documents ready</li> </ul> <p>Organizational Preparation:</p> <ul> <li>Clear roles during crisis</li> <li>Communication tree established</li> <li>Safe houses identified</li> <li>Document destruction protocols</li> </ul>","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#during-if-raid-happens","title":"During (If Raid Happens)","text":"<p>Immediate Response:</p> <ol> <li>Stay Calm - They want you panicked</li> <li>Invoke Rights - \"I am exercising my right to remain silent. I want a lawyer.\"</li> <li>Document Everything - Have someone outside filming/noting</li> <li>Alert Network - Use predetermined signal</li> </ol> <p>Technical Response:</p> <ul> <li>Do NOT unlock devices</li> <li>Do NOT provide passwords</li> <li>Do NOT consent to searches</li> <li>Let encryption do its job</li> </ul>","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#after-recovery","title":"After (Recovery)","text":"<p>First 24 Hours:</p> <ul> <li>Account for all members</li> <li>Legal team activated</li> <li>Security audit of what was taken</li> <li>Public statement if needed</li> </ul> <p>First Week:</p> <ul> <li>Change all L1 passwords</li> <li>Rotate L2 access completely</li> <li>Debrief with membership</li> <li>Update security procedures</li> </ul>","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#building-sustainable-security-culture","title":"Building Sustainable Security Culture","text":"","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#make-it-visual-not-verbal","title":"Make It Visual, Not Verbal","text":"<p>\u274c Security Theater:</p> <ul> <li>Complex passwords changed monthly</li> <li>Paranoid communication protocols</li> <li>Assuming everything is compromised</li> <li>Secret agent LARPing</li> </ul> <p>\u2705 Real Security:</p> <ul> <li>Visual indicators prevent mistakes</li> <li>Reasonable practices people follow</li> <li>Threat-appropriate responses</li> <li>Community accountability</li> </ul>","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#regular-security-reviews-monthly","title":"Regular Security Reviews (Monthly)","text":"<p>10-Minute Security Check:</p> <ol> <li>Any new threats this month?</li> <li>Any classification confusion?</li> <li>Any close calls or mistakes?</li> <li>Anyone need security support?</li> </ol> <p>Quarterly Deep Dive:</p> <ul> <li>Review threat model changes</li> <li>Update access lists</li> <li>Practice incident response</li> <li>Refresh training materials</li> </ul>","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#common-pitfalls-to-avoid","title":"Common Pitfalls to Avoid","text":"<ol> <li>Over-Classification</li> <li>Not everything is L2</li> <li>Kills organizational transparency</li> <li> <p>Creates unnecessary barriers</p> </li> <li> <p>Under-Classification</p> </li> <li>\"It's probably fine\" isn't security</li> <li>One mistake can expose members</li> <li> <p>Visual indicators exist for a reason</p> </li> <li> <p>Security Theater</p> </li> <li>Complexity doesn't equal security</li> <li>Focus on real threats, not movie plots</li> <li> <p>Sustainability beats perfection</p> </li> <li> <p>Single Security Officer</p> </li> <li>Creates new single point of failure</li> <li>Burns out security-conscious members</li> <li>Everyone needs basic knowledge</li> </ol>","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#quick-reference-cards","title":"Quick Reference Cards","text":"","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#classification-quick-card","title":"Classification Quick Card","text":"Text Only<pre><code>PUBLIC (L0) \ud83d\udfe2\n- Already published anywhere\n- Educational materials\n- Public positions\n\nMEMBER (L1) \ud83d\udfe4  \n- Internal but not dangerous\n- Meeting minutes\n- Contact lists\n\nCADRE (L2) \ud83d\udd34\n- Could harm individuals\n- Legal vulnerabilities  \n- Strategic secrets\n</code></pre>","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#daily-security-habits","title":"Daily Security Habits","text":"Text Only<pre><code>Morning:\n\u25a1 Check which vault you're in\n\u25a1 Note visual indicators\n\u25a1 Verify classification\n\nWorking:\n\u25a1 Create in correct tier\n\u25a1 Check before sharing\n\u25a1 Use templates\n\nEvening:\n\u25a1 Commit changes\n\u25a1 Lock screens\n\u25a1 Backup if needed\n</code></pre>","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/security-playbook/#getting-help","title":"Getting Help","text":"<ul> <li>Not sure about classification? Ask two other members</li> <li>Think you made a mistake? Tell someone immediately</li> <li>Feeling overwhelmed? Security is collective work</li> <li>Need technical help? See Security Audits</li> </ul> <p>Remember: Perfect security is impossible. Good-enough security that everyone actually follows will protect you better than complex systems that break down under pressure.</p> <p>\u2190 Back to Implementation</p> <p>Backlinks:</p>","tags":["security","implementation","threat-model","playbook"]},{"location":"implement/security/when-they-come-knocking/","title":"When They Come Knocking: DRUIDS Raid Response Procedures","text":"","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#overview","title":"Overview","text":"<p>State raids on revolutionary organizations are not paranoia - they're pattern recognition. This guide provides concrete procedures for protecting your DRUIDS infrastructure and comrades when state repression materializes at your door.</p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#threat-models-by-context","title":"Threat Models by Context","text":"","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#labor-organizing","title":"Labor Organizing","text":"<p>Threats: Corporate security, private investigators, police collaboration Typical Tactics: Workplace raids, home visits, device seizure during strikes Response Priority: Protect member lists, wage data, workplace maps</p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#tenant-organizing","title":"Tenant Organizing","text":"<p>Threats: Landlord attorneys, eviction squads, local police Typical Tactics: \"Welfare checks,\" code enforcement raids, targeted evictions Response Priority: Protect tenant data, rent strike funds, building plans</p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#environmentalclimate","title":"Environmental/Climate","text":"<p>Threats: FBI, corporate security, fusion centers Typical Tactics: Terrorism charges, conspiracy claims, infiltration Response Priority: Protect action plans, security culture, affinity groups</p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#immigrant-rights","title":"Immigrant Rights","text":"<p>Threats: ICE, CBP, local police partnerships Typical Tactics: Workplace raids, home raids, family separation Response Priority: Protect member identities, safe house locations, legal status</p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#political-organizations","title":"Political Organizations","text":"<p>Threats: FBI, NSA, local red squads, grand juries Typical Tactics: Pre-dawn raids, RICO charges, conspiracy theories Response Priority: Protect communications, membership, international connections</p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed security setup (see security guides)</li> <li>Emergency contact system established</li> <li>Legal support infrastructure</li> <li>Practice drills completed</li> </ul>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#before-they-come-preparation","title":"Before They Come: Preparation","text":"","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#1-distributed-infrastructure","title":"1. Distributed Infrastructure","text":"<p>Never have single points of failure:</p> Bash<pre><code># Every organizer should have:\ngit clone org-repo ~/safe-location/org-backup\n\n# Multiple remotes for resilience\ngit remote add backup1 git@backup-server1.org:repo.git\ngit remote add backup2 git@backup-server2.org:repo.git\ngit remote add emergency comrade@trusted-host:backup.git\n\n# Regular push to all remotes\ngit push --all backup1\ngit push --all backup2\ngit push --all emergency\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#2-emergency-protocols-file","title":"2. Emergency Protocols File","text":"<p>Create and memorize:</p> Bash<pre><code># security/emergency/raid-response.md\n## If Raided - IMMEDIATE ACTIONS\n\n1. **STAY CALM** - They want you panicked\n2. **\"I am exercising my right to remain silent\"**\n3. **\"I do not consent to searches\"**\n4. **\"I am requesting a lawyer\"**\n5. **DO NOT** unlock devices\n6. **DO NOT** provide passwords\n7. **DO NOT** answer questions\n\n## Legal Support\nEmergency Lawyer: [MEMORIZE AND DELETE]\nLegal Hotline: [MEMORIZE AND DELETE]\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#3-automated-dead-switch","title":"3. Automated Dead Switch","text":"<p>Set up automatic alerts if you don't check in:</p> Bash<pre><code>#!/bin/bash\n# scripts/dead-switch.sh\n# Run via cron every 24 hours\n\nLAST_CHECKIN=$(cat ~/.druids/last-checkin)\nNOW=$(date +%s)\nDIFF=$((NOW - LAST_CHECKIN))\n\n# If no check-in for 48 hours\nif [ $DIFF -gt 172800 ]; then\n    # Send encrypted alert to security committee\n    gpg --encrypt --recipient security@org.net &lt; emergency-alert.txt | \n        mail -s \"URGENT: Possible Raid\" security@org.net\n\n    # Trigger infrastructure protection\n    ssh backup-server \"bash /home/org/lockdown.sh\"\nfi\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#4-evidence-handling-protocols","title":"4. Evidence Handling Protocols","text":"<p>Prepare for evidence seizure:</p> Bash<pre><code># What they typically seize\n- All electronic devices (phones, laptops, USB drives)\n- Paper documents (notebooks, calendars, sticky notes)\n- External storage (hard drives, SD cards)\n- Routers and network equipment\n- SIM cards and burner phones\n\n# Pre-raid preparation\n1. Minimize local storage\n   - Work from encrypted repos only\n   - No local meeting minutes\n   - No unencrypted member lists\n\n2. Use deniable encryption\n   - Hidden volumes in VeraCrypt\n   - Plausible cover data\n   - Separate \"clean\" user accounts\n\n3. Regular data purges\n   # Weekly cleanup script\n   shred -vfz ~/Documents/temp/*\n   rm -rf ~/.cache/*\n   history -c\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#5-communication-security-layers","title":"5. Communication Security Layers","text":"Bash<pre><code># Everyday communications\nSignal/Element -&gt; Good for daily organizing\n\n# Sensitive planning  \nIn-person only -&gt; No digital trail\n\n# Post-raid emergency\nBriar/Session -&gt; Metadata resistant\nTor + SecureDrop -&gt; Anonymous reporting\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#during-the-raid-immediate-response","title":"During the Raid: Immediate Response","text":"","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#1-personal-protection","title":"1. Personal Protection","text":"<p>YOUR RIGHTS (US context - adapt for your jurisdiction): Text Only<pre><code>- Remain silent (5th Amendment)\n- Refuse searches without warrant (4th Amendment)\n- Request lawyer immediately (6th Amendment)\n- Do not unlock devices (5th Amendment)\n</code></pre></p> <p>NEVER: - Try to destroy evidence during raid (obstruction charge) - Physically resist (assault charges) - Lie to federal agents (separate felony) - Talk to \"friendly\" agents (there are none)</p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#2-technical-protection","title":"2. Technical Protection","text":"<p>If you have ANY warning:</p> Bash<pre><code># 30 seconds or less procedure\n# Practice until muscle memory\n\n# 1. Lock all devices (don't shut down - encryption keys in memory)\nWindows+L / Cmd+Control+Q\n\n# 2. If time, trigger panic button\nbash ~/.druids/panic.sh\n\n# 3. Close all applications\n# Modern full-disk encryption protects locked devices\n</code></pre> <p>Panic Script Example: Bash<pre><code>#!/bin/bash\n# ~/.druids/panic.sh\n\n# Unmount encrypted volumes\numount /secure/*\n\n# Clear sensitive environment variables\nunset DRUIDS_KEY\nunset GPG_PASSPHRASE\n\n# Lock password manager\nkeepassxc --lock\n\n# Send alert to comrades\necho \"RAID IN PROGRESS\" | \n    gpg --encrypt -r security@org.net | \n    mail -s \"URGENT\"\n\n# Clear bash history\nhistory -c\n</code></pre></p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#3-network-alert-system","title":"3. Network Alert System","text":"<p>If one comrade is raided, all must know:</p> Bash<pre><code># Designated person outside raid sends:\necho \"CODE RED: [Location] compromised. \nExecute security protocol 3.\" | \n    signal-cli -g EMERGENCY_GROUP send\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#after-the-raid-damage-assessment","title":"After the Raid: Damage Assessment","text":"","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#1-immediate-security-audit","title":"1. Immediate Security Audit","text":"<p>Within 24 hours of raid:</p> Bash<pre><code># 1. Assume all local systems compromised\n# DO NOT log into anything from raided devices\n\n# 2. From secure device, rotate all credentials\n# Start with most critical\n- Repository access tokens\n- Server SSH keys  \n- Email passwords\n- Encryption keys\n\n# 3. Check for unauthorized access\ngit log --all --since=\"2 days ago\"\ngrep \"Failed password\" /var/log/auth.log\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#2-infrastructure-recovery","title":"2. Infrastructure Recovery","text":"Bash<pre><code># From clean device\n# 1. Create new repository\ngit init recovery-repo\ngit remote add origin new-secure-server:repo.git\n\n# 2. Pull from distributed backups\ngit remote add backup comrade@trusted:backup.git\ngit fetch backup\ngit merge backup/main\n\n# 3. Audit for planted files\ngit diff HEAD backup/main\n\n# 4. Re-establish secure communications\n# Generate new GPG keys\n# Distribute through secure channels\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#3-legal-documentation","title":"3. Legal Documentation","text":"<p>Document everything for legal defense:</p> Markdown<pre><code>## Raid Documentation\n\n**Date/Time**: 2024-03-21 06:30 AM\n**Location**: [Organizing space address]\n**Agencies Present**: FBI, Local PD\n**Warrant**: [Yes/No, scope if known]\n**Items Seized**: \n- 3 laptops\n- 2 phones\n- Paper documents\n**Witnesses**: [Pseudonyms]\n**Injuries**: [Any violence]\n**Statements Made**: [Hopefully none]\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#organizational-continuity","title":"Organizational Continuity","text":"","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#1-activate-succession-plan","title":"1. Activate Succession Plan","text":"Bash<pre><code># If key organizers arrested\n# Pre-designated backups activate\n\n# Transfer repository ownership\ngit remote set-url origin https://backup-admin@server:repo.git\n\n# Restore from distributed backups\nfor remote in $(cat ~/.druids/backup-remotes.txt); do\n    git fetch $remote\n    git merge $remote/main --strategy-option theirs\ndone\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#2-maintain-operations","title":"2. Maintain Operations","text":"<p>Don't let raids stop organizing:</p> Markdown<pre><code>## Continuity Checklist\n\n- [ ] Legal support coordinated\n- [ ] Bail fund activated\n- [ ] Public statement drafted\n- [ ] Alternative meeting location secured\n- [ ] Members safety-checked\n- [ ] Operations resumed within 48 hours\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#3-security-culture-reinforcement","title":"3. Security Culture Reinforcement","text":"<p>Post-raid meetings should cover:</p> Markdown<pre><code>## Security Review Agenda\n\n1. What worked in our response?\n2. What failed? \n3. How did they know to raid?\n4. What can we improve?\n5. Updated protocols needed?\n\nRemember: State wants us paranoid and inactive.\nWe respond with discipline and continued organizing.\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#lessons-from-history","title":"Lessons from History","text":"","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#cointelpro-raids-1960s-70s","title":"COINTELPRO Raids (1960s-70s)","text":"<ul> <li>Targeted: Black Panthers, AIM, Puerto Rican independence</li> <li>Tactics: Pre-dawn raids, planted evidence, assassination</li> <li>Response: Breakfast programs continued during raids</li> </ul>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#green-scare-raids-2000s","title":"Green Scare Raids (2000s)","text":"<ul> <li>Targeted: Environmental/animal liberation</li> <li>Tactics: Grand juries, conspiracy charges, informants</li> <li>Response: Security culture, support networks</li> </ul>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#recent-raids-2020s","title":"Recent Raids (2020s)","text":"<ul> <li>Targeted: Atlanta forest defenders, Palestinian solidarity</li> <li>Tactics: RICO charges, social media evidence, drone surveillance</li> <li>Response: Distributed infrastructure, legal support</li> </ul>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#technical-considerations","title":"Technical Considerations","text":"","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#full-disk-encryption-is-not-enough","title":"Full Disk Encryption Is Not Enough","text":"<p>If device is on during raid: - Cold boot attacks can extract keys - Coercion to unlock (\"contempt of court\") - Biometrics can be compelled (use passwords)</p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#network-security-during-raids","title":"Network Security During Raids","text":"<p>Assume all traffic monitored: Bash<pre><code># Use Tor for any post-raid communications\ntorify git push backup-repo\n\n# Avoid regular patterns\n# Vary times, locations, methods\n</code></pre></p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#distributed-git-protects-history","title":"Distributed Git Protects History","text":"<p>Unlike centralized services: - Every clone has full history - Can't be deleted by single raid - Cryptographic integrity preserved - Recovery possible from any copy</p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#drill-procedures","title":"Drill Procedures","text":"<p>Practice monthly until automatic:</p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#10-minute-raid-drill","title":"10-Minute Raid Drill","text":"<ol> <li>Alert sounds</li> <li>Lock all devices (time it!)</li> <li>Execute panic script</li> <li>Practice rights assertion</li> <li>Designate who calls lawyer</li> <li>Review and improve</li> </ol>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#infrastructure-recovery-drill","title":"Infrastructure Recovery Drill","text":"<ol> <li>Simulate seized devices</li> <li>Recovery from backups</li> <li>Credential rotation</li> <li>Communication re-establishment</li> <li>Operations resumption</li> </ol>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#digital-forensics-awareness","title":"Digital Forensics Awareness","text":"","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#what-they-can-recover","title":"What They Can Recover","text":"<p>Even after deletion: Bash<pre><code># They can recover:\n- Deleted files (up to years later)\n- Browser history (even \"private\" mode)\n- WiFi connection history\n- USB device history\n- Clipboard history\n- Thumbnail caches\n- Swap file contents\n- Hibernation files\n\n# They cannot recover (if done right):\n- Properly shredded files (shred -vfz)\n- Full-disk encrypted data (if powered off)\n- Data overwritten multiple times\n- RAM contents after power off\n</code></pre></p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#counter-forensics","title":"Counter-Forensics","text":"Bash<pre><code># Before any sensitive work\n# 1. Boot from USB/Tails\n# 2. Work in RAM only\n# 3. No persistent storage\n# 4. Shutdown (not sleep) when done\n\n# Regular maintenance\n# Clear all forensic traces\nsudo swapoff -a\nsudo swapon -a  # Clear swap\nrm -rf ~/.local/share/recently-used.xbel\nrm -rf ~/.thumbnails/*\nbleachbit --clean system.* firefox.*\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#grand-jury-resistance","title":"Grand Jury Resistance","text":"","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#understanding-grand-juries","title":"Understanding Grand Juries","text":"<p>Federal prosecutors use grand juries to: - Force testimony (no 5<sup>th</sup> Amendment) - Gather intelligence on movements - Create informants through pressure - Map organizational structures</p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#resistance-strategies","title":"Resistance Strategies","text":"Markdown<pre><code>## If Subpoenaed to Grand Jury\n\n1. **Get a lawyer immediately**\n   - Specialized in grand jury resistance\n   - Experience with political cases\n\n2. **Solidarity approach**\n   - Refuse to testify about others\n   - \"I will not participate in this fishing expedition\"\n   - Accept contempt charges if necessary\n\n3. **Know the consequences**\n   - Up to 18 months jail for contempt\n   - No conviction, just coercion\n   - Released when grand jury expires\n\n4. **Community support needed**\n   - Legal fund\n   - Jail support\n   - Public pressure campaign\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#special-considerations","title":"Special Considerations","text":"","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#for-undocumented-comrades","title":"For Undocumented Comrades","text":"<ul> <li>Higher stakes (deportation)</li> <li>Separate legal support needed</li> <li>Consider remote participation</li> <li>Extra identity protection</li> <li>Know your ICE raid rights</li> </ul>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#for-public-organizers","title":"For Public Organizers","text":"<ul> <li>Expect targeting</li> <li>Maintain nothing locally</li> <li>All work in encrypted repos</li> <li>Regular device swaps</li> <li>Public vs private persona separation</li> </ul>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#for-technical-maintainers","title":"For Technical Maintainers","text":"<ul> <li>You're high-value targets</li> <li>Maximum security practices</li> <li>Dead switches mandatory</li> <li>Succession planning critical</li> <li>Consider pseudonymous maintenance</li> </ul>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#for-parentscaregivers","title":"For Parents/Caregivers","text":"<ul> <li>Child protective services threats</li> <li>Emergency childcare plans needed</li> <li>Legal custody documentation ready</li> <li>Support network activated</li> </ul>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#for-people-with-disabilities","title":"For People with Disabilities","text":"<ul> <li>Medication access during detention</li> <li>Accessibility needs documentation</li> <li>Medical advocate designated</li> <li>Adaptive equipment protection</li> </ul>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#building-resilient-infrastructure","title":"Building Resilient Infrastructure","text":"<p>The goal isn't paranoia but preparedness:</p> Bash<pre><code># Daily: Push to multiple remotes\n# Weekly: Security check-in\n# Monthly: Raid drills  \n# Quarterly: Full security audit\n# Annually: Infrastructure evolution\n</code></pre>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#remember","title":"Remember","text":"<ol> <li>They raid to intimidate - Don't let them</li> <li>Silence is golden - Seriously, shut up</li> <li>Infrastructure survives - If properly distributed</li> <li>We continue organizing - That's the victory</li> <li>Solidarity is strength - Support raided comrades</li> </ol> <p>The state has resources, but we have resilience. Every raid they conduct teaches us to build better infrastructure. Every comrade they arrest inspires two more to join.</p> <p>\"You can jail a revolutionary, but you can't jail the revolution.\" - Fred Hampton</p> <p>Build infrastructure that survives when they come knocking. Because they will come knocking. And we'll keep building.</p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#emergency-contacts-template","title":"Emergency Contacts Template","text":"Bash<pre><code># Memorize and destroy\n# security/contacts/emergency.asc (encrypted)\n\nLegal:\n- Lawyer Name: [Memorize]\n- Emergency #: [Memorize]\n- Backup Legal: [Memorize]\n\nSecurity Committee:\n- Primary: [Signal Username]\n- Secondary: [Signal Username]  \n- Emergency: [Encrypted Email]\n\nSafe Houses:\n- Location A: [Memorize]\n- Location B: [Memorize]\n</code></pre> <p>Stay ready. Stay vigilant. Keep organizing.</p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/security/when-they-come-knocking/#quick-reference-card","title":"Quick Reference Card","text":"<p>Print, laminate, and keep accessible:</p> Text Only<pre><code>\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n        RAID RESPONSE QUICK REFERENCE\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n\nIF THEY'RE AT THE DOOR:\n1. Stay calm, breathe deeply\n2. Lock all devices (Win+L / Cmd+Ctrl+Q)\n3. \"I need to see a warrant\"\n\nMAGIC WORDS (REPEAT ONLY THESE):\n\u2022 \"I am exercising my right to remain silent\"\n\u2022 \"I do not consent to searches\"  \n\u2022 \"I want to speak to a lawyer\"\n\nDO NOT:\n\u2022 Answer ANY questions\n\u2022 Unlock ANY devices\n\u2022 Sign ANYTHING\n\u2022 Lie or resist physically\n\nDEVICES:\n\u2022 Powered off = Good (encrypted)\n\u2022 Locked = Okay  \n\u2022 Unlocked = Bad\n\u2022 Biometrics = Disable NOW\n\nEMERGENCY CONTACTS:\nLawyer: [Memorize number]\nSecurity: [Signal username]\nBail fund: [Memorize number]\n\nAFTER THEY LEAVE:\n1. Document everything\n2. Contact lawyer\n3. Alert security committee\n4. DO NOT log into accounts\n\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n</code></pre> <p>Backlinks:</p>","tags":["security","raid-response","emergency","state-repression","protocols"]},{"location":"implement/workflows/","title":"DRUIDS Workflows","text":"<p>Practical workflows for implementing DRUIDS across different organizing roles and scenarios. These workflows adapt to your organization's specific needs while maintaining democratic principles.</p>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#organizational-workflows","title":"Organizational Workflows","text":"","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#meeting-workflow-guide","title":"Meeting Workflow Guide","text":"<p>Complete process for facilitating, documenting, and following up on organizational meetings using DRUIDS.</p>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#proposal-process","title":"Proposal Process","text":"<p>Democratic decision-making workflow from initial idea to implementation tracking.</p>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#project-management-guide","title":"Project Management Guide","text":"<p>Coordinate complex organizing projects across multiple teams and timelines.</p>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#task-management","title":"Task Management","text":"<p>Distribute work, track progress, and maintain accountability without hierarchical oversight.</p>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#role-specific-workflows","title":"Role-Specific Workflows","text":"","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#git-workflows-by-role","title":"Git Workflows by Role","text":"<p>Customized Git practices for facilitators, security officers, coordinators, and new members.</p>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#bus-factor-elimination","title":"Bus Factor Elimination","text":"<p>Ensure organizational continuity by eliminating single points of failure in knowledge and skills.</p>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#workflow-principles","title":"Workflow Principles","text":"","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#democratic-process","title":"Democratic Process","text":"<ul> <li>Transparent Operations: All workflow steps visible to organization</li> <li>Collective Decision Making: Major changes decided by group process</li> <li>Rotating Responsibilities: No permanent workflow gatekeepers</li> <li>Accessible Participation: Workflows designed for diverse skill levels</li> </ul>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#security-integration","title":"Security Integration","text":"<ul> <li>Threat-Appropriate Measures: Security scaled to organizational risk level</li> <li>Operational Security: Protect sensitive information throughout workflows</li> <li>Incident Response: Clear procedures for security breaches or disruption</li> <li>Regular Assessment: Ongoing evaluation of security effectiveness</li> </ul>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#organizational-sustainability","title":"Organizational Sustainability","text":"<ul> <li>Knowledge Distribution: No single person controls critical workflows</li> <li>Skill Development: Workflows build collective capacity over time</li> <li>Adaptability: Processes that evolve with organizational needs</li> <li>Documentation: Clear records of workflow decisions and changes</li> </ul>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#implementation-strategy","title":"Implementation Strategy","text":"","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#starting-small","title":"Starting Small","text":"<ol> <li>Choose One Workflow: Begin with most urgent organizational need</li> <li>Pilot with Core Group: Test with experienced, committed members</li> <li>Document Experience: Record what works and what needs adjustment</li> <li>Expand Gradually: Add workflows as capacity and confidence build</li> </ol>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#building-capacity","title":"Building Capacity","text":"<ol> <li>Skill Sharing: Teach workflows through collective practice</li> <li>Rotation System: Ensure multiple people can facilitate each workflow</li> <li>Troubleshooting Knowledge: Build collective problem-solving capacity</li> <li>Continuous Improvement: Regular evaluation and refinement process</li> </ol>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#integration-with-existing-practice","title":"Integration with Existing Practice","text":"<ol> <li>Assess Current Workflows: Understand what your organization already does well</li> <li>Identify Pain Points: Focus on areas where current practice creates problems</li> <li>Gradual Transition: Phase implementation to avoid disrupting effective work</li> <li>Cultural Alignment: Ensure workflows support organizational values and culture</li> </ol>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#customization-guidelines","title":"Customization Guidelines","text":"","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#adapting-to-context","title":"Adapting to Context","text":"<ul> <li>Organizational Size: Scale workflows for groups from 5 to 500+ members</li> <li>Technical Capacity: Adjust complexity based on collective technical skills</li> <li>Security Needs: Implement appropriate security measures for threat environment</li> <li>Resource Availability: Work within organizational time and equipment constraints</li> </ul>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/#maintaining-principles","title":"Maintaining Principles","text":"<p>While customizing workflows: - Keep Democratic Process: Don't sacrifice collective decision-making for efficiency - Preserve Transparency: Maintain visibility of organizational operations - Build Collective Capacity: Ensure workflows strengthen rather than weaken organization - Support Security: Don't compromise safety for convenience</p> <p>\"Revolutionary workflows serve collective liberation, not individual productivity.\"</p>","tags":["workflows","implementation","organizing","practice"]},{"location":"implement/workflows/bus-factor-elimination/","title":"Bus Factor Elimination: Making Your Organization Immortal","text":"","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#the-problem-named","title":"The Problem Named","text":"<p>Bus Factor: The number of people who could be \"hit by a bus\" before your organization fails.</p> <p>Most revolutionary organizations have a bus factor of 1-2. When Sarah burns out, passwords die. When Marcus is arrested, campaign knowledge vanishes. When the \"tech person\" leaves, infrastructure crumbles.</p> <p>This guide systematically eliminates single points of failure.</p>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#the-revolutionary-stakes","title":"The Revolutionary Stakes","text":"<p>Bus factor isn't about buses. It's about: - Burnout: When exhausted organizers leave, taking knowledge - Repression: When the state targets key organizers - Life Changes: When material conditions force departures - Infiltration: When bad actors need isolation to operate</p> <p>Low bus factor killed more movements than police ever did.</p>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#the-audit-finding-your-vulnerabilities","title":"The Audit: Finding Your Vulnerabilities","text":"","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#step-1-map-critical-functions","title":"Step 1: Map Critical Functions","text":"<p>List everything that keeps your organization running:</p> Markdown<pre><code># Critical Functions Audit\n\n## Communication\n- [ ] Email lists management\n- [ ] Social media accounts\n- [ ] Website updates\n- [ ] Meeting coordination\n\n## Resources\n- [ ] Bank account access\n- [ ] Donation platform\n- [ ] Grant applications\n- [ ] Budget tracking\n\n## Knowledge\n- [ ] Campaign strategies\n- [ ] Contact databases\n- [ ] Historical decisions\n- [ ] Legal contacts\n\n## Infrastructure\n- [ ] Server access\n- [ ] Domain names\n- [ ] Software licenses\n- [ ] Security protocols\n</code></pre>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#step-2-identify-single-points-of-failure","title":"Step 2: Identify Single Points of Failure","text":"<p>For each function, ask: - Who can do this? - Who knows how? - Where are instructions? - What happens if they're gone?</p> <p>Mark with risk levels: - \ud83d\udd34 CRITICAL: Only one person can do this - \ud83d\udfe1 WARNING: Two people, but one is primary - \ud83d\udfe2 GOOD: Three+ people with knowledge</p>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#step-3-document-the-results","title":"Step 3: Document the Results","text":"Markdown<pre><code># Bus Factor Audit Results - Nov 2024\n\n## Critical Risks (Bus Factor = 1)\n- Server access: Only Sarah has root password\n- Bank account: Only treasurer can access\n- Email lists: Marcus manages alone\n- Website: One person knows WordPress login\n\n## Warning Areas (Bus Factor = 2)\n- Meeting facilitation: Maria primary, Chen backup\n- Social media: Two people share password\n- Grant writing: Two with experience\n\n## Documented Strengths\n- DRUIDS repository: Everyone has full copy\n- Meeting notes: Standardized and accessible\n- Contact lists: Exported weekly to Git\n</code></pre>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#the-solutions-building-resilience","title":"The Solutions: Building Resilience","text":"","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#1-knowledge-documentation","title":"1. Knowledge Documentation","text":"<p>Bad: \"Ask Sarah for the password\" Good: Documented access procedures</p> <p>Create an Operations Manual: Markdown<pre><code># Operations Manual\n\n## Email List Management\n**Platform**: Riseup Lists\n**Admin URL**: lists.riseup.net/www/admin\n**Credentials**: In password manager (vault/shared/email)\n\n### Common Tasks\n1. Add new member:\n   - Login to admin panel\n   - Navigate to \"Manage Subscribers\"\n   - Add email, set to \"normal\" unless agreed otherwise\n\n2. Send announcement:\n   - Email to: ourlist@lists.riseup.net\n   - Subject prefix automatically added\n   - Moderation queue if from non-member\n\n### Troubleshooting\n- Bouncing emails: Check \"Bounce Management\"\n- Spam issues: Review \"Message Moderation\"\n</code></pre></p>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#2-skill-distribution","title":"2. Skill Distribution","text":"<p>The Rotation Schedule:</p> Markdown<pre><code># Skill Rotation Calendar\n\n## Q1 2025: Technical Skills\n- January: Chen shadows Sarah on server management\n- February: Aaliyah learns email list administration  \n- March: New member workshop on Git basics\n\n## Q2 2025: Administrative Skills\n- April: Rotate treasurer duties\n- May: Grant writing workshop\n- June: Legal contact protocols training\n</code></pre> <p>The Teaching Commitment: Every person with unique knowledge must: 1. Document the process 2. Train two others 3. Supervise first independent attempt 4. Create troubleshooting guide</p>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#3-access-management","title":"3. Access Management","text":"<p>Shared Credentials Without Compromise:</p> Bash<pre><code># Using pass (password-store) for team passwords\npass init team@ourorg.net\npass git init\npass generate shared/email-admin 32\npass generate shared/server-root 32\n\n# Share via encrypted Git repository\npass git remote add origin git@private.server:passwords.git\npass git push\n</code></pre> <p>Access Levels: YAML<pre><code>access_matrix:\n  critical_systems:\n    primary: [sarah, marcus]\n    backup: [chen, aaliyah]\n    emergency: [trusted-lawyer]\n\n  financial:\n    primary: [treasurer, co-treasurer]\n    backup: [coordinating-committee]\n    audit: [membership-meeting]\n\n  communications:\n    primary: [comms-team]\n    backup: [any-two-members]\n</code></pre></p>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#4-infrastructure-redundancy","title":"4. Infrastructure Redundancy","text":"<p>Distributed Backups: Bash<pre><code>#!/bin/bash\n# backup-distribution.sh\n\n# Every week, three members run:\ngit clone backup@server:repos/druids-backup.git\ngpg --encrypt --recipient member1@org druids-backup.tar\ngpg --encrypt --recipient member2@org druids-backup.tar\ngpg --encrypt --recipient member3@org druids-backup.tar\n\n# Store encrypted backups separately\n# If server dies, any member can restore\n</code></pre></p> <p>Domain Protection: - Register with privacy protection - Multiple organizers as contacts - Auto-renewal enabled - Backup DNS configuration</p>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#5-succession-planning","title":"5. Succession Planning","text":"<p>The Handoff Protocol:</p> Markdown<pre><code># Role Transition Template\n\n## Departing: [Name/Role]\n## Incoming: [Name/Role]\n## Transition Period: [Start] to [End]\n\n### Week 1: Shadow and Document\n- [ ] Incoming shadows all regular tasks\n- [ ] Departing documents undocumented processes\n- [ ] Review and update operations manual\n\n### Week 2: Supervised Practice\n- [ ] Incoming performs tasks with supervision\n- [ ] Departing reviews and corrects\n- [ ] Emergency procedures walkthrough\n\n### Week 3: Independent Operation\n- [ ] Incoming operates independently\n- [ ] Departing available for questions\n- [ ] Final knowledge transfer session\n\n### Handoff Checklist\n- [ ] All passwords transferred\n- [ ] Access permissions updated\n- [ ] Contact lists informed of change\n- [ ] Documentation reviewed and updated\n- [ ] Emergency contacts briefed\n</code></pre>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#emergency-protocols","title":"Emergency Protocols","text":"","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#the-sudden-departure","title":"The Sudden Departure","text":"<p>When someone leaves unexpectedly:</p> Markdown<pre><code># Emergency Departure Protocol\n\nIMMEDIATELY (Within 24 hours):\n1. [ ] Change all shared passwords they had\n2. [ ] Review recent commits/changes\n3. [ ] Check for uncommitted work\n4. [ ] Identify critical tasks they managed\n\nWITHIN 48 HOURS:\n1. [ ] Assign temporary coverage\n2. [ ] Review their documentation\n3. [ ] Contact their emergency contact\n4. [ ] Brief relevant teams\n\nWITHIN 1 WEEK:\n1. [ ] Full audit of their responsibilities\n2. [ ] Permanent reassignment of duties\n3. [ ] Update bus factor assessment\n4. [ ] Document lessons learned\n</code></pre>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#the-security-incident","title":"The Security Incident","text":"<p>If someone is compromised:</p> Markdown<pre><code># Security Bus Factor Protocol\n\nIf organizer is:\n- Arrested\n- Under surveillance  \n- Potentially compromised\n- Acting irregularly\n\nIMMEDIATE ACTIONS:\n1. [ ] Revoke all their access\n2. [ ] Change all shared credentials\n3. [ ] Audit recent activities\n4. [ ] Implement communication quarantine\n5. [ ] Activate legal support\n</code></pre>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#automated-bus-factor-tools","title":"Automated Bus Factor Tools","text":"","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#knowledge-dependency-tracker","title":"Knowledge Dependency Tracker","text":"<p>Save as <code>bus-factor-analyzer.sh</code>:</p> Bash<pre><code>#!/bin/bash\n# Analyzes git repository to identify knowledge silos\n\necho \"=== Bus Factor Analysis ===\"\necho \"Analyzing knowledge distribution...\"\n\n# Find single-author files (high risk)\necho -e \"\\n[!] Files with single contributor (HIGH RISK):\"\nfor file in $(git ls-files); do\n    authors=$(git log --follow --format='%aN' -- \"$file\" | sort -u | wc -l)\n    if [ $authors -eq 1 ]; then\n        author=$(git log --follow --format='%aN' -- \"$file\" | sort -u)\n        echo \"  $file - Only edited by: $author\"\n    fi\ndone | head -20\n\n# Identify knowledge silos by directory\necho -e \"\\n[*] Knowledge concentration by area:\"\nfor dir in $(find . -type d -name \".git\" -prune -o -type d -print | grep -v \"^\\.$\"); do\n    primary=$(git log --format='%aN' -- \"$dir\" | sort | uniq -c | sort -rn | head -1)\n    if [ ! -z \"$primary\" ]; then\n        echo \"  $dir: $primary\"\n    fi\ndone\n\n# Bus factor by contributor\necho -e \"\\n[*] Critical knowledge holders:\"\ngit log --format='%aN' | sort | uniq -c | sort -rn | head -10\n\n# Recent activity concentration\necho -e \"\\n[*] Last 30 days activity:\"\ngit log --since=\"30 days ago\" --format='%aN' | sort | uniq -c | sort -rn\n</code></pre>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#automated-knowledge-capture","title":"Automated Knowledge Capture","text":"<p>Save as <code>knowledge-extractor.py</code>:</p> Python<pre><code>#!/usr/bin/env python3\n\"\"\"Extract and document organizational knowledge automatically\"\"\"\n\nimport subprocess\nimport json\nfrom datetime import datetime\n\ndef extract_process_knowledge():\n    \"\"\"Extract common processes from git history\"\"\"\n\n    # Common process indicators\n    process_keywords = [\n        'how to', 'steps', 'process', 'procedure',\n        'workflow', 'guide', 'tutorial', 'instructions'\n    ]\n\n    processes = {}\n\n    # Search commit messages for process documentation\n    for keyword in process_keywords:\n        cmd = f\"git log --grep='{keyword}' --format='%h|%s|%an|%ad' --date=short\"\n        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n\n        for line in result.stdout.strip().split('\\n'):\n            if line:\n                hash, subject, author, date = line.split('|')\n                if keyword not in processes:\n                    processes[keyword] = []\n                processes[keyword].append({\n                    'commit': hash,\n                    'description': subject,\n                    'documenter': author,\n                    'date': date\n                })\n\n    # Generate knowledge report\n    with open('knowledge-audit.md', 'w') as f:\n        f.write(f\"# Organizational Knowledge Audit\\n\")\n        f.write(f\"Generated: {datetime.now()}\\n\\n\")\n\n        for category, items in processes.items():\n            f.write(f\"## {category.title()} Documentation\\n\")\n            for item in items[:5]:  # Top 5 per category\n                f.write(f\"- {item['description']} (by {item['documenter']})\\n\")\n            f.write(\"\\n\")\n\n    print(\"Knowledge audit generated: knowledge-audit.md\")\n\nif __name__ == \"__main__\":\n    extract_process_knowledge()\n</code></pre>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#building-bus-factor-culture","title":"Building Bus Factor Culture","text":"","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#daily-practices","title":"Daily Practices","text":"<ol> <li>Pair Everything</li> <li>Pair programming for code</li> <li>Pair facilitation for meetings</li> <li>Pair writing for grants</li> </ol> Bash<pre><code># Track pairing sessions in git\ngit commit -m \"Paired with @ComradeX on email automation script\"\ngit commit -m \"Co-facilitated meeting with @ComradeY, see notes\"\n</code></pre> <ol> <li> <p>Document As You Go Bash<pre><code># Automated documentation helper\ncat &gt; bin/document-process &lt;&lt; 'EOF'\n#!/bin/bash\n# Usage: document-process \"task name\" \"category\"\n\nTASK=\"$1\"\nCATEGORY=\"${2:-operations}\"\nDATE=$(date +%Y-%m-%d)\nFILE=\"docs/$CATEGORY/$(echo $TASK | tr ' ' '-').md\"\n\nmkdir -p \"docs/$CATEGORY\"\n\ncat &gt; \"$FILE\" &lt;&lt; TEMPLATE\n# How to: $TASK\n\n**Last Updated**: $DATE\n**Documented By**: $(git config user.name)\n**Time Estimate**: [X minutes/hours]\n**Bus Factor**: 1 (fix this!)\n\n## Prerequisites\n- [ ] Access to [system/tool]\n- [ ] Knowledge of [concept]\n\n## Steps\n1. [First step with why]\n2. [Second step with what could go wrong]\n3. [Continue...]\n\n## Common Issues\n- **Problem**: [What might break]\n  **Solution**: [How to fix]\n\n## Related Documentation\n- [Link to related process]\nTEMPLATE\n\necho \"Created: $FILE\"\necho \"Now edit and commit!\"\nEOF\nchmod +x bin/document-process\n</code></pre></p> </li> <li> <p>Rotate Regularly</p> </li> </ol> <p>Automated rotation tracker:    Bash<pre><code># rotation-scheduler.sh\ncat &gt; scripts/rotation-scheduler.sh &lt;&lt; 'EOF'\n#!/bin/bash\n\n# Define rotation schedule\ndeclare -A rotations=(\n    [\"meeting_facilitator\"]=\"monthly\"\n    [\"git_admin\"]=\"quarterly\"\n    [\"treasurer\"]=\"annually\"\n    [\"security_lead\"]=\"quarterly\"\n    [\"training_coordinator\"]=\"monthly\"\n)\n\n# Current assignments\nsource roles/current-assignments.sh\n\n# Check what needs rotation\nfor role in \"${!rotations[@]}\"; do\n    schedule=\"${rotations[$role]}\"\n    last_rotation=$(git log -1 --format=\"%ad\" --date=short -- \"roles/$role.md\")\n\n    case $schedule in\n        \"monthly\")\n            days_until=30\n            ;;\n        \"quarterly\")\n            days_until=90\n            ;;\n        \"annually\")\n            days_until=365\n            ;;\n    esac\n\n    # Calculate if rotation is due\n    if [ $(date -d \"$last_rotation + $days_until days\" +%s) -lt $(date +%s) ]; then\n        echo \"\u26a0\ufe0f  ROTATION DUE: $role (last rotated: $last_rotation)\"\n    fi\ndone\nEOF\n</code></pre></p>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#organizational-policies","title":"Organizational Policies","text":"Markdown<pre><code># Bus Factor Policies\n\n## Approved by General Meeting 2024-11-20\n\n1. No single person may hold exclusive access to critical systems\n2. All organizational knowledge must be documented within 48 hours\n3. Every role must have trained backup by end of first month\n4. Quarterly bus factor audits required\n5. \"Hit by bus\" drills conducted annually\n</code></pre>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#the-hit-by-bus-drill","title":"The Hit-By-Bus Drill","text":"<p>Annual simulation: 1. Randomly select 2 key organizers 2. They \"disappear\" for a week 3. Organization continues without them 4. Document what breaks 5. Fix those breaks</p>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#metrics-of-success","title":"Metrics of Success","text":"<p>Your bus factor improves when: - Any three people could run a meeting - Passwords aren't tied to individuals - New members onboard without handholding - Key organizer leaves, nothing breaks - Documentation exists for everything</p> <p>Track monthly: Markdown<pre><code># Bus Factor Metrics - Nov 2024\n\nCritical Functions: 23\nSingle Point Failures: 3 (down from 15)\nDocumented Processes: 19/23 (83%)\nCross-trained Functions: 17/23 (74%)\nOverall Bus Factor: 4 (up from 1)\n</code></pre></p>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#the-revolutionary-argument","title":"The Revolutionary Argument","text":"<p>High bus factor isn't paranoia - it's collective power. When knowledge distributes: - No individual becomes irreplaceable - Burnout doesn't destroy capacity - State repression can't decapitate - Infiltrators can't isolate control - Organizations outlive founders</p> <p>This is infrastructure for centuries-long struggle.</p>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#knowledge-transfer-protocols","title":"Knowledge Transfer Protocols","text":"","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#the-teaching-ladder-system","title":"The Teaching Ladder System","text":"<p>Each skill/knowledge area follows this progression:</p> Text Only<pre><code>Level 0: Unknown (no one knows)\nLevel 1: Single holder (bus factor = 1) \ud83d\udd34\nLevel 2: Apprentice stage (shadow learning) \ud83d\udfe1\nLevel 3: Supervised practice (can do with help) \ud83d\udfe1\nLevel 4: Independent operation (can do alone) \ud83d\udfe2\nLevel 5: Can teach others (knowledge multiplier) \ud83d\udfe2\n</code></pre> <p>Track progress in Git:</p> Markdown<pre><code># Knowledge Transfer Tracking\n\n## Email System Administration\n- **Current Expert**: Sarah (Level 5)\n- **Apprentices**: \n  - Chen (Level 3 - supervised practice)\n  - Marcus (Level 2 - shadowing)\n- **Target**: 3 people at Level 4 by Q2 2025\n\n## Grant Writing  \n- **Current Expert**: Aaliyah (Level 5)\n- **Apprentices**:\n  - Jordan (Level 4 - can write independently)\n  - Sam (Level 2 - reviewing past grants)\n- **Target**: 4 people at Level 4 by Q3 2025\n</code></pre>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#structured-knowledge-transfer-sessions","title":"Structured Knowledge Transfer Sessions","text":"Bash<pre><code># knowledge-transfer-template.sh\ncat &gt; templates/knowledge-transfer-session.md &lt;&lt; 'EOF'\n# Knowledge Transfer Session\n\n**Date**: $(date)\n**Skill**: [What's being taught]\n**Teacher**: [Who's teaching]\n**Learners**: [Who's learning]\n**Duration**: [Planned time]\n\n## Pre-Session\n- [ ] Teacher prepared materials\n- [ ] Learners reviewed prerequisites\n- [ ] Environment set up for practice\n\n## Session Agenda\n1. **Overview** (10 min)\n   - Why this matters\n   - Where it fits in org\n\n2. **Demonstration** (20 min)\n   - Teacher shows process\n   - Narrates decision points\n\n3. **Guided Practice** (30 min)\n   - Learner attempts with coaching\n   - Teacher provides corrections\n\n4. **Documentation** (20 min)\n   - Update/create process docs\n   - Note learner questions\n\n5. **Next Steps** (10 min)\n   - Practice assignments\n   - Next session scheduling\n\n## Session Notes\n[Capture what was covered, questions, insights]\n\n## Follow-Up Actions\n- [ ] Learner: Complete practice task by [date]\n- [ ] Teacher: Review practice results\n- [ ] Both: Schedule next session\nEOF\n</code></pre>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#redundancy-patterns","title":"Redundancy Patterns","text":"","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#the-3-2-1-rule","title":"The 3-2-1 Rule","text":"<p>For every critical function: - 3 people who can do it - 2 different methods documented - 1 automated backup/failsafe</p> <p>Implementation:</p> YAML<pre><code># redundancy-matrix.yaml\ncritical_functions:\n  server_restart:\n    people: [sarah, chen, marcus]\n    methods: \n      - ssh_direct: \"docs/server/ssh-restart.md\"\n      - web_panel: \"docs/server/panel-restart.md\"\n    automation: \"scripts/auto-restart-on-failure.sh\"\n\n  member_onboarding:\n    people: [jordan, aaliyah, sam, rosa]\n    methods:\n      - standard: \"docs/onboarding/standard-process.md\"\n      - emergency: \"docs/onboarding/quick-start.md\"\n    automation: \"scripts/onboarding-checklist-generator.sh\"\n\n  financial_reports:\n    people: [treasurer, co-treasurer, coordinator]\n    methods:\n      - quickbooks: \"docs/finance/quickbooks-reports.md\"\n      - spreadsheet: \"docs/finance/manual-reports.md\"\n    automation: \"scripts/monthly-finance-export.py\"\n</code></pre>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#automated-redundancy-verification","title":"Automated Redundancy Verification","text":"Python<pre><code>#!/usr/bin/env python3\n# verify-redundancy.py\n\nimport yaml\nimport sys\nfrom datetime import datetime\n\ndef check_redundancy():\n    with open('redundancy-matrix.yaml', 'r') as f:\n        matrix = yaml.safe_load(f)\n\n    failures = []\n    warnings = []\n\n    for function, details in matrix['critical_functions'].items():\n        # Check people count\n        if len(details['people']) &lt; 3:\n            failures.append(f\"{function}: Only {len(details['people'])} people trained\")\n\n        # Check documentation\n        for method, doc_path in details['methods'].items():\n            if not os.path.exists(doc_path):\n                warnings.append(f\"{function}: Missing docs for {method}\")\n\n        # Check automation\n        if not details.get('automation'):\n            warnings.append(f\"{function}: No automation backup\")\n\n    # Generate report\n    print(f\"Redundancy Report - {datetime.now()}\")\n    print(f\"Failures: {len(failures)}\")\n    print(f\"Warnings: {len(warnings)}\")\n\n    if failures:\n        print(\"\\n\u274c CRITICAL FAILURES:\")\n        for f in failures:\n            print(f\"  - {f}\")\n\n    if warnings:\n        print(\"\\n\u26a0\ufe0f  WARNINGS:\")\n        for w in warnings:\n            print(f\"  - {w}\")\n\n    return len(failures) == 0\n\nif __name__ == \"__main__\":\n    if not check_redundancy():\n        sys.exit(1)\n</code></pre>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#quick-start-templates","title":"Quick Start Templates","text":"","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#weekly-bus-factor-review","title":"Weekly Bus Factor Review","text":"Bash<pre><code># Add to weekly meetings\necho \"## Bus Factor Check\" &gt;&gt; meetings/$(date +%Y-%m-%d).md\necho \"- Who's been doing what alone?\" &gt;&gt; meetings/$(date +%Y-%m-%d).md\necho \"- What would break if someone left?\" &gt;&gt; meetings/$(date +%Y-%m-%d).md\necho \"- Who needs training this week?\" &gt;&gt; meetings/$(date +%Y-%m-%d).md\n</code></pre>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#30-day-bus-factor-sprint","title":"30-Day Bus Factor Sprint","text":"Markdown<pre><code># 30-Day Bus Factor Elimination Sprint\n\n## Week 1: Audit\n- [ ] Run bus-factor-analyzer.sh\n- [ ] List all critical functions\n- [ ] Identify single points of failure\n- [ ] Prioritize by risk\n\n## Week 2: Document\n- [ ] Write top 5 critical processes\n- [ ] Create quick reference guides\n- [ ] Set up knowledge repository\n- [ ] Test documentation clarity\n\n## Week 3: Train\n- [ ] Schedule knowledge transfers\n- [ ] Pair on critical tasks\n- [ ] Practice role swapping\n- [ ] Document questions\n\n## Week 4: Systematize\n- [ ] Implement rotation schedule\n- [ ] Set up automated checks\n- [ ] Create redundancy matrix\n- [ ] Celebrate progress!\n</code></pre>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/bus-factor-elimination/#your-next-steps","title":"Your Next Steps","text":"<ol> <li>Today: Run <code>bus-factor-analyzer.sh</code> on your main repository</li> <li>This Week: Identify your top 3 knowledge risks</li> <li>This Month: Document one critical process you own</li> <li>This Quarter: Train someone in your unique skills</li> <li>This Year: Achieve bus factor of 5+</li> </ol> <p>Remember: The revolution needs you, but it must survive without you.</p> <p>Start the audit? \u2192 <code>Security Incident Template</code> Learn documentation? \u2192 Revolutionary Style Guide Build redundancy? \u2192 Security Playbook</p> <p>Backlinks:</p>","tags":["resilience","documentation","bus-factor","continuity","knowledge-sharing"]},{"location":"implement/workflows/git-workflow-guide/","title":"Git Workflow Guide","text":"<p>Consolidated Documentation</p> <p>This guide consolidates all Git workflow information for DRUIDS, including content previously in separate files for Obsidian Git configuration, workflows, and offline usage. For specific Obsidian plugin configuration details, see the Obsidian Configuration section below.</p>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#overview","title":"Overview","text":"<p>This guide consolidates all Git workflow information for DRUIDS, covering automated synchronization, branch management for security tiers, pull request processes, conflict resolution, and commit signing. It's designed for both individual and collaborative vault management with a focus on security and democratic principles.</p>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#quick-start","title":"Quick Start","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#essential-commands","title":"Essential Commands","text":"Bash<pre><code># Modern tool usage (preferred)\nrg \"pattern\" --type md      # Search in markdown files\nfd \"*.md\" docs/             # Find all markdown files\nbat config.yaml             # View file with syntax highlighting\n\n# Basic Git operations in Obsidian\n\"Obsidian Git: Pull\"        # Fetch latest changes\n\"Obsidian Git: Commit all\"  # Commit all changes\n\"Obsidian Git: Push\"        # Push to remote\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#daily-workflow","title":"Daily Workflow","text":"<ol> <li>Start of day: Pull latest changes</li> <li>During work: Commit regularly with meaningful messages</li> <li>Before sharing: Push changes to remote</li> <li>Switching tiers: Always commit first, then switch branches</li> </ol>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#automated-sync-configuration","title":"Automated Sync Configuration","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#setting-up-auto-sync","title":"Setting Up Auto-Sync","text":"<ol> <li>Access Settings</li> <li> <p>Open Obsidian \u2192 Settings \u2192 Community plugins \u2192 Obsidian Git</p> </li> <li> <p>Configure Intervals</p> </li> </ol> YAML<pre><code>Vault backup interval: 15  # minutes\nAuto backup: \u2713 enabled\nAuto pull: \u2713 enabled  \nAuto push: \u2713 enabled\n</code></pre> <ol> <li>Set Commit Messages</li> </ol> YAML<pre><code># Good static messages\n\"chore: automatic vault sync\"\n\"docs: periodic backup\"\n\"feat: regular snapshot\"\n</code></pre> <ol> <li>Enable Pull on Startup</li> <li>\u2713 Pull updates on startup (highly recommended)</li> </ol>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#prerequisites-for-auto-sync","title":"Prerequisites for Auto-Sync","text":"<ul> <li>Git Authentication: SSH keys or credential manager configured</li> <li>Remote Repository: Properly configured origin</li> <li>No Conflicts: Resolved merge conflicts</li> <li>Internet Connection: Stable connectivity</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#monitoring-auto-sync","title":"Monitoring Auto-Sync","text":"<ul> <li>Check status bar for sync indicators</li> <li>Review commit history periodically</li> <li>Watch for error notifications</li> <li>Verify remote updates on GitHub</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#branch-management-for-security-tiers","title":"Branch Management for Security Tiers","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#core-principles","title":"Core Principles","text":"<ol> <li>Branch per Tier: Each security level has its own branch</li> <li>Default to Lowest: Stay on <code>main</code> (L0) unless needed</li> <li>Conscious Switching: Deliberate action for higher tiers</li> <li>No Merge Down: Never merge sensitive info to lower tiers</li> <li>Feature Branches: Create temporary branches for complex work</li> </ol>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#security-tier-branches","title":"Security Tier Branches","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#main-l0-public","title":"main (L0 - Public)","text":"YAML<pre><code>Purpose: Public, unclassified information\nAuto-sync: Safe to enable all features\nCollaboration: Open to all members\nVisual: \ud83d\udfe2 Green borders\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#l1-internal-member-only","title":"L1-internal (Member Only)","text":"YAML<pre><code>Purpose: Internal team information\nAuto-sync: Consider manual push\nCollaboration: Trusted members only\nVisual: \ud83d\udfe4 Brown borders\n\nSwitching Protocol:\n1. Commit all changes on current branch\n2. \"Obsidian Git: Checkout branch\" \u2192 L1-internal\n3. \"Obsidian Git: Pull\" immediately\n4. Work on L1 content\n5. Commit before switching back\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#l2-secure-highly-sensitive","title":"L2-secure (Highly Sensitive)","text":"YAML<pre><code>Purpose: Confidential, restricted information\nAuto-sync: DISABLE auto-push, manual only\nCollaboration: Minimal, need-to-know\nVisual: \ud83d\udd34 Red borders\n\nCritical Rules:\n- Double-check branch before every commit\n- Review staged changes carefully\n- Manual push only\n- Consider local-only or encrypted remote\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#branch-switching-workflow","title":"Branch Switching Workflow","text":"<pre><code>graph LR\n    A[Current Branch] --&gt;|1. Commit Changes| B[Clean State]\n    B --&gt;|2. Checkout New Branch| C[New Branch]\n    C --&gt;|3. Pull Latest| D[Updated Branch]\n    D --&gt;|4. Work &amp; Commit| E[Changes Made]\n    E --&gt;|5. Push if Appropriate| F[Synced]</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#security-considerations","title":"Security Considerations","text":"<ul> <li>Global Auto-Push: Be aware it affects ALL branches</li> <li>Mitigation Options:</li> <li>Disable global auto-push, use manual push for L1/L2</li> <li>Temporarily disable before switching to sensitive branches</li> <li>User Training: Essential for all vault users</li> <li>Accidental Commits: Have remediation procedures ready</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#pull-request-workflow","title":"Pull Request Workflow","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#overview-of-roles","title":"Overview of Roles","text":"<ul> <li>Obsidian-Git: Local operations (branches, commits, push/pull)</li> <li>GitHub: Remote collaboration (PR creation, review, merge)</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#creating-a-pull-request","title":"Creating a Pull Request","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#1-local-preparation-obsidian","title":"1. Local Preparation (Obsidian)","text":"Bash<pre><code># Update base branch\n\"Obsidian Git: Checkout branch\" \u2192 main\n\"Obsidian Git: Pull\"\n\n# Create feature branch\n\"Obsidian Git: Create new branch\"\n# Name: feature/description or initials/description\n\n# Make changes and commit\n\"Obsidian Git: Stage all\"\n\"Obsidian Git: Commit staged\"\n# Write clear commit messages\n\n# Push to remote\n\"Obsidian Git: Push\"\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#2-pr-creation-github","title":"2. PR Creation (GitHub)","text":"<ol> <li>Navigate to repository on GitHub</li> <li>Click \"New pull request\"</li> <li>Select branches:</li> <li>Base: Target branch (main, L1-internal, etc.)</li> <li>Compare: Your feature branch</li> <li>Write comprehensive description:</li> <li>Purpose of changes</li> <li>Key modifications</li> <li>How it aligns with goals</li> <li>Related issues</li> <li>Context for reviewers</li> </ol>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#3-review-process","title":"3. Review Process","text":"<pre><code>graph TD\n    A[PR Created] --&gt; B[Assign Reviewers]\n    B --&gt; C[Discussion &amp; Feedback]\n    C --&gt; D{Changes Requested?}\n    D --&gt;|Yes| E[Make Updates]\n    E --&gt; F[Push Updates]\n    F --&gt; C\n    D --&gt;|No| G[Approvals Given]\n    G --&gt; H[Merge PR]</code></pre> <p>Review Activities:</p> <ul> <li>Examine \"Files changed\" tab</li> <li>Leave line-specific comments</li> <li>Request modifications if needed</li> <li>Approve when satisfied</li> </ul> <p>Approval Methods:</p> <ul> <li>GitHub's formal \"Approve\" feature (preferred)</li> <li>Comment conventions: <code>+1</code>, <code>LGTM</code></li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#4-merging","title":"4. Merging","text":"<p>Merge Strategies:</p> <ul> <li>Squash and merge: Combines commits (recommended for features)</li> <li>Create merge commit: Preserves all commits</li> <li>Rebase and merge: Linear history (use cautiously - see Why Rebase Warps Reality)</li> </ul> <p>Post-Merge:</p> <ul> <li>Delete feature branch</li> <li>All collaborators pull updates</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#secure-pr-workflow-meta-bind","title":"Secure PR Workflow (Meta Bind)","text":"<p>For enhanced security, use the Obsidian \u2192 GitHub PR workflow:</p> <pre><code>graph LR\n    A[Obsidian PR Draft] --&gt;|Meta Bind Export| B[PR Queue]\n    B --&gt;|Git Sync| C[GitHub Repo]\n    C --&gt;|GitHub Action| D[Draft PR]\n    D --&gt;|Manual Review| E[Final PR]</code></pre> <p>Security Benefits:</p> <ul> <li>No credentials in Obsidian</li> <li>Validation before submission</li> <li>Audit trail maintained</li> <li>Manual review checkpoint</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#handling-merge-conflicts","title":"Handling Merge Conflicts","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#understanding-conflicts","title":"Understanding Conflicts","text":"<p>Conflicts occur when:</p> <ul> <li>Same lines modified in different ways</li> <li>Pulling changes that conflict with local edits</li> <li>Merging branches with overlapping changes</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#identifying-conflicts","title":"Identifying Conflicts","text":"<p>Conflict Markers:</p> Diff<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nYour local version\n=======\nIncoming version\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-name\n</code></pre> <p>Detection Methods:</p> <ul> <li>Obsidian-Git error notifications</li> <li>Source Control view in sidebar</li> <li><code>git status</code> in terminal</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#resolution-process","title":"Resolution Process","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#1-file-by-file-resolution","title":"1. File-by-File Resolution","text":"Bash<pre><code># Open conflicted file\n# Locate conflict markers\n# Choose resolution strategy:\n- Keep yours: Delete incoming + markers\n- Keep theirs: Delete yours + markers  \n- Combine: Manually merge both versions\n- Rewrite: Create new solution\n\n# Delete ALL conflict markers\n# Save file\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#2-stage-and-commit","title":"2. Stage and Commit","text":"Bash<pre><code>\"Obsidian Git: Stage current file\"\n\"Obsidian Git: Commit staged\"\n# Default merge message often sufficient\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#3-push-resolution","title":"3. Push Resolution","text":"Bash<pre><code>\"Obsidian Git: Push\"\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#prevention-strategies","title":"Prevention Strategies","text":"<ul> <li>Pull frequently before starting work</li> <li>Communicate about shared files</li> <li>Use feature branches to isolate changes</li> <li>Small commits are easier to resolve</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#aborting-a-merge","title":"Aborting a Merge","text":"<p>If overwhelmed, abort and restart:</p> Bash<pre><code>git merge --abort  # Terminal command\n# Returns to pre-merge state\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#commit-signing-with-gpg","title":"Commit Signing with GPG","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#why-sign-commits","title":"Why Sign Commits?","text":"<ul> <li>Authenticity: Proves you made the commit</li> <li>Integrity: Ensures commit hasn't been altered</li> <li>Trust: Critical for sensitive branches (L1/L2)</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#setup-process","title":"Setup Process","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#1-system-configuration","title":"1. System Configuration","text":"Bash<pre><code># Install GPG\ngpg --version\n\n# Generate or import key\ngpg --full-generate-key\n\n# List keys\ngpg --list-secret-keys --keyid-format LONG\n\n# Configure Git\ngit config --global user.signingkey YOUR_KEY_ID\ngit config --global commit.gpgsign true\ngit config --global tag.gpgsign true\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#2-gpg-agent-setup","title":"2. GPG Agent Setup","text":"<p>Essential for automated signing:</p> Bash<pre><code># Add to shell profile\nexport GPG_TTY=$(tty)\n\n# Configure agent to cache passphrase\n# Allows background signing\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#hardware-security-keys","title":"Hardware Security Keys","text":"<p>For maximum security on L2 branches:</p> <ul> <li>Store GPG key on YubiKey/Nitrokey</li> <li>Key never leaves hardware</li> <li>Physical touch required to sign</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#verification","title":"Verification","text":"Bash<pre><code># Check local signatures\ngit log --show-signature\n\n# GitHub shows \"Verified\" badge\n# Upload public key to GitHub\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#important-limitations","title":"Important Limitations","text":"<ul> <li>Mobile: Signing not supported on iOS/Android</li> <li>Automation: Requires GPG agent for auto-commits</li> <li>Complexity: Advanced feature, team training needed</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#best-practices","title":"Best Practices","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#security-first-approach","title":"Security-First Approach","text":"<ol> <li>Always verify branch before committing</li> <li>Review changes before pushing sensitive branches</li> <li>Use visual indicators as primary guide</li> <li>Manual push for L2 content</li> <li>Sign commits on sensitive branches</li> </ol>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#collaboration-guidelines","title":"Collaboration Guidelines","text":"<ol> <li>Clear commit messages describing changes</li> <li>Small, focused commits over large changes</li> <li>Comprehensive PR descriptions</li> <li>Constructive review feedback</li> <li>Prompt response to review requests</li> </ol>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#automation-balance","title":"Automation Balance","text":"<ol> <li>Enable auto-sync for public branches</li> <li>Manual control for sensitive content</li> <li>Monitor status regularly</li> <li>Test authentication periodically</li> <li>Document exceptions to standard workflow</li> </ol>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#troubleshooting","title":"Troubleshooting","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#auto-sync-issues","title":"Auto-Sync Issues","text":"Bash<pre><code># Check authentication\ngit push origin main  # Test manually\n\n# Verify configuration\ngit config --list | grep -E \"(user|commit|remote)\"\n\n# Check for conflicts\ngit status\ngit diff\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#branch-problems","title":"Branch Problems","text":"Bash<pre><code># List all branches\ngit branch -a\n\n# Force checkout if stuck\ngit checkout -f branch-name\n\n# Reset to remote state\ngit reset --hard origin/branch-name\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#conflict-resolution-help","title":"Conflict Resolution Help","text":"Bash<pre><code># Show conflict details\ngit diff --name-only --diff-filter=U\n\n# Use external merge tool\ngit mergetool\n\n# Get help from team\n# Don't guess on important conflicts\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#quick-reference-card","title":"Quick Reference Card","text":"Text Only<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        GIT WORKFLOW QUICK REF       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Daily Commands:                     \u2502\n\u2502   Pull \u2192 Work \u2192 Commit \u2192 Push       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Branch Before Switch:               \u2502\n\u2502   Commit \u2192 Checkout \u2192 Pull          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Security Branches:                  \u2502\n\u2502   L0/main = Auto-sync OK           \u2502\n\u2502   L1 = Consider manual push        \u2502\n\u2502   L2 = Manual push ONLY            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Conflicts:                          \u2502\n\u2502   Don't panic \u2192 Read markers       \u2502\n\u2502   Choose resolution \u2192 Delete marks \u2502\n\u2502   Stage \u2192 Commit \u2192 Push            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflow-guide/#related-documentation","title":"Related Documentation","text":"<ul> <li>Security Implementation - Full security model details</li> <li>Democratic Centralism - Organizational principles</li> <li>Obsidian Setup - Plugin setup</li> </ul> <p>Remember: Good Git discipline protects both your work and your organization. When in doubt, ask for help!</p> <p>Backlinks:</p>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"implement/workflows/git-workflows-by-role/","title":"Git Workflows by Role","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#your-role-shapes-your-workflow","title":"Your Role Shapes Your Workflow","text":"<p>Different organizing roles need different Git patterns. This guide maps your responsibilities to specific workflows, making Git serve your actual work rather than forcing you into generic patterns.</p> <p>Before diving in, understand \u2192 Why Git matters for organizers</p>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#quick-reference-by-role","title":"Quick Reference by Role","text":"Role Primary Git Tasks Key Commands Complexity Secretary Document meetings, track decisions <code>git add</code>, <code>git commit</code>, <code>git push</code> Basic \u2192 Intermediate Facilitator Manage proposals, merge decisions <code>git branch</code>, <code>git merge</code>, <code>git tag</code> Intermediate Coordinator Track tasks, integrate work <code>git log</code>, <code>git merge</code>, <code>git branch</code> Intermediate \u2192 Advanced Tech Support Maintain infrastructure, help others All commands + recovery Advanced New Member Read docs, suggest changes <code>git pull</code>, <code>git add</code>, <code>git commit</code> Basic","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#visual-workflow-overview","title":"Visual Workflow Overview","text":"Text Only<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    ROLE-BASED GIT WORKFLOWS                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                              \u2502\n\u2502  Secretary Flow:                                             \u2502\n\u2502  [Meeting] \u2192 [Document] \u2192 [Commit] \u2192 [Push] \u2192 [Archive]     \u2502\n\u2502      \u2193                                          \u2191            \u2502\n\u2502  [Real-time notes] \u2192 [Clean up] \u2192 [Final version]           \u2502\n\u2502                                                              \u2502\n\u2502  Facilitator Flow:                                           \u2502\n\u2502  [Proposals] \u2192 [Branches] \u2192 [Discussion] \u2192 [Merge] \u2192 [Tag]  \u2502\n\u2502       \u2193              \u2193            \u2193           \u2191              \u2502\n\u2502  [Review] \u2192 [Amendments] \u2192 [Vote] \u2192 [Decision]              \u2502\n\u2502                                                              \u2502\n\u2502  Coordinator Flow:                                           \u2502\n\u2502  [Plan] \u2192 [Assign] \u2192 [Track] \u2192 [Integrate] \u2192 [Report]       \u2502\n\u2502     \u2193         \u2193         \u2193          \u2193           \u2191            \u2502\n\u2502  [Branches] [Tasks] [Progress] [Merge] \u2192 [Evaluate]         \u2502\n\u2502                                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#new-member-starting-your-git-journey","title":"New Member: Starting Your Git Journey","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#your-revolutionary-responsibility","title":"Your Revolutionary Responsibility","text":"<p>As a new member, you're learning both organizing and Git. Start simple, build confidence, contribute early.</p>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#week-1-read-and-learn","title":"Week 1: Read and Learn","text":"Bash<pre><code># Your first commands (just 3!)\ngit clone https://github.com/your-org/organizing-docs.git\ncd organizing-docs\ngit pull\n\n# Read everything\nls\ncat README.md\n# Open files in your favorite editor\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#week-2-your-first-contribution","title":"Week 2: Your First Contribution","text":"Bash<pre><code># Get latest updates\ngit pull\n\n# Make your first edit (fix a typo, add your name)\nnano members/roster.md\n# Add your pseudonym to the list\n\n# Save your change\ngit add members/roster.md\ngit commit -m \"Add [YourPseudonym] to member roster\"\n\n# Share with collective\ngit push\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#week-3-suggest-improvements","title":"Week 3: Suggest Improvements","text":"Bash<pre><code># Create your first branch\ngit checkout -b suggestion/improve-meeting-template\n\n# Edit the template\nnano templates/meeting-template.md\n# Add something that would help new secretaries\n\n# Save and push\ngit add templates/meeting-template.md\ngit commit -m \"Add attendance tracking section to meeting template\"\ngit push origin suggestion/improve-meeting-template\n\n# Ask someone to review in next meeting\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#progressive-learning-path","title":"Progressive Learning Path","text":"Text Only<pre><code>Week 1-2: Clone \u2192 Pull \u2192 Read\nWeek 3-4: Edit \u2192 Add \u2192 Commit \u2192 Push  \nWeek 5-6: Branch \u2192 Merge request\nWeek 7-8: Review others' changes\nWeek 9+:  Choose specialized role\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#common-new-member-concerns","title":"Common New Member Concerns","text":"<p>\"What if I break something?\" - Git saves everything - nothing is truly lost - Work in branches until confident - Ask for help early and often</p> <p>\"The commands seem complicated\" - You only need 7 commands to start - Copy-paste is fine while learning - Repetition builds muscle memory</p> <p>\"I don't understand the messages\" - Error messages are learning opportunities - Screenshot and ask in tech support channel - Most errors have simple fixes</p>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#secretary-documenting-collective-memory","title":"Secretary: Documenting Collective Memory","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#your-revolutionary-responsibility_1","title":"Your Revolutionary Responsibility","text":"<p>As secretary, you're the guardian of institutional memory. Every meeting, every decision, every lesson learned flows through your documentation.</p>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#progressive-complexity-for-secretaries","title":"Progressive Complexity for Secretaries","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-1-basic-meeting-documentation-weeks-1-4","title":"Level 1: Basic Meeting Documentation (Weeks 1-4)","text":"<p>Just focus on capturing and saving:</p> Bash<pre><code># Before meeting\ngit pull\ncp templates/meeting-template.md meetings/today-meeting.md\n\n# After meeting  \ngit add meetings/today-meeting.md\ngit commit -m \"Add notes from today's general meeting\"\ngit push\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-2-structured-documentation-weeks-5-8","title":"Level 2: Structured Documentation (Weeks 5-8)","text":"<p>Add organization and tracking:</p> Bash<pre><code># Use meaningful filenames\ncp templates/meeting-template.md meetings/2024-11-20-general.md\n\n# Commit with descriptive messages\ngit add meetings/2024-11-20-general.md\ngit commit -m \"General meeting: Decided on rent strike, assigned coordinators\"\ngit push\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-3-real-time-documentation-weeks-9-12","title":"Level 3: Real-time Documentation (Weeks 9-12)","text":"<p>Commit during meetings for transparency:</p> Bash<pre><code># After each major decision\ngit add meetings/2024-11-20-general.md\ngit commit -m \"DECIDED: Rent strike begins Dec 1 (vote: 18-3-2)\"\n\n# After action items\ngit commit -m \"Assigned: Maria leads legal committee, Chen does outreach\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-4-advanced-secretary-patterns-months-3","title":"Level 4: Advanced Secretary Patterns (Months 3+)","text":"<p>Full workflow mastery:</p> Bash<pre><code># Create meeting branch\ngit checkout -b meeting/2024-11-20-general\n\n# Multiple commits during meeting\ngit add -p  # Stage specific sections\ngit commit -m \"Document pre-meeting announcements\"\ngit commit -m \"Capture proposal discussion points\"\ngit commit -m \"Record vote results and dissenting opinions\"\n\n# Clean up and merge\ngit checkout main\ngit merge meeting/2024-11-20-general\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#daily-workflow","title":"Daily Workflow","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#before-the-meeting","title":"Before the Meeting","text":"Bash<pre><code># Start fresh with latest information\ngit pull origin main\n\n# Create a branch for today's meeting\ngit checkout -b meeting-2024-11-20-general\n\n# Set up the meeting document\ncp templates/meeting-template.md meetings/2024-11-20-general.md\nnano meetings/2024-11-20-general.md\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#during-the-meeting","title":"During the Meeting","text":"<p>Live Documentation Pattern:</p> Markdown<pre><code># Eastside Tenant Union - General Meeting\n**Date**: 2024-11-20\n**Facilitator**: Maria\n**Secretary**: Chen\n**Attendees**: 23 members present\n\n## Agenda\n1. Report back: Building C organizing\n2. Vote: Rent strike demands\n3. Planning: Next week's actions\n\n## Decisions\nDECIDED[general-meeting](18-3-2){#3f716353757840ccde2bd824af138cec}: Approve rent strike demands as amended\n- Majority felt demands were strategic\n- Minority wanted more militant approach\n- See proposals/rent-strike-demands-v3.md for full text\n\n## Action Items\n- [ ] Maria: Schedule legal consultation by Nov 22\n- [ ] James: Coordinate Building C tenant meeting\n- [ ] Chen: Distribute demands to all buildings\n</code></pre> <p>Commit After Each Major Decision:</p> Bash<pre><code># After vote on demands\ngit add meetings/2024-11-20-general.md\ngit commit -m \"Document rent strike demands vote: 18-3-2 approval\"\n\n# After action items assigned\ngit add meetings/2024-11-20-general.md\ngit commit -m \"Assign action items for strike preparation\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#after-the-meeting","title":"After the Meeting","text":"Bash<pre><code># Final review and cleanup\ngit add meetings/2024-11-20-general.md\ngit commit -m \"Finalize meeting notes with attendance and follow-ups\"\n\n# Push for collective review\ngit push origin meeting-2024-11-20-general\n\n# Create pull request for transparency\n# Use GitHub/GitLab interface or CLI\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#advanced-secretary-patterns","title":"Advanced Secretary Patterns","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#meeting-series-tracking","title":"Meeting Series Tracking","text":"Bash<pre><code># Find all general meetings this year\ngit log --grep=\"general-meeting\" --since=\"2024-01-01\" --oneline\n\n# Track decision history\ngit log --grep=\"DECIDED\" --format=\"%ad - %s\" --date=short\n\n# Find when something was discussed\ngit log -S \"rent control\" -- meetings/\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#templates-and-efficiency","title":"Templates and Efficiency","text":"Bash<pre><code># Create secretary toolkit branch\ngit checkout -b secretary-toolkit\n\n# Add useful aliases\ngit config alias.meeting-notes \"!f() { cp templates/meeting-template.md meetings/$(date +%Y-%m-%d)-$1.md &amp;&amp; git add meetings/*.md; }; f\"\n\n# Use: git meeting-notes general\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#common-secretary-challenges","title":"Common Secretary Challenges","text":"<p>\"I forgot to commit during the meeting\" - Commit major decisions immediately - Use git add -p to stage specific sections - Multiple small commits &gt; one huge commit</p> <p>\"Meeting was chaotic, notes are messy\" - Commit the raw notes first - Create a cleanup branch - Edit for clarity, then merge</p> <p>\"Sensitive information was discussed\" - See Security practices - Use .gitignore for off-record discussions - Consider L1/L2 repository tiers</p>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#facilitator-managing-democratic-process","title":"Facilitator: Managing Democratic Process","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#your-revolutionary-responsibility_2","title":"Your Revolutionary Responsibility","text":"<p>As facilitator, you guide collective decision-making. Git helps you manage proposals, track discussions, and ensure democratic participation.</p>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#visual-facilitators-proposal-flow","title":"Visual: Facilitator's Proposal Flow","text":"Text Only<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 PROPOSAL LIFECYCLE                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                          \u2502\n\u2502  1. SUBMISSION     2. REVIEW        3. DISCUSSION       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502  \u2502 Member   \u2502     \u2502 Working  \u2502     \u2502 General  \u2502        \u2502\n\u2502  \u2502 creates  \u2502 --&gt; \u2502 Group    \u2502 --&gt; \u2502 Meeting  \u2502        \u2502\n\u2502  \u2502 branch   \u2502     \u2502 reviews  \u2502     \u2502 debates  \u2502        \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502       |                 |                 |              \u2502\n\u2502       v                 v                 v              \u2502\n\u2502  proposal/idea    Add comments      Amendments          \u2502\n\u2502                   Tag concerns      Vote recorded       \u2502\n\u2502                                                          \u2502\n\u2502  4. DECISION       5. MERGE         6. IMPLEMENT        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502  \u2502 Vote     \u2502     \u2502 Approved \u2502     \u2502 Action   \u2502        \u2502\n\u2502  \u2502 recorded \u2502 --&gt; \u2502 proposals\u2502 --&gt; \u2502 items    \u2502        \u2502\n\u2502  \u2502 in Git   \u2502     \u2502 merged   \u2502     \u2502 tracked  \u2502        \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502                                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#progressive-complexity-for-facilitators","title":"Progressive Complexity for Facilitators","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-1-basic-proposal-tracking-first-month","title":"Level 1: Basic Proposal Tracking (First Month)","text":"<p>Start with simple proposal management:</p> Bash<pre><code># View proposals\ngit branch -a | grep proposal/\n\n# Read a proposal\ngit checkout proposal/community-garden\ncat proposals/community-garden.md\n\n# Return to main\ngit checkout main\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-2-facilitate-amendments-months-2-3","title":"Level 2: Facilitate Amendments (Months 2-3)","text":"<p>Guide democratic improvements:</p> Bash<pre><code># During meeting discussion\ngit checkout proposal/community-garden\n\n# Add amendment suggested by member\necho \"## Amendment: Include tool library\" &gt;&gt; proposals/community-garden.md\ngit add proposals/community-garden.md\ngit commit -m \"Add tool library amendment from Rosa\"\n\n# Show changes to meeting\ngit diff main...proposal/community-garden\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-3-manage-multiple-proposals-months-4-6","title":"Level 3: Manage Multiple Proposals (Months 4-6)","text":"<p>Handle complex democratic processes:</p> Bash<pre><code># Prepare proposals for meeting\ngit checkout -b facilitation/meeting-prep\n\n# Merge all proposals for review (without committing)\ngit merge --no-commit proposal/garden proposal/kitchen proposal/childcare\ngit reset  # Unstage but keep changes for review\n\n# Create summary for agenda\nls proposals/*.md | while read prop; do\n  echo \"=== $prop ===\" &gt;&gt; agenda.md\n  head -20 $prop &gt;&gt; agenda.md\ndone\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-4-advanced-facilitation-patterns-6-months","title":"Level 4: Advanced Facilitation Patterns (6+ Months)","text":"<p>Master democratic Git workflows:</p> Bash<pre><code># Handle competing proposals\ngit checkout -b reconciliation/space-use\n\n# Cherry-pick best parts from each\ngit cherry-pick proposal/garden~3  # Good research section\ngit cherry-pick proposal/playground~2  # Community input\n\n# Create synthesis\ncat &gt; proposals/synthesis-community-space.md &lt;&lt; EOF\n# Synthesis: Combined Community Space\nIntegrating garden education with children's play area\n[merged best elements from both proposals]\nEOF\n\n# Facilitate ranked choice voting\ngit tag -a vote-1st-choice-garden -m \"8 members first choice\"\ngit tag -a vote-1st-choice-playground -m \"6 members first choice\"\ngit tag -a vote-2nd-choice-synthesis -m \"12 members second choice\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#proposal-management-workflow","title":"Proposal Management Workflow","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#before-the-meeting_1","title":"Before the Meeting","text":"Bash<pre><code># Review all open proposals\ngit branch -r | grep proposal/\ngit checkout -b review-proposals\n\n# Summarize for agenda\nfor branch in $(git branch -r | grep proposal/); do\n  echo \"=== $branch ===\"\n  git log origin/main..$branch --oneline\ndone &gt; meeting-prep/open-proposals.md\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#managing-proposal-branches","title":"Managing Proposal Branches","text":"Bash<pre><code># Someone submits a proposal\ngit checkout -b proposal/community-garden\n\n# Help them structure it\ncp templates/proposal-template.md proposals/community-garden.md\n# Edit with proposer\n\ngit add proposals/community-garden.md\ngit commit -m \"Draft community garden proposal from Working Group 2\"\ngit push origin proposal/community-garden\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#facilitating-amendments","title":"Facilitating Amendments","text":"<p>During discussion, amendments arise:</p> Bash<pre><code># Switch to proposal branch\ngit checkout proposal/community-garden\n\n# Document amendment\necho \"## Amendment 1: Include composting program\" &gt;&gt; proposals/community-garden.md\necho \"Proposed by: Lisa\" &gt;&gt; proposals/community-garden.md\necho \"Rationale: Reduces waste, builds soil\" &gt;&gt; proposals/community-garden.md\n\ngit add proposals/community-garden.md\ngit commit -m \"Add Lisa's composting amendment to garden proposal\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#recording-votes","title":"Recording Votes","text":"Bash<pre><code># After the vote\ngit checkout proposal/community-garden\n\n# Document the decision\ncat &gt;&gt; proposals/community-garden.md &lt;&lt; EOF\n\n## VOTE RESULT\nDECIDED[general-meeting](12-4-3){#5f43387219f4795d3845e8bfc1368503}: Approved with amendments\n- Majority: Strong community building opportunity\n- Minority: Concerns about maintenance capacity\n- Abstentions: Need more information about costs\n\nImplementation begins: 2024-12-01\nEOF\n\ngit add proposals/community-garden.md\ngit commit -m \"DECIDED: Community garden approved 12-4-3 with composting amendment\"\n\n# Merge to main\ngit checkout main\ngit merge proposal/community-garden\ngit push origin main\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#conflict-resolution-patterns","title":"Conflict Resolution Patterns","text":"<p>When proposals conflict:</p> Bash<pre><code># Two proposals for same resource\ngit checkout -b reconcile-conflicts\n\n# Create comparison document\necho \"# Conflicting Proposals Analysis\" &gt; reconciliation/space-usage.md\necho \"## Proposal 1: Community Garden\" &gt;&gt; reconciliation/space-usage.md\ngit show proposal/community-garden:proposals/community-garden.md &gt;&gt; reconciliation/space-usage.md\necho \"## Proposal 2: Children's Playground\" &gt;&gt; reconciliation/space-usage.md\ngit show proposal/playground:proposals/playground.md &gt;&gt; reconciliation/space-usage.md\n\n# Facilitate synthesis\necho \"## Synthesis Option\" &gt;&gt; reconciliation/space-usage.md\necho \"Combined space with garden education area for children\" &gt;&gt; reconciliation/space-usage.md\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#facilitator-best-practices","title":"Facilitator Best Practices","text":"<ol> <li> <p>Pre-meeting Preparation Bash<pre><code>git fetch --all\ngit log --since=\"last week\" --oneline\ngit diff main...proposal/active-proposal\n</code></pre></p> </li> <li> <p>Meeting Branch Management Bash<pre><code># Archive old proposals\ngit tag archive/2024-11-approved proposal/community-garden\ngit push origin --tags\ngit branch -d proposal/community-garden\n</code></pre></p> </li> <li> <p>Democratic Transparency Bash<pre><code># Show all positions on an issue\ngit log --grep=\"garden\" --format=\"%an: %s\" | sort | uniq\n</code></pre></p> </li> </ol>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#coordinator-orchestrating-collective-action","title":"Coordinator: Orchestrating Collective Action","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#your-revolutionary-responsibility_3","title":"Your Revolutionary Responsibility","text":"<p>As coordinator, you synchronize parallel work streams, ensure tasks complete, and maintain momentum across campaigns.</p>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#visual-coordinators-task-flow","title":"Visual: Coordinator's Task Flow","text":"Text Only<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  COORDINATION WORKFLOW                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                             \u2502\n\u2502  PLANNING          DISTRIBUTION        TRACKING             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502\n\u2502  \u2502 Campaign \u2502      \u2502   Branch    \u2502    \u2502 Progress \u2502         \u2502\n\u2502  \u2502 Strategy \u2502 ---&gt; \u2502 per Working \u2502--&gt; \u2502 Tracking \u2502         \u2502\n\u2502  \u2502 in Git   \u2502      \u2502   Group     \u2502    \u2502 &amp; Logs   \u2502         \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502\n\u2502       |                  |                  |               \u2502\n\u2502       v                  v                  v               \u2502\n\u2502  main branch      feature branches    git log/status       \u2502\n\u2502                                                             \u2502\n\u2502  INTEGRATION       REPORTING          EVALUATION            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502\n\u2502  \u2502  Merge   \u2502      \u2502  Generate  \u2502    \u2502  Lessons  \u2502         \u2502\n\u2502  \u2502 Results  \u2502 ---&gt; \u2502  Reports   \u2502--&gt; \u2502  Learned  \u2502         \u2502\n\u2502  \u2502 to Main  \u2502      \u2502  from Git  \u2502    \u2502 Document  \u2502         \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502\n\u2502                                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#progressive-complexity-for-coordinators","title":"Progressive Complexity for Coordinators","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-1-basic-task-tracking-first-month","title":"Level 1: Basic Task Tracking (First Month)","text":"<p>Simple task assignment and tracking:</p> Bash<pre><code># Create a task\necho \"Fix broken door at community center\" &gt; tasks/fix-door.md\ngit add tasks/fix-door.md\ngit commit -m \"Create task: Fix broken door\"\n\n# Check task status\nls tasks/\ncat tasks/fix-door.md\n\n# Mark complete\necho \"COMPLETED: 2024-11-20 by Jamie\" &gt;&gt; tasks/fix-door.md\ngit add tasks/fix-door.md\ngit commit -m \"DONE: Fixed door task completed\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-2-campaign-coordination-months-2-3","title":"Level 2: Campaign Coordination (Months 2-3)","text":"<p>Manage multiple working groups:</p> Bash<pre><code># Set up campaign structure\nmkdir -p campaigns/winter-prep/{outreach,supplies,volunteers}\n\n# Create branches for teams\ngit checkout -b outreach/winter-prep\ngit checkout -b supplies/winter-prep\ngit checkout -b volunteers/winter-prep\n\n# Track progress\ngit log --oneline --graph --all --since=\"1 week ago\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-3-advanced-coordination-months-4-6","title":"Level 3: Advanced Coordination (Months 4-6)","text":"<p>Complex campaign management:</p> Bash<pre><code># Morning coordination routine\ngit fetch --all\nfor branch in $(git branch -r | grep \"winter-prep\"); do\n  echo \"=== $branch ===\"\n  git log main..$branch --oneline\ndone\n\n# Generate status report\ncat &gt; reports/weekly-status.md &lt;&lt; EOF\n# Winter Prep Campaign Status - Week 3\n\n## Completed This Week\n$(git log --grep=\"DONE\" --since=\"1 week ago\" --format=\"- %s\")\n\n## In Progress\n$(git branch -r | grep -E \"task|action\" | wc -l) active tasks\n\n## Blockers\n$(git log --grep=\"BLOCKED\" --since=\"1 week ago\" --format=\"- %s\")\nEOF\n\ngit add reports/weekly-status.md\ngit commit -m \"Weekly coordination report: Winter prep week 3\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-4-strategic-coordination-6-months","title":"Level 4: Strategic Coordination (6+ Months)","text":"<p>Full strategic oversight:</p> Bash<pre><code># Multi-campaign dashboard\ngit checkout -b coordination/q4-overview\n\n# Aggregate all campaigns\nfor campaign in winter-prep tenant-rights mutual-aid; do\n  echo \"# $campaign Status\" &gt;&gt; coordination/q4-status.md\n  git log --grep=$campaign --since=\"3 months ago\" --format=\"- %s\" &gt;&gt; coordination/q4-status.md\ndone\n\n# Resource allocation tracking\ngit log --format=\"%an\" --since=\"1 month ago\" | sort | uniq -c | sort -rn &gt; coordination/contributor-stats.txt\n\n# Identify bottlenecks\nfor branch in $(git branch -r); do\n  last_update=$(git log -1 --format=\"%ar\" $branch)\n  if [$last_update == *\"week\"*]($last_update == *\"week\"*.md){#ca8b5b6ee3120fc4c39db5d15a778c2a}; then\n    echo \"STALLED: $branch - $last_update\"\n  fi\ndone\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#campaign-coordination-workflow","title":"Campaign Coordination Workflow","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#setting-up-campaign-structure","title":"Setting Up Campaign Structure","text":"Bash<pre><code># Initialize campaign\ngit checkout -b campaign/winter-heating\n\n# Create campaign structure\nmkdir -p campaigns/winter-heating/{plans,outreach,research,actions}\n\ncat &gt; campaigns/winter-heating/README.md &lt;&lt; EOF\n# Winter Heating Campaign\n\n## Objective\nEnsure all tenants have adequate heating by December 1\n\n## Working Groups\n- Research: Document violations\n- Outreach: Build tenant participation  \n- Direct Action: Pressure tactics\n\n## Timeline\n- Week 1-2: Research and documentation\n- Week 3-4: Outreach and education\n- Week 5-6: Escalation if needed\nEOF\n\ngit add campaigns/winter-heating/\ngit commit -m \"Initialize winter heating campaign structure\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#coordinating-parallel-work","title":"Coordinating Parallel Work","text":"Bash<pre><code># Create branches for each working group\ngit branch research/heating-violations campaign/winter-heating\ngit branch outreach/tenant-education campaign/winter-heating\ngit branch action/pressure-tactics campaign/winter-heating\n\n# Assign to teams\ngit push origin research/heating-violations\ngit push origin outreach/tenant-education\ngit push origin action/pressure-tactics\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#daily-coordination-check-ins","title":"Daily Coordination Check-ins","text":"Bash<pre><code># Morning sync script\n#!/bin/bash\necho \"=== Campaign Status Check ===\"\nfor branch in $(git branch -r | grep winter-heating); do\n  echo \"\\n## $branch\"\n  git log main..$branch --oneline --since=\"yesterday\"\ndone\n\n# Check task completion\ngit log --grep=\"DONE:\" --since=\"yesterday\" --format=\"%s\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#merging-parallel-work","title":"Merging Parallel Work","text":"Bash<pre><code># Research team reports violations\ngit checkout campaign/winter-heating\ngit merge research/heating-violations\n\n# Outreach achieves critical mass\ngit merge outreach/tenant-education\n\n# Review combined status\ngit log --graph --oneline --all --since=\"last week\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#task-management-patterns","title":"Task Management Patterns","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#creating-task-branches","title":"Creating Task Branches","text":"Bash<pre><code># Urgent task assignment\ngit checkout -b task/emergency-heat-301\n\ncat &gt; tasks/emergency-heat-301.md &lt;&lt; EOF\n# URGENT: No heat in Unit 301\n\n**Assigned**: Marcus\n**Deadline**: Today 5PM\n**Priority**: Critical\n\n## Task\n1. Contact tenant to verify situation\n2. Document with photos/thermometer\n3. Call city inspector\n4. Prepare emergency grievance\n\n## Updates\n- 2:15 PM: Contacted tenant, confirmed no heat for 3 days\n- 3:30 PM: Photos taken, temperature 52\u00b0F\nEOF\n\ngit add tasks/emergency-heat-301.md\ngit commit -m \"URGENT: Assign Marcus to handle no heat in 301\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#tracking-task-progress","title":"Tracking Task Progress","text":"Bash<pre><code># Task dashboard view\ngit log --grep=\"task/\" --format=\"%s %an %ar\" | column -t\n\n# Overdue tasks\ngit log --grep=\"Deadline:\" --format=\"%B\" | grep -B1 \"$(date -d 'yesterday' +%Y-%m-%d)\"\n\n# Completion rate\necho \"Completed: $(git log --grep=\"DONE:\" --since=\"this week\" | wc -l)\"\necho \"Assigned: $(git log --grep=\"Assigned:\" --since=\"this week\" | wc -l)\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#integration-patterns","title":"Integration Patterns","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#daily-stand-up-automation","title":"Daily Stand-up Automation","text":"Bash<pre><code># Create daily coordination report\ngit checkout -b coordination/daily-$(date +%Y-%m-%d)\n\n# Generate report\ncat &gt; coordination/standup-$(date +%Y-%m-%d).md &lt;&lt; EOF\n# Daily Coordination Report - $(date +%Y-%m-%d)\n\n## Completed Yesterday\n$(git log --since=\"yesterday\" --until=\"today\" --grep=\"DONE:\" --format=\"- %s\")\n\n## In Progress Today  \n$(git branch -r | grep -E \"(task|action)/\" | while read branch; do\n  echo \"- $branch: $(git log -1 --format=%s $branch)\"\ndone)\n\n## Blockers\n$(git log --grep=\"BLOCKED:\" --since=\"last week\" --format=\"- %s\")\n\n## Needs Review\n$(git branch -r | grep \"ready-for-review\")\nEOF\n\ngit add coordination/\ngit commit -m \"Daily coordination report for $(date +%Y-%m-%d)\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#coordinator-best-practices","title":"Coordinator Best Practices","text":"<ol> <li> <p>Maintain Campaign Momentum Bash<pre><code># Weekly momentum check\ngit shortlog -sn --since=\"last week\"\ngit log --since=\"last week\" | grep -c \"DONE:\"\n</code></pre></p> </li> <li> <p>Prevent Bottlenecks Bash<pre><code># Find stalled branches\nfor branch in $(git branch -r); do\n  last_commit=$(git log -1 --format=%ar $branch)\n  echo \"$branch: $last_commit\"\ndone | grep -E \"(days|weeks) ago\"\n</code></pre></p> </li> <li> <p>Celebrate Victories Bash<pre><code># Tag campaign milestones\ngit tag -a \"50-tenants-committed\" -m \"Reached critical mass for heating campaign\"\ngit tag -a \"heat-restored-building-c\" -m \"First victory: Building C heat restored\"\n</code></pre></p> </li> </ol>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#cross-role-collaboration","title":"Cross-Role Collaboration","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#secretary-facilitator","title":"Secretary \u2194 Facilitator","text":"Bash<pre><code># Secretary prepares agenda from proposals\ngit checkout meeting-prep\ngit merge --no-commit $(git branch -r | grep proposal/ | tr '\\n' ' ')\ngit reset # Don't actually merge, just view\n\n# Facilitator reviews meeting outcomes\ngit log --author=\"Secretary\" --grep=\"DECIDED\" --since=\"last meeting\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#facilitator-coordinator","title":"Facilitator \u2194 Coordinator","text":"Bash<pre><code># Facilitator assigns approved proposals\ngit checkout coordination/assignments\ngit merge proposal/approved-action\n\n# Coordinator reports back on implementation\ngit checkout proposal/approved-action\necho \"## Implementation Report\" &gt;&gt; proposals/original-proposal.md\necho \"Status: 75% complete, on track for deadline\" &gt;&gt; proposals/original-proposal.md\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#secretary-coordinator","title":"Secretary \u2194 Coordinator","text":"Bash<pre><code># Secretary documents task outcomes\ngit log --grep=\"task/\" --format=\"%s\" &gt; meetings/task-report.md\n\n# Coordinator uses meeting decisions for planning\ngit log --grep=\"DECIDED.*action\" --format=\"%s\" | \\\n  while read decision; do\n    echo \"git checkout -b task/$decision\"\n  done\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#advanced-patterns-for-all-roles","title":"Advanced Patterns for All Roles","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#building-institutional-memory","title":"Building Institutional Memory","text":"Bash<pre><code># Create knowledge base from patterns\ngit log --grep=\"worked:\" --format=\"%B\" &gt; knowledge/what-worked.md\ngit log --grep=\"failed:\" --format=\"%B\" &gt; knowledge/lessons-learned.md\n\n# Tag important patterns\ngit tag -a \"pattern/successful-rent-strike\" \\\n  -m \"This commit series shows effective rent strike organization\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#automation-for-efficiency","title":"Automation for Efficiency","text":"Bash<pre><code># ~/.gitconfig aliases for common role tasks\n[alias]\n  # Secretary shortcuts\n  meeting = \"!f() { cp templates/meeting.md meetings/$(date +%Y-%m-%d)-$1.md; }; f\"\n  decided = \"commit -m \\\"DECIDED[$1]($2){#0339b8cd4613c74a86d715439a3c09f7}: $3\\\"\"\n\n  # Facilitator shortcuts  \n  proposals = \"branch -r | grep proposal/\"\n  conflicts = \"diff --name-only --diff-filter=U\"\n\n  # Coordinator shortcuts\n  tasks = \"log --grep='task/' --oneline\"\n  blockers = \"log --grep='BLOCKED:' --oneline\"\n  progress = \"shortlog -sn --since='last week'\"\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#tech-support-maintaining-revolutionary-infrastructure","title":"Tech Support: Maintaining Revolutionary Infrastructure","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#your-revolutionary-responsibility_4","title":"Your Revolutionary Responsibility","text":"<p>As tech support, you keep the infrastructure running, help comrades overcome technical barriers, and ensure no one gets left behind.</p>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#progressive-complexity-for-tech-support","title":"Progressive Complexity for Tech Support","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-1-basic-help-desk-first-month","title":"Level 1: Basic Help Desk (First Month)","text":"<p>Help others with common issues:</p> Bash<pre><code># Common fixes you'll use daily\ngit status  # Diagnose current state\ngit diff    # Show what changed\ngit log --oneline -10  # Recent history\n\n# Help someone who's stuck\ngit reset --hard HEAD  # Nuclear option - discard all changes\ngit clean -fd         # Remove untracked files\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-2-troubleshooting-months-2-3","title":"Level 2: Troubleshooting (Months 2-3)","text":"<p>Solve common Git problems:</p> Bash<pre><code># Fix merge conflicts\ngit status  # See conflicted files\nnano conflicted-file.md  # Edit to resolve\ngit add conflicted-file.md\ngit commit -m \"Resolved merge conflict in meeting notes\"\n\n# Recover lost work\ngit reflog  # Show all recent actions\ngit checkout HEAD@{2}  # Go back 2 actions\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-3-infrastructure-maintenance-months-4-6","title":"Level 3: Infrastructure Maintenance (Months 4-6)","text":"<p>Keep systems running smoothly:</p> Bash<pre><code># Repository health check\ngit fsck --full\ngit gc --aggressive\ngit count-objects -vH\n\n# Set up automated backups\ncat &gt; scripts/backup-repos.sh &lt;&lt; 'EOF'\n#!/bin/bash\nfor repo in /home/*/repos/*; do\n  cd $repo\n  git bundle create /backups/$(basename $repo)-$(date +%Y%m%d).bundle --all\ndone\nEOF\n\nchmod +x scripts/backup-repos.sh\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#level-4-advanced-recovery-6-months","title":"Level 4: Advanced Recovery (6+ Months)","text":"<p>Handle complex disasters:</p> Bash<pre><code># Recover from force push disaster\ngit reflog show origin/main\ngit push --force-with-lease origin origin/main@{1}:main\n\n# Extract file from specific commit\ngit show COMMIT:path/to/file &gt; recovered-file.md\n\n# Bisect to find when something broke\ngit bisect start\ngit bisect bad HEAD\ngit bisect good v1.0\n# Test each commit git suggests\ngit bisect good/bad\n# Eventually finds the breaking commit\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#common-support-requests","title":"Common Support Requests","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#i-accidentally-committed-passwords","title":"\"I accidentally committed passwords!\"","text":"Bash<pre><code># If not pushed yet\ngit reset --soft HEAD~1\n# Edit file to remove password\ngit add .\ngit commit -m \"Previous commit without passwords\"\n\n# If already pushed, see security guide\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#git-says-i-have-conflicts","title":"\"Git says I have conflicts\"","text":"Bash<pre><code># Show them the conflict\ncat conflicted-file.md | grep -A5 -B5 \"&lt;&lt;&lt;&lt;&lt;&lt;\"\n\n# Walk through resolution\nnano conflicted-file.md\n# Remove &lt;&lt;&lt;, ===, &gt;&gt;&gt; markers\n# Keep the version they want\n\ngit add conflicted-file.md\ngit commit\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#i-cant-push-my-changes","title":"\"I can't push my changes\"","text":"Bash<pre><code># Usually means they need to pull first\ngit pull --rebase origin main\n# Fix any conflicts\ngit push\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#tech-support-best-practices","title":"Tech Support Best Practices","text":"<ol> <li> <p>Document Everything Bash<pre><code># Create knowledge base from support requests\necho \"## Issue: $1\" &gt;&gt; support/kb/$(date +%Y%m%d)-$1.md\necho \"## Solution:\" &gt;&gt; support/kb/$(date +%Y%m%d)-$1.md\n# Document what fixed it\n</code></pre></p> </li> <li> <p>Automate Common Tasks Bash<pre><code># Create helper scripts\ncat &gt; bin/git-meeting &lt;&lt; 'EOF'\n#!/bin/bash\ncp templates/meeting.md meetings/$(date +%Y%m%d)-meeting.md\ngit add meetings/\necho \"Created meeting notes for $(date)\"\nEOF\nchmod +x bin/git-meeting\n</code></pre></p> </li> <li> <p>Teach While Fixing</p> </li> <li>Don't just fix - explain</li> <li>Create cheat sheets</li> <li>Run mini-workshops</li> </ol>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#quick-command-reference-by-role","title":"Quick Command Reference by Role","text":"","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#universal-commands-everyone-needs","title":"Universal Commands (Everyone Needs)","text":"Bash<pre><code>git clone [url]          # Get repository\ngit pull                 # Get updates\ngit add [file]           # Stage changes\ngit commit -m \"message\"  # Save changes\ngit push                 # Share changes\ngit status              # Check state\ngit log --oneline       # View history\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#secretary-commands","title":"Secretary Commands","text":"Bash<pre><code>git add -p              # Stage specific parts\ngit commit --amend      # Fix last commit\ngit log --grep=\"DECIDED\" # Find decisions\ngit blame [file]        # Who wrote what\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#facilitator-commands","title":"Facilitator Commands","text":"Bash<pre><code>git branch              # List branches\ngit checkout -b [name]  # Create branch\ngit merge [branch]      # Combine work\ngit tag -a [name]       # Mark milestones\ngit cherry-pick [commit] # Take specific changes\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#coordinator-commands","title":"Coordinator Commands","text":"Bash<pre><code>git fetch --all         # Update all remotes\ngit log --graph --all   # Visualize work\ngit shortlog -sn        # Contribution stats\ngit branch -r           # Remote branches\ngit log --since=\"1 week\" # Recent activity\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#tech-support-commands","title":"Tech Support Commands","text":"Bash<pre><code>git reflog              # Recovery history\ngit fsck                # Check integrity\ngit gc                  # Clean up\ngit reset --hard        # Nuclear option\ngit clean -fd           # Remove untracked\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#troubleshooting-flowchart","title":"Troubleshooting Flowchart","text":"Text Only<pre><code>Problem?\n\u251c\u2500 \"I don't know what to do\"\n\u2502  \u2514\u2500 git status \u2192 Read the suggestions\n\u251c\u2500 \"I messed up my last commit\"\n\u2502  \u2514\u2500 git commit --amend (if not pushed)\n\u251c\u2500 \"I need to undo changes\"\n\u2502  \u251c\u2500 Not committed \u2192 git checkout -- [file]\n\u2502  \u251c\u2500 Committed \u2192 git reset --soft HEAD~1\n\u2502  \u2514\u2500 Pushed \u2192 git revert [commit]\n\u251c\u2500 \"Git says conflict\"\n\u2502  \u2514\u2500 Edit file \u2192 Remove markers \u2192 git add \u2192 commit\n\u2514\u2500 \"I'm totally lost\"\n   \u2514\u2500 git status \u2192 Ask for help \u2192 Learn together\n</code></pre>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#remember-your-power","title":"Remember Your Power","text":"<p>Each role builds revolutionary capacity:</p> <ul> <li>New Member: You bring fresh perspectives</li> <li>Secretary: You prevent knowledge hemorrhaging</li> <li>Facilitator: You ensure democratic participation</li> <li>Coordinator: You transform decisions into reality</li> <li>Tech Support: You eliminate technical barriers</li> </ul> <p>Git isn't neutral technology - in your hands, it becomes infrastructure for liberation.</p>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/git-workflows-by-role/#role-transition-paths","title":"Role Transition Paths","text":"Text Only<pre><code>New Member (Learn basics)\n    \u251c\u2192 Secretary (Document everything)\n    \u251c\u2192 Facilitator (Guide democracy)\n    \u251c\u2192 Coordinator (Drive action)\n    \u2514\u2192 Tech Support (Help everyone)\n        \u2514\u2192 Teach others \u2192 Build capacity\n</code></pre> <p>Start where you are. Grow at your pace. Every commit builds the revolution.</p> <p>Need the basics first? \u2192 Git in 7 Commands Ready for security? \u2192 Security Workflows Want to teach others? \u2192 Running a Git Workshop</p> <p>Backlinks:</p>","tags":["git","workflows","roles","facilitator","coordinator","secretary","patterns"]},{"location":"implement/workflows/meeting-workflow-guide/","title":"Meeting Workflow Guide for DRUIDS","text":"","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#introduction","title":"Introduction","text":"<p>This guide provides comprehensive instructions for managing meetings within the DRUIDS framework, from planning through follow-up. It covers template usage, minute-taking, action item tracking, and integration with democratic centralist principles.</p>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Obsidian vault configured with templates</li> <li>Basic familiarity with Markdown</li> <li>Understanding of your organization's meeting structure</li> <li>Access to appropriate security tier vault (L0 for public, L1 for internal)</li> </ul>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#meeting-types-and-templates","title":"Meeting Types and Templates","text":"","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#general-meetings-monthly","title":"General Meetings (Monthly)","text":"<ul> <li>Purpose: Organization-wide updates, voting, general business</li> <li>Security: Usually L1, announcements can be L0</li> <li>Duration: 60-90 minutes typically</li> </ul>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#committee-meetings","title":"Committee Meetings","text":"<ul> <li>Purpose: Focused work on specific areas</li> <li>Security: L1 for internal committees</li> <li>Duration: 45-60 minutes</li> </ul>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#criticismself-criticism-csc-sessions","title":"Criticism/Self-Criticism (CSC) Sessions","text":"<ul> <li>Purpose: Organizational development and accountability</li> <li>Security: Always L1 (personal development content)</li> <li>Duration: 60-90 minutes</li> </ul>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#emergency-meetings","title":"Emergency Meetings","text":"<ul> <li>Purpose: Urgent decisions required</li> <li>Security: Depends on topic</li> <li>Duration: As needed</li> </ul>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#step-by-step-meeting-workflow","title":"Step-by-Step Meeting Workflow","text":"","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#1-pre-meeting-preparation-3-7-days-before","title":"1. Pre-Meeting Preparation (3-7 days before)","text":"","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#time-estimate-30-45-minutes","title":"Time Estimate: 30-45 minutes","text":"<p>a) Create Meeting Announcement</p> <ol> <li>Open appropriate vault (L0 for public announcements)</li> <li>Create new file: <code>01-meetings/announcements/YYYY-MM-DD-general-meeting-announcement.md</code></li> <li>Use template:</li> </ol> Markdown<pre><code>---\ndocument_id: EXT-MIN-2024-001-L0\ntitle: \"General Meeting - January 2024\"\ntype: announcement\nsecurity: L0\ndate: 2024-01-15\ntime: \"19:00\"\nlocation: \"Main Hall / Online\"\nauthor: \"Secretary\"\ntags: [meeting, announcement, general]\n---\n\n# General Meeting - January 2024\n\n**When**: Monday, January 15, 2024 at 7:00 PM\n**Where**: Main Hall (123 Main St) or via secure video link\n**Who**: All members and invited guests\n\n## Agenda\n\n1. Opening and attendance (5 min)\n2. Review of previous minutes (10 min)\n3. Committee reports (20 min)\n4. Old business (15 min)\n5. New business (30 min)\n6. Announcements (5 min)\n7. Closing (5 min)\n\n## How to Participate\n\n- **In Person**: Arrive 10 minutes early for setup\n- **Online**: Link will be sent to member emails 1 hour before\n- **Proposals**: Submit via proposal process by January 12\n\n## What to Bring\n\n- Previous meeting minutes (available in shared drive)\n- Any proposals or reports you're presenting\n- Questions for committee chairs\n\nContact secretary@organization.org with questions.\n</code></pre> <p>b) Prepare Meeting Folder</p> <p>In L1 vault:</p> Bash<pre><code>01-meetings/minutes/2024/01-january/\n\u251c\u2500\u2500 2024-01-15-general-meeting/\n\u2502   \u251c\u2500\u2500 agenda.md\n\u2502   \u251c\u2500\u2500 attendance.md\n\u2502   \u251c\u2500\u2500 minutes.md (created during meeting)\n\u2502   \u2514\u2500\u2500 action-items.md (created post-meeting)\n</code></pre> <p>c) Pre-populate Agenda</p> <p>Create <code>agenda.md</code> with details:</p> Markdown<pre><code>---\ndocument_id: INT-MIN-2024-001-L1\ntitle: \"General Meeting Agenda - January 2024\"\ntype: agenda\nsecurity: L1\nmeeting_date: 2024-01-15\nfacilitator: \"Chairperson\"\ntimekeeper: \"Member A\"\nstack_keeper: \"Member B\"\n---\n\n# General Meeting Agenda\n## January 15, 2024\n\n### Roles\n- **Facilitator**: Chairperson\n- **Timekeeper**: Member A\n- **Stack Keeper**: Member B\n- **Minutes**: Secretary\n\n### Agenda Items\n\n1. **Opening** (7:00-7:05)\n   - Acknowledge land/labor\n   - Review meeting agreements\n\n2. **Attendance** (7:05-7:10)\n   - Roll call\n   - Quorum verification\n\n3. **Previous Minutes** (7:10-7:20)\n   - Review December minutes\n   - Corrections/amendments\n   - Motion to approve\n\n[Continue with full agenda...]\n</code></pre>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#2-during-the-meeting","title":"2. During the Meeting","text":"","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#time-estimate-throughout-meeting-duration","title":"Time Estimate: Throughout meeting duration","text":"<p>a) Meeting Minutes Template</p> <p>Create <code>minutes.md</code> at meeting start:</p> Markdown<pre><code>---\ndocument_id: INT-MIN-2024-002-L1\ntitle: \"General Meeting Minutes - January 2024\"\ntype: minutes\nsecurity: L1\nmeeting_date: 2024-01-15\nstart_time: \"19:00\"\nend_time: \"\"\nattendees: []\napologies: []\nfacilitator: \"Chairperson\"\nminutes_taker: \"Secretary\"\nstatus: draft\ntags: [meeting, minutes, general, 2024-01]\n---\n\n# General Meeting Minutes\n## January 15, 2024\n\n### Meeting Details\n- **Called to Order**: 7:00 PM\n- **Adjourned**: [Fill at end]\n- **Location**: Main Hall / Online Hybrid\n- **Quorum**: Yes (15/20 members present)\n\n### Attendance\n\n**Present** (15):\n- Member A (Chair)\n- Member B \n- Member C (Online)\n[Continue list...]\n\n**Apologies** (3):\n- Member X (traveling)\n- Member Y (illness)\n- Member Z (work conflict)\n\n**Guests** (2):\n- Guest 1 (invited speaker)\n- Guest 2 (prospective member)\n\n### Minutes\n\n#### 1. Opening (7:00 PM)\n- Chairperson opened meeting\n- Land acknowledgment read\n- Meeting agreements reviewed\n\n#### 2. Previous Minutes\n**Motion**: \"To approve the December 2023 minutes as distributed\"\n- Moved: Member D\n- Seconded: Member E\n- Discussion: Correction to attendance count\n- **Vote**: 14-0-1 (Yes-No-Abstain)\n- **Result**: PASSED\n\n#### 3. Committee Reports\n\n##### Education Committee (Member F reporting)\n- Completed orientation for 3 new members\n- Upcoming workshop on \"Digital Security\" scheduled for Jan 28\n- Request for $200 budget for materials\n- Full report attached as Appendix A\n\n##### Tech Committee (Member G reporting)\n- DRUIDS implementation 60% complete\n- Need 2 more volunteers for documentation\n- Next sprint planning Feb 1\n\n[Continue with detailed notes...]\n</code></pre> <p>b) Real-time Note-taking Best Practices</p> <ol> <li>Focus on Decisions and Actions</li> <li>Record all motions verbatim</li> <li>Note who moved and seconded</li> <li>Record exact vote counts</li> <li> <p>Capture assigned actions with deadlines</p> </li> <li> <p>Summarize Discussions</p> </li> <li>Key points raised, not every word</li> <li>Significant disagreements or concerns</li> <li> <p>Rationale for decisions</p> </li> <li> <p>Use Shortcuts During Meeting</p> </li> </ol> Text Only<pre><code>M: = Motion\nS: = Seconded by\nAI: = Action Item\nQ: = Question raised\n</code></pre> <ol> <li>Clean Up Immediately After</li> <li>Expand shortcuts</li> <li>Fix formatting</li> <li>Add missed details while fresh</li> </ol>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#3-post-meeting-processing","title":"3. Post-Meeting Processing","text":"","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#time-estimate-45-60-minutes-within-24-hours","title":"Time Estimate: 45-60 minutes (within 24 hours)","text":"<p>a) Extract Action Items</p> <p>Create <code>action-items.md</code>:</p> Markdown<pre><code>---\ndocument_id: INT-MIN-2024-003-L1\ntitle: \"Action Items - General Meeting January 2024\"\ntype: action-items\nsecurity: L1\nsource_meeting: \"2024-01-15\"\ncreated: 2024-01-16\nstatus: active\n---\n\n# Action Items from General Meeting\n## January 15, 2024\n\n### High Priority (Due within 1 week)\n\n- [ ] **Submit grant application**\n  - Assigned to: Member H\n  - Due: January 22, 2024\n  - Details: Complete and submit Form 990 to Foundation X\n  - Approved budget: $5,000 request\n\n- [ ] **Send new member welcome packets**\n  - Assigned to: Education Committee\n  - Due: January 20, 2024\n  - Details: Prepare and send to 3 new members approved tonight\n\n### Medium Priority (Due within 2 weeks)\n\n- [ ] **Update website with meeting minutes**\n  - Assigned to: Tech Committee\n  - Due: January 29, 2024\n  - Details: Post public portions of minutes to website\n\n[Continue with all items...]\n\n### Tracking\n\n| Item | Assigned | Due Date | Status | Completed |\n|------|----------|----------|---------|-----------|\n| Grant application | Member H | 2024-01-22 | In Progress | |\n| Welcome packets | Ed Comm | 2024-01-20 | Not Started | |\n| Website update | Tech Comm | 2024-01-29 | Not Started | |\n</code></pre> <p>b) Create Follow-up Tasks</p> <p>In your task management system:</p> Markdown<pre><code>---\nkanban-plugin: basic\n---\n\n## To Do\n\n- [ ] Email Member H re: grant application support\n- [ ] Schedule check-in with Education Committee\n- [ ] Add action items to next meeting agenda\n\n## In Progress\n\n- [ ] Clean up meeting minutes for distribution\n\n## Done\n\n- [x] Created action items document\n- [x] Updated attendance records\n</code></pre>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#4-distribution-and-archival","title":"4. Distribution and Archival","text":"","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#time-estimate-15-20-minutes","title":"Time Estimate: 15-20 minutes","text":"<p>a) Prepare Distribution Version</p> <ol> <li>Remove sensitive discussions from public version</li> <li>Create summary for members who missed meeting</li> <li>Highlight key decisions and next steps</li> </ol> <p>b) Distribution Checklist</p> <ul> <li> Minutes reviewed by second person</li> <li> Action items sent to assignees</li> <li> Public summary created (if needed)</li> <li> Files committed to repository</li> <li> Email sent to members list</li> <li> Calendar updated with next meeting</li> </ul>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#meeting-templates-library","title":"Meeting Templates Library","text":"","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#basic-meeting-template","title":"Basic Meeting Template","text":"<p>Save as <code>templates/meeting-minutes-template.md</code>:</p> Markdown<pre><code>---\ndocument_id: {{document_id}}\ntitle: \"{{title}}\"\ntype: minutes\nsecurity: {{security_level}}\nmeeting_date: {{date}}\nstart_time: \"{{time}}\"\nend_time: \"\"\nattendees: []\napologies: []\nfacilitator: \"\"\nminutes_taker: \"{{author}}\"\nstatus: draft\n---\n\n# {{title}}\n## {{date}}\n\n### Meeting Details\n- **Called to Order**: \n- **Adjourned**: \n- **Location**: \n- **Quorum**: Yes/No (XX/XX members present)\n\n### Attendance\n\n**Present** (X):\n- \n\n**Apologies** (X):\n- \n\n**Guests** (X):\n- \n\n### Minutes\n\n#### 1. Opening\n- \n\n#### 2. Previous Minutes\n**Motion**: \"To approve the [MONTH YEAR] minutes as distributed\"\n- Moved: \n- Seconded: \n- Discussion: \n- **Vote**: X-X-X (Yes-No-Abstain)\n- **Result**: PASSED/FAILED\n\n### Action Items\n- [ ] \n\n### Next Meeting\n- Date: \n- Time: \n- Location: \n\n### Adjournment\nMeeting adjourned at XX:XX PM\n\n---\n*Minutes prepared by: {{author}}*\n*Minutes approved: [DATE]*\n</code></pre>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#automated-github-workflow","title":"Automated GitHub Workflow","text":"","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#what-the-meeting-minutes-workflow-does","title":"What the Meeting Minutes Workflow Does","text":"<p>The Meeting Minutes workflow is a GitHub Action that automatically creates a discussion thread for your meeting notes. This automation complements the manual process by providing consistent, pre-formatted templates.</p>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#the-simple-version","title":"The Simple Version","text":"<p>When you trigger this workflow, it creates a new GitHub Discussion post with a pre-formatted template for meeting minutes, ready for someone to fill in with actual meeting notes.</p>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#step-by-step-process","title":"Step-by-Step Process","text":"<ol> <li>You trigger the workflow by providing:</li> <li>Meeting date (like \"2024-12-28\")</li> <li>Meeting type (general, committee, executive, working-group)</li> <li> <p>Security level (L0 for public, L1 for member-only)</p> </li> <li> <p>The workflow validates your inputs:</p> </li> <li>Checks the date is in YYYY-MM-DD format</li> <li>Ensures the meeting type is valid</li> <li> <p>Confirms the security level is appropriate</p> </li> <li> <p>It finds the right discussion category:</p> </li> <li>Dynamically looks for a category called \"meeting-minutes\" in your GitHub Discussions</li> <li>If it can't find it, it tells you to create one</li> <li> <p>No more hardcoded category IDs!</p> </li> <li> <p>It generates a formatted discussion post with:</p> </li> <li>A title like: \"2024-12-28 General Meeting Minutes\"</li> <li> <p>A pre-filled template including:</p> <ul> <li>Meeting metadata (date, type, who attended)</li> <li>Sections for agenda, discussions, decisions, action items</li> <li>Security classification notice</li> <li>Proper document ID following DRUIDS standards</li> </ul> </li> <li> <p>It creates the discussion in your repository's Discussions tab</p> </li> </ol>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#why-use-the-automated-workflow","title":"Why Use the Automated Workflow","text":"<ul> <li>Consistency: Every meeting gets the same professional template</li> <li>Speed: No manual copying or formatting needed</li> <li>Organization: All meetings automatically go to the correct category</li> <li>Security-aware: Includes proper security classifications</li> <li>Trackable: Creates a permanent, searchable record in GitHub</li> <li>Error-free: No typos in dates or document IDs</li> </ul>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#real-example","title":"Real Example","text":"<p>If you run it with:</p> <ul> <li>Date: \"2024-12-28\"</li> <li>Type: \"general\"</li> <li>Security: \"L0\"</li> </ul> <p>It creates a discussion titled \"2024-12-28 General Meeting Minutes\" with a complete template ready for the secretary to fill in during or after the meeting.</p>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#how-to-use-the-workflow","title":"How to Use the Workflow","text":"<ol> <li>From GitHub Actions page:</li> <li>Go to Actions tab in your repository</li> <li>Find \"Meeting Minutes\" workflow</li> <li>Click \"Run workflow\"</li> <li>Fill in the date, type, and security level</li> <li> <p>Click \"Run workflow\" button</p> </li> <li> <p>From GitHub CLI:</p> </li> </ol> Bash<pre><code>gh workflow run meeting-minutes.yml \\\n  -f meeting_date=2024-12-28 \\\n  -f meeting_type=general \\\n  -f security_level=L0\n</code></pre> <ol> <li>Check the results:</li> <li>Go to Discussions tab</li> <li>Find your new meeting minutes discussion</li> <li>Start adding the actual meeting content</li> </ol>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#integration-with-manual-process","title":"Integration with Manual Process","text":"<p>The automated workflow creates the initial discussion, then you follow the manual process:</p> <ol> <li>Before the meeting: Run the workflow to create the discussion</li> <li>During the meeting: Open the discussion and fill in the template in real-time</li> <li>After the meeting: Extract action items and create follow-ups as documented above</li> </ol> <p>This hybrid approach gives you the best of both worlds - automation for consistency and manual flexibility for content.</p>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#integration-with-democratic-processes","title":"Integration with Democratic Processes","text":"","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#proposal-tracking","title":"Proposal Tracking","text":"<p>During meetings, track proposals through their lifecycle:</p> Markdown<pre><code>### Proposal: Implement New Security Protocols\n\n**Submitted by**: Member J\n**Submitted**: January 8, 2024\n**First Reading**: January 15, 2024\n**Status**: Tabled for further discussion\n\n**Discussion Points**:\n- Cost concerns raised by Member K\n- Support from Tech Committee\n- Request for detailed implementation plan\n\n**Next Steps**:\n- Tech Committee to prepare detailed plan\n- Budget impact analysis by Treasurer\n- Second reading at February meeting\n</code></pre>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#voting-records","title":"Voting Records","text":"<p>Maintain clear voting records:</p> Markdown<pre><code>### Motion: Allocate $500 for Workshop Series\n\n**Motion Text**: \"To allocate $500 from the education budget for a three-part workshop series on digital security\"\n\n**Process**:\n- Moved by: Member L\n- Seconded by: Member M\n- Discussion: 10 minutes\n- Amendment: Increase to $600 (accepted as friendly)\n\n**Vote**:\n- Yes: 12 (Members A, B, C, D, E, F, G, H, I, J, K, L)\n- No: 2 (Members M, N)\n- Abstain: 1 (Member O - conflict of interest declared)\n\n**Result**: PASSED (12-2-1)\n</code></pre>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<p>Issue: \"Minutes are too detailed/not detailed enough\"</p> <ul> <li>Solution: Focus on decisions, actions, and key discussion points</li> <li>Guideline: Someone absent should understand what happened and what they need to do</li> </ul> <p>Issue: \"Can't keep up during fast discussions\"</p> <ul> <li>Solution: Ask for clarification or to slow down</li> <li>Alternative: Record meeting (with consent) for reference</li> <li>Pro tip: Use abbreviations during meeting, expand after</li> </ul> <p>Issue: \"Action items get lost\"</p> <ul> <li>Solution: Dedicated action items document</li> <li>Tool: Use Obsidian Tasks plugin for tracking</li> <li>Automation: Set up reminder system</li> </ul> <p>Issue: \"Multiple people editing minutes simultaneously\"</p> <ul> <li>Solution: Designate single minute-taker</li> <li>Alternative: Use collaborative editor during meeting, single person cleans up</li> <li>Git Solution: Create branch for meeting, merge after</li> </ul> <p>Issue: \"Attendance tracking is tedious\"</p> <ul> <li>Solution: Pre-meeting check-in form</li> <li>Automation: QR code sign-in that updates attendance file</li> </ul> <p>Issue: \"Meeting runs over time\"</p> <ul> <li>Solution: Strict timekeeper role</li> <li>Tool: Visual timer visible to all</li> <li>Process: Parking lot for items that need more time</li> </ul>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#advanced-automation-scripts","title":"Advanced Automation Scripts","text":"","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#meeting-setup-automation","title":"Meeting Setup Automation","text":"Bash<pre><code>#!/bin/bash\n# setup-meeting.sh - Automate meeting preparation\n\nMEETING_DATE=$1\nMEETING_TYPE=$2\nVAULT_PATH=\"~/Documents/druids-vault\"\n\n# Create meeting structure\ncreate_meeting_structure() {\n    local date=$1\n    local type=$2\n    local year=$(date -d \"$date\" +%Y)\n    local month=$(date -d \"$date\" +%m-%B | tr '[:upper:]' '[:lower:]')\n\n    # Create directories\n    mkdir -p \"$VAULT_PATH/01-meetings/minutes/$year/$month/$date-$type-meeting\"\n\n    # Copy templates\n    cp \"$VAULT_PATH/templates/meeting-agenda-template.md\" \\\n       \"$VAULT_PATH/01-meetings/minutes/$year/$month/$date-$type-meeting/agenda.md\"\n\n    cp \"$VAULT_PATH/templates/meeting-minutes-template.md\" \\\n       \"$VAULT_PATH/01-meetings/minutes/$year/$month/$date-$type-meeting/minutes.md\"\n\n    # Update dates in templates\n    sed -i \"s/{{date}}/$date/g\" \"$VAULT_PATH/01-meetings/minutes/$year/$month/$date-$type-meeting/*.md\"\n    sed -i \"s/{{type}}/$type/g\" \"$VAULT_PATH/01-meetings/minutes/$year/$month/$date-$type-meeting/*.md\"\n\n    echo \"\u2713 Meeting structure created for $date $type meeting\"\n}\n\n# Send reminders\nsend_reminders() {\n    local date=$1\n    local days_before=$2\n\n    # Calculate reminder date\n    local reminder_date=$(date -d \"$date - $days_before days\" +%Y-%m-%d)\n\n    # Create reminder task\n    echo \"- [ ] Send meeting reminder @due($reminder_date)\" &gt;&gt; \"$VAULT_PATH/tasks.md\"\n}\n\n# Main execution\ncreate_meeting_structure \"$MEETING_DATE\" \"$MEETING_TYPE\"\nsend_reminders \"$MEETING_DATE\" 3\nsend_reminders \"$MEETING_DATE\" 1\n\n# Create calendar event\necho \"Meeting created! Don't forget to:\"\necho \"1. Add to shared calendar\"\necho \"2. Book meeting space\"\necho \"3. Test tech setup if hybrid\"\n</code></pre>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#action-item-tracker","title":"Action Item Tracker","text":"Python<pre><code>#!/usr/bin/env python3\n# track-action-items.py - Extract and track action items across meetings\n\nimport os\nimport re\nfrom datetime import datetime\nimport yaml\n\ndef extract_action_items(file_path):\n    \"\"\"Extract action items from meeting minutes\"\"\"\n    with open(file_path, 'r') as f:\n        content = f.read()\n\n    # Find action items section\n    action_items = []\n    in_action_section = False\n\n    for line in content.split('\\n'):\n        if 'action items' in line.lower():\n            in_action_section = True\n            continue\n\n        if in_action_section:\n            # Match checkbox items\n            match = re.match(r'- \\[[ x]\\] \\*\\*(.*?)\\*\\*', line)\n            if match:\n                item_text = match.group(1)\n                # Extract assigned to\n                assigned_match = re.search(r'Assigned to: (.*?)(?:\\n|$)', content[content.find(item_text):])\n                assigned_to = assigned_match.group(1) if assigned_match else 'Unassigned'\n\n                # Extract due date\n                due_match = re.search(r'Due: (.*?)(?:\\n|$)', content[content.find(item_text):])\n                due_date = due_match.group(1) if due_match else 'No due date'\n\n                action_items.append({\n                    'task': item_text,\n                    'assigned_to': assigned_to,\n                    'due_date': due_date,\n                    'source_file': file_path,\n                    'status': 'completed' if '[x]' in line else 'pending'\n                })\n\n    return action_items\n\ndef generate_action_report(vault_path):\n    \"\"\"Generate comprehensive action item report\"\"\"\n    all_actions = []\n\n    # Walk through meeting minutes\n    for root, dirs, files in os.walk(os.path.join(vault_path, '01-meetings/minutes')):\n        for file in files:\n            if file == 'action-items.md':\n                file_path = os.path.join(root, file)\n                actions = extract_action_items(file_path)\n                all_actions.extend(actions)\n\n    # Generate report\n    report = \"# Action Items Report\\n\\n\"\n    report += f\"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\\n\"\n\n    # Group by person\n    by_person = {}\n    for action in all_actions:\n        person = action['assigned_to']\n        if person not in by_person:\n            by_person[person] = []\n        by_person[person].append(action)\n\n    # Write report\n    for person, actions in sorted(by_person.items()):\n        report += f\"## {person}\\n\\n\"\n\n        pending = [a for a in actions if a['status'] == 'pending']\n        completed = [a for a in actions if a['status'] == 'completed']\n\n        report += f\"**Pending**: {len(pending)} | **Completed**: {len(completed)}\\n\\n\"\n\n        if pending:\n            report += \"### Pending Tasks\\n\\n\"\n            for action in sorted(pending, key=lambda x: x['due_date']):\n                report += f\"- [ ] **{action['task']}**\\n\"\n                report += f\"  - Due: {action['due_date']}\\n\"\n                report += f\"  - Source: {os.path.basename(os.path.dirname(action['source_file']))}\\n\\n\"\n\n    return report\n\nif __name__ == \"__main__\":\n    import sys\n    vault_path = sys.argv[1] if len(sys.argv) &gt; 1 else \".\"\n    report = generate_action_report(vault_path)\n\n    # Save report\n    with open(os.path.join(vault_path, 'action-items-report.md'), 'w') as f:\n        f.write(report)\n\n    print(\"\u2713 Action items report generated\")\n</code></pre>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#meeting-analytics","title":"Meeting Analytics","text":"Bash<pre><code>#!/bin/bash\n# meeting-analytics.sh - Generate meeting statistics\n\nVAULT_PATH=\"${1:-$HOME/Documents/druids-vault}\"\nYEAR=\"${2:-$(date +%Y)}\"\n\necho \"# Meeting Analytics Report - $YEAR\"\necho \"Generated: $(date)\"\necho\n\n# Count meetings by type\necho \"## Meetings by Type\"\nfind \"$VAULT_PATH/01-meetings/minutes/$YEAR\" -name \"minutes.md\" -type f | while read -r file; do\n    grep -h \"type: \" \"$file\" 2&gt;/dev/null || true\ndone | sort | uniq -c | while read count type; do\n    echo \"- ${type#type: }: $count\"\ndone\n\necho\necho \"## Attendance Trends\"\n\n# Average attendance\ntotal_attendance=0\nmeeting_count=0\n\nfind \"$VAULT_PATH/01-meetings/minutes/$YEAR\" -name \"minutes.md\" -type f | while read -r file; do\n    attendance=$(grep -A1 \"Present\" \"$file\" | grep -o \"[0-9]*\" | head -1)\n    if [ -n \"$attendance\" ]; then\n        total_attendance=$((total_attendance + attendance))\n        meeting_count=$((meeting_count + 1))\n    fi\ndone\n\nif [ $meeting_count -gt 0 ]; then\n    avg_attendance=$((total_attendance / meeting_count))\n    echo \"Average attendance: $avg_attendance members\"\nfi\n\necho\necho \"## Action Items Completion Rate\"\n\ntotal_actions=0\ncompleted_actions=0\n\nfind \"$VAULT_PATH/01-meetings/minutes/$YEAR\" -name \"action-items.md\" -type f | while read -r file; do\n    total=$(grep -c \"^\\- \\[[ x]\\]\" \"$file\" || true)\n    completed=$(grep -c \"^\\- \\[x\\]\" \"$file\" || true)\n\n    total_actions=$((total_actions + total))\n    completed_actions=$((completed_actions + completed))\ndone\n\nif [ $total_actions -gt 0 ]; then\n    completion_rate=$((completed_actions * 100 / total_actions))\n    echo \"Completion rate: $completion_rate% ($completed_actions/$total_actions)\"\nfi\n\necho\necho \"## Meeting Duration Analysis\"\n\n# Extract meeting durations\nfind \"$VAULT_PATH/01-meetings/minutes/$YEAR\" -name \"minutes.md\" -type f | while read -r file; do\n    start_time=$(grep \"start_time:\" \"$file\" | cut -d'\"' -f2)\n    end_time=$(grep \"end_time:\" \"$file\" | cut -d'\"' -f2)\n\n    if [ -n \"$start_time\" ] &amp;&amp; [ -n \"$end_time\" ]; then\n        # Calculate duration (requires date command that supports time math)\n        duration=$(( $(date -d \"$end_time\" +%s) - $(date -d \"$start_time\" +%s) ))\n        duration_min=$((duration / 60))\n\n        meeting_type=$(grep \"type:\" \"$file\" | awk '{print $2}')\n        echo \"$meeting_type: $duration_min minutes\"\n    fi\ndone | sort | awk '{\n    type=$1\n    duration=$2\n\n    count[type]++\n    total[type] += duration\n}\nEND {\n    for (t in count) {\n        avg = total[t] / count[t]\n        printf \"%s average: %.0f minutes\\n\", t, avg\n    }\n}'\n</code></pre>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#success-metrics","title":"Success Metrics","text":"<p>Track your meeting management effectiveness:</p> <ul> <li>Minutes completed within 24 hours: Target 100%</li> <li>Action items completed by deadline: Target 80%</li> <li>Member attendance rate: Track trends</li> <li>Meeting time efficiency: Stay within scheduled time</li> </ul>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#next-steps","title":"Next Steps","text":"<ol> <li>Customize templates for your organization</li> <li>Train all potential minute-takers</li> <li>Establish rotation schedule for meeting roles</li> <li>Create meeting archives structure</li> <li>Integrate with project management workflow</li> </ol> <p>Remember: Good meeting management is the backbone of democratic centralist organizations. Clear records enable accountability and collective decision-making.</p>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#quick-reference-guide","title":"Quick Reference Guide","text":"","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#meeting-roles-cheatsheet","title":"Meeting Roles Cheatsheet","text":"Role Responsibilities Key Tasks Facilitator Guide discussion, maintain focus Follow agenda, manage stack, enforce time Timekeeper Track time per agenda item Give warnings (5 min, 1 min), suggest moving on Stack Keeper Manage speaking order Track raised hands, ensure equity Minutes Taker Record decisions and discussions Focus on actions, decisions, key points Vibes Watcher Monitor group energy Suggest breaks, note tensions","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#quick-commands","title":"Quick Commands","text":"Bash<pre><code># Before meeting\n./setup-meeting.sh 2024-01-15 general\n\n# During meeting (in Obsidian)\nCtrl+T: Insert timestamp\nAlt+C: Insert checkbox\nCtrl+Shift+M: Meeting template\n\n# After meeting\n./track-action-items.py ~/druids-vault\ngit add meetings/2024/01-january/\ngit commit -m \"Add January general meeting minutes\"\ngit push\n</code></pre>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#meeting-minute-must-haves","title":"Meeting Minute Must-Haves","text":"<ul> <li> Date, time, location</li> <li> Attendance (present, apologies, guests)  </li> <li> All motions word-for-word</li> <li> Vote counts (Yes-No-Abstain)</li> <li> Action items with assignee and deadline</li> <li> Next meeting date</li> </ul>","tags":["implementation","workflows"]},{"location":"implement/workflows/meeting-workflow-guide/#common-motion-language","title":"Common Motion Language","text":"Markdown<pre><code>\"I move to...\"\n\"I move that we...\"\n\"I move to amend the motion by...\"\n\"I call the question\" (end debate)\n\"I move to table\" (postpone)\n\"Point of order\" (procedural issue)\n\"Point of information\" (question)\n</code></pre> <p>Backlinks:</p>","tags":["implementation","workflows"]},{"location":"implement/workflows/project-management-guide/","title":"Project Management Guide for DRUIDS","text":"","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#introduction","title":"Introduction","text":"<p>This guide demonstrates how to manage projects within the DRUIDS framework, from proposal through completion. It covers the full project lifecycle, task assignment, progress tracking, and integration with democratic centralist principles through the TPPS (Theory-Plan-Practice-Summation) cycle.</p>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Obsidian vault with Kanban and Tasks plugins</li> <li>Understanding of TPPS cycle</li> <li>Access to appropriate repository (L0 or L1)</li> <li>Basic Git knowledge for proposal workflow</li> </ul>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#project-lifecycle-overview","title":"Project Lifecycle Overview","text":"<pre><code>graph LR\n    A[Theory/Proposal] --&gt; B[Plan/Approval]\n    B --&gt; C[Practice/Implementation]\n    C --&gt; D[Summation/Review]\n    D --&gt; A</code></pre>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#tpps-integration","title":"TPPS Integration","text":"<ol> <li>Theory: Project conceived and proposed</li> <li>Plan: Detailed planning after approval</li> <li>Practice: Active implementation</li> <li>Summation: Review outcomes and lessons learned</li> </ol>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#step-by-step-project-workflow","title":"Step-by-Step Project Workflow","text":"","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#1-project-proposal-theory-phase","title":"1. Project Proposal (Theory Phase)","text":"","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#time-estimate-1-2-hours","title":"Time Estimate: 1-2 hours","text":"<p>a) Create Project Proposal</p> <p>Create file: <code>02-projects/proposals/YYYY-project-name-proposal.md</code></p> Markdown<pre><code>---\ndocument_id: INT-PRJ-2024-001-L1\ntitle: \"Project Proposal: Member Education Platform\"\ntype: proposal\nsecurity: L1\nstatus: draft\nproposed_by: \"Member A\"\nproposed_date: 2024-01-20\ntpps_phase: theory\ntags: [project, proposal, education]\n---\n\n# Project Proposal: Member Education Platform\n\n## Executive Summary\n\nBrief 2-3 sentence overview of what this project will accomplish and why it matters to the organization.\n\n## Problem Statement\n\n### Current Situation\n- New members struggle to find educational resources\n- Training materials scattered across different platforms\n- No clear learning progression path\n\n### Impact\n- Slower member development\n- Inconsistent political education\n- Higher dropout rate for new members\n\n## Proposed Solution\n\n### Overview\nCreate a centralized education platform in Obsidian that provides:\n- Structured learning paths\n- Progress tracking\n- Resource library\n- Self-assessment tools\n\n### Key Features\n1. **Onboarding Path**: 30-day structured program\n2. **Resource Library**: Searchable, tagged content\n3. **Progress Dashboard**: Visual tracking of completion\n4. **Assessment System**: Knowledge checks and practical exercises\n\n## Success Criteria\n\n- [ ] 80% of new members complete onboarding within 45 days\n- [ ] Average satisfaction rating of 4/5 or higher\n- [ ] 50+ educational resources organized and accessible\n- [ ] Automated progress tracking functioning\n\n## Resource Requirements\n\n### Human Resources\n- Project Lead: 10 hours/week for 8 weeks\n- Tech Support: 5 hours/week for 8 weeks\n- Content Team: 3 people \u00d7 5 hours/week for 6 weeks\n\n### Technical Resources\n- Obsidian Enterprise license (if needed)\n- Additional plugins: $0 (all free)\n- Hosting: Using existing infrastructure\n\n### Budget\n- Total: $500\n  - Documentation materials: $200\n  - Design assets: $150\n  - Contingency: $150\n\n## Timeline\n\n### Phase 1: Planning (Weeks 1-2)\n- Finalize requirements\n- Set up project structure\n- Assign team roles\n\n### Phase 2: Development (Weeks 3-6)\n- Create templates\n- Develop content\n- Build dashboards\n\n### Phase 3: Testing (Week 7)\n- User testing with 5 volunteers\n- Gather feedback\n- Make adjustments\n\n### Phase 4: Launch (Week 8)\n- Full rollout\n- Training sessions\n- Documentation finalized\n\n## Risks and Mitigation\n\n| Risk | Likelihood | Impact | Mitigation |\n|------|------------|---------|------------|\n| Volunteer availability | High | Medium | Have backup assignees |\n| Technical complexity | Medium | High | Start with MVP, iterate |\n| Content quality | Low | High | Peer review process |\n\n## Alternatives Considered\n\n1. **External LMS**: Too expensive, doesn't integrate with existing tools\n2. **Google Docs System**: Lacks structure and tracking\n3. **No Change**: Problems will compound as organization grows\n\n## Recommendation\n\nApprove this project for implementation with the understanding that we'll start with a minimum viable product and iterate based on member feedback.\n\n## Appendices\n\n- A: Detailed Technical Specifications\n- B: Sample Learning Path\n- C: Budget Breakdown\n</code></pre> <p>b) Submit via Git Workflow</p> Bash<pre><code># Create proposal branch\ngit checkout -b proposal/education-platform\n\n# Add and commit proposal\ngit add 02-projects/proposals/2024-education-platform-proposal.md\ngit commit -m \"feat: propose member education platform project\"\n\n# Push to remote\ngit push -u origin proposal/education-platform\n</code></pre> <p>c) Create Pull Request</p> <p>Via GitHub/GitLab:</p> <ol> <li>Open PR from <code>proposal/education-platform</code> to <code>main</code></li> <li>Add description summarizing the proposal</li> <li>Tag relevant reviewers</li> <li>Set \"proposal\" label</li> </ol>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#2-project-planning-plan-phase","title":"2. Project Planning (Plan Phase)","text":"","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#time-estimate-2-3-hours","title":"Time Estimate: 2-3 hours","text":"<p>After proposal approval, create detailed project plan.</p> <p>a) Create Project Folder Structure</p> Text Only<pre><code>02-projects/active/education-platform/\n\u251c\u2500\u2500 README.md           # Project overview\n\u251c\u2500\u2500 project-plan.md     # Detailed plan\n\u251c\u2500\u2500 meetings/          # Project meeting notes\n\u251c\u2500\u2500 tasks/            # Task breakdowns\n\u251c\u2500\u2500 resources/        # Reference materials\n\u2514\u2500\u2500 summation/        # Review documents\n</code></pre> <p>b) Create Project Plan</p> <p><code>project-plan.md</code>:</p> Markdown<pre><code>---\ndocument_id: INT-PRJ-2024-002-L1\ntitle: \"Project Plan: Member Education Platform\"\ntype: project-plan\nsecurity: L1\nstatus: active\nproject_lead: \"Member A\"\nstart_date: 2024-02-01\ntarget_end_date: 2024-03-31\ntpps_phase: plan\ntags: [project, active, education]\n---\n\n# Project Plan: Member Education Platform\n\n## Project Charter\n\n### Vision\nCreate the most accessible and effective political education system for revolutionary organizations.\n\n### Mission\nBuild an Obsidian-based education platform that guides new members through their development journey with clear paths, trackable progress, and quality resources.\n\n### Stakeholders\n- **Sponsor**: Education Committee\n- **Lead**: Member A\n- **Team**: Members B, C, D (Tech), E, F, G (Content)\n- **Users**: All current and future members\n\n## Work Breakdown Structure\n\n### 1. Project Setup (Week 1)\n- [x] Create project repository structure\n- [x] Set up project Kanban board\n- [ ] Schedule weekly team meetings\n- [ ] Create communication channels\n- [ ] Develop project templates\n\n### 2. Requirements Gathering (Week 1-2)\n- [ ] Interview 10 existing members\n- [ ] Survey new members from last 6 months\n- [ ] Analyze current resource usage\n- [ ] Document user stories\n- [ ] Prioritize features\n\n### 3. Technical Architecture (Week 2-3)\n- [ ] Design folder structure\n- [ ] Create Dataview queries\n- [ ] Develop progress tracking system\n- [ ] Build template library\n- [ ] Test plugin compatibility\n\n### 4. Content Development (Week 3-6)\n- [ ] Audit existing materials\n- [ ] Create content templates\n- [ ] Write core curriculum\n- [ ] Develop assessments\n- [ ] Peer review all content\n\n### 5. Dashboard Creation (Week 4-5)\n- [ ] Design progress dashboard\n- [ ] Create resource browser\n- [ ] Build reporting queries\n- [ ] Implement search system\n- [ ] Add visual elements\n\n### 6. Testing &amp; Feedback (Week 7)\n- [ ] Recruit test users\n- [ ] Create test scenarios\n- [ ] Gather feedback\n- [ ] Fix identified issues\n- [ ] Document lessons learned\n\n### 7. Launch Preparation (Week 8)\n- [ ] Finalize documentation\n- [ ] Create training materials\n- [ ] Plan launch event\n- [ ] Prepare support resources\n- [ ] Communication plan\n\n## Kanban Board\n\nUsing Obsidian Kanban plugin in `tasks/kanban.md`:\n\n```kanban\n## Backlog\n- [ ] Create user interview questions\n- [ ] Design assessment framework\n- [ ] Set up analytics tracking\n\n## To Do\n- [ ] Schedule kickoff meeting\n- [ ] Create project templates\n- [ ] Define success metrics\n\n## In Progress\n- [ ] Set up project structure\n\n## Review\n- [ ] Project proposal\n\n## Done\n- [x] Get project approval\n</code></pre>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#team-assignments","title":"Team Assignments","text":"Team Member Role Responsibilities Hours/Week Member A Project Lead Coordination, architecture 10 Member B Tech Lead Technical implementation 8 Member C Content Lead Curriculum development 8 Member D Developer Dashboard creation 5 Member E Writer Content creation 5 Member F Reviewer Quality assurance 5","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#communication-plan","title":"Communication Plan","text":"","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#regular-meetings","title":"Regular Meetings","text":"<ul> <li>Weekly Team Sync: Mondays 7pm</li> <li>Stakeholder Updates: Bi-weekly Thursdays</li> <li>Working Sessions: Wednesdays 6pm (optional)</li> </ul>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#channels","title":"Channels","text":"<ul> <li>Primary: #education-platform (Discord/Slack)</li> <li>Documents: This project folder</li> <li>Issues: GitHub/GitLab issues</li> </ul>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#reporting","title":"Reporting","text":"<ul> <li>Weekly status in team meeting</li> <li>Bi-weekly report to Education Committee</li> <li>Monthly update at general meeting</li> </ul>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#risk-register","title":"Risk Register","text":"ID Risk Probability Impact Response Owner R1 Key volunteer leaves Medium High Document all work, pair on tasks Lead R2 Scope creep High Medium Strict change control process Lead R3 Technical issues Low High MVP approach, fallback plans Tech R4 Low adoption Medium High User involvement, marketing Content","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#quality-standards","title":"Quality Standards","text":"","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#codetechnical","title":"Code/Technical","text":"<ul> <li>All Dataview queries tested</li> <li>Templates reviewed by 2 people</li> <li>Documentation for all features</li> </ul>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#content","title":"Content","text":"<ul> <li>Peer review required</li> <li>Consistent formatting</li> <li>Accessibility checked</li> </ul>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#process","title":"Process","text":"<ul> <li>Weekly retrospectives</li> <li>Continuous improvement</li> <li>User feedback loops</li> </ul> Text Only<pre><code>### 3. Project Implementation (Practice Phase)\n\n#### Time Estimate: Ongoing throughout project\n\n**a) Daily Task Management**\n\nUsing Tasks plugin in daily notes:\n\n```markdown\n## Education Platform Tasks\n\n### High Priority\n- [ ] \u23eb Interview Member H about onboarding experience \ud83d\udcc5 2024-02-05\n- [ ] \u23eb Create lesson plan template @Member-E \ud83d\udcc5 2024-02-06\n\n### In Progress\n- [ ] \ud83d\udd04 Design progress dashboard mockup @Member-D\n\n### Blocked\n- [ ] \ud83d\udeab Set up test environment (waiting for access)\n\n### Completed Today\n- [x] \u2705 Created folder structure @Member-B \u2705 2024-02-03\n- [x] \u2705 Wrote user story for progress tracking \u2705 2024-02-03\n</code></pre> <p>b) Progress Tracking Dashboard</p> <p>Create <code>projects/active/education-platform/progress-dashboard.md</code>:</p> Markdown<pre><code>---\ndocument_id: INT-PRJ-2024-003-L1\ntitle: \"Education Platform - Progress Dashboard\"\ntype: dashboard\nsecurity: L1\nupdated: 2024-02-15\n---\n\n# Education Platform Progress Dashboard\n\n## Overall Progress\n\n```dataview\nTABLE WITHOUT ID\n  \"Week \" + week as Week,\n  planned as \"Planned\",\n  completed as \"Completed\", \n  percentage as \"Progress\"\nFROM \"02-projects/active/education-platform/tasks\"\nWHERE week != null\nSORT week ASC\n</code></pre>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#current-sprint-week-3","title":"Current Sprint (Week 3)","text":"","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#burndown","title":"Burndown","text":"<ul> <li>Total Tasks: 15</li> <li>Completed: 8</li> <li>In Progress: 4</li> <li>Remaining: 3</li> </ul>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#by-assignee","title":"By Assignee","text":"Text Only<pre><code>TABLE \n  length(filter(file.tasks, (t) =&gt; !t.completed)) as \"Open\",\n  length(filter(file.tasks, (t) =&gt; t.completed)) as \"Done\",\n  length(file.tasks) as \"Total\"\nFROM \"02-projects/active/education-platform\"\nWHERE file.tasks\nGROUP BY assignee\n</code></pre>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#milestones","title":"Milestones","text":"<ul> <li> Project Kickoff (Feb 1)</li> <li> Requirements Complete (Feb 14)</li> <li> Technical Architecture (Feb 21)</li> <li> Content MVP (Mar 7)</li> <li> Testing Complete (Mar 21)</li> <li> Launch (Mar 28)</li> </ul>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#risk-status","title":"Risk Status","text":"<p>\ud83d\udfe2 Green: On track \ud83d\udfe1 Yellow: Minor issues, monitoring \ud83d\udd34 Red: Major issues, intervention needed</p> <p>Current Status: \ud83d\udfe2 Green</p>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#resource-utilization","title":"Resource Utilization","text":"Team Member Planned Hrs Actual Hrs Variance Member A 30 28 -2 Member B 24 26 +2 Member C 24 20 -4","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#key-decisions-this-week","title":"Key Decisions This Week","text":"<ol> <li>Chose Dataview over custom plugin for progress tracking</li> <li>Reduced initial scope to core 5 learning paths</li> <li>Delayed video content to Phase 2</li> </ol>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#blockers","title":"Blockers","text":"<ul> <li> Need Obsidian Enterprise license decision</li> <li> Waiting for content review from Education Committee</li> </ul>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#next-week-focus","title":"Next Week Focus","text":"<ol> <li>Complete technical architecture</li> <li>Begin content template creation</li> <li>User testing recruitment</li> </ol> Text Only<pre><code>**c) Meeting Documentation**\n\nFor project meetings, use adapted meeting template:\n\n```markdown\n---\ndocument_id: INT-MIN-2024-004-L1  \ntitle: \"Education Platform - Week 3 Sync\"\ntype: project-meeting\nsecurity: L1\ndate: 2024-02-12\nattendees: [\"Member A\", \"Member B\", \"Member C\", \"Member D\"]\ntpps_phase: practice\n---\n\n# Education Platform - Week 3 Sync\n\n## Agenda\n1. Progress review (10 min)\n2. Blockers discussion (15 min)\n3. Next week planning (15 min)\n4. Technical decisions (10 min)\n\n## Progress Updates\n\n### Member A (Project Lead)\n- Completed stakeholder interviews\n- Identified 3 key user personas\n- **Blockers**: Need decision on license\n\n### Member B (Tech Lead)\n- Set up development environment\n- Created basic folder structure\n- **Next**: Dashboard prototypes\n\n## Decisions Made\n\n1. **Use Dataview for all reporting**\n   - Rationale: Simpler than custom solution\n   - Impact: Saves 2 weeks development\n\n2. **Start with text-only content**\n   - Rationale: Video production too complex\n   - Impact: Can launch 3 weeks earlier\n\n## Action Items\n\n- [ ] @Member-A: Schedule license discussion with Treasury\n- [ ] @Member-B: Share dashboard mockups by Thursday\n- [ ] @Member-C: Complete first learning path draft\n- [ ] @All: Review user personas document\n\n## Next Meeting\nFebruary 19, 2024 @ 7pm\n</code></pre>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#4-project-completion-summation-phase","title":"4. Project Completion (Summation Phase)","text":"","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#time-estimate-3-4-hours","title":"Time Estimate: 3-4 hours","text":"<p>a) Create Summation Document</p> <p><code>summation/project-summation.md</code>:</p> Markdown<pre><code>---\ndocument_id: INT-PRJ-2024-010-L1\ntitle: \"Project Summation: Member Education Platform\"\ntype: summation\nsecurity: L1\nproject_id: education-platform\ncompleted_date: 2024-03-28\ntpps_phase: summation\ntags: [project, summation, lessons-learned]\n---\n\n# Project Summation: Member Education Platform\n\n## Executive Summary\n\nThe Member Education Platform project successfully delivered a comprehensive Obsidian-based learning system for new and existing members. Launched on March 28, 2024, the platform has already onboarded 15 new members with an average satisfaction rating of 4.6/5.\n\n## Objectives vs Outcomes\n\n### Primary Objectives\n\n\u2705 **Create centralized education platform**\n- Delivered: Complete Obsidian vault with 50+ resources\n- Organized in clear learning paths\n- Searchable and tagged content\n\n\u2705 **Implement progress tracking**\n- Delivered: Automated dashboard using Dataview\n- Individual progress files for each member\n- Weekly cohort reports\n\n\u26a0\ufe0f **80% completion rate in 45 days**\n- Current: 67% (10/15 members)\n- Note: Only 30 days since launch, trending positive\n\n\u2705 **Resource library with 50+ items**\n- Delivered: 73 resources created/curated\n- Exceeded target by 46%\n\n## What Worked Well\n\n### Technical Successes\n1. **Dataview Integration**: Powerful reporting without custom code\n2. **Template System**: Consistency across all content\n3. **Git Workflow**: Version control for all materials\n\n### Process Successes\n1. **Weekly Syncs**: Kept team aligned and motivated\n2. **User Involvement**: Early feedback shaped final product\n3. **Scope Management**: Successfully resisted feature creep\n\n### Team Successes\n1. **Cross-functional Collaboration**: Tech and content teams worked seamlessly\n2. **Volunteer Retention**: No key members left project\n3. **Knowledge Transfer**: All team members can now maintain system\n\n## Challenges and Lessons Learned\n\n### Challenge 1: Mobile Accessibility\n- **Issue**: Obsidian mobile limitations for new users\n- **Impact**: Some members couldn't access on phones\n- **Resolution**: Created PDF quick-starts for mobile\n- **Lesson**: Consider platform limitations early\n\n### Challenge 2: Content Review Bottleneck\n- **Issue**: Single reviewer created delays\n- **Impact**: 1-week delay in content delivery\n- **Resolution**: Implemented peer review system\n- **Lesson**: Avoid single points of failure\n\n### Challenge 3: Adoption Resistance\n- **Issue**: Some longtime members reluctant to change\n- **Impact**: Slower rollout to existing members\n- **Resolution**: Created \"bridge\" content showing benefits\n- **Lesson**: Plan change management, not just technical delivery\n\n## Metrics and Analytics\n\n### Usage Statistics (First 30 Days)\n- Total Users: 47 (15 new, 32 existing)\n- Daily Active Users: 23 average\n- Resources Accessed: 1,247 total views\n- Most Popular: \"Political Economy 101\" (89 views)\n\n### Satisfaction Metrics\n- Overall Rating: 4.6/5 (n=28)\n- Ease of Use: 4.3/5\n- Content Quality: 4.8/5\n- Would Recommend: 92%\n\n### Time Investment\n- Planned: 280 total hours\n- Actual: 312 hours (+11%)\n- ROI: 32 hours saved already in member onboarding\n\n## Recommendations for Future Projects\n\n### Technical Recommendations\n1. Start with mobile compatibility requirements\n2. Build analytics tracking from day one\n3. Create automated testing for Dataview queries\n\n### Process Recommendations\n1. Include change management in project plan\n2. Build in 20% buffer for volunteer projects\n3. Create project template based on this experience\n\n### Team Recommendations\n1. Pair critical roles from start\n2. Document decisions in real-time\n3. Celebrate milestones to maintain momentum\n\n## Future Enhancements (Phase 2)\n\nBased on user feedback and lessons learned:\n\n1. **Mobile App Integration** (High Priority)\n   - Native mobile experience\n   - Offline capability\n   - Push notifications for learning reminders\n\n2. **Advanced Analytics** (Medium Priority)\n   - Cohort comparison tools\n   - Predictive completion modeling\n   - Engagement heatmaps\n\n3. **Social Features** (Low Priority)\n   - Study groups\n   - Peer mentoring system\n   - Achievement badges\n\n## Financial Summary\n\n| Category | Budgeted | Actual | Variance |\n|----------|----------|---------|-----------|\n| Materials | $200 | $180 | -$20 |\n| Design | $150 | $200 | +$50 |\n| Contingency | $150 | $70 | -$80 |\n| **Total** | **$500** | **$450** | **-$50** |\n\nReturned $50 to general fund.\n\n## Acknowledgments\n\nSpecial thanks to:\n- Education Committee for sponsorship and guidance\n- All volunteer contributors who donated 312 hours\n- Beta testers who provided invaluable feedback\n- General membership for approving initial proposal\n\n## Appendices\n\n1. Full Analytics Report\n2. User Feedback Compilation\n3. Technical Documentation\n4. Content Inventory\n5. Lessons Learned Workshop Notes\n\n---\n\n*\"The success of this project demonstrates what's possible when we combine clear vision, collective effort, and commitment to our shared political development.\"* - Project Team\n</code></pre> <p>b) Archive Project</p> <ol> <li>Move from <code>active/</code> to <code>archive/</code>:</li> </ol> Bash<pre><code>mv 02-projects/active/education-platform 02-projects/archive/2024-education-platform\n</code></pre> <ol> <li>Update project status in all documents</li> <li>Create archive README with quick reference</li> </ol>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#integration-with-other-systems","title":"Integration with Other Systems","text":"","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#task-management-integration","title":"Task Management Integration","text":"<p>Link project tasks to daily notes:</p> Markdown<pre><code>## Daily Tasks - 2024-02-15\n\n### Education Platform \n- [ ] Review dashboard mockup &lt;!-- [Dashboard Design](dashboard-design.md){#885b901dd153013fa8d8a65069d7d2ed} --&gt;\n- [ ] Test progress tracking &lt;!-- [Progress Tracking](progress-tracking.md){#7e456ae514f2fb76fc4395c4e361868f} --&gt;\n\n### Other Projects\n- [ ] Security audit preparation\n</code></pre>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#meeting-integration","title":"Meeting Integration","text":"<p>Include project updates in general meetings:</p> Markdown<pre><code>### Committee Reports\n\n#### Tech Committee (Member B reporting)\n\n**Education Platform Update**:\n- Week 3 of 8 complete\n- On track for March 28 launch\n- Need decision on licensing\n- Full report: &lt;!-- [Progress Dashboard](progress-dashboard.md){#eab46566d157173c7d514d925979b3e8} --&gt;\n</code></pre>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#templates-for-project-management","title":"Templates for Project Management","text":"","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#quick-project-template","title":"Quick Project Template","text":"<p><code>templates/project-quick.md</code>:</p> Markdown<pre><code>---\ndocument_id: {{value:document_id}}\ntitle: \"Project: {{value:name}}\"\ntype: project-plan\nsecurity: {{value:security}}\nstatus: proposed\nlead: \"{{value:lead}}\"\ntpps_phase: theory\n---\n\n# Project: {{value:name}}\n\n## Quick Summary\n&lt;!-- 2-3 sentences on what and why --&gt;\n\n## Success Criteria\n- [ ] \n- [ ] \n- [ ] \n\n## Timeline\n- Start: {{date}}\n- End: {{date:+2M}}\n\n## Team\n- Lead: {{value:lead}}\n- Support: \n\n## Next Steps\n1. \n2. \n3. \n</code></pre>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#common-pitfalls-and-solutions","title":"Common Pitfalls and Solutions","text":"<p>Issue: \"Projects never complete\"</p> <ul> <li>Solution: Define clear success criteria upfront</li> <li>Tool: Regular milestone reviews</li> </ul> <p>Issue: \"Scope creep kills timeline\"  </p> <ul> <li>Solution: Change control process</li> <li>Practice: Document all scope changes</li> </ul> <p>Issue: \"No one knows project status\"</p> <ul> <li>Solution: Public dashboards</li> <li>Rhythm: Weekly updates</li> </ul>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#success-metrics","title":"Success Metrics","text":"<ul> <li>Projects completed on time: Target 70%</li> <li>Projects within scope: Target 80%  </li> <li>Team satisfaction: Target \u2158</li> <li>Lessons learned documented: 100%</li> </ul>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/project-management-guide/#next-steps","title":"Next Steps","text":"<ol> <li>Create your first project proposal</li> <li>Set up project templates</li> <li>Train project leads on methodology</li> <li>Establish project review rhythm</li> <li>Build project portfolio dashboard</li> </ol> <p>Remember: DRUIDS project management emphasizes collective ownership, transparent progress, and continuous learning through the TPPS cycle.</p> <p>Backlinks:</p>","tags":["project-management","tpps","workflow","democratic-centralism"]},{"location":"implement/workflows/proposal-process/","title":"Proposal Process Workflow","text":"<p>This guide walks through the complete process of creating, discussing, and implementing proposals using DRUIDS democratic centralist framework.</p>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#overview","title":"Overview","text":"<p>The proposal process embodies democratic centralism by ensuring thorough discussion before unified implementation. Every member can propose ideas, and all members participate in democratic decision-making.</p>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#process-stages","title":"Process Stages","text":"","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#stage-1-proposal-creation","title":"Stage 1: Proposal Creation","text":"","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#step-1-create-proposal-document","title":"Step 1: Create Proposal Document","text":"<p>Use the proposal template:</p> Markdown<pre><code>      ---\n      title: \"Proposal: [Descriptive Title]\"\n      date: 2024-01-15\n      type: proposal\n      status: draft\n      author: [Your Name]\n      security: L0\n      tags:\n      - proposal\n      - [relevant-topic]\n      ---\n\n      # Proposal: [Title]\n\n      ## Summary\n      [One paragraph summary of the proposal]\n\n      ## Background\n      [Why is this proposal needed? What problem does it solve?]\n\n      ## Proposal Details\n      [Detailed description of what you're proposing]\n\n      ## Implementation Plan\n      1. [Step 1]\n      2. [Step 2]\n      3. [Step 3]\n\n      ## Resources Required\n      - Human: [Who needs to be involved]\n      - Time: [Estimated timeline]\n      - Material: [Any material resources needed]\n\n      ## Success Metrics\n      - [How will we measure success?]\n      - [What are the concrete outcomes?]\n\n      ## Risks and Mitigation\n      - Risk: [Potential problem]\n      Mitigation: [How to address it]\n</code></pre>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#step-2-develop-your-proposal","title":"Step 2: Develop Your Proposal","text":"<ol> <li>Research thoroughly</li> <li>Check for similar past proposals</li> <li>Gather supporting data</li> <li> <p>Consult affected members</p> </li> <li> <p>Be specific</p> </li> <li>Concrete actions, not vague ideas</li> <li>Clear timeline and responsibilities</li> <li> <p>Measurable outcomes</p> </li> <li> <p>Consider implications</p> </li> <li>Security impacts</li> <li>Resource requirements</li> <li>Organizational capacity</li> </ol>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#step-3-internal-review","title":"Step 3: Internal Review","text":"<p>Before submission:</p> <ul> <li>Review with trusted comrades</li> <li>Check alignment with principles</li> <li>Ensure completeness</li> <li>Verify security classification</li> </ul>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#stage-2-submission","title":"Stage 2: Submission","text":"","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#git-workflow-recommended","title":"Git Workflow (Recommended)","text":"<ol> <li>Create proposal branch</li> </ol> Bash<pre><code>git checkout -b proposal/your-proposal-name\n</code></pre> <ol> <li>Add your proposal</li> </ol> Bash<pre><code>git add proposals/2024-01-your-proposal.md\ngit commit -m \"proposal: Add [proposal name]\"\ngit push origin proposal/your-proposal-name\n</code></pre> <ol> <li> <p>Open Pull Request</p> </li> <li> <p>Title: \"Proposal: [Your Proposal Title]\"</p> </li> <li>Description: Include summary and discussion points</li> <li>Label: \"proposal\", \"needs-discussion\"</li> </ol>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#non-git-workflow","title":"Non-Git Workflow","text":"<ol> <li>Save proposal in <code>proposals/</code> folder</li> <li>Share with designated coordinator</li> <li>Request addition to meeting agenda</li> </ol>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#stage-3-discussion-phase","title":"Stage 3: Discussion Phase","text":"","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#pre-meeting-discussion","title":"Pre-Meeting Discussion","text":"<ol> <li>Announcement</li> <li>Proposal shared with appropriate security level</li> <li>Minimum 3 days for review</li> <li> <p>Comments collected via:</p> <ul> <li>PR comments (Git)</li> <li>Discussion forum</li> <li>Designated channel</li> </ul> </li> <li> <p>Clarification</p> </li> <li>Author responds to questions</li> <li>Updates proposal if needed</li> <li>Documents concerns raised</li> </ol>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#meeting-discussion","title":"Meeting Discussion","text":"<ol> <li>Presentation (5-10 minutes)</li> <li>Author presents key points</li> <li>Focus on problem and solution</li> <li> <p>Highlight resource needs</p> </li> <li> <p>Q&amp;A (10-15 minutes)</p> </li> <li>Clarifying questions first</li> <li>Then substantive discussion</li> <li> <p>Document all points raised</p> </li> <li> <p>Debate (time varies)</p> </li> <li>Arguments for and against</li> <li>Alternative proposals</li> <li> <p>Synthesis attempts</p> </li> <li> <p>Refinement</p> </li> <li>Amendments proposed</li> <li>Consensus building</li> <li>Final proposal shape</li> </ol>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#stage-4-decision","title":"Stage 4: Decision","text":"","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#voting-process","title":"Voting Process","text":"<ol> <li>Call for Vote</li> <li>Clear statement of proposal</li> <li>Any final amendments included</li> <li> <p>Voting method announced</p> </li> <li> <p>Vote Recording</p> </li> </ol> Markdown<pre><code> ## Decision Record\n Date: 2024-01-15\n Proposal: [Title]\n Result: Approved/Rejected\n Vote Count: Y-N-A (Yes-No-Abstain)\n</code></pre> <ol> <li>Documentation</li> <li>Update proposal status</li> <li>Record in meeting minutes</li> <li>Create decision document</li> </ol>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#decision-types","title":"Decision Types","text":"<ul> <li>Consensus: All agree (preferred)</li> <li>Majority: Over 50% approve</li> <li>Supermajority: \u2154 approve (for major changes)</li> <li>Postponed: Needs more development</li> </ul>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#stage-5-implementation","title":"Stage 5: Implementation","text":"","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#if-approved","title":"If Approved","text":"<ol> <li>Create Implementation Plan</li> </ol> Markdown<pre><code> ---\n title: \"Implementation: [Proposal Title]\"\n type: implementation\n status: active\n proposal_ref: &lt;!-- `Original Proposal` --&gt;\n owner: [Responsible Person]\n deadline: 2024-02-15\n ---\n\n # Implementation Plan\n\n ## Decision Summary\n [What was decided]\n\n ## Action Items\n - [ ] Task 1 - Owner - Due Date\n - [ ] Task 2 - Owner - Due Date\n - [ ] Task 3 - Owner - Due Date\n\n ## Progress Updates\n ### 2024-01-16\n - Started work on Task 1\n - Assigned team members\n</code></pre> <ol> <li>Assign Responsibilities</li> <li>Clear task ownership</li> <li>Concrete deadlines</li> <li> <p>Reporting structure</p> </li> <li> <p>Track Progress</p> </li> <li>Regular updates</li> <li>Dashboard monitoring</li> <li>Blocker identification</li> </ol>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#if-rejected","title":"If Rejected","text":"<ol> <li>Document Reasons</li> <li>Why rejected</li> <li>What would need to change</li> <li> <p>Lessons learned</p> </li> <li> <p>Archive Proposal</p> </li> <li>Move to <code>archive/proposals/rejected/</code></li> <li>Maintain for future reference</li> <li>Link from decision record</li> </ol>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#stage-6-evaluation","title":"Stage 6: Evaluation","text":"","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#progress-review","title":"Progress Review","text":"<p>Weekly/Monthly:</p> <ul> <li>Check implementation status</li> <li>Address blockers</li> <li>Adjust timeline if needed</li> <li>Report to organization</li> </ul>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#completion","title":"Completion","text":"<ol> <li>Final Report</li> <li>Outcomes achieved</li> <li>Metrics comparison</li> <li>Lessons learned</li> <li> <p>Recommendations</p> </li> <li> <p>Archive</p> </li> <li>Move to <code>archive/proposals/completed/</code></li> <li>Update all references</li> <li>Extract best practices</li> </ol>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#security-considerations","title":"Security Considerations","text":"","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#classification-guidelines","title":"Classification Guidelines","text":"<ul> <li>L0 (Public): General organizational improvements</li> <li>L1 (Candidate): Internal process changes</li> <li>L2 (Cadre): Strategic or sensitive proposals</li> </ul>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#access-control","title":"Access Control","text":"<ul> <li>Only appropriate security levels in discussion</li> <li>Sanitized versions for lower levels if needed</li> <li>Compartmentalization of sensitive details</li> </ul>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#best-practices","title":"Best Practices","text":"","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#for-proposal-authors","title":"For Proposal Authors","text":"<ol> <li>Start early: Don't rush proposals</li> <li>Seek input: Talk to affected members first</li> <li>Be flexible: Expect modifications</li> <li>Stay engaged: Participate throughout process</li> </ol>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#for-reviewers","title":"For Reviewers","text":"<ol> <li>Read thoroughly: Understand before commenting</li> <li>Be constructive: Suggest improvements</li> <li>Consider broadly: Think of all implications</li> <li>Respect process: Follow democratic procedures</li> </ol>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#for-implementation","title":"For Implementation","text":"<ol> <li>Act promptly: Start implementation quickly</li> <li>Communicate regularly: Keep organization informed</li> <li>Document everything: Maintain clear records</li> <li>Evaluate honestly: Report real outcomes</li> </ol>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#proposal-ignored","title":"\"Proposal ignored\"","text":"<ul> <li>Ensure proper submission process followed</li> <li>Check if reached right audience</li> <li>Consider timing and priorities</li> <li>Resubmit with improvements</li> </ul>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#discussion-dominated-by-few","title":"\"Discussion dominated by few\"","text":"<ul> <li>Facilitator ensures equal participation</li> <li>Use written comments option</li> <li>Break into smaller groups</li> <li>Set speaking time limits</li> </ul>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#implementation-stalls","title":"\"Implementation stalls\"","text":"<ul> <li>Review resource allocation</li> <li>Check if plan was realistic</li> <li>Identify and address blockers</li> <li>Consider modifications</li> </ul>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#tools-and-templates","title":"Tools and Templates","text":"","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#dataview-queries","title":"Dataview Queries","text":"<p>Active Proposals:</p> SQL<pre><code>TABLE status, author, date\nFROM \"proposals\"\nWHERE type = \"proposal\" AND status = \"active\"\nSORT date DESC\n</code></pre> <p>Implementation Tracking:</p> SQL<pre><code>TASK\nFROM \"implementation\"\nWHERE !completed\nGROUP BY file.name\n</code></pre>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#git-commands","title":"Git Commands","text":"Bash<pre><code># Create proposal branch\ngit checkout -b proposal/descriptive-name\n\n# Update proposal\ngit add proposals/your-proposal.md\ngit commit -m \"proposal: Update based on feedback\"\n\n# After approval, merge\ngit checkout main\ngit merge proposal/descriptive-name\n</code></pre>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/proposal-process/#next-steps","title":"Next Steps","text":"<ol> <li>Review existing proposals for examples</li> <li>Draft your first proposal</li> <li>Seek feedback before submission</li> <li>Participate in others' proposals</li> <li>Learn from the process</li> </ol> <p>Remember: The proposal process is how we make collective decisions democratically. Every proposal, whether approved or not, helps develop our collective understanding and unity.</p> <p>Backlinks:</p>","tags":["workflow","democracy","decision-making","proposals"]},{"location":"implement/workflows/task-management/","title":"DRUIDS Task Status Guide","text":"","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#overview","title":"Overview","text":"<p>The Tasks plugin in DRUIDS uses an expanded set of status types to support democratic centralist workflows. This guide explains each status and when to use them.</p>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#standard-task-statuses","title":"Standard Task Statuses","text":"","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#todo","title":"Todo","text":"<ul> <li>Symbol: Space (empty checkbox)</li> <li>Meaning: Task not yet started</li> <li>Next Status: <code>/</code> (In Progress)</li> <li>Usage: Default state for new tasks</li> </ul>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#in-progress","title":"<code>/</code> In Progress","text":"<ul> <li>Symbol: Forward slash</li> <li>Meaning: Actively being worked on</li> <li>Next Status: <code>x</code> (Done)</li> <li>Usage: Mark when you begin work</li> </ul>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#x-done","title":"<code>x</code> Done","text":"<ul> <li>Symbol: x</li> <li>Meaning: Task completed</li> <li>Next Status:  (Todo)</li> <li>Usage: Mark when work is finished</li> </ul>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#-cancelled","title":"<code>-</code> Cancelled","text":"<ul> <li>Symbol: Hyphen</li> <li>Meaning: Task no longer needed</li> <li>Next Status:  (Todo)</li> <li>Usage: For obsolete or rejected tasks</li> </ul>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#democratic-workflow-statuses","title":"Democratic Workflow Statuses","text":"","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#blocked","title":"<code>\u23f8\ufe0f</code> Blocked","text":"<ul> <li>Symbol: Pause emoji</li> <li>Meaning: Cannot proceed due to dependency</li> <li>Next Status: <code>/</code> (In Progress)</li> <li>Usage:</li> <li>Waiting for another task to complete</li> <li>Needs approval or resources</li> <li>External dependencies</li> </ul> <p>Example:</p> Markdown<pre><code>- [\u23f8\ufe0f] Implement new feature (blocked by #123)\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#under-review","title":"<code>\ud83d\udd04</code> Under Review","text":"<ul> <li>Symbol: Cycle arrows emoji</li> <li>Meaning: Submitted for democratic review</li> <li>Next Status: <code>x</code> (Done)</li> <li>Usage:</li> <li>Proposal under discussion</li> <li>Code review pending</li> <li>Awaiting collective feedback</li> </ul> <p>Example:</p> Markdown<pre><code>- [\ud83d\udd04] Security policy update (review ends 2025-07-01)\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#agenda-item","title":"<code>\ud83d\udccb</code> Agenda Item","text":"<ul> <li>Symbol: Clipboard emoji</li> <li>Meaning: Scheduled for meeting discussion</li> <li>Next Status: <code>/</code> (In Progress)</li> <li>Usage:</li> <li>Added to meeting agenda</li> <li>Requires group decision</li> <li>Needs collective input</li> </ul> <p>Example:</p> Markdown<pre><code>- [\ud83d\udccb] Discuss budget allocation (July meeting)\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#voting","title":"<code>\ud83d\uddf3\ufe0f</code> Voting","text":"<ul> <li>Symbol: Ballot box emoji</li> <li>Meaning: Active democratic vote</li> <li>Next Status: <code>x</code> (Done)</li> <li>Usage:</li> <li>Formal vote in progress</li> <li>Decision pending member input</li> <li>Time-sensitive democratic process</li> </ul> <p>Example:</p> Markdown<pre><code>- [\ud83d\uddf3\ufe0f] Vote on new member application (closes 2025-07-05)\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#urgent","title":"<code>\u26a1</code> Urgent","text":"<ul> <li>Symbol: Lightning bolt emoji</li> <li>Meaning: High priority, needs immediate attention</li> <li>Next Status: <code>/</code> (In Progress)</li> <li>Usage:</li> <li>Security issues</li> <li>Time-critical tasks</li> <li>Blocking other work</li> </ul> <p>Example:</p> Markdown<pre><code>- [\u26a1] Fix security vulnerability in public site\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#decision-made","title":"<code>\ud83c\udfaf</code> Decision Made","text":"<ul> <li>Symbol: Target emoji</li> <li>Meaning: Democratic decision reached, awaiting implementation</li> <li>Next Status: <code>/</code> (In Progress)</li> <li>Usage:</li> <li>Vote completed, decision recorded</li> <li>Approved but not yet implemented</li> <li>Clear mandate for action</li> </ul> <p>Example:</p> Markdown<pre><code>- [\ud83c\udfaf] Implement approved proposal #456\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#additional-statuses","title":"Additional Statuses","text":"","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#forwarded","title":"<code>&gt;</code> Forwarded","text":"<ul> <li>Symbol: Greater than</li> <li>Meaning: Delegated to someone else</li> <li>Usage: Task reassigned</li> </ul>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#scheduled","title":"<code>&lt;</code> Scheduled","text":"<ul> <li>Symbol: Less than</li> <li>Meaning: Planned for future date</li> <li>Usage: Deferred tasks</li> </ul>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#question","title":"<code>?</code> Question","text":"<ul> <li>Symbol: Question mark</li> <li>Meaning: Needs clarification</li> <li>Usage: Unclear requirements</li> </ul>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#status-workflows","title":"Status Workflows","text":"","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#proposal-workflow","title":"Proposal Workflow","text":"Text Only<pre><code>Todo \u2192 Agenda Item \u2192 Under Review \u2192 Voting \u2192 Decision Made \u2192 In Progress \u2192 Done\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#blocked-task-workflow","title":"Blocked Task Workflow","text":"Text Only<pre><code>In Progress \u2192 Blocked \u2192 (dependency resolved) \u2192 In Progress \u2192 Done\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#urgent-task-workflow","title":"Urgent Task Workflow","text":"Text Only<pre><code>Todo \u2192 Urgent \u2192 In Progress \u2192 Done\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#using-task-statuses","title":"Using Task Statuses","text":"","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#in-obsidian","title":"In Obsidian","text":"<ol> <li>Create task with status:</li> </ol> Markdown<pre><code>- [ ] Regular todo\n- [/] Task in progress\n- [\u23f8\ufe0f] Blocked task\n</code></pre> <ol> <li>Change status:</li> <li>Click the checkbox to cycle through statuses</li> <li> <p>Or use command palette: \"Tasks: Toggle task done\"</p> </li> <li> <p>Filter by status:</p> </li> </ol> Text Only<pre><code>not done\nstatus.name includes \"Blocked\"\nstatus.name includes \"Under Review\"\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#task-queries","title":"Task Queries","text":"<p>Show all blocked tasks:</p> Markdown<pre><code>```tasks\nstatus.symbol includes \"\u23f8\ufe0f\"\n</code></pre> Text Only<pre><code>**Show items for next meeting**:\n```markdown\n```tasks\nstatus.symbol includes \"\ud83d\udccb\"\ngroup by heading\n</code></pre> Text Only<pre><code>**Show urgent tasks**:\n```markdown\n```tasks\nstatus.symbol includes \"\u26a1\"\nsort by priority\n</code></pre> Text Only<pre><code>## Best Practices\n\n### DO's\n- \u2705 Update status as work progresses\n- \u2705 Add context when blocking tasks\n- \u2705 Set deadlines for voting tasks\n- \u2705 Link related tasks and proposals\n- \u2705 Use urgent sparingly\n\n### DON'Ts\n- \u274c Leave tasks in \"In Progress\" indefinitely\n- \u274c Skip democratic review when required\n- \u274c Mark everything as urgent\n- \u274c Change voting results after deadline\n- \u274c Use blocked without explanation\n\n## Status Reporting\n\n### Weekly Status Query\n```markdown\n## This Week's Tasks\n\n### In Progress\n```tasks\nstatus.symbol includes \"/\"\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#blocked_1","title":"Blocked","text":"Text Only<pre><code>status.symbol includes \"\u23f8\ufe0f\"\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#under-review_1","title":"Under Review","text":"Text Only<pre><code>status.symbol includes \"\ud83d\udd04\"\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#urgent_1","title":"Urgent","text":"Text Only<pre><code>status.symbol includes \"\u26a1\"\n</code></pre> Text Only<pre><code>### Meeting Preparation Query\n```markdown\n## Upcoming Meeting Items\n\n### Agenda Items\n```tasks\nstatus.symbol includes \"\ud83d\udccb\"\nnot done\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#active-votes","title":"Active Votes","text":"Text Only<pre><code>status.symbol includes \"\ud83d\uddf3\ufe0f\"\n</code></pre>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#decisions-to-implement","title":"Decisions to Implement","text":"Text Only<pre><code>status.symbol includes \"\ud83c\udfaf\"\n</code></pre> <p>```</p>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#integration-with-democratic-centralism","title":"Integration with Democratic Centralism","text":"<p>These task statuses support DRUIDS' democratic centralist principles:</p> <ol> <li>Transparency: All members can see task status</li> <li>Accountability: Clear ownership and progress tracking</li> <li>Democratic Process: Review and voting statuses</li> <li>Collective Decision: Agenda items and decisions</li> <li>Urgency Management: Balanced priorities</li> </ol>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>Configure in Obsidian settings: - <code>Ctrl+1</code>: Mark as Todo - <code>Ctrl+2</code>: Mark as In Progress - <code>Ctrl+3</code>: Mark as Done - <code>Ctrl+4</code>: Mark as Blocked - <code>Ctrl+5</code>: Mark as Under Review</p>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"implement/workflows/task-management/#troubleshooting","title":"Troubleshooting","text":"<p>Status not appearing:  - Ensure Tasks plugin is updated - Check data.json has all statuses - Restart Obsidian</p> <p>Can't change status: - Verify task format is correct - Check if status is available as command - Try clicking checkbox instead</p> <p>Emoji not displaying: - Ensure Unicode support in font - Try different emoji variation - Check Obsidian appearance settings</p> <p>Backlinks:</p>","tags":["tasks","workflow","status-management","democratic-centralism","project-management"]},{"location":"learn/","title":"Your DRUIDS Learning Path","text":"","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#where-to-start","title":"Where to Start","text":"<p>This learning path is designed to take you from \"what is this?\" to \"I can teach others.\" Choose your starting point based on your current knowledge and needs.</p>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#quick-navigation","title":"\ud83c\udfaf Quick Navigation","text":"","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#brand-new-to-everything","title":"Brand New to Everything?","text":"<p>Start with Core Concepts to understand the fundamental problems DRUIDS solves and why it matters for revolutionary organizing.</p>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#familiar-with-organizing-new-to-git","title":"Familiar with Organizing, New to Git?","text":"<p>Start with Your Git Learning Path to find your specific path, then jump to Git Basics - we teach Git specifically for organizers, not programmers.</p>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#already-using-git","title":"Already Using Git?","text":"<p>Go directly to DRUIDS Fundamentals to learn what makes DRUIDS different from generic Git usage.</p>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#ready-to-implement","title":"Ready to Implement?","text":"<p>Head to Implementation for practical deployment guides.</p>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#complete-learning-path","title":"\ud83d\udcda Complete Learning Path","text":"","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#phase-1-foundation-week-1","title":"Phase 1: Foundation (Week 1)","text":"","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#core-concepts","title":"Core Concepts","text":"<p>Understand the revolutionary theory behind DRUIDS:</p> <ol> <li>Institutional Memory - Why organizations hemorrhage knowledge</li> <li>Democratic Centralism in Practice - How infrastructure shapes politics  </li> <li>Security as Revolutionary Practice - First principles, not checklists</li> <li>Power Steering Metaphor - DRUIDS amplifies, doesn't direct</li> </ol> <p>Time: 2-3 hours reading, 1 hour discussion</p>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#phase-2-git-for-organizers-week-2","title":"Phase 2: Git for Organizers (Week 2)","text":"<p>Learn version control through organizing examples:</p> <ol> <li>Git Isn't Programming - Destroy the intimidation</li> <li>Why Revolutionaries Need Git - Material benefits</li> <li>Git Through a Campaign - Learn by following a rent strike</li> <li>Git in 7 Commands - 90% of what you need</li> </ol> <p>Time: 4-5 hours practice, 2 hours exercises</p>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#phase-3-druids-specifics-week-3","title":"Phase 3: DRUIDS Specifics (Week 3)","text":"<p>What makes DRUIDS different from plain Git:</p> <ol> <li>Three-Tier Security Model - L0/L1/L2 implementation</li> <li>Revolutionary Commit Conventions - Encoding democracy</li> <li>Obsidian Integration - User-friendly interface</li> <li>Federation Protocols - Multi-org coordination</li> </ol> <p>Time: 3-4 hours reading, 2-3 hours setup</p>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#phase-4-practice-week-4","title":"Phase 4: Practice (Week 4)","text":"<p>Apply your knowledge:</p> <ol> <li>Set up a test repository</li> <li>Document a real meeting</li> <li>Create a campaign plan</li> <li>Practice merge conflicts</li> <li>Implement security tiers</li> </ol> <p>Time: 5-6 hours hands-on work</p>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#learning-styles","title":"\ud83c\udf93 Learning Styles","text":"","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#visual-learners","title":"Visual Learners","text":"<ul> <li>Start with diagrams in Power Steering Metaphor</li> <li>Use Git Through a Campaign for story-based learning</li> <li>Check out workflow diagrams in implementation guides</li> </ul>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#hands-on-learners","title":"Hands-On Learners","text":"<ul> <li>Jump straight to Git in 7 Commands</li> <li>Set up a practice repository immediately</li> <li>Learn by breaking things in a safe environment</li> </ul>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#theory-first-learners","title":"Theory-First Learners","text":"<ul> <li>Deep dive into Democratic Centralism</li> <li>Read Tech Democratization as Class Struggle</li> <li>Understand the politics before the practice</li> </ul>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#social-learners","title":"Social Learners","text":"<ul> <li>Find a learning partner</li> <li>Read Teach Tech Without Priesthood</li> <li>Organize study groups using the materials</li> </ul>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#self-assessment-checkpoints","title":"\ud83d\udcca Self-Assessment Checkpoints","text":"","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#after-core-concepts","title":"After Core Concepts","text":"<ul> <li> Can explain why Google Docs is surveillance infrastructure</li> <li> Understand three-tier security model</li> <li> Know what \"institutional memory\" means materially (see Institutional Memory)</li> <li> Can articulate DRUIDS as tool, not ideology</li> </ul>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#after-git-basics","title":"After Git Basics","text":"<ul> <li> Can create a repository and make commits</li> <li> Understand branches and merging</li> <li> Can find information in Git history</li> <li> Comfortable with the 7 essential commands</li> </ul>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#after-druids-fundamentals","title":"After DRUIDS Fundamentals","text":"<ul> <li> Can write revolutionary commit messages</li> <li> Understand security tier implementation</li> <li> Know when to use different documentation types</li> <li> Can plan multi-org federation setup</li> </ul>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#ready-to-implement_1","title":"Ready to Implement","text":"<ul> <li> Have identified organizational pain points</li> <li> Selected appropriate deployment model</li> <li> Prepared training materials for others</li> <li> Created implementation timeline</li> </ul>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#whats-next","title":"\ud83d\ude80 What's Next?","text":"<p>After completing the learning path:</p> <ol> <li>Implement - Deploy DRUIDS in your organization</li> <li>Customize - Adapt to your specific needs</li> <li>Teach - Spread knowledge to other organizers</li> <li>Contribute - Share improvements back to the project</li> </ol>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#ready-to-put-this-into-practice","title":"Ready to Put This Into Practice?","text":"<p>Move forward in your journey: See the Implementation Guide for step-by-step deployment instructions.</p>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#want-visual-overview-of-paths","title":"Want Visual Overview of Paths?","text":"<p>See all learning options: Check out Visual Learning Paths for complete journey maps based on your organizing context.</p>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#building-from-scratch","title":"Building From Scratch?","text":"<p>Start with foundations: Follow Your First Revolutionary Commit for hands-on practice.</p>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/#tips-for-success","title":"\ud83d\udca1 Tips for Success","text":"<ol> <li>Learn together - Everything is easier with comrades</li> <li>Start small - Master basics before adding complexity</li> <li>Practice regularly - Daily use builds competence</li> <li>Ask questions - No tech priests here</li> <li>Document your journey - Help the next person</li> </ol> <p>\"From each according to their ability, to each according to their need - including technical knowledge.\"</p> <p>Backlinks:</p>","tags":["learning","education","pathway","curriculum"]},{"location":"learn/git-learning-path/","title":"Your Git Learning Path","text":"<p>Find where you are, see where you're going</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#quick-self-assessment","title":"Quick Self-Assessment","text":"<p>Answer these questions honestly:</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#current-technical-comfort","title":"Current Technical Comfort","text":"<p>Which best describes you?</p> <p>A) \"I avoid anything technical\" - Prefer when others handle computer stuff - Words like \"terminal\" sound scary - Haven't used Git before - Your path: Start with Absolute Beginner</p> <p>B) \"I can follow instructions\" - Comfortable with basic computer tasks - Can copy-paste commands if told exactly what to do - Willing to try new things with guidance - Your path: Start with Guided Learner</p> <p>C) \"I tinker with things\" - Like figuring things out myself - Have used command line before (even just a little) - Not afraid to make mistakes - Your path: Start with Independent Explorer</p> <p>D) \"I want deep understanding\" - Need to know WHY, not just HOW - Like complete pictures - Want to help others learn - Your path: Start with Knowledge Builder</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#learning-style","title":"Learning Style","text":"<p>How do you learn best?</p> <p>Visual: Pictures, diagrams, and flows \u2192 Focus on Visual Resources Hands-on: Doing, not reading \u2192 Jump to Practice Exercises Reading: Written guides \u2192 Follow Written Tutorials Social: Learning with others \u2192 Join Group Learning</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#time-available","title":"Time Available","text":"<p>How much time can you dedicate?</p> <p>15 minutes/day: Micro-Learning Path 1 hour/week: Weekly Progress Path Intensive weekend: Bootcamp Path</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#learning-paths","title":"Learning Paths","text":"","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#absolute-beginner-path","title":"Absolute Beginner Path","text":"<p>Goal: Make fear disappear, build confidence</p> <p>Week 1: Demystification 1. Read: Git Isn't Programming (20 min) 2. Read: Why Revolutionaries Need Git (20 min) 3. Watch: \"Git for Absolute Beginners\" video (coming soon) 4. Join: \"Git Curious\" discussion group</p> <p>Week 2: First Success 1. Tutorial: Your First Revolutionary Commit (45 min) 2. Practice: Make 3 more commits with your own content 3. Celebrate: Share your success with comrades</p> <p>Week 3: Building Habits 1. Tutorial: Git in 7 Commands 2. Practice: Use Git for real meeting notes 3. Reference: Print Git Quick Reference Card</p> <p>Week 4: Confidence 1. Help another comrade make their first commit 2. Start using Git daily 3. Move to Guided Learner path</p> <p>Success Metrics: - Can make commits without fear - Understand basic Git concepts - Feel ready to learn more</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#guided-learner-path","title":"Guided Learner Path","text":"<p>Goal: Build practical skills with clear guidance</p> <p>Week 1: Core Workflows 1. Tutorial: Git in 7 Commands 2. How-to: Daily Git Workflows 3. Practice: Document one real meeting</p> <p>Week 2: Collaboration Basics 1. Tutorial: Git Through Campaign 2. Practice: Follow the rent strike tutorial 3. Practice: Create proposal branch</p> <p>Week 3: Real Work 1. How-to: Git Workflows by Role 2. Choose your role-specific workflow 3. Practice: One week of role-specific Git use</p> <p>Week 4: Problem Solving 1. Reference: Git Command Reference 2. Reference: Bookmark troubleshooting guide 3. Practice: Intentionally create and fix problems</p> <p>Success Metrics: - Using Git for daily work - Can collaborate with others - Can solve basic problems</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#independent-explorer-path","title":"Independent Explorer Path","text":"<p>Goal: Deep skills through self-directed learning</p> <p>Week 1: Rapid Foundation 1. Skim all introductory materials 2. Tutorial: Git Through a Campaign 3. Set up advanced Git environment</p> <p>Week 2: Advanced Workflows 1. Explore branching strategies 2. Learn interactive rebase (but first read [Why Rebase Warps Reality]) 3. Master merge conflict resolution</p> <p>Week 3: Tooling 1. Set up Git aliases 2. Explore GUI options 3. Integrate with other tools</p> <p>Week 4: Teaching Others 1. Create your own Git tutorial 2. Run workshop for comrades 3. Document unique workflows</p> <p>Resources: - Pro Git book (free online) - Git internals documentation - Advanced workflow guides</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#knowledge-builder-path","title":"Knowledge Builder Path","text":"<p>Goal: Complete understanding to teach others</p> <p>Month 1: Foundation - All beginner materials - All tutorials - All how-to guides - Start teaching basics</p> <p>Month 2: Depth - Git internals - Advanced workflows - Security implications - Create teaching materials</p> <p>Month 3: Mastery - Run Git workshops - Create organization-specific guides - Mentor other learners - Contribute to documentation</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#learning-resources-by-type","title":"Learning Resources by Type","text":"","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#visual-resources","title":"Visual Resources","text":"<p>Diagrams &amp; Flowcharts: - Visual Git Reference - Git workflow diagrams - Branching visualizations - Problem-solving flowcharts</p> <p>Videos (coming soon): - \"See Git Work\" - visual demonstrations - \"Git Workflows Animated\" - \"Common Problems Visualized\"</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#practice-exercises","title":"Practice Exercises","text":"<p>Hands-On Labs: 1. Meeting Minutes Lab: Practice with pre-made meeting notes 2. Campaign Planning Lab: Build campaign in branches 3. Conflict Resolution Lab: Practice merging with conflicts 4. Security Lab: Set up encrypted repositories</p> <p>Real Work Exercises: - Document your next meeting - Create a proposal - Review a comrade's work - Set up your organization's repo</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#written-tutorials","title":"Written Tutorials","text":"<p>Step-by-Step Guides: 1. Your First Revolutionary Commit 2. Git in 7 Commands 3. Git Through a Campaign 4. Branching Isn't Scary</p> <p>Reference Materials: - Git Quick Reference Card - Git Command Encyclopedia - Error Messages Translated</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#group-learning","title":"Group Learning","text":"<p>Git Together Sessions: - Weekly 1-hour group learning - Safe space for questions - Practice with comrades - Shared troubleshooting</p> <p>Pair Learning: - Match with Git buddy - Daily check-ins - Learn through real work - Mutual support</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#micro-learning-path","title":"Micro-Learning Path","text":"<p>For 15 minutes/day:</p> <p>Week 1: One concept per day - Day 1: What is Git? - Day 2: What is a commit? - Day 3: What is a repository? - Day 4: What is a branch? - Day 5: Review and rest - Weekend: First commit</p> <p>Week 2: One command per day - Day 1: git status - Day 2: git add - Day 3: git commit - Day 4: git log - Day 5: git push - Weekend: Practice all</p> <p>Week 3: Real work - Daily: One commit of real work - Weekend: Review week's work</p> <p>Week 4: Collaboration - Daily: Work on shared repo - Weekend: Celebrate progress</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#when-youre-stuck","title":"When You're Stuck","text":"","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#feeling-overwhelmed","title":"Feeling Overwhelmed?","text":"<ul> <li>Return to Git Isn't Programming</li> <li>Take a break</li> <li>Ask for help</li> <li>Remember: Everyone was beginner once</li> </ul>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#specific-problem","title":"Specific Problem?","text":"<ul> <li>Check Fixing Common Git Problems</li> <li>Search error message</li> <li>Ask in support channel</li> <li>Pair with experienced comrade</li> </ul>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#lost-motivation","title":"Lost Motivation?","text":"<ul> <li>Re-read Why Revolutionaries Need Git</li> <li>Share small success</li> <li>Help newer comrade</li> <li>See how far you've come</li> </ul>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#progress-milestones","title":"Progress Milestones","text":"","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#beginner-victory","title":"Beginner Victory","text":"<ul> <li> Made first commit</li> <li> Understand basic concepts</li> <li> Using Git weekly</li> <li> Helped another person</li> </ul>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#intermediate-success","title":"Intermediate Success","text":"<ul> <li> Using Git daily</li> <li> Comfortable with branches</li> <li> Can fix own problems</li> <li> Teaching basics to others</li> </ul>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#advanced-achievement","title":"Advanced Achievement","text":"<ul> <li> Complex workflows natural</li> <li> Mentoring multiple people</li> <li> Contributing to guides</li> <li> Git feels effortless</li> </ul>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#your-next-step","title":"Your Next Step","text":"<p>Based on your assessment, your next action is:</p> <p>If completely new: Read Git Isn't Programming right now</p> <p>If curious but scared: Join a \"Git Together\" session this week</p> <p>If ready to try: Do Your First Revolutionary Commit today</p> <p>If already started: Pick next item from your path</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/git-learning-path/#remember","title":"Remember","text":"<ul> <li>Everyone learns at different speeds</li> <li>Mistakes are learning opportunities</li> <li>The goal is sustainable organizing, not Git mastery</li> <li>You're building revolutionary capacity</li> </ul> <p>\"The journey of a thousand commits begins with a single <code>git init</code>\"</p> <p>Questions? Find your learning buddy in #git-support</p> <p>Backlinks:</p>","tags":["git","reference","learning-path","assessment","skills"]},{"location":"learn/visual-roadmaps/","title":"Visual Learning Paths for Revolutionary Infrastructure","text":"","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#material-problem-this-solves","title":"Material Problem This Solves","text":"<p>Organizers approaching DRUIDS face overwhelming choices: - Where do I start for my specific context? - How long will each step take? - What capacity must I build first? - Which path serves my organization's needs?</p> <p>Without clear roadmaps, comrades waste time on irrelevant features or miss crucial foundations.</p>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#political-framing","title":"Political Framing","text":"<p>Traditional documentation assumes everyone follows the same path - a liberal fiction that ignores material conditions. Different organizing contexts require different approaches: - Labor unions need security first - Tenant organizations need migration tools - Study groups need collaboration features - Direct action crews need anonymity</p> <p>These visual paths honor those differences while building toward collective liberation.</p>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#the-core-journey","title":"The Core Journey","text":"<p>Every path follows the revolutionary cycle of Practice \u2192 Theory \u2192 Practice:</p> Text Only<pre><code>    START: Assessment\n         \u2193\n    LEARN: Build Understanding  \n         \u2193\n    IMPLEMENT: Put Into Practice\n         \u2193\n    TEACH: Spread Capacity\n         \u2193\n    [Return to START at higher level]\n</code></pre>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#complete-learning-map","title":"Complete Learning Map","text":"Text Only<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     DRUIDS LEARNING PATHS                        \u2502\n\u2502                  \"From Curiosity to Capacity\"                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 START: \"Is DRUIDS for Us?\" (1-2 hours)                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u25a1 Read: Why DRUIDS?           \u2192 Understand problems we solve    \u2502\n\u2502 \u25a1 Try: Quick Demo (5 min)     \u2192 See it in action              \u2502\n\u2502 \u25a1 Assess: Current Pain Points \u2192 Map your needs to features     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u25bc                                   \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Path A: LABOR ORGANIZING    \u2502     \u2502 Path B: TENANT UNIONS       \u2502\n\u2502 \"High Security Needs\"       \u2502     \u2502 \"Migration Focus\"           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1. Security First (1 week)  \u2502     \u2502 1. Migration (2 weeks)      \u2502\n\u2502 2. Git Basics (2 weeks)     \u2502     \u2502 2. Collaboration (1 week)   \u2502\n\u2502 3. Deployment (1 month)     \u2502     \u2502 3. Security (2 weeks)       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502                                   \u2502\n            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 LEARN: Core Concepts (2-4 organizing cycles)                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u25ba Institutional Memory    \u2192 Why we preserve knowledge           \u2502\n\u2502 \u25ba Security as Practice    \u2192 Protection through politics         \u2502\n\u2502 \u25ba Democratic Centralism   \u2192 Unity in action, freedom in debate  \u2502\n\u2502 \u25ba Git Fundamentals        \u2192 Version control for organizers      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 IMPLEMENT: Making It Real (1-3 months)                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Week 1-2:   Install &amp; Configure                                 \u2502\n\u2502 Week 3-4:   Migrate Existing Work                              \u2502\n\u2502 Week 5-8:   Establish Workflows                                \u2502\n\u2502 Week 9-12:  Advanced Features                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 TEACH: Building Collective Capacity                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u2192 Run Git workshops for your organization                       \u2502\n\u2502 \u2192 Create documentation for your workflows                       \u2502\n\u2502 \u2192 Train workshop facilitators                                   \u2502\n\u2502 \u2192 Build support networks                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>[EXPAND HERE: Add ASCII art paths specific to your movement sectors]</p>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#detailed-path-labor-organizing","title":"Detailed Path: Labor Organizing","text":"<p>For unions facing heavy surveillance and infiltration:</p> Text Only<pre><code>START: Security Assessment (1 day)\n\u2502\n\u251c\u2500\u2192 Read: \"When They Come Knocking\" \n\u2502   \u2514\u2500\u2192 Understand state repression tactics\n\u2502\n\u251c\u2500\u2192 Workshop: Threat Modeling (2 hours)\n\u2502   \u2514\u2500\u2192 Map your specific vulnerabilities\n\u2502\n\u2514\u2500\u2192 Decision: Security Level Needed\n    \u2514\u2500\u2192 L1 (Members) or L2 (Leadership)?\n\nLEARN: Security First (1 week)\n\u2502\n\u251c\u2500\u2192 Day 1-2: Security as Revolutionary Practice\n\u2502   \u2514\u2500\u2192 Political education on security culture\n\u2502\n\u251c\u2500\u2192 Day 3-4: DRUIDS Security Implementation  \n\u2502   \u2514\u2500\u2192 Technical security measures\n\u2502\n\u251c\u2500\u2192 Day 5-6: Metadata &amp; Anonymity\n\u2502   \u2514\u2500\u2192 Protecting member identities\n\u2502\n\u2514\u2500\u2192 Day 7: Security Audit Practice\n    \u2514\u2500\u2192 Check your implementation\n\n[Continue with Git, Implementation, Teaching phases...]\n</code></pre> <p>[EXPAND HERE: Complete the labor organizing path with specific timelines]</p>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#detailed-path-tenant-unions","title":"Detailed Path: Tenant Unions","text":"<p>For organizations escaping corporate surveillance:</p> Text Only<pre><code>START: Liberation Assessment (2 hours)\n\u2502\n\u251c\u2500\u2192 Inventory: Current Corporate Tools\n\u2502   \u2514\u2500\u2192 List Google, Discord, Facebook use\n\u2502\n\u251c\u2500\u2192 Calculate: Data Extraction Needs\n\u2502   \u2514\u2500\u2192 What must be preserved?\n\u2502\n\u2514\u2500\u2192 Plan: Migration Timeline\n    \u2514\u2500\u2192 Can't switch overnight!\n\nLEARN: Migration Strategy (3 days)\n\u2502\n\u251c\u2500\u2192 Day 1: Why Corporate Tools Fail Us\n\u2502   \u251c\u2500\u2192 Read: \"Google Drive Trap\"\n\u2502   \u2514\u2500\u2192 Read: \"Discord Democracy Fails\"\n\u2502\n\u251c\u2500\u2192 Day 2: Migration Methodology\n\u2502   \u251c\u2500\u2192 From Google Docs guide\n\u2502   \u2514\u2500\u2192 From Discord guide\n\u2502\n\u2514\u2500\u2192 Day 3: Pilot Planning\n    \u2514\u2500\u2192 Choose test group\n\n[Continue with implementation phases...]\n</code></pre> <p>[EXPAND HERE: Build out tenant union path with practical steps]</p>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#mermaid-diagram-technology-decision-tree","title":"Mermaid Diagram: Technology Decision Tree","text":"<pre><code>graph TD\n    A[Organization Needs DRUIDS?] --&gt; B{Current Pain Points?}\n\n    B --&gt;|Knowledge Loss| C[Institutional Memory Path]\n    B --&gt;|Onboarding Burden| D[Documentation Path]\n    B --&gt;|Security Concerns| E[Security-First Path]\n    B --&gt;|Corporate Lock-in| F[Migration Path]\n\n    C --&gt; G[Git Fundamentals]\n    D --&gt; G\n    E --&gt; H[Security Training]\n    F --&gt; I[Migration Tools]\n\n    G --&gt; J[Implementation]\n    H --&gt; J\n    I --&gt; J\n\n    J --&gt; K{Success?}\n    K --&gt;|Yes| L[Teach Others]\n    K --&gt;|No| M[Get Support]\n\n    M --&gt; J\n    L --&gt; N[Build Movement Capacity]</code></pre> <p>[EXPAND HERE: Add decision trees for your specific contexts]</p>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#time-estimates-in-organizing-cycles","title":"Time Estimates in Organizing Cycles","text":"<p>We measure time in organizing cycles not hours, because revolutionary work happens between meetings, actions, and campaigns:</p> Phase Calendar Time Organizing Cycles Real Example START 1-2 hours 1 meeting \"We discussed at Tuesday's meeting\" LEARN 2-4 weeks 2-3 cycles \"Studied between June actions\" IMPLEMENT 1-3 months 1 campaign \"Rolled out during rent strike\" TEACH Ongoing Every cycle \"Each new member learns\" <p>[EXPAND HERE: Add your organization's typical cycle timing]</p>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#prerequisites-map","title":"Prerequisites Map","text":"<p>Visual representation of capacity building:</p> Text Only<pre><code>Foundation Skills (Required for All Paths)\n\u251c\u2500\u2192 Basic Computer Literacy\n\u2502   \u2514\u2500\u2192 Can use email, web browser\n\u2502\n\u251c\u2500\u2192 Political Consciousness  \n\u2502   \u2514\u2500\u2192 Understand need for independence\n\u2502\n\u2514\u2500\u2192 Collective Commitment\n    \u2514\u2500\u2192 Group decision to adopt\n\nPath-Specific Prerequisites\n\u2502\n\u251c\u2500\u2192 SECURITY PATH\n\u2502   \u251c\u2500\u2192 Threat awareness\n\u2502   \u2514\u2500\u2192 Discipline commitment\n\u2502\n\u251c\u2500\u2192 MIGRATION PATH\n\u2502   \u251c\u2500\u2192 Admin access to current tools\n\u2502   \u2514\u2500\u2192 Complete data inventory\n\u2502\n\u2514\u2500\u2192 COLLABORATION PATH\n    \u251c\u2500\u2192 Existing workflows mapped\n    \u2514\u2500\u2192 Team coordination skills\n</code></pre> <p>[EXPAND HERE: Detail prerequisites for your contexts]</p>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#success-indicators-by-stage","title":"Success Indicators by Stage","text":"<p>Know you're ready to advance when:</p>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#start-learn","title":"START \u2192 LEARN","text":"<ul> <li> Can articulate why DRUIDS serves your organizing</li> <li> Have tried the demo</li> <li> Identified 3+ specific pain points to solve</li> <li> Have collective buy-in to proceed</li> </ul>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#learn-implement","title":"LEARN \u2192 IMPLEMENT","text":"<ul> <li> Understand core concepts (can explain to others)</li> <li> Completed Git basics without fear</li> <li> Know which security level you need</li> <li> Have implementation plan written</li> </ul>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#implement-teach","title":"IMPLEMENT \u2192 TEACH","text":"<ul> <li> Successfully using DRUIDS for real work</li> <li> Solved at least one major pain point</li> <li> Have documented your workflows</li> <li> Other members asking to learn</li> </ul> <p>[EXPAND HERE: Add success indicators from your experience]</p>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#alternative-paths-for-different-contexts","title":"Alternative Paths for Different Contexts","text":"","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#path-c-direct-action-crews-maximum-security","title":"Path C: Direct Action Crews (Maximum Security)","text":"Text Only<pre><code>START \u2192 L2 Security \u2192 Anonymous Git \u2192 Encrypted Deployment \u2192 Cell Teaching\nTimeline: 2-3 months of careful implementation\n</code></pre>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#path-d-study-groups-collaboration-focus","title":"Path D: Study Groups (Collaboration Focus)","text":"Text Only<pre><code>START \u2192 Git Basics \u2192 Shared Workflows \u2192 Simple Security \u2192 Peer Teaching  \nTimeline: 3-4 weeks of collective learning\n</code></pre>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#path-e-emergency-response-rapid-deployment","title":"Path E: Emergency Response (Rapid Deployment)","text":"Text Only<pre><code>START \u2192 Minimum Viable Security \u2192 Basic Git \u2192 Quick Migration \u2192 Learn as You Go\nTimeline: 1 week sprint, then iterate\n</code></pre> <p>[EXPAND HERE: Design paths for your movement's diverse needs]</p>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#visual-learning-styles","title":"Visual Learning Styles","text":"<p>Different comrades learn differently. Provide multiple formats:</p> <ol> <li>Linear Learners: Step-by-step paths above</li> <li>Visual Learners: Diagrams and flowcharts</li> <li>Hands-On Learners: Jump to Quick Demo</li> <li>Theory-First Learners: Start with Philosophy</li> <li>Problem-Solvers: Begin with pain points</li> </ol>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#tracking-progress","title":"Tracking Progress","text":"<p>Create visual progress tracker for your organization:</p> Text Only<pre><code>DRUIDS Journey Tracker - [Organization Name]\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n\nSTART:    [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100% Complete \u2713\nLEARN:    [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591] 66% In Progress\nIMPLEMENT:[\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591] 15% Beginning\nTEACH:    [\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591] 0% Not Started\n\nCurrent Focus: Learning Git fundamentals\nNext Milestone: First real repository\nBlockers: Need 2 more laptops for members\n</code></pre> <p>[EXPAND HERE: Create tracker template for your group]</p>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/visual-roadmaps/#remember","title":"Remember","text":"<p>These paths are suggestions, not prescriptions. Your material conditions determine your journey. The map is not the territory - adapt based on your organizing reality.</p> <p>Every organization's path is valid. The goal isn't perfection but progress toward collective liberation.</p> <p>Ready to start your journey? Begin with Why DRUIDS?</p> <p>Need help choosing a path? Check For Organizers for context-specific guidance.</p> <p>Want to contribute a path? Follow our Cross-Reference Guide to add your journey.</p> <p>Backlinks:</p>","tags":["learning-paths","visual-guide","user-journey","navigation","organizing-contexts"]},{"location":"learn/core-concepts/","title":"Core Concepts","text":"<p>These foundational concepts explain why DRUIDS exists and how it approaches revolutionary infrastructure differently.</p>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#essential-reading-order","title":"Essential Reading Order","text":"","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#1-institutional-memory","title":"1. Institutional Memory","text":"<p>Understanding the material problem: organizations hemorrhage knowledge when people leave. This document explores why this happens and how DRUIDS addresses it systematically.</p>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#2-democratic-centralism-in-practice","title":"2. Democratic Centralism in Practice","text":"<p>How Git accidentally implements the organizational principle of democratic centralism - freedom of discussion, unity of action, with preserved dissent.</p>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#3-security-as-revolutionary-practice","title":"3. Security as Revolutionary Practice","text":"<p>Security isn't about paranoia or checklists - it's about material threat assessment and collective practices that protect without paralyzing organizing.</p>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#4-three-tier-security-model","title":"4. Three-Tier Security Model","text":"<p>The practical implementation of graduated security: L0 (public), L1 (members), L2 (sensitive). Based on real threat models, not security theater.</p>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#5-tech-democratization-as-class-struggle","title":"5. Tech Democratization as Class Struggle","text":"<p>Why teaching Git to organizers is an act of class warfare against the technical labor aristocracy. Knowledge hoarding maintains hierarchy.</p>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#connecting-concepts","title":"Connecting Concepts","text":"<p>These concepts interconnect:</p> <ul> <li>Institutional memory requires democratic processes to be preserved meaningfully</li> <li>Security practices must serve organizing needs, not vice versa</li> <li>Technical knowledge must be democratized to prevent new hierarchies</li> <li>Infrastructure must embody our politics, not just serve them</li> </ul>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#the-power-steering-metaphor","title":"The Power Steering Metaphor","text":"<p>DRUIDS doesn't provide ideology or direction - that comes from your revolutionary politics. DRUIDS makes the journey easier:</p> <ul> <li>Ideology = Your compass (Marxism-Leninism, anarchism, etc.)</li> <li>Destination = Your goal (liberation, communism, abolition, etc.)</li> <li>DRUIDS = Power steering (same journey, less exhaustion)</li> </ul>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#key-principles","title":"Key Principles","text":"","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#1-material-analysis-first","title":"1. Material Analysis First","text":"<p>Every feature addresses a real organizing problem, not theoretical concerns.</p>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#2-democracy-in-architecture","title":"2. Democracy in Architecture","text":"<p>Technical structures should reinforce democratic practices, not create hierarchies.</p>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#3-security-through-clarity","title":"3. Security Through Clarity","text":"<p>Clear threat models and practical responses, not paranoid fantasy.</p>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#4-knowledge-as-commons","title":"4. Knowledge as Commons","text":"<p>Information wants to be free - from both price and hierarchy.</p>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#5-practice-over-purity","title":"5. Practice Over Purity","text":"<p>Working solutions beat perfect theories every time.</p>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#common-misconceptions","title":"Common Misconceptions","text":"<p>\"DRUIDS is just Git with politics\" Git is one tool in the system. DRUIDS is the integration of multiple tools with workflows designed for organizing.</p> <p>\"This will make us revolutionary\" No. Your politics make you revolutionary. DRUIDS helps you organize better.</p> <p>\"It's too technical for organizers\" If organizers can use smartphones, they can use DRUIDS. Complexity is a choice, not a requirement.</p> <p>\"Security features will slow us down\" Good security speeds up organizing by preventing catastrophic failures.</p>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#questions-for-reflection","title":"Questions for Reflection","text":"<p>As you read through these concepts, consider:</p> <ol> <li>What knowledge has your organization already lost?</li> <li>How does your current tech setup reinforce hierarchies?</li> <li>What would change if every member could access all decisions?</li> <li>How much time do you waste on repetitive explanations?</li> <li>Who holds power through technical knowledge in your group?</li> </ol>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/#next-steps","title":"Next Steps","text":"<p>After understanding these core concepts:</p> <ol> <li>Learn Git Basics - Practical skills without programming</li> <li>Explore DRUIDS Features - What makes DRUIDS unique</li> <li>Plan Implementation - Bring theory into practice</li> </ol> <p>\"Theory without practice is sterile. Practice without theory is blind. DRUIDS connects both.\"</p>","tags":["core-concepts","theory","foundation","philosophy"]},{"location":"learn/core-concepts/anti-pattern-framework/","title":"Anti-Pattern Framework: Learning from What Fails","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-science-of-revolutionary-failure","title":"The Science of Revolutionary Failure","text":"<p>Every failed movement teaches lessons. Every collapsed organization leaves clues. Every burned-out organizer has a story. The problem? We rarely systematically analyze these failures.</p> <p>This framework provides a methodology for learning from what doesn't work.</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#what-is-an-anti-pattern","title":"What is an Anti-Pattern?","text":"<p>In organizing, an anti-pattern is: - A common \"solution\" that seems helpful but creates worse problems - A recurring mistake that movements make repeatedly - A structure that appears revolutionary but reinforces oppression - A tool that promises liberation but delivers control</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-anti-pattern-analysis-framework","title":"The Anti-Pattern Analysis Framework","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#1-surface-appeal-why-it-seems-good","title":"1. Surface Appeal (Why It Seems Good)","text":"<p>Every anti-pattern survives because it offers something attractive: - Immediate convenience - Familiar interface - Free resources - Quick results</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#2-hidden-costs-what-it-actually-does","title":"2. Hidden Costs (What It Actually Does)","text":"<p>The real damage emerges over time: - Data extraction - Dependency creation - Capacity destruction - Movement fragmentation</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#3-material-basis-why-it-exists","title":"3. Material Basis (Why It Exists)","text":"<p>Anti-patterns aren't accidents. They serve: - Capital accumulation - State surveillance - Professional legitimacy - Individual careers</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#4-prefigurative-alternative-what-we-build-instead","title":"4. Prefigurative Alternative (What We Build Instead)","text":"<p>Each anti-pattern points toward its solution: - What infrastructure do we need? - What practices must change? - What capacities must develop? - What tools serve liberation?</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-anti-pattern-catalog","title":"The Anti-Pattern Catalog","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#communication-anti-patterns","title":"Communication Anti-Patterns","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-discord-democracy","title":"The Discord Democracy","text":"<p>Surface Appeal: Free, easy, familiar, instant community Hidden Costs:  - No history preservation - Corporate data mining - Ephemeral organizing - Surveillance vulnerability</p> <p>Material Basis: Venture capital needs engagement metrics Alternative: DRUIDS + federated chat</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-signal-security-theater","title":"The Signal Security Theater","text":"<p>Surface Appeal: \"Encrypted,\" Snowden-endorsed, simple Hidden Costs: - No infrastructure building - Phone number exposure - Centralized metadata - False security confidence</p> <p>Material Basis: Liberal privacy theater vs revolutionary infrastructure Alternative: Defense in depth with multiple tools</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#organizational-anti-patterns","title":"Organizational Anti-Patterns","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-google-socialism","title":"The Google Socialism","text":"<p>Surface Appeal: \"Free\" collaboration, everyone knows it Hidden Costs: - Surveillance capitalism - Deleted organizing history - Corporate control - Learned helplessness</p> <p>Material Basis: Data extraction for profit Alternative: Self-hosted infrastructure</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-zoom-organizing","title":"The Zoom Organizing","text":"<p>Surface Appeal: Easy meetings, pandemic familiar Hidden Costs: - No persistent decisions - Surveillance built-in - Meeting exhaustion - No institutional memory</p> <p>Material Basis: Corporate efficiency over organizing depth Alternative: Documented, asynchronous coordination</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#leadership-anti-patterns","title":"Leadership Anti-Patterns","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-tech-priest","title":"The Tech Priest","text":"<p>Surface Appeal: Efficiency, expertise, \"handling it\" Hidden Costs: - Knowledge hoarding - Bus factor crisis - Hierarchy recreation - Capacity bottleneck</p> <p>Material Basis: Professional class reproduction Alternative: Rotating technical roles</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-founders-syndrome","title":"The Founder's Syndrome","text":"<p>Surface Appeal: Vision, experience, dedication Hidden Costs: - Personality cult - Succession crisis - Innovation stagnation - Democratic erosion</p> <p>Material Basis: Individualism over collectivism Alternative: Structured leadership rotation</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#strategic-anti-patterns","title":"Strategic Anti-Patterns","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-nonprofit-industrial-complex","title":"The Nonprofit Industrial Complex","text":"<p>Surface Appeal: Funding, legitimacy, stability Hidden Costs: - Movement defanging - Grant dependence - Professionalization - Mission drift</p> <p>Material Basis: Capital controlling resistance Alternative: Member-funded organizing</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-electoral-fixation","title":"The Electoral Fixation","text":"<p>Surface Appeal: \"Power,\" visibility, \"change from within\" Hidden Costs: - Energy dissipation - Compromise cascade - Base demobilization - Revolutionary delay</p> <p>Material Basis: Liberal democracy as pressure release Alternative: Dual power building</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#using-the-framework","title":"Using the Framework","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#step-1-pattern-recognition","title":"Step 1: Pattern Recognition","text":"<p>When evaluating any tool, practice, or structure, ask: 1. What does this promise? 2. What does it actually deliver? 3. Who benefits from the gap? 4. What would we build ourselves?</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#step-2-material-analysis","title":"Step 2: Material Analysis","text":"<p>Dig deeper than surface features: 1. Who funds this? 2. What data does it collect? 3. How does it make money? 4. What behavior does it incentivize?</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#step-3-historical-investigation","title":"Step 3: Historical Investigation","text":"<p>Learn from past failures: 1. Who tried this before? 2. How did it fail them? 3. What patterns repeat? 4. What lessons emerged?</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#step-4-alternative-construction","title":"Step 4: Alternative Construction","text":"<p>Don't just critique - build: 1. What infrastructure do we need? 2. What capacities must develop? 3. What resources are required? 4. What timeline is realistic?</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#anti-pattern-indicators","title":"Anti-Pattern Indicators","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#red-flags-in-tools","title":"Red Flags in Tools","text":"<ul> <li>\"Free\" without clear funding model</li> <li>Requires corporate account</li> <li>No export functionality</li> <li>Closed source</li> <li>Silicon Valley origins</li> </ul>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#red-flags-in-practices","title":"Red Flags in Practices","text":"<ul> <li>Can't explain to new members</li> <li>Depends on one person</li> <li>No documentation trail</li> <li>Borrowed from corporate world</li> <li>Metrics over meaning</li> </ul>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#red-flags-in-structures","title":"Red Flags in Structures","text":"<ul> <li>Informal hierarchy</li> <li>Expertise gatekeeping</li> <li>No rotation mechanism</li> <li>Personality dependent</li> <li>Grant funded</li> </ul>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#case-study-slack-organizing","title":"Case Study: Slack Organizing","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#surface-appeal","title":"Surface Appeal","text":"<ul> <li>Channels for working groups</li> <li>Threading for discussions</li> <li>Integrations with everything</li> <li>Mobile accessible</li> <li>\"Everyone uses it\"</li> </ul>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#hidden-costs-revealed","title":"Hidden Costs Revealed","text":"<ul> <li>$100K+ extracted as \"value\" per organization</li> <li>Complete surveillance of organizing</li> <li>History paywall after 10,000 messages</li> <li>Corporate control of critical infrastructure</li> <li>Learned dependence on proprietary tools</li> </ul>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#material-analysis","title":"Material Analysis","text":"<ul> <li>Venture capital demands growth</li> <li>Data mining for corporate intelligence</li> <li>Freemium model hooks organizations</li> <li>Enterprise sales extract movement resources</li> </ul>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#prefigurative-alternative","title":"Prefigurative Alternative","text":"<ul> <li>Self-hosted Mattermost/Rocket.Chat</li> <li>Federated Matrix network</li> <li>DRUIDS for permanent records</li> <li>Email lists for critical comms</li> </ul>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#security-anti-patterns","title":"Security Anti-Patterns","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-password-spreadsheet","title":"The Password Spreadsheet","text":"<p>Surface Appeal: Easy sharing, everyone can access Hidden Costs: - Catastrophic breach potential - No access control - No audit trail - Plain text storage</p> <p>Material Basis: Technical education gap Alternative: Password manager with shared vaults</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-trust-everyone-repository","title":"The \"Trust Everyone\" Repository","text":"<p>Surface Appeal: Open collaboration, no barriers Hidden Costs: - Infiltration vulnerability - Sensitive data exposure - No accountability - Quality degradation</p> <p>Material Basis: Naive idealism over security culture Alternative: Tiered access with review process</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-unencrypted-backup","title":"The Unencrypted Backup","text":"<p>Surface Appeal: Quick, simple, \"what could happen?\" Hidden Costs: - State surveillance gift - Identity exposure - Historical evidence - Blackmail material</p> <p>Material Basis: Convenience over consequences Alternative: Encrypted, distributed backups</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#workflow-anti-patterns","title":"Workflow Anti-Patterns","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-everything-channel","title":"The Everything Channel","text":"<p>Surface Appeal: One place for everything Hidden Costs: - Information burial - Context collapse - Decision paralysis - No prioritization</p> <p>Material Basis: Avoiding organizational structure Alternative: Purpose-specific channels with clear mandates</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-endless-meeting","title":"The Endless Meeting","text":"<p>Surface Appeal: \"Democratic participation\" Hidden Costs: - Burnout acceleration - Nothing documented - Privileged participation - Decision avoidance</p> <p>Material Basis: Performance of process over outcomes Alternative: Time-boxed, documented, action-focused meetings</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-hero-debugger","title":"The Hero Debugger","text":"<p>Surface Appeal: \"They fix everything fast\" Hidden Costs: - Knowledge silo - Burnout inevitable - Bus factor critical - Learning prevented</p> <p>Material Basis: Ego over collective capacity Alternative: Pair debugging and documentation</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#detection-checklist","title":"Detection Checklist","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#quick-anti-pattern-audit","title":"Quick Anti-Pattern Audit","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#for-any-new-tool","title":"For Any New Tool","text":"<ul> <li> Who owns the company?</li> <li> How does it make money?</li> <li> What data does it collect?</li> <li> Can we export everything?</li> <li> What happens if it disappears?</li> <li> Who can't use it (accessibility)?</li> <li> What behavior does it encourage?</li> </ul>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#for-current-practices","title":"For Current Practices","text":"<ul> <li> Could we explain this to a new member?</li> <li> What happens if key person leaves?</li> <li> Is this documented anywhere?</li> <li> Who is excluded by this practice?</li> <li> What corporate habit did we copy?</li> </ul>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#for-organizational-structure","title":"For Organizational Structure","text":"<ul> <li> Where is power actually held?</li> <li> How do decisions really get made?</li> <li> Who speaks most in meetings?</li> <li> What knowledge isn't shared?</li> <li> Which roles never rotate?</li> </ul>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#prevention-strategies","title":"Prevention Strategies","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#technical-prevention","title":"Technical Prevention","text":"Bash<pre><code># Anti-pattern: Committing secrets\n# Prevention: Pre-commit hooks\ncat &gt; .git/hooks/pre-commit &lt;&lt; 'EOF'\n#!/bin/bash\n# Check for common secret patterns\nif git diff --cached | grep -E \"(password|apikey|secret|token)\" ; then\n    echo \"WARNING: Possible secrets detected!\"\n    exit 1\nfi\nEOF\n\n# Anti-pattern: Large binary files\n# Prevention: Git LFS from start\ngit lfs track \"*.pdf\" \"*.zip\" \"*.mp4\"\n\n# Anti-pattern: No backups\n# Prevention: Automated mirrors\ngit remote add backup git@backup-server:org/repo.git\n</code></pre>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#process-prevention","title":"Process Prevention","text":"Markdown<pre><code># Anti-pattern: Unreviewed access\n# Prevention: Access checklist\n\n## New Member Access Checklist\n- [ ] Identity verified by: _______\n- [ ] Vouched for by: _______\n- [ ] Security training completed\n- [ ] Signed security agreement\n- [ ] Access level determined: L0 / L1 / L2\n- [ ] Review date set: _______\n</code></pre>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#cultural-prevention","title":"Cultural Prevention","text":"<ol> <li>Normalize questioning tools: \"Why do we use this?\"</li> <li>Rotate tool selection: Don't let one person choose everything</li> <li>Document decisions: \"We chose X because Y\"</li> <li>Review regularly: Quarterly tool/practice audits</li> </ol>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#building-anti-pattern-resistance","title":"Building Anti-Pattern Resistance","text":"","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#individual-level","title":"Individual Level","text":"<ol> <li>Question convenience</li> <li>Investigate funding</li> <li>Learn history</li> <li>Share analysis</li> </ol>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#organizational-level","title":"Organizational Level","text":"<ol> <li>Audit current tools</li> <li>Map dependencies</li> <li>Plan transitions</li> <li>Build alternatives</li> </ol>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#movement-level","title":"Movement Level","text":"<ol> <li>Share infrastructure</li> <li>Document failures</li> <li>Develop standards</li> <li>Support alternatives</li> </ol>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#the-positive-pattern","title":"The Positive Pattern","text":"<p>For every anti-pattern, a revolutionary pattern exists:</p> <p>Anti-Pattern: Corporate platform dependency Pattern: Federated self-hosting</p> <p>Anti-Pattern: Knowledge hoarding Pattern: Skill rotation</p> <p>Anti-Pattern: Grant capture Pattern: Member funding</p> <p>Anti-Pattern: Personality cult Pattern: Collective leadership</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#your-analysis-assignment","title":"Your Analysis Assignment","text":"<p>Take one tool your organization uses:</p> <ol> <li>Surface Appeal: Why did you choose it?</li> <li>Hidden Costs: What problems emerged?</li> <li>Material Basis: How does it make money?</li> <li>Alternative: What would you build?</li> </ol> <p>Share your analysis. Build collective knowledge.</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#remember","title":"Remember","text":"<p>Anti-patterns persist because they offer real conveniences while hiding real costs. Our job isn't to moralize about using corporate tools - it's to build alternatives that serve our needs better.</p> <p>Every anti-pattern is a design challenge for revolutionary infrastructure.</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#quick-reference-common-anti-patterns","title":"Quick Reference: Common Anti-Patterns","text":"Category Anti-Pattern Quick Check Alternative Communication Discord/Slack \"Is our history owned by VC?\" DRUIDS + Matrix Storage Google Drive \"Can they delete our work?\" Git + Nextcloud Security Passwords in chat \"Is this encrypted at rest?\" Password manager Meetings Zoom without notes \"Will we remember decisions?\" Documented minutes Leadership Single tech person \"What's our bus factor?\" Rotation schedule Funding Grant dependence \"Who controls our work?\" Member dues Tools \"Free\" services \"How do they profit?\" Self-hosted FOSS Process No documentation \"Can newcomers understand?\" Everything in Git","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/anti-pattern-framework/#emergency-anti-pattern-response","title":"Emergency Anti-Pattern Response","text":"<p>When you discover you're deep in an anti-pattern:</p> <ol> <li>Don't panic - You're not the first</li> <li>Document the situation - What's at risk?</li> <li>Stop the bleeding - Prevent further damage</li> <li>Plan transition - Step by step</li> <li>Learn publicly - Share with movement</li> </ol> <p>Remember: Every organization uses some anti-patterns. The goal isn't perfection - it's conscious choice and gradual improvement.</p> <p>See specific examples? \u2192 Why Discord Democracy Fails Ready to build? \u2192 Migration Guides</p> <p>Backlinks:</p>","tags":["anti-patterns","theory","framework","failure-analysis","methodology"]},{"location":"learn/core-concepts/democratic-centralism/","title":"Democratic Centralism","text":"<ul> <li> TODO: Finish writing this</li> <li> TODO: Format correctly</li> </ul> <p>Democratic centralism is the foundational organizational principle underlying DRUIDS. It provides a framework for collective decision-making combined with unified action, balancing democratic participation with effective implementation.</p>","tags":["democratic-centralism","organizational-theory","decision-making","collective-action"]},{"location":"learn/core-concepts/democratic-centralism/#core-principles","title":"Core Principles","text":"<p>Democratic centralism is commonly misunderstood as a system of authoritarianism, but it is actually a system of democracy. Centralism and democracy are not opposites in contradiction, but they do exist in a dialectic relationship. Centralism relies upon democracy to remain abreast of the needs of the masses, to have accurate information, and to be able to make timely and effective decisions. Democracy relies on centralism for direction, guidance, and discipline. Centralism enhances democracy by providing the necessary structure to ensure that the will of the masses is properly represented and implemented.</p>","tags":["democratic-centralism","organizational-theory","decision-making","collective-action"]},{"location":"learn/core-concepts/democratic-centralism/#freedom-of-discussion","title":"Freedom of Discussion","text":"<p>Before decisions are made, all members have the right and responsibility to contribute to discussions. Once a decision is reached democratically, all members implement it with discipline, regardless of their personal position during the debate.</p>","tags":["democratic-centralism","organizational-theory","decision-making","collective-action"]},{"location":"learn/core-concepts/democratic-centralism/#unity-of-action","title":"Unity of Action","text":"<p>Unity of action is the ability of the organization to move as one, to act in concert, to coordinate its actions, and to achieve its goals. It is the ability of the organization to move as one, to act in concert, to coordinate its actions, and to achieve its goals.</p>","tags":["democratic-centralism","organizational-theory","decision-making","collective-action"]},{"location":"learn/core-concepts/democratic-centralism/#collective-decision-making","title":"Collective Decision-Making","text":"<p>After thorough discussion, majority decisions become binding on all members. The minority maintains the right to hold their views internally but must implement the majority decision in practice.</p>","tags":["democratic-centralism","organizational-theory","decision-making","collective-action"]},{"location":"learn/core-concepts/democratic-centralism/#principled-criticisms","title":"Principled Criticisms","text":"","tags":["democratic-centralism","organizational-theory","decision-making","collective-action"]},{"location":"learn/core-concepts/democratic-centralism/#reports-from-the-rank-and-file","title":"Reports from the Rank and File","text":"","tags":["democratic-centralism","organizational-theory","decision-making","collective-action"]},{"location":"learn/core-concepts/democratic-centralism/#how-it-works-in-practice","title":"How It Works in Practice","text":"<ol> <li> <p>Proposal Submission</p> </li> <li> <p>Any member can submit proposals through defined channels</p> </li> <li>Proposals must include rationale and implementation plans</li> <li> <p>Security classification is assigned based on content</p> </li> <li> <p>Information Gathering</p> </li> <li> <p>Relevant data and perspectives are collected</p> </li> <li>Subject matter experts provide input</li> <li> <p>Historical precedents are reviewed</p> </li> <li> <p>Ideological Struggle</p> </li> <li> <p>Proposals are evaluated against organizational principles</p> </li> <li>Members engage in structured discussion</li> <li> <p>Different viewpoints are thoroughly explored</p> </li> <li> <p>Build Unity from Struggle</p> </li> <li> <p>Common ground is identified</p> </li> <li>Compromise positions may be developed</li> <li> <p>Final proposals are refined</p> </li> <li> <p>Voting</p> </li> <li> <p>Formal votes are conducted through secure channels</p> </li> <li>Results are transparent to appropriate security levels</li> <li> <p>Decisions are binding once made</p> </li> <li> <p>Implementation</p> </li> <li> <p>Clear responsibilities are assigned</p> </li> <li>Timelines and metrics are established</li> <li> <p>All members work toward the decided goal</p> </li> <li> <p>Accountability</p> </li> <li> <p>Progress is regularly reported</p> </li> <li>Deviations are addressed through criticism/self-criticism</li> <li>Results are evaluated objectively</li> </ol>","tags":["democratic-centralism","organizational-theory","decision-making","collective-action"]},{"location":"learn/core-concepts/democratic-centralism/#common-misconceptions","title":"Common Misconceptions","text":"<ul> <li>It's Authoritarian - Democratic centralism requires MORE democracy than typical organizations, not less. Every decision involves genuine discussion before implementation.</li> <li>It's Bureaucratic - Properly implemented, it prevents bureaucracy by ensuring leadership remains accountable to membership through regular criticism/self-criticism.</li> <li>It's Inflexible - The system adapts to conditions. During high-security situations, it may emphasize centralism; during development periods, it may emphasize democracy.</li> <li>It's Not Democratic - Democratic centralism is a system of democracy, not a system of authoritarianism.</li> </ul>","tags":["democratic-centralism","organizational-theory","decision-making","collective-action"]},{"location":"learn/core-concepts/democratic-centralism/#benefits-for-organizations","title":"Benefits for Organizations","text":"<ol> <li>Clear Decision-Making: No ambiguity about how decisions are made</li> <li>Unified Action: Entire organization moves as one</li> <li>Accountability: Leadership answerable to membership</li> <li>Security: Natural compartmentalization of information</li> <li>Efficiency: Decisions implemented without endless re-litigation</li> </ol>","tags":["democratic-centralism","organizational-theory","decision-making","collective-action"]},{"location":"learn/core-concepts/democratic-centralism/#next-steps","title":"Next Steps","text":"<ul> <li>Review Practical Workflows for implementation</li> </ul> <p>Backlinks:</p>","tags":["democratic-centralism","organizational-theory","decision-making","collective-action"]},{"location":"learn/core-concepts/druids-security-implementation/","title":"DRUIDS Security Implementation Design","text":"<p>Technical architecture for democratic security without hierarchy</p>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#overview","title":"Overview","text":"<p>DRUIDS implements a three-tier security model that balances: - Transparency for democratic organizing - Protection from state surveillance - Resilience against infiltration - Usability for non-technical members</p>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#security-tier-architecture","title":"Security Tier Architecture","text":"","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#l0-public-information","title":"L0: Public Information","text":"<p>Definition: Information safe for public consumption, adversaries included.</p> <p>Technical Implementation: Text Only<pre><code>Storage: Plain text files in /vault/L0/\nSync: Standard Git/Syncthing\nEncryption: None required\nAccess: All members + public\nBackup: Public repositories\n</code></pre></p> <p>Examples: - Meeting announcements (no locations) - Political education materials - Public statements - General organizing guides</p> <p>Implementation Details: Bash<pre><code># L0 directory structure\nvault/\n\u251c\u2500\u2500 L0/\n\u2502   \u251c\u2500\u2500 announcements/\n\u2502   \u251c\u2500\u2500 education/\n\u2502   \u251c\u2500\u2500 statements/\n\u2502   \u2514\u2500\u2500 guides/\n\n# Git configuration for L0\n[filter \"L0\"]\n    clean = druids-filter-L0 %f\n    smudge = cat\n</code></pre></p>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#l1-organizational-information","title":"L1: Organizational Information","text":"<p>Definition: Internal information requiring membership trust.</p> <p>Technical Implementation: Text Only<pre><code>Storage: Encrypted with org-wide key\nSync: Encrypted channels only\nEncryption: GPG with shared org key\nAccess: Verified members only\nBackup: Encrypted repositories\n</code></pre></p> <p>Examples: - Member rosters (pseudonyms only) - Internal discussions - Campaign strategies - Meeting minutes</p> <p>Implementation Details: Bash<pre><code># L1 encryption setup\n# Generate org key\ngpg --batch --generate-key &lt;&lt;EOF\n%echo Generating organizational key\nKey-Type: RSA\nKey-Length: 4096\nSubkey-Type: RSA\nSubkey-Length: 4096\nName-Real: Organization Name\nName-Email: org@secure.dev\nExpire-Date: 1y\n%commit\nEOF\n\n# Encrypt L1 content\necho \"*.L1.md filter=gpg diff=gpg\" &gt;&gt; .gitattributes\n\n# Configure Git filters\ngit config filter.gpg.clean \"gpg --encrypt --recipient org@secure.dev\"\ngit config filter.gpg.smudge \"gpg --decrypt\"\n</code></pre></p>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#l2-sensitive-operations","title":"L2: Sensitive Operations","text":"<p>Definition: Information that could compromise safety if exposed.</p> <p>Technical Implementation: Text Only<pre><code>Storage: Client-side encrypted, no central storage\nSync: Direct peer-to-peer only\nEncryption: Individual keys + forward secrecy\nAccess: Need-to-know basis\nBackup: Distributed fragments\n</code></pre></p> <p>Examples: - Direct action plans - Legal defense strategies - Security vulnerabilities - Identity mappings</p> <p>Implementation Details: Bash<pre><code># L2 security implementation\n# Uses age for forward secrecy\nage-keygen &gt; l2-identity.key\n\n# Encrypt for specific recipients\nage -e -r age1xyz... -r age1abc... sensitive.txt &gt; sensitive.txt.age\n\n# Implement perfect forward secrecy\ndruids l2 rotate-keys --interval=24h\n\n# Shamir's Secret Sharing for critical data\ndruids l2 split --threshold=3 --shares=5 critical-data.gpg\n</code></pre></p>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#cryptographic-architecture","title":"Cryptographic Architecture","text":"","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#key-hierarchy","title":"Key Hierarchy","text":"Text Only<pre><code>Master Org Key (L1 Bootstrap)\n\u251c\u2500\u2500 Member Signing Keys\n\u2502   \u251c\u2500\u2500 Authentication subkey\n\u2502   \u251c\u2500\u2500 Encryption subkey\n\u2502   \u2514\u2500\u2500 Signing subkey\n\u251c\u2500\u2500 Device Keys (per member device)\n\u2502   \u251c\u2500\u2500 SSH key (hardware-backed)\n\u2502   \u2514\u2500\u2500 Age key (ephemeral)\n\u2514\u2500\u2500 Session Keys (temporary)\n    \u251c\u2500\u2500 Meeting keys (per session)\n    \u2514\u2500\u2500 Operation keys (per action)\n</code></pre>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#implementation-components","title":"Implementation Components","text":"YAML<pre><code># druids-security.yaml\nsecurity:\n  tiers:\n    L0:\n      encryption: none\n      storage: plaintext\n      sync: public\n\n    L1:\n      encryption: gpg-symmetric\n      key_rotation: monthly\n      storage: encrypted\n      sync: authenticated\n\n    L2:\n      encryption: age-asymmetric\n      key_rotation: daily\n      storage: client-only\n      sync: direct-p2p\n      perfect_forward_secrecy: true\n\n  algorithms:\n    asymmetric: \"RSA-4096,Ed25519\"\n    symmetric: \"AES-256-GCM\"\n    hash: \"SHA-512,BLAKE2b\"\n    kdf: \"Argon2id\"\n</code></pre>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#access-control-implementation","title":"Access Control Implementation","text":"","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#member-authentication","title":"Member Authentication","text":"Python<pre><code># Pseudocode for member auth flow\ndef authenticate_member(request):\n    # 1. Hardware key presence\n    if not hardware_key_present():\n        return deny(\"Hardware key required\")\n\n    # 2. PIN verification\n    if not verify_pin(request.pin):\n        return deny(\"Invalid PIN\")\n\n    # 3. GPG signature verification\n    if not verify_gpg_signature(request.signature):\n        return deny(\"Invalid signature\")\n\n    # 4. Time-based access check\n    if not within_access_window(request.member_id):\n        return deny(\"Outside access window\")\n\n    return allow(generate_session_token())\n</code></pre>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#tier-based-access-control","title":"Tier-Based Access Control","text":"Bash<pre><code>#!/bin/bash\n# druids-access-check\n\ntier=$1\nmember_key=$2\nresource=$3\n\ncase $tier in\n    L0)\n        # L0 is always accessible\n        exit 0\n        ;;\n    L1)\n        # Check if member key is in org keyring\n        if gpg --list-keys | grep -q \"$member_key\"; then\n            exit 0\n        fi\n        ;;\n    L2)\n        # Check if member is in access list for resource\n        if age -d -i ~/.druids/l2-identity.key \"$resource.access\" | grep -q \"$member_key\"; then\n            exit 0\n        fi\n        ;;\nesac\n\nexit 1  # Deny access\n</code></pre>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#network-security","title":"Network Security","text":"","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#tor-integration","title":"Tor Integration","text":"Nginx Configuration File<pre><code># Tor hidden service configuration\nserver {\n    listen 127.0.0.1:7744;\n    server_name localhost;\n\n    # DRUIDS sync endpoint\n    location /sync {\n        proxy_pass http://localhost:8384;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # Require client certificate\n        ssl_client_certificate /etc/druids/ca.crt;\n        ssl_verify_client on;\n    }\n\n    # L1 content delivery\n    location /l1/ {\n        auth_request /auth;\n        root /var/druids/vault;\n\n        # Encryption headers\n        add_header X-Content-Encrypted \"true\";\n        add_header X-Encryption-Tier \"L1\";\n    }\n}\n</code></pre>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#p2p-sync-security","title":"P2P Sync Security","text":"Go<pre><code>// Secure sync protocol implementation\ntype SecureSync struct {\n    tier      SecurityTier\n    transport Transport\n    crypto    CryptoProvider\n}\n\nfunc (s *SecureSync) Handshake(peer Peer) error {\n    // 1. Exchange ephemeral keys\n    ephemeralKey := s.crypto.GenerateEphemeral()\n    peerKey := peer.ExchangeKeys(ephemeralKey)\n\n    // 2. Derive session key\n    sessionKey := s.crypto.DeriveShared(ephemeralKey, peerKey)\n\n    // 3. Authenticate peer\n    if !s.authenticatePeer(peer, sessionKey) {\n        return ErrAuthenticationFailed\n    }\n\n    // 4. Negotiate capabilities\n    caps := s.negotiateCapabilities(peer)\n\n    // 5. Begin encrypted sync\n    return s.syncWithPeer(peer, sessionKey, caps)\n}\n</code></pre>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#data-protection-patterns","title":"Data Protection Patterns","text":"","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#at-rest-encryption","title":"At-Rest Encryption","text":"Bash<pre><code># Filesystem encryption setup\n# Create encrypted volume\ncryptsetup luksFormat /dev/sdb1\ncryptsetup open /dev/sdb1 druids-vault\n\n# Format with security labels\nmkfs.ext4 -L druids-vault /dev/mapper/druids-vault\n\n# Mount with security options\nmount -o nosuid,nodev,noexec /dev/mapper/druids-vault /vault\n\n# Automatic unmount on idle\ncat &gt; /etc/systemd/system/druids-vault-idle.service &lt;&lt; EOF\n[Unit]\nDescription=Unmount DRUIDS vault on idle\n\n[Service]\nType=oneshot\nExecStart=/usr/local/bin/druids-idle-unmount\n\n[Timer]\nOnUnitInactiveSec=15m\nEOF\n</code></pre>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#in-transit-security","title":"In-Transit Security","text":"Python<pre><code># All network traffic through Tor\nimport socks\nimport socket\n\n# Configure global Tor proxy\nsocks.set_default_proxy(socks.SOCKS5, \"127.0.0.1\", 9050)\nsocket.socket = socks.socksocket\n\n# TLS configuration\ncontext = ssl.create_default_context()\ncontext.minimum_version = ssl.TLSVersion.TLSv1_3\ncontext.set_ciphers('ECDHE+AESGCM:ECDHE+CHACHA20:!aNULL:!MD5:!DSS')\n</code></pre>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#memory-protection","title":"Memory Protection","text":"C<pre><code>// Secure memory handling\n#include &lt;sodium.h&gt;\n\ntypedef struct {\n    unsigned char *data;\n    size_t len;\n} secure_buffer_t;\n\nsecure_buffer_t* secure_alloc(size_t len) {\n    secure_buffer_t *buf = malloc(sizeof(secure_buffer_t));\n    buf-&gt;data = sodium_malloc(len);  // Locked, guarded pages\n    buf-&gt;len = len;\n    return buf;\n}\n\nvoid secure_free(secure_buffer_t *buf) {\n    sodium_memzero(buf-&gt;data, buf-&gt;len);  // Explicit zeroing\n    sodium_free(buf-&gt;data);\n    free(buf);\n}\n</code></pre>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#audit-and-monitoring","title":"Audit and Monitoring","text":"","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#security-event-logging","title":"Security Event Logging","text":"YAML<pre><code># Audit configuration\naudit:\n  events:\n    - authentication_attempt\n    - tier_access\n    - key_operation\n    - sync_activity\n    - encryption_failure\n\n  retention:\n    L0_events: 7d\n    L1_events: 30d\n    L2_events: immediate_rotation\n\n  alerts:\n    failed_auth_threshold: 3\n    unusual_access_pattern: true\n    key_compromise_indicator: true\n</code></pre>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#intrusion-detection","title":"Intrusion Detection","text":"Python<pre><code># Anomaly detection for security events\nclass SecurityMonitor:\n    def __init__(self):\n        self.baseline = self.load_baseline()\n        self.ml_model = self.load_ml_model()\n\n    def analyze_event(self, event):\n        # Statistical anomaly detection\n        if self.is_statistical_anomaly(event):\n            self.alert(\"Statistical anomaly\", event)\n\n        # ML-based pattern detection\n        if self.ml_model.predict_anomaly(event) &gt; 0.8:\n            self.alert(\"ML anomaly detected\", event)\n\n        # Rule-based detection\n        if self.matches_known_attack(event):\n            self.alert(\"Known attack pattern\", event)\n            self.initiate_lockdown()\n</code></pre>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#recovery-and-resilience","title":"Recovery and Resilience","text":"","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#key-recovery","title":"Key Recovery","text":"Bash<pre><code>#!/bin/bash\n# Shamir's Secret Sharing for key recovery\n\n# Split master key into shares\ndruids key split \\\n    --key-file master.key \\\n    --threshold 3 \\\n    --shares 5 \\\n    --output-dir /secure/shares/\n\n# Distribute shares to trusted members\nfor i in {1..5}; do\n    age -e -r \"$(cat member-$i.pubkey)\" \\\n        \"/secure/shares/share-$i\" &gt; \"share-$i.age\"\n    secure-delete /secure/shares/share-$i\ndone\n\n# Recovery requires 3 members\ndruids key recover \\\n    --share share-1.age \\\n    --share share-3.age \\\n    --share share-5.age \\\n    --output recovered-master.key\n</code></pre>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#compromise-response","title":"Compromise Response","text":"YAML<pre><code># Incident response playbook\ncompromise_response:\n  immediate:\n    - revoke_compromised_keys\n    - rotate_all_session_keys\n    - notify_affected_members\n    - begin_security_audit\n\n  within_1h:\n    - change_all_passphrases\n    - regenerate_tor_addresses\n    - update_access_lists\n    - deploy_new_certificates\n\n  within_24h:\n    - full_security_audit\n    - update_threat_model\n    - retrain_members\n    - document_lessons_learned\n</code></pre>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#implementation-checklist","title":"Implementation Checklist","text":"","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#phase-1-foundation-week-1","title":"Phase 1: Foundation (Week 1)","text":"<ul> <li> GPG key infrastructure</li> <li> Basic tier separation</li> <li> Git filter configuration</li> <li> Member authentication</li> </ul>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#phase-2-hardening-week-2","title":"Phase 2: Hardening (Week 2)","text":"<ul> <li> Tor integration</li> <li> Age encryption for L2</li> <li> Audit logging</li> <li> Access control lists</li> </ul>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#phase-3-advanced-week-3-4","title":"Phase 3: Advanced (Week 3-4)","text":"<ul> <li> P2P sync protocols</li> <li> Perfect forward secrecy</li> <li> Anomaly detection</li> <li> Key recovery system</li> </ul>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/druids-security-implementation/#phase-4-operations-ongoing","title":"Phase 4: Operations (Ongoing)","text":"<ul> <li> Security training materials</li> <li> Incident response drills</li> <li> Regular audits</li> <li> Continuous improvement</li> </ul> <p>Security is a process, not a product. This implementation evolves with threats.</p> <p>Backlinks:</p>","tags":["security","architecture","technical","implementation","L0-L1-L2"]},{"location":"learn/core-concepts/institutional-memory/","title":"Institutional Memory and Revolutionary Capacity","text":"","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#the-problem-we-all-face","title":"The Problem We All Face","text":"<p>Your organization has a problem. When Maria leaves, she takes five years of knowledge with her. When the old guard burns out, campaigns start from scratch. When someone asks \"why did we stop doing phone banking?\", nobody remembers.</p> <p>This isn't individual failure. It's systemic knowledge hemorrhaging that weakens every revolutionary organization.</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#what-is-institutional-memory","title":"What is Institutional Memory?","text":"<p>Institutional memory is the collected knowledge, experience, and decisions that allow an organization to:</p> <ul> <li>Learn from past mistakes</li> <li>Build on previous victories  </li> <li>Maintain continuity through personnel changes</li> <li>Preserve minority positions and dissent</li> <li>Understand the \"why\" behind current practices</li> </ul> <p>Without it, every generation of organizers starts from zero.</p> <p>See this problem in action? Our Quick Demo shows how knowledge walks out the door when Maria leaves. For deeper analysis of how DRUIDS specifically addresses institutional memory and onboarding, see Institutional Memory and Onboarding - Key DRUIDS Value Props.</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#how-organizations-lose-memory","title":"How Organizations Lose Memory","text":"","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#the-sarah-problem","title":"The Sarah Problem","text":"<p>\"Sarah has all the passwords. Sarah knows why we do things this way. Sarah remembers what we tried in 2019.\"</p> <p>When Sarah burns out (and she will), your organization loses: - Years of undocumented decisions - Relationships and trust built over time - Lessons learned through struggle - Context for current practices</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#the-platform-problem","title":"The Platform Problem","text":"<p>Your history is scattered across: - Google Docs (surveilled and deletable) - Discord channels (unsearchable noise) - Email threads (individual silos) - People's heads (temporary storage)</p> <p>Even if you wanted to find why something failed three years ago, where would you look?</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#the-democracy-problem","title":"The Democracy Problem","text":"<p>Decisions made in meetings become fuzzy memories: - Who voted for what? - What were the minority concerns? - Why did we choose this path? - What alternatives were considered?</p> <p>Without records, \"democratic centralism\" becomes \"whoever remembers.\"</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#how-druids-preserves-memory","title":"How DRUIDS Preserves Memory","text":"","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#every-decision-has-context","title":"Every Decision Has Context","text":"<p>Instead of \"We decided to do X,\" DRUIDS preserves:</p> Markdown<pre><code>DECIDED[general-meeting](15-2-1){#5c77733d9860e7a16e5bdcca5b192ba3}: Implement phonebanking campaign\n\nMajority argued phonebanking reaches elderly members without internet.\nMinority concerned about volunteer burnout from previous attempts.\n\nSee: campaigns/2019-phonebank-retrospective.md for lessons learned\n</code></pre> <p>The vote, the debate, the context - all preserved.</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#knowledge-compounds-over-time","title":"Knowledge Compounds Over Time","text":"<p>Traditional organizing: Text Only<pre><code>2019: Try phonebanking \u2192 fails \u2192 knowledge lost\n2021: Try phonebanking \u2192 fails \u2192 knowledge lost  \n2023: Try phonebanking \u2192 fails \u2192 knowledge lost\n</code></pre></p> <p>With DRUIDS: Text Only<pre><code>2019: Try phonebanking \u2192 fails \u2192 document why\n2021: Search history \u2192 find 2019 lessons \u2192 try differently \u2192 partial success\n2023: Build on 2021 \u2192 success\n</code></pre></p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#searchable-forever","title":"Searchable Forever","text":"<p>Need to know about past phonebanking attempts?</p> Bash<pre><code>git log --grep=\"phonebank\"\n</code></pre> <p>Returns every decision, every retrospective, every lesson learned. In seconds.</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#onboarding-becomes-self-service","title":"Onboarding Becomes Self-Service","text":"<p>New member joins. Instead of bothering five different people:</p> <ol> <li>Clone repository</li> <li>Read recent meeting minutes</li> <li>Understand current campaigns from commits</li> <li>See decision history with context</li> <li>Start contributing immediately</li> </ol> <p>The organization's memory becomes their memory.</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#real-examples","title":"Real Examples","text":"","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#campaign-planning","title":"Campaign Planning","text":"<p>Without institutional memory: - \"Let's do a rent strike!\" - \"How do we organize one?\" - \"I don't know, Sarah left.\"</p> <p>With institutional memory: - \"Let's do a rent strike!\" - Check: <code>campaigns/2020-rent-strike/</code> - Find: Complete planning docs, what worked, what didn't - Build on previous experience</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#security-practices","title":"Security Practices","text":"<p>Without institutional memory: - \"Why do we encrypt member lists?\" - \"Paranoia, probably?\" - Practices decay without understanding</p> <p>With institutional memory: - \"Why do we encrypt member lists?\" - Check: <code>security/2019-infiltration-incident.md</code> - Understand: Specific threat that materialized - Practices maintained with purpose</p> <p>Learn security through revolutionary principles: See Security as Revolutionary Practice for our approach.</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#minority-positions","title":"Minority Positions","text":"<p>Without institutional memory: - Dissent disappears - \"Unity\" becomes suppression - Same debates repeat endlessly</p> <p>With institutional memory: - Minority positions preserved - Future organizers learn from all perspectives - Democracy actually recorded</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#building-memory-systematically","title":"Building Memory Systematically","text":"","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#1-document-decisions-not-just-outcomes","title":"1. Document Decisions, Not Just Outcomes","text":"<p>Bad: \"We're doing phonebanking\"</p> <p>Good: \"After debate on outreach methods, voted 15-2-1 to implement phonebanking. Majority cited reaching non-internet users. Minority concerned about volunteer capacity. See Joan's proposal in proposals/2024-outreach-strategy.md\"</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#2-create-knowledge-artifacts","title":"2. Create Knowledge Artifacts","text":"<p>After every campaign: - What we tried - Why we tried it - What happened - Lessons learned - What we'd do differently</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#3-make-history-accessible","title":"3. Make History Accessible","text":"<ul> <li>Use clear file names</li> <li>Write descriptive commit messages</li> <li>Create indexes and guides</li> <li>Teach search techniques</li> </ul>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#4-normalize-documentation","title":"4. Normalize Documentation","text":"<p>Documentation isn't \"extra work\" - it's organizing work: - Meeting notes during the meeting - Decision records immediately after votes - Campaign retrospectives as final action</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#the-compound-effect","title":"The Compound Effect","text":"<p>Year 1: Basic documentation feels like overhead Year 2: Start referencing previous decisions Year 3: New members onboard themselves Year 5: Institutional memory becomes competitive advantage Year 10: Organization operates at different level entirely</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#common-objections","title":"Common Objections","text":"<p>\"We don't have time to document\" How much time do you waste repeating mistakes? Re-explaining decisions? Starting from scratch?</p> <p>\"People don't read documentation\" They do when it directly helps their work. Make it searchable and relevant.</p> <p>\"Things change too fast\" That's exactly why you need history - to understand what changed and why.</p> <p>\"We're too small\" Small organizations lose proportionally more when someone leaves. You need this more, not less.</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#memory-as-revolutionary-capacity","title":"Memory as Revolutionary Capacity","text":"<p>Organizations with institutional memory: - Learn from struggle instead of repeating it - Build on victories instead of forgetting them - Preserve dissent instead of suppressing it - Transfer knowledge instead of hoarding it</p> <p>This isn't about perfection. It's about building collective capacity that survives individual changes.</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/institutional-memory/#getting-started","title":"Getting Started","text":"<ol> <li>Today: Document your next decision with context</li> <li>This week: Create your first campaign retrospective</li> <li>This month: Teach someone else to search history</li> <li>This year: Watch knowledge compound into power</li> </ol> <p>Ready to implement this? Start with Your First Revolutionary Commit to practice documentation.</p> <p>Want to see the technical side? Learn Git Fundamentals for preserving memory.</p> <p>Need to escape corporate platforms? Check migration guides for Google and Discord.</p> <p>\"A revolution that doesn't learn from its history is doomed to repeat it - literally, because nobody remembers what happened.\"</p> <p>Backlinks:</p>","tags":["institutional-memory","knowledge-management","capacity-building","sustainability"]},{"location":"learn/core-concepts/power-steering-metaphor/","title":"The Power Steering Metaphor","text":"","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#the-metaphor-explained","title":"The Metaphor Explained","text":"<p>Think about power steering in a vehicle. It doesn't decide where you drive\u2014it makes steering easier. Without it, you can still turn the wheel, but it requires more effort, especially at low speeds or when maneuvering in tight spaces. With it, the same movements achieve greater results with less strain.</p> <p>DRUIDS is power steering for revolutionary organizing.</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#what-this-means-materially","title":"What This Means Materially","text":"","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#without-druids-manual-steering","title":"Without DRUIDS (Manual Steering)","text":"<ul> <li>Every decision requires reconstructing context</li> <li>Knowledge lives in individual heads</li> <li>Coordination demands constant communication</li> <li>Security requires perfect individual discipline</li> <li>Growth means exponential complexity</li> </ul>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#with-druids-power-steering","title":"With DRUIDS (Power Steering)","text":"<ul> <li>Context travels with decisions automatically</li> <li>Knowledge becomes collective infrastructure</li> <li>Coordination happens through structure</li> <li>Security becomes systematic practice</li> <li>Growth builds on preserved foundations</li> </ul>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#the-key-insight","title":"The Key Insight","text":"<p>Power steering doesn't make decisions for the driver. It amplifies the driver's intentions, making them easier to execute. Similarly, DRUIDS doesn't dictate your organizing strategy\u2014it makes your chosen strategy easier to implement.</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#common-misunderstandings","title":"Common Misunderstandings","text":"","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#druids-will-organize-for-us","title":"\"DRUIDS Will Organize For Us\"","text":"<p>Reality: DRUIDS preserves and amplifies your organizing. Bad organizing with good tools is still bad organizing\u2014just better documented.</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#technology-determines-politics","title":"\"Technology Determines Politics\"","text":"<p>Reality: Infrastructure shapes possibilities, not outcomes. A hammer can build houses or break windows. The politics remain in the hands of users.</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#more-features-better-organizing","title":"\"More Features = Better Organizing\"","text":"<p>Reality: Power steering is simple infrastructure done well. Complexity often reduces rather than enhances capacity.</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#practical-applications","title":"Practical Applications","text":"","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#meeting-documentation","title":"Meeting Documentation","text":"<p>Manual: Someone takes notes, emails them, they get lost in inboxes Power Steering: Notes committed, context preserved, searchable forever</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#campaign-planning","title":"Campaign Planning","text":"<p>Manual: Recreate strategy each meeting, lose institutional memory Power Steering: Build on preserved knowledge, see what worked before</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#security-practices","title":"Security Practices","text":"<p>Manual: Rely on individual habits and discipline Power Steering: Systematic practices built into workflows</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#onboarding-new-members","title":"Onboarding New Members","text":"<p>Manual: Repeat everything, hope nothing gets missed Power Steering: Self-guided paths through preserved knowledge</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#the-political-implications","title":"The Political Implications","text":"","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#democratization-vs-hierarchy","title":"Democratization vs. Hierarchy","text":"<p>Power steering is available to all drivers equally. Similarly, DRUIDS democratizes technical capacity rather than creating new hierarchies.</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#collective-vs-individual","title":"Collective vs. Individual","text":"<p>Just as modern vehicles assume power steering as baseline infrastructure, revolutionary organizations need collective memory as baseline capacity.</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#sustainability-vs-burnout","title":"Sustainability vs. Burnout","text":"<p>Power steering reduces driver fatigue on long journeys. DRUIDS reduces organizer burnout by preserving rather than recreating knowledge.</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#design-principles","title":"Design Principles","text":"","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#1-amplify-dont-automate","title":"1. Amplify, Don't Automate","text":"<p>Enhance human judgment rather than replacing it</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#2-invisible-when-working","title":"2. Invisible When Working","text":"<p>Good infrastructure disappears into practice</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#3-equal-access","title":"3. Equal Access","text":"<p>No special technical knowledge required</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#4-progressive-enhancement","title":"4. Progressive Enhancement","text":"<p>Work at any skill level, reward growth</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#5-collective-benefit","title":"5. Collective Benefit","text":"<p>Individual contributions strengthen everyone</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#when-power-steering-matters-most","title":"When Power Steering Matters Most","text":"","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#high-stress-situations","title":"High-Stress Situations","text":"<ul> <li>Rapid response organizing</li> <li>Security incidents</li> <li>Coalition coordination</li> <li>Crisis management</li> </ul>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#long-term-building","title":"Long-Term Building","text":"<ul> <li>Multi-year campaigns</li> <li>Institutional development</li> <li>Knowledge preservation</li> <li>Capacity building</li> </ul>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#scale-transitions","title":"Scale Transitions","text":"<ul> <li>Growing from 10 to 100 members</li> <li>Adding new chapters</li> <li>Federating organizations</li> <li>Coordinating regions</li> </ul>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/power-steering-metaphor/#conclusion","title":"Conclusion","text":"<p>DRUIDS as power steering means: - Your organizing determines direction - The infrastructure makes it easier - Everyone benefits from collective capacity - The technology serves the politics</p> <p>The revolution doesn't need more complex tools. It needs simple infrastructure that amplifies collective capacity while preserving democratic control.</p> <p>Next Steps: - Understand the practice: Democratic Centralism - See it in action: Git Through a Campaign - Start building: Your First Revolutionary Commit</p> <p>Backlinks:</p>","tags":["theory","metaphor","infrastructure","capacity-building"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/","title":"Security as Revolutionary Practice","text":"<p>Security culture isn't paranoia - it's love for our movement and each other</p>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#the-revolutionary-framework","title":"The Revolutionary Framework","text":"<p>Security isn't about individual privacy or hiding from the world. It's about protecting our collective capacity to organize and build power.</p>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#what-security-actually-protects","title":"What Security Actually Protects","text":"<ol> <li>Organizational Continuity: Keeping our work alive when individual members face repression</li> <li>Strategic Advantage: Maintaining initiative rather than reacting to state moves</li> <li>Community Trust: Creating conditions where people feel safe to participate</li> <li>Future Organizing: Preserving space for movements that don't yet exist</li> </ol>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#security-culture-vs-security-theater","title":"Security Culture vs. Security Theater","text":"","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#security-culture-what-we-want","title":"Security Culture (What We Want)","text":"<ul> <li>Collective Protection: Everyone takes responsibility for group safety</li> <li>Thoughtful Risk Assessment: Understanding what we're protecting and why</li> <li>Adaptive Practices: Security measures that evolve with our work</li> <li>Sustainable Habits: Practices people can maintain long-term</li> </ul>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#security-theater-what-to-avoid","title":"Security Theater (What to Avoid)","text":"<ul> <li>Individual Paranoia: \"Everyone is a cop\" mentality that destroys trust</li> <li>Rigid Rules: Security practices divorced from actual threats</li> <li>Technology Fetishism: Believing tools alone provide security</li> <li>Exclusionary Practices: Security that keeps out the people we need</li> </ul>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#the-druids-security-model","title":"The DRUIDS Security Model","text":"","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#three-tier-information-architecture","title":"Three-Tier Information Architecture","text":"<p>L0 (Public): Information we want widely accessible - Public campaigns and education - General organizing principles - Open-source documentation</p> <p>L1 (Members): Information for committed organizers - Internal strategy and planning - Member contact information - Tactical discussions</p> <p>L2 (Cadre): Information for core leadership - Sensitive operations - Security-critical planning - Risk assessment details</p>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#operational-security-principles","title":"Operational Security Principles","text":"<ol> <li>Compartmentalization: People know what they need to know</li> <li>Need-to-Know: Information shared based on role and necessity</li> <li>Defense in Depth: Multiple layers of protection</li> <li>Graceful Degradation: Systems that fail safely</li> </ol>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#digital-security-as-political-education","title":"Digital Security as Political Education","text":"","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#why-we-use-git-instead-of-surveillance-platforms","title":"Why We Use Git Instead of Surveillance Platforms","text":"<p>Google/Microsoft/Slack/Discord extract value from our organizing: - Data Mining: Our conversations become their product - Dependency: We build organizing capacity on their infrastructure - Vulnerability: They can shut us down at any time - Normalization: We accept surveillance as the price of organizing</p> <p>Git-based systems build our independent capacity: - Self-Hosting: We control our own infrastructure - Transparency: We can audit and modify our tools - Resilience: Distributed systems are harder to destroy - Skills Building: We develop technical capacity within our movement</p>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#teaching-security-through-practice","title":"Teaching Security Through Practice","text":"<p>Security education works best when embedded in actual organizing work:</p> <ul> <li>Meeting Documentation: Practice good security while taking notes</li> <li>Communication Protocols: Develop secure habits through daily use  </li> <li>Information Management: Learn compartmentalization through real campaigns</li> <li>Crisis Response: Test security measures before we need them</li> </ul>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#common-security-mistakes","title":"Common Security Mistakes","text":"","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#individual-vs-collective-thinking","title":"Individual vs. Collective Thinking","text":"<p>Mistake: \"I have nothing to hide, so I don't need security\" Reality: Your lack of security affects everyone you organize with</p> <p>Mistake: \"If they want to get us, they will\" Reality: Good security makes repression more expensive and visible</p>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#technology-solutionism","title":"Technology Solutionism","text":"<p>Mistake: \"Signal solves our communication security\" Reality: Secure communication requires secure practices, not just secure apps</p> <p>Mistake: \"We need to get off all corporate platforms\" Reality: Security is about strategic trade-offs, not purity</p>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#operational-isolation","title":"Operational Isolation","text":"<p>Mistake: \"Security is too complicated for new members\" Reality: Security culture means everyone participates at their level</p> <p>Mistake: \"Only tech people can handle digital security\" Reality: Good security practices should be accessible to everyone</p>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#threat-modeling-for-organizers","title":"Threat Modeling for Organizers","text":"","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#ask-the-right-questions","title":"Ask the Right Questions","text":"<ol> <li>What are we protecting?</li> <li> <p>Information, people, infrastructure, relationships</p> </li> <li> <p>Who are we protecting it from?</p> </li> <li> <p>State agencies, fascists, employers, landlords, tech companies</p> </li> <li> <p>How likely are different attacks?</p> </li> <li> <p>Surveillance, infiltration, doxxing, arrest, violence</p> </li> <li> <p>What happens if protection fails?</p> </li> <li> <p>Individual consequences vs. organizational damage</p> </li> <li> <p>What resources do we have for protection?</p> </li> <li>Time, skills, money, infrastructure, allies</li> </ol>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#common-threat-scenarios","title":"Common Threat Scenarios","text":"<p>Scenario: Police monitoring public organizing - L0 Response: Assume public work is monitored, focus on broad education - L1 Response: Keep tactical discussions in secure channels - L2 Response: Compartmentalize sensitive planning</p> <p>Scenario: Fascist harassment and doxxing - Prevention: Pseudonym discipline, careful photo practices - Response: Community defense, platform security - Recovery: Support systems, legal resources</p> <p>Scenario: Employer retaliation for organizing - Prevention: Separate work and organizing identities - Documentation: Record retaliation for legal protection - Community: Collective support for targeted members</p>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#building-security-culture","title":"Building Security Culture","text":"","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#start-with-why","title":"Start With Why","text":"<p>Before teaching specific practices, help people understand: - How security protects our collective work - Why current practices create vulnerabilities - How security culture builds trust and capacity</p>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#make-it-practical","title":"Make It Practical","text":"<ul> <li>Integrate with real work: Security practice during actual organizing</li> <li>Start small: Build habits gradually rather than overwhelming people</li> <li>Show benefits: Help people experience how good security improves organizing</li> </ul>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#address-fear-and-resistance","title":"Address Fear and Resistance","text":"<p>\"This feels paranoid\" \u2192 \"This is how we take care of each other\"</p> <p>\"It's too complicated\" \u2192 \"We'll learn together, step by step\"</p> <p>\"I don't have anything worth protecting\" \u2192 \"You have access to people and relationships that matter\"</p>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#normalize-security-discussions","title":"Normalize Security Discussions","text":"<ul> <li>Regular security check-ins at meetings</li> <li>Security topics in political education</li> <li>Celebrating good security practices</li> <li>Learning from security mistakes without shame</li> </ul>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#security-as-revolutionary-infrastructure","title":"Security as Revolutionary Infrastructure","text":"","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#building-independent-capacity","title":"Building Independent Capacity","text":"<p>Every security practice should ask: \"Does this make us more dependent on the system we're trying to change, or more capable of independent action?\"</p> <p>Dependencies to Question: - Corporate communication platforms - Centralized hosting services - Proprietary software - Single points of failure</p> <p>Capacities to Build: - Technical skills within our movement - Distributed infrastructure - Security expertise - Crisis response capabilities</p>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#mutual-aid-and-security","title":"Mutual Aid and Security","text":"<p>Security culture is mutual aid culture - we protect each other because we care about our collective liberation.</p> <ul> <li>Skill Sharing: Teaching security skills builds community capacity</li> <li>Resource Sharing: Helping comrades with security needs</li> <li>Crisis Support: Being there when security fails</li> <li>Culture Building: Normalizing care and protection practices</li> </ul>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#your-security-practice","title":"Your Security Practice","text":"","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#personal-reflection-questions","title":"Personal Reflection Questions","text":"<ol> <li>What organizing information do you have access to?</li> <li>Who could be harmed if that information became public?</li> <li>What are your current security habits?</li> <li>Where are the gaps between your practices and your responsibilities?</li> <li>What's one security improvement you could make this week?</li> </ol>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#getting-started-actions","title":"Getting Started Actions","text":"<ol> <li>Audit your current practices: What information is where?</li> <li>Learn your organization's security culture: What are the norms and expectations?</li> <li>Start small: Pick one habit to improve</li> <li>Find learning partners: Security is better learned collectively</li> <li>Practice in low-stakes situations: Build habits before you need them</li> </ol>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/security-as-revolutionary-practice/#resources-for-deeper-learning","title":"Resources for Deeper Learning","text":"<ul> <li>DRUIDS Red Lines - Non-negotiable security practices</li> <li>Security Playbook - Practical security protocols</li> <li>When They Come Knocking - Crisis response planning</li> <li>Signal Isn't Enough - Communication security analysis</li> </ul> <p>Remember: Security culture is love culture. We protect each other because we believe in our collective future.</p>","tags":["security","revolutionary-practice","collective-protection","strategy"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/","title":"Tech Democratization as Class Struggle","text":"<p>Or: Why Teaching Git to Comrades is More Revolutionary Than Any App You'll Build at Google</p>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#the-material-reality-of-tech-gatekeeping","title":"The Material Reality of Tech Gatekeeping","text":"<p>In Silicon Valley, a junior developer makes more than a teacher with 20 years experience. A mid-level engineer out-earns most lawyers. Senior developers live like petty bourgeoisie - stock options, property ownership, insulation from precarity.</p> <p>This isn't accident. It's design.</p> <p>Capital pays tech workers well not because we're smarter (we're not) or work harder (we don't). Capital pays us to maintain artificial scarcity of technical knowledge. We are, in Marxist terms, a labor aristocracy - workers whose material interests align with capital against the broader working class.</p>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#the-contradiction-of-the-progressive-tech-worker","title":"The Contradiction of the Progressive Tech Worker","text":"<p>Here's the painful irony: Many tech workers genuinely want revolutionary change. We see surveillance capitalism. We know our code oppresses. We want to help.</p> <p>But our help often looks like: - Building another \"revolutionary\" app - Donating to causes (charity, not solidarity) - \"Volunteering\" our skills (maintaining hierarchy) - Creating tools \"for\" movements (not with them)</p> <p>We remain the priests. Others remain the congregation. The fundamental relationship - technical haves and have-nots - stays intact.</p>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#druids-tails-annihilating-privilege-through-practice","title":"DRUIDS-Tails: Annihilating Privilege Through Practice","text":"<p>The DRUIDS-Tails project represents something different: the deliberate destruction of technical privilege through knowledge transfer.</p> <p>Consider what we're doing: 1. Taking enterprise-grade security (Tails) 2. Adding collaborative infrastructure (Obsidian + Git) 3. Making it boot-from-USB simple 4. Teaching it without jargon 5. Giving away the very knowledge that makes us \"valuable\"</p> <p>This isn't charity. It's class suicide in the best sense - the voluntary dissolution of our privileged position.</p>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#why-capital-fears-accessible-tech","title":"Why Capital Fears Accessible Tech","text":"<p>When we teach a tenant organizer to use Git, we're not just teaching commands. We're:</p> <ul> <li>Breaking dependency - They no longer need us</li> <li>Demystifying power - \"Tech\" stops being magical</li> <li>Building capacity - Organizations become self-sufficient</li> <li>Spreading capability - Each person teaches others</li> <li>Undermining hierarchy - No more \"tech person\" bottleneck</li> </ul> <p>A revolutionary movement that can't secure its communications is doomed. A movement that depends on a few tech priests is vulnerable. But a movement where every organizer can deploy secure infrastructure? That terrifies capital.</p>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#the-labor-aristocracys-revolutionary-duty","title":"The Labor Aristocracy's Revolutionary Duty","text":"<p>Lenin wrote about how labor aristocracy, bribed by imperial super-profits, becomes a brake on revolution. Tech workers are the modern epitome - paid with wealth extracted globally, comfortable enough to never rebel.</p> <p>But our position also gives us unique capability: - We understand the tools of oppression - We have time and resources to teach - We can translate between worlds - We can strip away artificial complexity</p> <p>Our revolutionary duty is to make ourselves obsolete.</p>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#beyond-individual-solutions","title":"Beyond Individual Solutions","text":"<p>This isn't about individual tech workers feeling guilty or \"doing their part.\" It's about recognizing that:</p> <ol> <li>Technical knowledge is politically hoarded - not naturally scarce</li> <li>Democratizing tech is class struggle - not charity</li> <li>Teaching is more radical than coding - it multiplies capacity</li> <li>Documentation is revolutionary infrastructure - it persists beyond individuals</li> </ol>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#the-tails-druids-model","title":"The Tails + DRUIDS Model","text":"<p>Look at what we've built:</p>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#traditional-tech-approach","title":"Traditional Tech Approach","text":"<ul> <li>\"I'll build you a secure system\"</li> <li>Complex, requires ongoing maintenance</li> <li>Organization depends on tech person</li> <li>Knowledge remains concentrated</li> </ul>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#druids-tails-approach","title":"DRUIDS-Tails Approach","text":"<ul> <li>\"Here's a USB that boots to security\"</li> <li>Simple enough for anyone</li> <li>Organization gains independence</li> <li>Knowledge spreads virally</li> </ul> <p>The second approach eliminates the tech worker's special position. That's the point.</p>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#material-impact-on-organizing","title":"Material Impact on Organizing","text":"<p>When every organizer can: - Communicate securely without help - Preserve institutional memory - Share documents safely - Collaborate asynchronously - Work without central IT</p> <p>Then: - No single point of failure - No technical bottleneck - No waiting for \"the tech person\" - No hierarchy based on skills - No surveillance vulnerabilities</p> <p>This is prefigurative politics - building the relations we want to see.</p>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#the-harder-truth-about-documentation","title":"The Harder Truth About Documentation","text":"<p>Writing documentation is unglamorous. It doesn't pay well. VCs don't fund it. Your GitHub profile doesn't showcase it. </p> <p>But teaching Git through tenant organizing examples does more for revolution than any venture-backed startup. Creating USB drives that boot to security spreads more freedom than any app.</p> <p>Because it transfers power instead of hoarding it.</p>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#a-personal-note-from-a-class-traitor","title":"A Personal Note from a Class Traitor","text":"<p>I make good money knowing things that should be common knowledge. My comfort comes from artificial scarcity of information. Every day I don't teach what I know, I'm choosing personal benefit over collective liberation.</p> <p>The DRUIDS project is one attempt to resolve this contradiction - using privilege to undermine privilege, using knowledge to democratize knowledge.</p> <p>It's not enough. It's never enough. But it's material action against the structures that create tech aristocracy.</p>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#the-call-to-action","title":"The Call to Action","text":"<p>If you're a tech worker reading this:</p> <ol> <li>Stop building apps - Start teaching skills</li> <li>Stop \"volunteering\" expertise - Start transferring knowledge  </li> <li>Stop maintaining systems - Start documenting them</li> <li>Stop being the expert - Start creating experts</li> <li>Stop hoarding knowledge - Start giving it away</li> </ol> <p>If you're an organizer reading this:</p> <ol> <li>Demand education, not service from tech comrades</li> <li>Learn fearlessly - It's not as hard as they pretend</li> <li>Teach others immediately - Break the chain of dependency</li> <li>Build infrastructure collectively - No more single points of failure</li> </ol>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#the-future-were-building","title":"The Future We're Building","text":"<p>Imagine: - Every organization runs its own secure infrastructure - Every organizer understands the tools they use - Technical knowledge is as common as literacy - \"Tech support\" is mutual aid, not hierarchy - Digital security is universal, not elite</p> <p>This future requires tech workers to commit class suicide by teaching ourselves out of privilege. It requires organizers to reject the comfortable position of \"non-technical\" learned helplessness.</p>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/tech-democratization-as-class-struggle/#conclusion-the-revolutionary-act","title":"Conclusion: The Revolutionary Act","text":"<p>In the end, the most revolutionary thing a tech worker can do isn't to code for the movement. It's to teach the movement to code - or better yet, to show them they already can.</p> <p>Every USB drive loaded with DRUIDS-Tails is a small act of class warfare. Every organizer who learns Git is a victory against artificial hierarchy. Every piece of radical documentation undermines the structures capital uses to divide us.</p> <p>The revolution doesn't need more apps. It needs more teachers.</p> <p>The revolution doesn't need tech priests. It needs tech literacy.</p> <p>The revolution doesn't need our charity. It needs our obsolescence.</p> <p>\"The philosophers have only interpreted the code; the point is to democratize it.\"</p> <p>Backlinks:</p>","tags":["explanation","theory","labor-aristocracy","tech-workers","class-struggle"]},{"location":"learn/core-concepts/three-tier-system/","title":"The Three-Tier Security Model","text":"","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#overview","title":"Overview","text":"<p>The three-tier security model provides practical, threat-appropriate security for revolutionary organizations. Instead of paranoid \"perfect security\" that paralyzes action, we implement proportional security based on actual risk assessment.</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#core-principle-security-serves-organizing","title":"Core Principle: Security Serves Organizing","text":"<p>Security that prevents organizing is counterproductive. Our model balances: - Protection of sensitive information - Accessibility for legitimate users - Practicality in daily operations - Scalability as organizations grow</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#the-three-tiers","title":"The Three Tiers","text":"","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#l0-public-information","title":"L0: Public Information","text":"<p>What: Information safe for public consumption Examples: - Published statements and demands - Public event announcements - Educational materials - General meeting notes (no names) - Propaganda and outreach content</p> <p>Security Measures: - Standard Git repositories - Basic access controls - Public or organization-wide sharing - Focus on integrity over secrecy</p> <p>Use When: - Building public support - Educational campaigns - Media relations - Recruitment materials</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#l1-organizational-information","title":"L1: Organizational Information","text":"<p>What: Internal information requiring basic protection Examples: - Member contact lists - Internal meeting minutes with names - Campaign strategies - Financial records - Working documents</p> <p>Security Measures: - Encrypted repositories - Access control lists - Pseudonymous commits - Regular security audits - Encrypted device storage</p> <p>Use When: - Day-to-day organizing - Internal coordination - Strategic planning - Resource management</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#l2-sensitive-operations","title":"L2: Sensitive Operations","text":"<p>What: Information requiring maximum protection Examples: - Direct action plans - Legal defense strategies - Whistleblower identities - Underground railroad routes - Security protocols</p> <p>Security Measures: - Air-gapped systems - Hardware encryption - Need-to-know access - Compartmentalization - Physical security protocols - Destruction procedures</p> <p>Use When: - High-risk operations - Legal vulnerability - State repression threats - Protection of individuals</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#implementation-principles","title":"Implementation Principles","text":"","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#1-default-to-lower-tiers","title":"1. Default to Lower Tiers","text":"<p>Start with L0 and only escalate when materially necessary. Over-classification kills organizing capacity.</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#2-clear-boundaries","title":"2. Clear Boundaries","text":"<p>Everyone must understand what belongs in each tier. Ambiguity creates both security holes and accessibility barriers.</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#3-proportional-response","title":"3. Proportional Response","text":"<p>Match security measures to actual threats, not imagined ones. A tenant union doesn't need NSA-level security.</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#4-regular-review","title":"4. Regular Review","text":"<p>Threat landscapes change. Review classifications quarterly and adjust based on material conditions.</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#5-training-before-tools","title":"5. Training Before Tools","text":"<p>The best encryption fails with poor practices. Prioritize security culture over security theater.</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#practical-examples","title":"Practical Examples","text":"","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#tenant-organizing","title":"Tenant Organizing","text":"<ul> <li>L0: Demands to landlords, know-your-rights materials</li> <li>L1: Tenant contact lists, meeting minutes, rent strike plans</li> <li>L2: Rarely needed unless facing violent landlords</li> </ul>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#labor-organizing","title":"Labor Organizing","text":"<ul> <li>L0: Public campaigns, worker education</li> <li>L1: Organizing committee lists, strategy documents</li> <li>L2: Plans for workplace actions management might retaliate against</li> </ul>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#direct-action-groups","title":"Direct Action Groups","text":"<ul> <li>L0: Public calls to action, educational content</li> <li>L1: Member lists, general planning</li> <li>L2: Specific action plans, security protocols</li> </ul>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#common-mistakes","title":"Common Mistakes","text":"","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#over-classification","title":"Over-Classification","text":"<p>Marking everything L2 makes L2 meaningless and kills organizing capacity.</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#under-classification","title":"Under-Classification","text":"<p>Putting member lists in public repos endangers comrades.</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#inconsistent-application","title":"Inconsistent Application","text":"<p>Different standards in different contexts creates confusion and gaps.</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#security-theater","title":"Security Theater","text":"<p>Complex procedures that don't address actual threats waste energy.</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#individual-solutions","title":"Individual Solutions","text":"<p>Security is collective practice, not individual choice.</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#technical-implementation","title":"Technical Implementation","text":"","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#l0-setup","title":"L0 Setup","text":"Bash<pre><code># Standard Git repository\ngit init campaign-public\ngit remote add origin https://github.com/org/campaign-public\n</code></pre>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#l1-setup","title":"L1 Setup","text":"Bash<pre><code># Encrypted repository with access controls\ngit init campaign-internal\ngit-crypt init\ngit-crypt add-gpg-user YOUR_KEY_ID\n</code></pre>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#l2-setup","title":"L2 Setup","text":"Bash<pre><code># Air-gapped system with hardware encryption\n# No network connectivity\n# Physical security required\n# Detailed procedures in security documentation\n</code></pre>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#assessment-questions","title":"Assessment Questions","text":"<p>To determine appropriate tier:</p> <ol> <li>What happens if this becomes public?</li> <li>No harm \u2192 L0</li> <li>Organizational damage \u2192 L1</li> <li> <p>Individual harm \u2192 L2</p> </li> <li> <p>Who needs access?</p> </li> <li>Everyone \u2192 L0</li> <li>Members only \u2192 L1</li> <li> <p>Specific individuals \u2192 L2</p> </li> <li> <p>What's the threat?</p> </li> <li>Public embarrassment \u2192 L0</li> <li>Organizational disruption \u2192 L1</li> <li>State repression \u2192 L2</li> </ol>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#security-culture-not-security-theater","title":"Security Culture, Not Security Theater","text":"<p>Remember: - Perfect security is impossible - Good enough security enables action - Consistency matters more than complexity - Training beats technology - Collective practice beats individual paranoia</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#adapting-to-your-context","title":"Adapting to Your Context","text":"<p>This model is a framework, not dogma. Adjust based on: - Your threat landscape - Organizational capacity - Technical resources - Political context - Material conditions</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/three-tier-system/#conclusion","title":"Conclusion","text":"<p>The three-tier model provides practical security that enhances rather than hinders organizing. By matching security measures to actual threats, we protect what matters while maintaining the accessibility needed for mass organizing.</p> <p>Security serves the revolution, not the other way around.</p> <p>Next Steps: - Practice implementation: Security Protocols - Handle incidents: Help, I Committed Sensitive Data! - Build culture: Security as Revolutionary Practice</p> <p>Backlinks:</p>","tags":["security","L0","L1","L2","threat-model","opsec"]},{"location":"learn/core-concepts/tukhachevsky-bridge/","title":"The Tukhachevsky Bridge: Tactical-Operational-Strategic Thinking","text":"","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#the-missing-link-that-kills-movements","title":"The Missing Link That Kills Movements","text":"<p>Your organization has brilliant strategists who understand capitalism must fall. You have dedicated tacticians who can organize a demonstration perfectly. Yet somehow, year after year, the demonstrations happen but capitalism remains.</p> <p>The missing link? Operational thinking - the bridge between daily tactics and revolutionary strategy.</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#tukhachevskys-revolutionary-innovation","title":"Tukhachevsky's Revolutionary Innovation","text":"<p>Mikhail Tukhachevsky, Soviet military theorist, identified why most military campaigns (and by extension, political campaigns) fail: they jump from grand strategy directly to tactical execution, missing the crucial operational level.</p> <p>His framework, adapted for revolutionary organizing:</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#1-strategic-level-why-we-fight","title":"1. Strategic Level (Why We Fight)","text":"<ul> <li>Revolutionary goals</li> <li>Power analysis</li> <li>Historical trajectory</li> <li>Class position</li> </ul>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#2-operational-level-how-we-build-power","title":"2. Operational Level (How We Build Power)","text":"<ul> <li>Campaign architecture</li> <li>Capacity building</li> <li>Resource development</li> <li>Institutional memory</li> </ul>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#3-tactical-level-what-we-do-today","title":"3. Tactical Level (What We Do Today)","text":"<ul> <li>Daily tasks</li> <li>Specific actions</li> <li>Immediate objectives</li> <li>Concrete steps</li> </ul>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#why-organizations-fail","title":"Why Organizations Fail","text":"","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#tactical-without-strategic-activism-burnout","title":"Tactical Without Strategic: Activism Burnout","text":"Text Only<pre><code>Monday: Protest at City Hall\nTuesday: Mutual aid distribution\nWednesday: Banner drop\nThursday: Another protest\nFriday: Exhaustion\n\nResult: Lots of activity, no power built\n</code></pre> <p>These comrades work tirelessly but build nothing lasting. Each action exists in isolation.</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#strategic-without-tactical-armchair-revolution","title":"Strategic Without Tactical: Armchair Revolution","text":"Text Only<pre><code>\"After the revolution, we'll have democratic planning\"\n\"The contradictions of capitalism will inevitably...\"\n\"In the final analysis, the proletariat must...\"\n\nResult: Perfect theory, zero practice\n</code></pre> <p>These comrades understand everything except how to start.</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#both-without-operational-the-classic-failure","title":"Both Without Operational: The Classic Failure","text":"Text Only<pre><code>Strategy: Overthrow landlord class\nTactic: Organize rent strike in Building A\n\nMissing: How does one building's strike build toward overthrowing landlords?\n</code></pre> <p>This is where 90% of organizing fails.</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#the-operational-bridge","title":"The Operational Bridge","text":"<p>Operational thinking connects daily work to revolutionary goals:</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#example-tenant-organizing","title":"Example: Tenant Organizing","text":"<p>Strategic Goal: Decommodify housing, eliminate landlord class</p> <p>Operational Campaign: - Build tenant unions across city - Create mutual aid infrastructure - Develop legal defense networks - Establish alternative governance - Document and share victories</p> <p>Tactical Execution: - Tuesday: Door knock Building A - Wednesday: Know Your Rights training - Thursday: Coordinate with legal team - Friday: Document in DRUIDS repository</p> <p>See how each tactical action builds operational capacity toward strategic goals?</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#applying-to-druids","title":"Applying to DRUIDS","text":"<p>DRUIDS itself embodies three-level thinking:</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#strategic-level","title":"Strategic Level","text":"<ul> <li>Break technical hierarchy</li> <li>Democratize organizational knowledge</li> <li>Build revolutionary infrastructure</li> <li>Resist surveillance capitalism</li> </ul>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#operational-level","title":"Operational Level","text":"<ul> <li>Replace corporate platforms</li> <li>Create institutional memory</li> <li>Build technical capacity</li> <li>Connect organizations</li> </ul>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#tactical-level","title":"Tactical Level","text":"<ul> <li>Daily commits</li> <li>Meeting documentation</li> <li>Security practices</li> <li>Teaching workshops</li> </ul> <p>Every Git commit (tactical) builds institutional memory (operational) toward revolutionary capacity (strategic).</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#the-framework-in-practice","title":"The Framework in Practice","text":"","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#writing-proposals","title":"Writing Proposals","text":"<p>Bad proposal:</p> <p>\"Let's organize a march against police brutality\"</p> <p>Good proposal using three levels:</p> <p>Strategic: Challenge state monopoly on violence, build community self-defense capacity</p> <p>Operational: Create rapid response network, document police patterns, build legal support infrastructure</p> <p>Tactical: March on Saturday, but also: photograph badge numbers, train legal observers, establish emergency communications</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#planning-campaigns","title":"Planning Campaigns","text":"<p>Without operational thinking: 1. Identify injustice 2. Organize protest 3. Hope for change 4. Repeat when nothing changes</p> <p>With operational thinking: 1. Identify injustice 2. Analyze power structures maintaining it 3. Design campaign to build counter-power 4. Execute tactics that accumulate capacity 5. Evaluate operational gains, not just tactical success</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#common-operational-mistakes","title":"Common Operational Mistakes","text":"","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#1-confusing-mobilization-with-organization","title":"1. Confusing Mobilization with Organization","text":"<p>Mobilization (Tactical): Getting 500 people to march Organization (Operational): Building structure so those 500 can act together repeatedly</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#2-mistaking-activities-for-capacity","title":"2. Mistaking Activities for Capacity","text":"<p>Activities: Number of events held Capacity: Ability to execute increasingly complex campaigns</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#3-conflating-visibility-with-power","title":"3. Conflating Visibility with Power","text":"<p>Visibility: Media coverage, social media metrics Power: Ability to stop evictions, win strikes, protect communities</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#building-operational-thinking","title":"Building Operational Thinking","text":"","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#questions-to-force-operational-analysis","title":"Questions to Force Operational Analysis","text":"<p>For every tactical proposal, ask: 1. How does this build our capacity? 2. What infrastructure remains after? 3. Who gains skills from this? 4. How does this connect to larger campaigns? 5. What can we do after that we couldn't before?</p> <p>For every strategic discussion, ask: 1. What operational capacity do we need? 2. How do we build it systematically? 3. What intermediate victories mark progress? 4. How do we measure power accumulation? 5. What institutions must we build?</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#historical-examples","title":"Historical Examples","text":"","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#success-black-panther-party","title":"Success: Black Panther Party","text":"<p>Strategic: Black self-determination, challenge white supremacist capitalism</p> <p>Operational:  - Survival programs (breakfast, clinics) - Political education infrastructure - Armed self-defense training - Media production capacity</p> <p>Tactical: - Daily breakfast serving - Weekly political education - Regular health clinics - Constant documentation</p> <p>Each free breakfast (tactical) built community support (operational) for revolution (strategic).</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#failure-occupy-wall-street","title":"Failure: Occupy Wall Street","text":"<p>Strategic: Challenge the 1%, economic justice</p> <p>Tactical: Occupy parks, general assemblies, direct actions</p> <p>Missing Operational Level: - No structures to accumulate power - No capacity building between cities - No institutional memory preserved - No clear campaign progression</p> <p>Result: Massive mobilization that left little infrastructure behind.</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#encoding-in-druids","title":"Encoding in DRUIDS","text":"","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#repository-structure-reflects-three-levels","title":"Repository Structure Reflects Three Levels","text":"Text Only<pre><code>strategy/\n  vision.md\n  power-analysis.md\n  long-term-goals.md\n\noperations/\n  campaigns/\n    tenant-organizing/\n    workplace-struggle/\n  capacity/\n    skills-matrix.md\n    resource-inventory.md\n\ntactics/\n  actions/\n    2024-11-15-rent-strike/\n  tasks/\n    weekly-assignments.md\n</code></pre>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#commit-messages-encode-levels","title":"Commit Messages Encode Levels","text":"Bash<pre><code>git commit -m \"TACTICAL: Door knocked Building A, 12 new contacts\n\nOperational gain: Added to phone tree for rapid response\nStrategic advance: Expanding tenant base for city-wide union\"\n</code></pre>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#documentation-preserves-operational-knowledge","title":"Documentation Preserves Operational Knowledge","text":"<p>Bad meeting minutes:</p> <p>\"Decided to protest Wednesday\"</p> <p>Good meeting minutes:</p> <p>\"DECIDED: Protest Wednesday at employer headquarters</p> <p>Operational purpose: Test rapid mobilization system, identify committed members for escalation planning</p> <p>Strategic connection: Building toward strike authorization vote\"</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#the-revolutionary-imperative","title":"The Revolutionary Imperative","text":"<p>Without operational thinking, we're doomed to either: - Exhaust ourselves with endless tactics that build nothing, or - Talk endlessly about revolution while doing nothing</p> <p>The operational level is where revolutionary capacity actually develops. It's where: - Individual actions become collective power - Scattered efforts become focused campaigns - Today's work builds tomorrow's possibilities</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#your-next-steps","title":"Your Next Steps","text":"<ol> <li>Audit Your Current Work</li> <li>List your recent tactics</li> <li>Identify operational gains from each</li> <li> <p>Connect to strategic objectives</p> </li> <li> <p>Redesign One Campaign</p> </li> <li>Take existing work</li> <li>Add operational framework</li> <li> <p>Define capacity benchmarks</p> </li> <li> <p>Teach the Framework</p> </li> <li>Share with your collective</li> <li>Apply to all proposals</li> <li>Build three-level thinking culture</li> </ol>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/core-concepts/tukhachevsky-bridge/#remember","title":"Remember","text":"<p>Revolution isn't just the final victory (strategic) or today's demonstration (tactical). It's the patient building of operational capacity - the organizational muscle that turns revolutionary dreams into material reality.</p> <p>Every organization that lasted built operationally. Every movement that failed skipped this level.</p> <p>Don't skip it.</p> <p>Ready to apply this? \u2192 <code>Proposal Template</code> See it in practice? \u2192 Campaign Planning Guide Deepen understanding? \u2192 Why Organizations Fail</p>","tags":["tukhachevsky","strategy","tactics","operational-art","theory","planning"]},{"location":"learn/design/qm-accessibility/","title":"Queer Mandalorian Accessibility Guide","text":"","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#overview","title":"Overview","text":"<p>The Queer Mandalorian theme prioritizes accessibility without compromising its revolutionary cyberpunk aesthetic. This guide ensures your implementation meets WCAG 2.1 AA standards while maintaining the theme's distinctive visual identity.</p>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#core-principles","title":"Core Principles","text":"<ol> <li>Inclusive Rebellion: Our revolution includes everyone</li> <li>Accessible Resistance: Breaking barriers, not creating them</li> <li>Universal Design: Liberation technology for all abilities</li> <li>Progressive Enhancement: Core functionality first, aesthetics second</li> </ol>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#color-contrast-standards","title":"Color Contrast Standards","text":"","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#wcag-requirements","title":"WCAG Requirements","text":"<p>All color combinations in the Queer Mandalorian theme meet or exceed:</p> <ul> <li>Normal text: 4.5:1 contrast ratio minimum</li> <li>Large text: 3:1 contrast ratio (18px+ or 14px+ bold)</li> <li>Interactive elements: 3:1 contrast ratio for UI components</li> </ul>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#tested-color-combinations","title":"Tested Color Combinations","text":"Foreground Background Ratio Usage Status #E0E0E0 #0A0E27 12.3:1 Body text \u2705 AAA #00D9FF #0A0E27 11.8:1 Links \u2705 AAA #FF6B35 #0A0E27 6.7:1 Headers \u2705 AA #B84A14 #0A0E27 4.8:1 H1 text \u2705 AA #00CFC1 #0A0E27 10.1:1 Accents \u2705 AAA #FF006E #0A0E27 5.2:1 Warnings \u2705 AA","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#testing-tools","title":"Testing Tools","text":"Bash<pre><code># Command line contrast testing\nnpm install -g pa11y\npa11y http://localhost:8000 --reporter cli\n\n# Python contrast checker\npip install wcag-contrast-ratio\npython -m wcag_contrast_ratio \"#E0E0E0\" \"#0A0E27\"\n</code></pre>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#visual-indicators","title":"Visual Indicators","text":"","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#security-level-accessibility","title":"Security Level Accessibility","text":"<p>Security levels use multiple indicators, not just color:</p> CSS<pre><code>/* Pattern + Color + Text */\n.security-l0::before { content: \"\ud83d\udfe2 L0 - PUBLIC\"; }\n.security-l1::before { content: \"\ud83d\udfe0 L1 - MEMBER\"; }\n.security-l2::before { content: \"\ud83d\udd34 L2 - CADRE \u26a0\"; }\n</code></pre> <p>Accessible Features: - Text labels for screen readers - Icons provide visual reinforcement - Border patterns differ by level - Background gradients for additional distinction</p>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#focus-states","title":"Focus States","text":"<p>Clear, high-contrast focus indicators:</p> CSS<pre><code>:focus {\n  outline: 2px solid #00D9FF;\n  outline-offset: 2px;\n}\n\n/* Keyboard navigation enhancement */\n.md-nav__link:focus {\n  background: rgba(0, 217, 255, 0.2);\n  color: #FFFFFF;\n}\n</code></pre>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#motion-and-animation","title":"Motion and Animation","text":"","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#respecting-user-preferences","title":"Respecting User Preferences","text":"<p>All animations respect <code>prefers-reduced-motion</code>:</p> CSS<pre><code>@media (prefers-reduced-motion: reduce) {\n  *, *::before, *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n</code></pre>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#safe-animation-practices","title":"Safe Animation Practices","text":"<ol> <li>No autoplay: Animations trigger on interaction only</li> <li>Short duration: Max 0.3s for micro-interactions</li> <li>Subtle effects: Glitch effects are decorative, not essential</li> <li>Pause controls: Long animations have pause options</li> </ol>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#screen-reader-support","title":"Screen Reader Support","text":"","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#semantic-structure","title":"Semantic Structure","text":"<p>Maintain proper heading hierarchy:</p> Markdown<pre><code># Page Title (H1 - only one per page)\n## Major Section (H2)\n### Subsection (H3)\n#### Detail Level (H4)\n</code></pre>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#aria-labels","title":"ARIA Labels","text":"<p>Enhanced labeling for complex elements:</p> HTML<pre><code>&lt;!-- Security indicators --&gt;\n&lt;div class=\"security-l2\" role=\"region\" aria-label=\"Restricted content - Cadre access only\"&gt;\n\n&lt;!-- Navigation --&gt;\n&lt;nav aria-label=\"Main navigation\"&gt;\n\n&lt;!-- Code blocks --&gt;\n&lt;pre aria-label=\"Terminal command example\"&gt;\n</code></pre>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#skip-links","title":"Skip Links","text":"<p>Implement skip navigation:</p> HTML<pre><code>&lt;a href=\"#main-content\" class=\"skip-to-content\"&gt;\n  Skip to main content\n&lt;/a&gt;\n</code></pre>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#keyboard-navigation","title":"Keyboard Navigation","text":"","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#tab-order","title":"Tab Order","text":"<p>Logical tab order maintained:</p> <ol> <li>Skip links</li> <li>Header navigation</li> <li>Sidebar navigation</li> <li>Main content</li> <li>Footer links</li> </ol>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>Document shortcuts clearly:</p> Key Action <code>Tab</code> Next focusable element <code>Shift+Tab</code> Previous focusable element <code>Enter</code> Activate link/button <code>Space</code> Toggle checkbox/button <code>Esc</code> Close modal/dropdown","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#typography-accessibility","title":"Typography Accessibility","text":"","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#font-sizing","title":"Font Sizing","text":"<ul> <li>Base font: 19px (1.1875rem) for readability</li> <li>Line height: 1.75 for comfortable reading</li> <li>Responsive sizing for mobile devices</li> <li>User can zoom to 200% without horizontal scroll</li> </ul>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#font-choices","title":"Font Choices","text":"CSS<pre><code>/* System fonts for better language support */\n--qm-font-body: 'Inter', -apple-system, BlinkMacSystemFont, \n                'Segoe UI', 'Noto Sans', sans-serif;\n\n/* Monospace with wide language support */\n--qm-font-mono: 'JetBrains Mono', 'Cascadia Code', \n                'Noto Sans Mono', monospace;\n</code></pre>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#alternative-text","title":"Alternative Text","text":"","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#images-and-icons","title":"Images and Icons","text":"<p>All decorative elements marked appropriately:</p> HTML<pre><code>&lt;!-- Decorative --&gt;\n&lt;img src=\"glitch.png\" alt=\"\" role=\"presentation\"&gt;\n\n&lt;!-- Informative --&gt;\n&lt;img src=\"diagram.png\" alt=\"Git workflow showing proposal to main branch process\"&gt;\n</code></pre>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#icon-fonts","title":"Icon Fonts","text":"<p>Use text alternatives:</p> HTML<pre><code>&lt;span class=\"icon\" aria-hidden=\"true\"&gt;\u25b6&lt;/span&gt;\n&lt;span class=\"sr-only\"&gt;Active section&lt;/span&gt;\n</code></pre>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#form-accessibility","title":"Form Accessibility","text":"","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#input-fields","title":"Input Fields","text":"<p>Clear labels and error messages:</p> HTML<pre><code>&lt;label for=\"search\"&gt;Search documentation&lt;/label&gt;\n&lt;input id=\"search\" type=\"search\" \n       aria-describedby=\"search-help\"&gt;\n&lt;span id=\"search-help\"&gt;Use keywords or phrases&lt;/span&gt;\n</code></pre>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#error-states","title":"Error States","text":"<p>Multiple indicators for errors:</p> <ul> <li>Color change (not sole indicator)</li> <li>Icon addition</li> <li>Text description</li> <li>ARIA alerts for screen readers</li> </ul>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#testing-methodology","title":"Testing Methodology","text":"","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#automated-testing","title":"Automated Testing","text":"Bash<pre><code># Accessibility testing suite\nnpm install -g @axe-core/cli\naxe http://localhost:8000\n\n# Lighthouse CI\nnpm install -g @lhci/cli\nlhci autorun\n</code></pre>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#manual-testing","title":"Manual Testing","text":"<ol> <li>Keyboard only: Navigate entire site without mouse</li> <li>Screen reader: Test with NVDA (Windows) or VoiceOver (Mac)</li> <li>Zoom testing: Verify 200% zoom functionality</li> <li>Color filters: Test with colorblind simulators</li> </ol>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#browser-extensions","title":"Browser Extensions","text":"<ul> <li>axe DevTools</li> <li>WAVE (WebAIM)</li> <li>Stark (Figma/Browser)</li> <li>ChromeLens</li> </ul>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#issue-low-contrast-on-hover","title":"Issue: Low Contrast on Hover","text":"<p>Problem: Cyan on light backgrounds Solution: Darken background on hover or use borders</p>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#issue-animation-distraction","title":"Issue: Animation Distraction","text":"<p>Problem: Glitch effects trigger vestibular issues Solution: Implement reduced motion media query</p>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#issue-focus-loss","title":"Issue: Focus Loss","text":"<p>Problem: Focus indicator not visible on all elements Solution: Universal focus style with high contrast</p>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#issue-color-only-information","title":"Issue: Color-Only Information","text":"<p>Problem: Security levels indicated by color alone Solution: Add text labels and patterns</p>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#assistive-technology-support","title":"Assistive Technology Support","text":"","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#tested-with","title":"Tested With","text":"<ul> <li>Screen Readers: JAWS 2023, NVDA 2023, VoiceOver</li> <li>Voice Control: Dragon NaturallySpeaking</li> <li>Switch Access: iOS Switch Control</li> <li>Magnification: ZoomText, Windows Magnifier</li> </ul>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#known-limitations","title":"Known Limitations","text":"<ol> <li>Complex animations may not announce properly</li> <li>Some terminal effects decorative only</li> <li>Custom fonts may not support all languages</li> </ol>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#resources","title":"Resources","text":"","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#testing-tools_1","title":"Testing Tools","text":"<ul> <li>WebAIM Contrast Checker</li> <li>WAVE Browser Extension</li> <li>axe DevTools</li> <li>Pa11y Command Line</li> </ul>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#guidelines","title":"Guidelines","text":"<ul> <li>WCAG 2.1 Guidelines</li> <li>ARIA Authoring Practices</li> <li>Inclusive Design Principles</li> </ul>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/qm-accessibility/#community","title":"Community","text":"<ul> <li>A11y Project</li> <li>WebAIM Community</li> <li>Deque University</li> </ul> <p>\"Accessibility is not charity. It's revolution. Every barrier we remove is a wall we tear down.\" - Trans Hacker Collective</p>","tags":["accessibility","a11y","queer-mandalorian","wcag","inclusive-design"]},{"location":"learn/design/typography/","title":"Typography Specification","text":"<ul> <li> TODO: Proof read this</li> <li> TODO: Format correctly</li> </ul>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#font-stack-definitions","title":"Font Stack Definitions","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#primary-font-families","title":"Primary Font Families","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#heading-fonts","title":"Heading Fonts","text":"CSS<pre><code>/* Prairie Radical */\nfont-family: 'Playfair Display', 'Spectral', Georgia, 'Times New Roman', serif;\n\n/* Neobrutalist */\nfont-family: 'EB Garamond', 'Spectral', Georgia, serif;\n\n/* Mandalorian */\nfont-family: 'Bebas Neue', 'Oswald', Arial, sans-serif;\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#body-fonts","title":"Body Fonts","text":"CSS<pre><code>/* All Themes */\nfont-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#monospace-fonts","title":"Monospace Fonts","text":"CSS<pre><code>/* All Themes */\nfont-family: 'JetBrains Mono', 'Fira Code', 'Cascadia Code', Consolas, 'Courier New', monospace;\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#type-scale","title":"Type Scale","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#desktop-scale-base-16px","title":"Desktop Scale (base: 16px)","text":"Level Size Pixels Line Height Usage xs 0.75rem 12px 1.5 Captions, labels sm 0.875rem 14px 1.5 Secondary text base 1rem 16px 1.625 Body text lg 1.125rem 18px 1.625 Lead paragraph xl 1.25rem 20px 1.5 H6 2xl 1.5rem 24px 1.375 H5 3xl 1.875rem 30px 1.375 H4 4xl 2.25rem 36px 1.25 H3 5xl 3rem 48px 1.25 H2 6xl 3.75rem 60px 1.125 H1","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#mobile-scale-base-14px","title":"Mobile Scale (base: 14px)","text":"Level Size Pixels Line Height xs 0.75rem 10.5px 1.5 sm 0.875rem 12.25px 1.5 base 1rem 14px 1.625 lg 1.125rem 15.75px 1.625 xl 1.25rem 17.5px 1.5 2xl 1.5rem 21px 1.375 3xl 1.875rem 26.25px 1.375 4xl 2.25rem 31.5px 1.25 5xl 2.5rem 35px 1.25 6xl 3rem 42px 1.125","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#font-weights","title":"Font Weights","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#weight-scale","title":"Weight Scale","text":"CSS<pre><code>--font-weight-light: 300;\n--font-weight-regular: 400;\n--font-weight-medium: 500;\n--font-weight-semibold: 600;\n--font-weight-bold: 700;\n--font-weight-extrabold: 800;\n--font-weight-black: 900;\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#theme-specific-weights","title":"Theme-Specific Weights","text":"Element Prairie Radical Neobrutalist Mandalorian H1-H3 700 (bold) 600 (semibold) 400 (regular) H4-H6 600 (semibold) 600 (semibold) 400 (regular) Body 400 (regular) 400 (regular) 400 (regular) Strong 600 (semibold) 700 (bold) 600 (semibold) Code 400 (regular) 500 (medium) 400 (regular)","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#letter-spacing","title":"Letter Spacing","text":"CSS<pre><code>--letter-spacing-tighter: -0.05em;\n--letter-spacing-tight: -0.025em;\n--letter-spacing-normal: 0;\n--letter-spacing-wide: 0.025em;\n--letter-spacing-wider: 0.05em;\n--letter-spacing-widest: 0.1em;\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#theme-applications","title":"Theme Applications","text":"<ul> <li>Prairie Radical: Normal spacing for readability</li> <li>Neobrutalist: Wider spacing (0.05em) for headings</li> <li>Mandalorian: Wider spacing (0.1em) for Bebas Neue headings</li> </ul>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#text-transformations","title":"Text Transformations","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#by-theme","title":"By Theme","text":"CSS<pre><code>/* Prairie Radical */\n.theme-prairie-radical h1,\n.theme-prairie-radical h2 {\n  text-transform: none;\n}\n\n/* Neobrutalist */\n.theme-neobrutalist h1,\n.theme-neobrutalist h2,\n.theme-neobrutalist h3 {\n  text-transform: uppercase;\n}\n\n/* Mandalorian */\n.theme-mandalorian h1,\n.theme-mandalorian h2 {\n  text-transform: uppercase;\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#responsive-typography","title":"Responsive Typography","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#fluid-type-scale","title":"Fluid Type Scale","text":"CSS<pre><code>/* Fluid typography using clamp() */\nh1 {\n  font-size: clamp(2.5rem, 5vw + 1rem, 3.75rem);\n}\n\nh2 {\n  font-size: clamp(2rem, 4vw + 0.5rem, 3rem);\n}\n\nh3 {\n  font-size: clamp(1.5rem, 3vw + 0.5rem, 2.25rem);\n}\n\nbody {\n  font-size: clamp(0.875rem, 1vw + 0.5rem, 1rem);\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#text-styles","title":"Text Styles","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#paragraph-styles","title":"Paragraph Styles","text":"CSS<pre><code>/* Default paragraph */\np {\n  font-size: var(--druids-font-size-base);\n  line-height: var(--druids-line-height-relaxed);\n  margin-bottom: var(--druids-space-md);\n}\n\n/* Lead paragraph */\n.lead {\n  font-size: var(--druids-font-size-lg);\n  line-height: var(--druids-line-height-relaxed);\n  font-weight: var(--font-weight-light);\n}\n\n/* Small text */\n.small {\n  font-size: var(--druids-font-size-sm);\n  line-height: var(--druids-line-height-normal);\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#list-styles","title":"List Styles","text":"CSS<pre><code>/* Unordered lists */\nul {\n  list-style-type: disc;\n  padding-left: var(--druids-space-lg);\n}\n\n/* Ordered lists */\nol {\n  list-style-type: decimal;\n  padding-left: var(--druids-space-lg);\n}\n\n/* Nested lists */\nul ul, ol ul {\n  list-style-type: circle;\n}\n\nul ul ul, ol ul ul {\n  list-style-type: square;\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#code-styles","title":"Code Styles","text":"CSS<pre><code>/* Inline code */\ncode {\n  font-family: var(--druids-font-mono);\n  font-size: 0.875em;\n  background-color: var(--druids-background-secondary);\n  padding: 0.125rem 0.25rem;\n  border-radius: var(--druids-border-radius-sm);\n}\n\n/* Code blocks */\npre {\n  font-family: var(--druids-font-mono);\n  font-size: var(--druids-font-size-sm);\n  line-height: var(--druids-line-height-normal);\n  overflow-x: auto;\n  padding: var(--druids-space-md);\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#accessibility-considerations","title":"Accessibility Considerations","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#minimum-sizes","title":"Minimum Sizes","text":"<ul> <li>Body text: Never smaller than 14px (0.875rem)</li> <li>UI text: Never smaller than 12px (0.75rem)</li> <li>Touch targets with text: Minimum 44px height</li> </ul>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#line-height-guidelines","title":"Line Height Guidelines","text":"<ul> <li>Body text: 1.5-1.625 for optimal readability</li> <li>Headings: 1.125-1.375 depending on size</li> <li>Code: 1.5 for clarity</li> </ul>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#contrast-requirements","title":"Contrast Requirements","text":"<ul> <li>Normal text: 4.5:1 minimum</li> <li>Large text (18px+ or 14px+ bold): 3:1 minimum</li> <li>All theme combinations tested for WCAG AA compliance</li> </ul>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#font-loading-strategy","title":"Font Loading Strategy","text":"CSS<pre><code>/* Font Face Declarations with font-display */\n@font-face {\n  font-family: 'Playfair Display';\n  src: url('/fonts/playfair-display.woff2') format('woff2');\n  font-weight: 400 700;\n  font-display: swap; /* Ensures text remains visible during load */\n}\n\n/* System Font Fallback */\n.system-font-fallback {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Use <code>font-display: swap</code> for all custom fonts</li> <li>Preload critical fonts: <code>&lt;link rel=\"preload\" as=\"font\"&gt;</code></li> <li>Subset fonts to only needed characters</li> <li>Use variable fonts where possible</li> </ol>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#special-typography-features","title":"Special Typography Features","text":"","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#drop-caps-prairie-radical","title":"Drop Caps (Prairie Radical)","text":"CSS<pre><code>.theme-prairie-radical article &gt; p:first-of-type::first-letter {\n  font-family: 'Playfair Display', serif;\n  font-size: 4em;\n  float: left;\n  line-height: 0.8;\n  margin: 0.1em 0.1em 0 0;\n  color: var(--druids-accent-primary);\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#outlined-text-neobrutalist","title":"Outlined Text (Neobrutalist)","text":"CSS<pre><code>.theme-neobrutalist .text-outline {\n  color: transparent;\n  -webkit-text-stroke: 2px var(--druids-text-primary);\n  text-stroke: 2px var(--druids-text-primary);\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/design/typography/#glitch-effect-mandalorian","title":"Glitch Effect (Mandalorian)","text":"CSS<pre><code>.theme-mandalorian .glitch {\n  position: relative;\n  text-shadow: \n    0.05em 0 0 var(--druids-accent-secondary),\n    -0.05em 0 0 var(--druids-accent-primary);\n  animation: glitch 500ms infinite;\n}\n</code></pre>","tags":["typography","fonts","design-system","type-scale","accessibility"]},{"location":"learn/druids-fundamentals/","title":"DRUIDS Fundamentals","text":"<p>DRUIDS isn't just Git for organizing - it's a complete framework for democratic, revolutionary organizing infrastructure. Learn what makes it different and powerful.</p>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#core-distinctions","title":"Core Distinctions","text":"","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#revolutionary-commit-conventions","title":"Revolutionary Commit Conventions","text":"<p>How commit messages become democratic communication, encoding decisions and preserving dissent.</p>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#democratic-centralism-code-review","title":"Democratic Centralism Code Review","text":"<p>Transform code review into collective decision-making that strengthens both technical and political work.</p>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#druids-red-lines","title":"DRUIDS Red Lines","text":"<p>Understand the non-negotiable principles that keep DRUIDS serving revolutionary organizing.</p>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#integration-and-practice","title":"Integration and Practice","text":"","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#obsidian-integration","title":"Obsidian Integration","text":"<p>Use familiar tools while building revolutionary infrastructure - no command line required for daily work.</p>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#federation-protocols","title":"Federation Protocols","text":"<p>Connect multiple organizations while maintaining autonomy and security.</p>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#philosophy","title":"Philosophy","text":"<p>The political and theoretical foundations that guide DRUIDS development and implementation.</p>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#what-makes-druids-different","title":"What Makes DRUIDS Different","text":"","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#from-generic-git","title":"From Generic Git","text":"<ul> <li>Organizing-First Design: Every feature serves collective organizing</li> <li>Security by Default: Built-in protection for vulnerable communities</li> <li>Democratic Process: Tools that support consensus and collective decision-making</li> <li>Revolutionary Values: Explicit political framework guiding all development</li> </ul>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#from-corporate-tools","title":"From Corporate Tools","text":"<ul> <li>Collective Ownership: Organizations control their own infrastructure</li> <li>No Surveillance: No corporate monitoring or data mining</li> <li>Open Source: Transparent, auditable, modifiable by users</li> <li>Movement Building: Designed to strengthen organizing capacity</li> </ul>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#from-tech-solutions","title":"From Tech Solutions","text":"<ul> <li>Political Analysis: Understanding power relations in technology choices</li> <li>Collective Implementation: Group processes, not individual expertise</li> <li>Revolutionary Framework: Grounded in liberation struggle, not efficiency</li> <li>Democratic Participation: Tools serve organizing, don't replace it</li> </ul>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#implementation-approach","title":"Implementation Approach","text":"","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#political-foundation","title":"Political Foundation","text":"<ol> <li>Understand the Analysis: Why current tools fail revolutionary organizing</li> <li>Collective Decision: Organizational commitment to democratic infrastructure</li> <li>Security Assessment: Threat modeling for your specific context</li> <li>Strategic Planning: Implementation that builds collective capacity</li> </ol>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#technical-implementation","title":"Technical Implementation","text":"<ol> <li>Start Small: Begin with low-risk, high-value use cases</li> <li>Build Skills: Develop collective technical capacity</li> <li>Iterate Safely: Test and refine in secure environments</li> <li>Scale Sustainably: Expand without creating dependencies</li> </ol>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#organizational-integration","title":"Organizational Integration","text":"<ol> <li>Democratic Process: Involve everyone in infrastructure decisions</li> <li>Skill Sharing: Rotate technical responsibilities</li> <li>Cultural Change: Embed democratic practices in daily work</li> <li>Movement Connection: Share knowledge with other organizations</li> </ol>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#learning-sequence","title":"Learning Sequence","text":"","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#for-organizations-new-to-druids","title":"For Organizations New to DRUIDS","text":"<ol> <li>Foundation: Philosophy</li> <li>Practice: Revolutionary Commit Conventions</li> <li>Process: Democratic Centralism Code Review</li> <li>Integration: Obsidian Integration</li> </ol>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/#for-git-users-adopting-druids","title":"For Git Users Adopting DRUIDS","text":"<ol> <li>Distinction: DRUIDS Red Lines</li> <li>Communication: Revolutionary Commit Conventions</li> <li>Collaboration: Federation Protocols</li> <li>Framework: Philosophy</li> </ol> <p>\"DRUIDS transforms version control from individual productivity tool into collective organizing infrastructure.\"</p>","tags":["druids","fundamentals","revolutionary","organizing"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/","title":"Democratic Centralism in Code Review","text":"","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#the-accidental-revolutionary-architecture","title":"The Accidental Revolutionary Architecture","text":"<p>When Linus Torvalds created Git's pull request workflow, he was solving a technical problem: how to review code from thousands of contributors without chaos. He accidentally created a perfect implementation of democratic centralism - the organizational principle of revolutionary parties worldwide.</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#democratic-centralism-refresher","title":"Democratic Centralism Refresher","text":"<p>Lenin's formulation: - Freedom of discussion - All positions can be debated - Unity of action - Once decided, all implement together - Minority rights preserved - Dissent is documented, not erased - Collective decision making - No individual dictates</p> <p>Sound familiar? It's exactly how code review works.</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#the-pull-request-as-democratic-process","title":"The Pull Request as Democratic Process","text":"","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#1-freedom-of-discussion-open-pull-requests","title":"1. Freedom of Discussion = Open Pull Requests","text":"Bash<pre><code># Any comrade can propose changes\ngit checkout -b feature/new-organizing-tool\n# Make changes\ngit push origin feature/new-organizing-tool\n# Open PR for discussion\n</code></pre> <p>In organizing: Members propose new tactics, strategies, campaigns In Git: Developers propose new features, fixes, improvements</p> <p>Both create space for debate before implementation.</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#2-review-as-collective-deliberation","title":"2. Review as Collective Deliberation","text":"<p>The PR review process mirrors democratic debate:</p> Markdown<pre><code>**@ComradeReviewer1**: \"This approach might expose member data. Consider encryption here.\"\n\n**@Author**: \"Good point. Updated with encryption in commit abc123\"\n\n**@ComradeReviewer2**: \"The logic works but needs tests for edge cases\"\n\n**@SecurityComrade**: \"Approved from security perspective with latest changes\"\n</code></pre> <p>This isn't bureaucracy - it's collective intelligence preventing individual mistakes.</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#3-minority-positions-preserved","title":"3. Minority Positions Preserved","text":"<p>Unlike corporate \"consensus,\" Git preserves disagreement:</p> Markdown<pre><code>**@DissentingComrade**: \"I still think we should use approach B instead. Approving to not block, but documenting concerns:\n- Performance will degrade at scale\n- Maintenance burden increases\n- Alternative approach in branch `experiment/approach-b` for future reference\"\n</code></pre> <p>The dissent remains in history. Future organizers can learn from the debate.</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#4-unity-of-action-the-merge","title":"4. Unity of Action = The Merge","text":"<p>Once approved and merged: - Everyone pulls the new main branch - All work builds on the collective decision - No \"I'll use my own version\" individualism - Unity in implementation</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#code-review-as-political-education","title":"Code Review as Political Education","text":"","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#teaching-through-review","title":"Teaching Through Review","text":"<p>Good review comments educate:</p> Diff<pre><code>- passwords.txt\n+ # Never commit passwords directly!\n+ # Use environment variables:\n+ # export DB_PASSWORD='secret'\n+ # Reference in code: os.getenv('DB_PASSWORD')\n</code></pre> <p>Organizer Translation: Instead of \"you're wrong,\" we teach why and how to improve.</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#building-collective-knowledge","title":"Building Collective Knowledge","text":"<p>Each review spreads expertise:</p> Markdown<pre><code>**@ExperiencedDev**: \"This works, but here's a pattern we use for better error handling:\n\n```python\ntry:\n    result = risky_operation()\nexcept SpecificError as e:\n    logger.error(f\"Operation failed: {e}\")\n    # Graceful fallback\n</code></pre> <p>This prevents future issues across the codebase.\" Text Only<pre><code>Knowledge democratizes through practice, not hoarding.\n\n### Criticism and Self-Criticism in Code\n\nThe Maoist principle of criticism/self-criticism appears in every PR:\n\n**Author's Self-Criticism**:\n```markdown\n## Summary\nAdds meeting reminder automation\n\n## Known Issues\n- Doesn't handle timezone differences yet\n- Needs more error handling\n- Performance untested at scale\n\n## Request for Criticism\nPlease review especially for:\n- Security implications\n- Edge cases I missed\n- Better architectural approaches\n</code></pre></p> <p>Reviewers' Constructive Criticism: Markdown<pre><code>Architecture looks solid! Some suggestions:\n- Consider event-driven pattern for flexibility\n- Add rate limiting to prevent spam\n- Test with actual member data patterns\n</code></pre></p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#the-protected-branch-as-revolutionary-discipline","title":"The Protected Branch as Revolutionary Discipline","text":"","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#main-branch-protection-democratic-centralism","title":"Main Branch Protection = Democratic Centralism","text":"YAML<pre><code># .github/branch-protection.yml\nprotection_rules:\n  main:\n    required_reviews: 2          # Collective decision\n    dismiss_stale_reviews: true  # Re-review after changes\n    require_code_owner_review: true  # Domain expertise\n    include_administrators: true # No one above the rules\n</code></pre> <p>This enforces: - No individual can push directly to main - Changes require collective approval - Even admins follow democratic process - Power remains distributed</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#automated-checks-as-collective-standards","title":"Automated Checks as Collective Standards","text":"YAML<pre><code># .github/workflows/ci.yml\non: [pull_request]\njobs:\n  standards:\n    - run: npm test      # Collective test suite\n    - run: npm lint      # Agreed code style\n    - run: npm security  # Shared safety standards\n</code></pre> <p>These aren't arbitrary rules - they're collectively agreed standards enforced equally.</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#anti-patterns-in-code-review","title":"Anti-Patterns in Code Review","text":"","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#the-rubber-stamp","title":"The Rubber Stamp","text":"<p>Markdown<pre><code>\"LGTM!\" # (Looks Good To Me)\n</code></pre> Problem: No real review, just hierarchy Solution: Require substantive comments</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#the-dictatorial-review","title":"The Dictatorial Review","text":"<p>Markdown<pre><code>\"Change everything. Use my approach from 3 years ago. \nSee my personal blog post about why.\"\n</code></pre> Problem: Individual ego over collective good Solution: Focus reviews on objective criteria</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#the-endless-bikeshed","title":"The Endless Bikeshed","text":"<p>Markdown<pre><code>\"I prefer 2 spaces not 4\"\n\"Variable should be camelCase\"\n\"Move this comment up one line\"\n</code></pre> Problem: Minor preferences block progress Solution: Automated formatting, focus on substance</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#the-silent-block","title":"The Silent Block","text":"<p>No response for weeks, work stalls Problem: Individual becomes bottleneck Solution: Time limits, rotating reviewers</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#revolutionary-review-practices","title":"Revolutionary Review Practices","text":"","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#1-rotate-review-responsibilities","title":"1. Rotate Review Responsibilities","text":"<p>Don't create review priests: YAML<pre><code>reviewers:\n  monday: [maria, chen]\n  tuesday: [james, aaliyah]\n  wednesday: [rotation continues...]\n</code></pre></p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#2-document-review-criteria","title":"2. Document Review Criteria","text":"<p>Make standards explicit: Markdown<pre><code>## Review Checklist\n- [ ] Follows security practices\n- [ ] Includes tests\n- [ ] Updates documentation\n- [ ] No exposed credentials\n- [ ] Accessible to screen readers\n</code></pre></p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#3-review-as-teaching-opportunity","title":"3. Review As Teaching Opportunity","text":"<p>Bad review:</p> <p>\"This is wrong\"</p> <p>Good review:</p> <p>\"This works but exposes member data. Here's how to fix: 1. Move sensitive data to environment variables 2. Use encryption for data at rest 3. See our security guide: [link]\"</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#4-preserve-productive-disagreement","title":"4. Preserve Productive Disagreement","text":"<p>When consensus isn't reached: Markdown<pre><code>## Merging with Documented Dissent\nApproving to not block progress, but documenting concerns:\n- Performance impact unclear\n- Alternative approach might be better\n- Will revisit after real-world usage\n\nCreating issue #123 to track alternative implementation\n</code></pre></p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#code-review-for-non-coders","title":"Code Review for Non-Coders","text":"<p>These principles apply beyond code:</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#document-review","title":"Document Review","text":"<ul> <li>Proposals use PR process</li> <li>Comments improve clarity</li> <li>Collective editing</li> <li>Version tracking</li> </ul>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#campaign-planning-review","title":"Campaign Planning Review","text":"<ul> <li>Strategy documents in Git</li> <li>Tactics reviewed by experienced organizers</li> <li>Lessons incorporated</li> <li>History preserved</li> </ul>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#meeting-minutes-review","title":"Meeting Minutes Review","text":"<ul> <li>Secretary drafts</li> <li>Attendees review/correct</li> <li>Approved version merged</li> <li>Corrections tracked</li> </ul>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#the-cultural-revolution","title":"The Cultural Revolution","text":"<p>Code review transforms culture:</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#from-individualist","title":"From Individualist","text":"<ul> <li>\"My code\"</li> <li>\"Trust me\"</li> <li>\"I know best\"</li> </ul>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#to-collectivist","title":"To Collectivist","text":"<ul> <li>\"Our code\"</li> <li>\"Verify together\"</li> <li>\"We know best\"</li> </ul> <p>This cultural shift is as important as the technical practice.</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#implementation-guide","title":"Implementation Guide","text":"","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#starting-code-review-culture","title":"Starting Code Review Culture","text":"<ol> <li>Start Small</li> <li>Review documentation first</li> <li>Low-stakes changes</li> <li> <p>Build comfort</p> </li> <li> <p>Model Good Behavior</p> </li> <li>Thoughtful reviews</li> <li>Accept criticism gracefully</li> <li> <p>Thank reviewers</p> </li> <li> <p>Standardize Process</p> </li> <li>Clear templates</li> <li>Defined timelines</li> <li> <p>Rotation schedules</p> </li> <li> <p>Celebrate Learning</p> </li> <li>Highlight good reviews</li> <li>Share lessons learned</li> <li>Build collectively</li> </ol>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#tools-for-democratic-review","title":"Tools for Democratic Review","text":"<ul> <li>GitHub/GitLab: Built-in PR features</li> <li>Gitea: Self-hosted alternative</li> <li>Email: git-send-email for full control</li> <li>In-Person: Review parties for learning</li> </ul>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#the-revolutionary-promise","title":"The Revolutionary Promise","text":"<p>Code review isn't about catching bugs - it's about building collective intelligence. Every review: - Spreads knowledge - Prevents hierarchy - Builds consensus - Preserves dissent - Enforces standards - Teaches constantly</p> <p>This is democratic centralism in daily practice.</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/democratic-centralism-code-review/#your-next-pull-request","title":"Your Next Pull Request","text":"<p>When you open your next PR, remember: - You're practicing revolutionary democracy - Reviews improve our collective work - Disagreement strengthens decisions - Unity comes through process</p> <p>The revolution will be peer reviewed.</p> <p>Ready to practice? \u2192 Your First Pull Request Want templates? \u2192 PR Templates Deeper theory? \u2192 Git as Democratic Centralism</p> <p>Backlinks:</p>","tags":["democratic-centralism","git","code-review","theory","collaboration"]},{"location":"learn/druids-fundamentals/druids-red-lines/","title":"DRUIDS Red Lines: What We Must Never Become","text":"","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#defining-through-negation","title":"Defining Through Negation","text":"<p>Sometimes the clearest way to define what you are is to declare what you will never be. These red lines are inviolable. Cross them, and DRUIDS becomes just another tool of control rather than liberation.</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#the-absolute-red-lines","title":"The Absolute Red Lines","text":"","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#1-druids-must-never-become-proprietary","title":"1. DRUIDS Must Never Become Proprietary","text":"<p>The Line: No closed source. No \"enterprise editions.\" No paid features. Ever.</p> <p>Why This Matters:  - The moment DRUIDS has a price tag, it serves capital - Proprietary infrastructure creates technical hierarchy - Revolutionary tools must be commonly owned</p> <p>What This Means: - \u274c No dual licensing schemes - \u274c No \"open core\" with paid additions - \u274c No copyright assignment to corporations - \u2705 Forever free/libre software - \u2705 All features available to all - \u2705 Community ownership protected</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#2-druids-must-never-surveil-its-users","title":"2. DRUIDS Must Never Surveil Its Users","text":"<p>The Line: No analytics. No telemetry. No tracking. No exceptions.</p> <p>Why This Matters: - Trust requires privacy - Data collection enables targeting - Revolutionary organizations need sanctuary</p> <p>What This Means: - \u274c No usage statistics - \u274c No error reporting to central servers - \u274c No \"anonymous\" analytics - \u274c No update checking that phones home - \u2705 Complete local operation - \u2705 Users control their data - \u2705 Network requests only when essential</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#3-druids-must-never-create-technical-priests","title":"3. DRUIDS Must Never Create Technical Priests","text":"<p>The Line: If average organizers can't use it, we've failed.</p> <p>Why This Matters: - Technical hierarchy reproduces class relations - Complexity gatekeeps power - Revolution requires mass participation</p> <p>Learn to avoid this: Teaching Without Priesthood</p> <p>What This Means: - \u274c No features requiring CS degrees - \u274c No \"expert mode\" that gates essential functions - \u274c No documentation assuming technical background - \u2705 Grandmother test: Can your grandmother use it? - \u2705 Progressive disclosure of complexity - \u2705 Community knowledge sharing</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#4-druids-must-never-depend-on-corporate-infrastructure","title":"4. DRUIDS Must Never Depend on Corporate Infrastructure","text":"<p>The Line: No hard dependencies on Amazon, Google, Microsoft, etc.</p> <p>Why This Matters: - Corporate dependencies create kill switches - Platform capitalism extracts value - Revolutionary infrastructure needs autonomy</p> <p>What This Means: - \u274c No required cloud services - \u274c No GitHub-only workflows - \u274c No proprietary dependencies - \u2705 Self-hostable everything - \u2705 Federation over centralization - \u2705 Local-first architecture</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#5-druids-must-never-impose-ideology","title":"5. DRUIDS Must Never Impose Ideology","text":"<p>The Line: Infrastructure serves movements, not the reverse.</p> <p>Why This Matters: - Tools shouldn't dictate politics - Different conditions require different approaches - Sectarianism kills movements</p> <p>What This Means: - \u274c No hardcoded political positions - \u274c No enforced organizational structures - \u274c No \"correct\" way to organize - \u2705 Flexible to different tendencies - \u2705 Supports various organizing models - \u2705 Power steering, not compass</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#6-druids-must-never-sacrifice-security-for-convenience","title":"6. DRUIDS Must Never Sacrifice Security for Convenience","text":"<p>The Line: No \"easier but unsafe\" defaults.</p> <p>Why This Matters: - State repression is real - Infiltration destroys movements - Trust takes years to build, seconds to break</p> <p>See our approach: Security as Revolutionary Practice</p> <p>What This Means: - \u274c No passwords in plain text - \u274c No unencrypted sensitive data - \u274c No \"we'll add security later\" - \u2705 Security by design - \u2705 Safe defaults always - \u2705 Clear security indicators</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#7-druids-must-never-become-unmaintainable","title":"7. DRUIDS Must Never Become Unmaintainable","text":"<p>The Line: If the original developers disappear, DRUIDS must survive.</p> <p>Why This Matters: - Projects die from complexity - Bus factor kills tools - Revolutionary infrastructure must endure</p> <p>What This Means: - \u274c No clever code without documentation - \u274c No single points of failure - \u274c No dependencies on specific individuals - \u2705 Readable, maintainable codebase - \u2705 Comprehensive documentation - \u2705 Multiple maintainers always</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#8-druids-must-never-discriminate","title":"8. DRUIDS Must Never Discriminate","text":"<p>The Line: Accessible to all or useful to none.</p> <p>Why This Matters: - Revolution includes everyone or fails - Disability justice is revolutionary justice - Language barriers divide movements</p> <p>What This Means: - \u274c No English-only assumption - \u274c No ablest interfaces - \u274c No cultural defaults - \u2705 Internationalization from start - \u2705 Accessibility as core feature - \u2705 Multiple interface options</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#9-druids-must-never-promise-false-security","title":"9. DRUIDS Must Never Promise False Security","text":"<p>The Line: Honest about limitations, always.</p> <p>Why This Matters: - False security kills activists - Perfect security doesn't exist - Trust requires honesty</p> <p>What This Means: - \u274c No \"military-grade encryption\" marketing - \u274c No security through obscurity - \u274c No hiding known vulnerabilities - \u2705 Clear threat model documentation - \u2705 Honest about trade-offs - \u2705 Regular security audits</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#10-druids-must-never-optimize-for-scale-over-community","title":"10. DRUIDS Must Never Optimize for Scale Over Community","text":"<p>The Line: Better to serve 10 organizations well than 10,000 poorly.</p> <p>Why This Matters: - Growth-hacking serves capital - Quality organizes better than quantity - Deep roots beat shallow spread</p> <p>What This Means: - \u274c No venture capital metrics - \u274c No user acquisition funnels - \u274c No engagement optimization - \u2705 Community needs first - \u2705 Sustainable growth - \u2705 Quality over metrics</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#the-positive-commitments","title":"The Positive Commitments","text":"<p>From these red lines emerge positive principles:</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#we-will-always","title":"We Will Always:","text":"<ol> <li>Prioritize user safety over all other concerns</li> <li>Document thoroughly for future maintainers</li> <li>Build collectively with affected communities</li> <li>Default to transparency in development</li> <li>Respect autonomy of organizations using DRUIDS</li> <li>Learn from failure without hiding mistakes</li> <li>Credit all labor that builds the project</li> <li>Maintain simplicity as a feature</li> <li>Preserve history for future struggle</li> <li>Serve movements not careers</li> </ol>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#enforcement-mechanisms","title":"Enforcement Mechanisms","text":"","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#technical-enforcement","title":"Technical Enforcement","text":"<ul> <li>License requires derivative works stay free</li> <li>Architecture prevents centralized control</li> <li>Code structure maintains simplicity</li> </ul>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#social-enforcement","title":"Social Enforcement","text":"<ul> <li>Community governance model</li> <li>Transparent decision making</li> <li>Public accountability</li> </ul>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#political-enforcement","title":"Political Enforcement","text":"<ul> <li>Connection to revolutionary movements</li> <li>Accountability to users not funders</li> <li>Principles over personalities</li> </ul>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#when-tensions-arise","title":"When Tensions Arise","text":"<p>Sometimes principles conflict. When they do:</p> <ol> <li>User safety trumps everything</li> <li>Collective ownership beats individual control</li> <li>Movement needs outweigh technical elegance</li> <li>Accessibility matters more than features</li> <li>Sustainability beats rapid growth</li> </ol>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#the-living-document","title":"The Living Document","text":"<p>These red lines aren't commandments from above. They're collective agreements from below. As movements evolve, so might these principles - but only through democratic process, never through drift or convenience.</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#to-propose-changes","title":"To Propose Changes:","text":"<ol> <li>Document the material conditions requiring change</li> <li>Propose specific amendment</li> <li>Allow community discussion period</li> <li>Require supermajority approval</li> <li>Document dissent for history</li> </ol>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#the-revolutionary-wager","title":"The Revolutionary Wager","text":"<p>We bet that: - Tools shape movements - Infrastructure is political - Collective ownership beats private control - Security enables rather than restricts - Simplicity serves better than complexity</p> <p>DRUIDS exists to prove this wager correct.</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/druids-red-lines/#your-responsibility","title":"Your Responsibility","text":"<p>If you use DRUIDS, you inherit these red lines. If you contribute to DRUIDS, you enforce them. If you see them crossed, you must speak.</p> <p>These aren't guidelines. They're guardrails against becoming what we fight.</p> <p>Understand the vision? \u2192 DRUIDS Philosophy See implementation? \u2192 Security Model Want to contribute? \u2192 Contributing Guide</p> <p>\"The master's tools will never dismantle the master's house. DRUIDS must never become the master's tools.\"</p> <p>Backlinks:</p>","tags":["ethics","red-lines","principles","constraints","philosophy"]},{"location":"learn/druids-fundamentals/federation-protocols/","title":"Federation Protocols","text":"","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#what-is-federation","title":"What Is Federation?","text":"<p>Federation allows multiple autonomous organizations to coordinate without sacrificing independence. Like allied nations cooperating while maintaining sovereignty, federated DRUIDS instances share knowledge while preserving organizational autonomy.</p>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#core-principles","title":"Core Principles","text":"","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#1-autonomy-first","title":"1. Autonomy First","text":"<p>Each organization maintains: - Independent repositories - Local decision-making - Security boundaries - Organizational culture</p>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#2-selective-sharing","title":"2. Selective Sharing","text":"<p>Organizations choose what to share: - Public campaigns (L0) - Joint strategies (L1) - Never sensitive operations (L2)</p>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#3-consensus-protocols","title":"3. Consensus Protocols","text":"<p>Shared decisions require: - Proposal documentation - Discussion period - Consent process - Implementation plan</p>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#4-technical-interoperability","title":"4. Technical Interoperability","text":"<p>All federated orgs use: - Compatible Git workflows - Shared commit conventions - Common security tiers - Standardized structures</p>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#federation-architecture","title":"Federation Architecture","text":"","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#hub-and-spoke-model","title":"Hub and Spoke Model","text":"Text Only<pre><code>    Local Org A\n         |\n    Federation Hub ---- Local Org B\n         |\n    Local Org C\n</code></pre> <p>Benefits: - Clear coordination point - Simplified syncing - Reduced complexity - Easier onboarding</p>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#mesh-network-model","title":"Mesh Network Model","text":"Text Only<pre><code>Org A ---- Org B\n  |   \\  /   |\n  |    \\/    |\n  |    /\\    |\n  |   /  \\   |\nOrg C ---- Org D\n</code></pre> <p>Benefits: - No single point of failure - Direct org relationships - Maximum autonomy - Resilient structure</p>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#hybrid-model-recommended","title":"Hybrid Model (Recommended)","text":"<ul> <li>Regional hubs for coordination</li> <li>Direct links for close partners</li> <li>Flexible routing</li> <li>Scales with movement</li> </ul>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#technical-implementation","title":"Technical Implementation","text":"","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#setting-up-federation","title":"Setting Up Federation","text":"","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#1-establish-federation-repository","title":"1. Establish Federation Repository","text":"Bash<pre><code># Create shared federation space\ngit init federation-hub\ncd federation-hub\n\n# Set up structure\nmkdir -p campaigns/joint\nmkdir -p resources/shared\nmkdir -p protocols/federation\n</code></pre>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#2-configure-access-controls","title":"2. Configure Access Controls","text":"Bash<pre><code># Add participating organizations\ngit remote add org-a https://org-a.druids/federation.git\ngit remote add org-b https://org-b.druids/federation.git\n\n# Set up GPG signing\ngit config --local commit.gpgsign true\ngit config --local user.signingkey FEDERATION_KEY\n</code></pre>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#3-define-sharing-protocols","title":"3. Define Sharing Protocols","text":"<p>Create <code>protocols/federation/sharing-agreement.md</code>: - What content is shared - How decisions are made - Conflict resolution process - Security boundaries</p>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#synchronization-patterns","title":"Synchronization Patterns","text":"","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#push-pattern-contributing","title":"Push Pattern (Contributing)","text":"Bash<pre><code># Organization shares campaign\ngit checkout -b joint/housing-campaign\ncp campaigns/local/housing.md campaigns/joint/\ngit add campaigns/joint/housing.md\ngit commit -m \"SHARE: Housing campaign for federation\"\ngit push federation joint/housing-campaign\n</code></pre>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#pull-pattern-receiving","title":"Pull Pattern (Receiving)","text":"Bash<pre><code># Organization gets shared resources\ngit fetch federation\ngit checkout federation/main\ngit diff main federation/main\ngit merge federation/main --no-ff\n</code></pre>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#selective-sync","title":"Selective Sync","text":"Bash<pre><code># Only sync specific directories\ngit sparse-checkout init\ngit sparse-checkout set campaigns/joint resources/shared\ngit pull federation main\n</code></pre>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#content-standards","title":"Content Standards","text":"","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#shared-campaigns","title":"Shared Campaigns","text":"<p>Must include: - Clear objectives - Resource needs - Timeline - Contact protocols - Success metrics</p>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#resource-library","title":"Resource Library","text":"<p>Standardized: - Naming conventions - Metadata headers - License terms - Attribution</p>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#protocol-documentation","title":"Protocol Documentation","text":"<p>Required elements: - Purpose statement - Participant list - Decision process - Amendment procedure</p>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#governance-models","title":"Governance Models","text":"","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#spokescouncil","title":"Spokescouncil","text":"<ul> <li>Each org sends delegate</li> <li>Rotating facilitation</li> <li>Consensus decisions</li> <li>Quarterly meetings</li> </ul>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#working-groups","title":"Working Groups","text":"<ul> <li>Task-specific teams</li> <li>Cross-org membership</li> <li>Autonomous operation</li> <li>Report to spokescouncil</li> </ul>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#emergency-protocols","title":"Emergency Protocols","text":"<ul> <li>Rapid response network</li> <li>Pre-authorized actions</li> <li>Security triggers</li> <li>Communication trees</li> </ul>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#security-considerations","title":"Security Considerations","text":"","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#information-barriers","title":"Information Barriers","text":"<ul> <li>L2 never federated</li> <li>L1 requires explicit consent</li> <li>L0 shared by default</li> <li>Clear markings required</li> </ul>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#trust-networks","title":"Trust Networks","text":"<ul> <li>GPG key signing parties</li> <li>Verified communication channels</li> <li>Known contact lists</li> <li>Regular security audits</li> </ul>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#incident-response","title":"Incident Response","text":"<ul> <li>Breach notification within 24h</li> <li>Coordinated response</li> <li>Shared security updates</li> <li>Lessons learned process</li> </ul>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#common-patterns","title":"Common Patterns","text":"","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#regional-federations","title":"Regional Federations","text":"<ul> <li>Geographic proximity</li> <li>Shared conditions</li> <li>Joint campaigns</li> <li>Resource pooling</li> </ul>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#sector-federations","title":"Sector Federations","text":"<ul> <li>Similar work (tenants, labor, etc.)</li> <li>Shared strategies</li> <li>Best practices</li> <li>Skill sharing</li> </ul>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#campaign-federations","title":"Campaign Federations","text":"<ul> <li>Temporary coordination</li> <li>Specific objectives</li> <li>Sunset clauses</li> <li>Asset distribution</li> </ul>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#conflict-resolution","title":"Conflict Resolution","text":"","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#technical-conflicts","title":"Technical Conflicts","text":"<ol> <li>Document disagreement</li> <li>Seek technical solution</li> <li>Test both approaches</li> <li>Choose by consensus</li> </ol>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#political-conflicts","title":"Political Conflicts","text":"<ol> <li>Clarify positions</li> <li>Find common ground</li> <li>Agree to disagree</li> <li>Maintain autonomy</li> </ol>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#resource-conflicts","title":"Resource Conflicts","text":"<ol> <li>Assess actual needs</li> <li>Transparent allocation</li> <li>Rotation systems</li> <li>Abundance mindset</li> </ol>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#success-metrics","title":"Success Metrics","text":"","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#healthy-federation-signs","title":"Healthy Federation Signs","text":"<ul> <li>Regular contributions</li> <li>Active participation</li> <li>Conflict resolution</li> <li>Growing capacity</li> <li>Maintained autonomy</li> </ul>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#warning-signs","title":"Warning Signs","text":"<ul> <li>Centralization creep</li> <li>Inactive members</li> <li>Unresolved conflicts</li> <li>Security breaches</li> <li>Resource hoarding</li> </ul>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#getting-started","title":"Getting Started","text":"","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#for-organizations","title":"For Organizations","text":"<ol> <li>Assess federation readiness</li> <li>Identify potential partners</li> <li>Propose initial structure</li> <li>Start small pilot</li> </ol>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#for-federations","title":"For Federations","text":"<ol> <li>Create founding documents</li> <li>Establish technical infrastructure</li> <li>Run test campaigns</li> <li>Iterate based on experience</li> </ol>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#case-studies","title":"Case Studies","text":"","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#tenant-federation-example","title":"Tenant Federation Example","text":"<p>Five tenant unions sharing: - Winning strategies - Legal resources - Organizer training - City-wide campaigns</p>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#labor-federation-example","title":"Labor Federation Example","text":"<p>Sector-wide coordination: - Contract language library - Strike support protocols - Skill sharing networks - Joint negotiations</p>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/federation-protocols/#remember","title":"Remember","text":"<p>Federation multiplies power while preserving autonomy. The goal isn't unity for unity's sake, but strategic coordination for revolutionary capacity.</p> <p>Strong federations are built on: - Clear agreements - Technical standards - Mutual respect - Shared victories</p> <p>Next Steps: - Technical setup: Federation Configuration - Governance models: Democratic Centralism - Security planning: Three-Tier System</p> <p>Backlinks:</p>","tags":["federation","multi-org","coordination","autonomy","protocols"]},{"location":"learn/druids-fundamentals/obsidian-integration/","title":"Obsidian Integration with DRUIDS","text":"","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#why-obsidian","title":"Why Obsidian?","text":"<p>Git is powerful but intimidating. Obsidian provides a familiar, visual interface while maintaining Git's revolutionary potential underneath. Think of it as power windows to complement our power steering.</p>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#core-benefits","title":"Core Benefits","text":"","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#1-visual-knowledge-management","title":"1. Visual Knowledge Management","text":"<ul> <li>See connections between documents</li> <li>Navigate through graph view</li> <li>Search across all organizational knowledge</li> <li>Tag and categorize intuitively</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#2-git-without-command-line","title":"2. Git Without Command Line","text":"<ul> <li>Commit through Obsidian Git plugin</li> <li>Visual diff checking</li> <li>One-click sync</li> <li>Automatic backups</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#3-markdown-simplicity","title":"3. Markdown Simplicity","text":"<ul> <li>Write like a document</li> <li>Version control like code</li> <li>No proprietary formats</li> <li>Future-proof content</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#4-offline-first","title":"4. Offline First","text":"<ul> <li>Work without internet</li> <li>Sync when connected</li> <li>Local control</li> <li>No cloud dependence</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#how-it-works","title":"How It Works","text":"","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#the-technical-flow","title":"The Technical Flow","text":"Text Only<pre><code>Your Writing \u2192 Obsidian \u2192 Git Plugin \u2192 Git Repository \u2192 Shared History\n</code></pre>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#daily-workflow","title":"Daily Workflow","text":"<ol> <li>Open Obsidian - Your vault is your workspace</li> <li>Create/Edit Documents - Just write naturally</li> <li>Commit Changes - Click sync or auto-commit</li> <li>Pull Updates - Get comrades' contributions</li> <li>Resolve Conflicts - Visual merge tools</li> </ol>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#key-features-for-organizers","title":"Key Features for Organizers","text":"","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#templates","title":"Templates","text":"<p>Pre-built structures for: - Meeting notes - Campaign plans - Security protocols - Member databases</p>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#plugins-that-matter","title":"Plugins That Matter","text":"<ul> <li>Git: Version control integration</li> <li>Dataview: Query your knowledge base</li> <li>Kanban: Visual task management</li> <li>Calendar: Time-based organization</li> <li>Templates: Consistent documentation</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#security-features","title":"Security Features","text":"<ul> <li>Local encryption</li> <li>Vault passwords</li> <li>Selective sync</li> <li>Private vaults</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#configuration-principles","title":"Configuration Principles","text":"","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#start-simple","title":"Start Simple","text":"<ol> <li>Basic vault with Git plugin</li> <li>Add features as needed</li> <li>Don't over-engineer</li> <li>Focus on writing</li> </ol>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#organize-for-revolution","title":"Organize for Revolution","text":"Text Only<pre><code>vault/\n\u251c\u2500\u2500 meetings/\n\u2502   \u251c\u2500\u2500 2024/\n\u2502   \u2514\u2500\u2500 templates/\n\u251c\u2500\u2500 campaigns/\n\u2502   \u251c\u2500\u2500 active/\n\u2502   \u2514\u2500\u2500 archive/\n\u251c\u2500\u2500 members/\n\u2502   \u2514\u2500\u2500 [L1 encrypted]\n\u2514\u2500\u2500 resources/\n    \u251c\u2500\u2500 guides/\n    \u2514\u2500\u2500 theory/\n</code></pre>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#security-by-design","title":"Security by Design","text":"<ul> <li>L0 content in main vault</li> <li>L1 content in encrypted folders</li> <li>L2 content in separate vaults</li> <li>Clear visual indicators</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#common-patterns","title":"Common Patterns","text":"","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#meeting-documentation","title":"Meeting Documentation","text":"<ol> <li>Template generates structure</li> <li>Fill in during meeting</li> <li>Auto-commit every 5 minutes</li> <li>Tagged for easy finding</li> </ol>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#campaign-management","title":"Campaign Management","text":"<ol> <li>Central campaign note</li> <li>Linked daily updates</li> <li>Task tracking</li> <li>Resource collection</li> </ol>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#knowledge-building","title":"Knowledge Building","text":"<ol> <li>Permanent notes for concepts</li> <li>Daily notes for events</li> <li>Maps of content for navigation</li> <li>Tags for categorization</li> </ol>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#troubleshooting-integration","title":"Troubleshooting Integration","text":"","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#git-commands-failed","title":"\"Git commands failed\"","text":"<ul> <li>Check Git installation</li> <li>Verify repository access</li> <li>Confirm network connection</li> <li>Review error logs</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#merge-conflicts","title":"\"Merge conflicts\"","text":"<ul> <li>Use visual diff tool</li> <li>Choose version to keep</li> <li>Commit resolution</li> <li>Communicate with team</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#cant-sync","title":"\"Can't sync\"","text":"<ul> <li>Check credentials</li> <li>Verify remote URL</li> <li>Test network access</li> <li>Try manual pull/push</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#best-practices","title":"Best Practices","text":"","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#for-individuals","title":"For Individuals","text":"<ul> <li>Commit often with clear messages</li> <li>Pull before starting work</li> <li>Use templates consistently</li> <li>Tag appropriately</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#for-organizations","title":"For Organizations","text":"<ul> <li>Standardize folder structure</li> <li>Create shared templates</li> <li>Document conventions</li> <li>Train collectively</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#for-security","title":"For Security","text":"<ul> <li>Understand what's L0/L1/L2</li> <li>Use appropriate vaults</li> <li>Regular security reviews</li> <li>Incident response plans</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#beyond-basics","title":"Beyond Basics","text":"","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#advanced-workflows","title":"Advanced Workflows","text":"<ul> <li>Automated meeting minutes</li> <li>Campaign dashboards</li> <li>Knowledge graphs</li> <li>API integrations</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#custom-solutions","title":"Custom Solutions","text":"<ul> <li>Organization-specific plugins</li> <li>Tailored templates</li> <li>Workflow automation</li> <li>Integration scripts</li> </ul>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#the-political-choice","title":"The Political Choice","text":"<p>Using Obsidian isn't just technical\u2014it's political: - Local first: Your data, your control - Open formats: No vendor lock-in - Community driven: Shared ownership - Accessible: Lower barriers to entry</p>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#getting-started","title":"Getting Started","text":"<ol> <li>Install Obsidian</li> <li>Configure Git Plugin</li> <li>Create First Note</li> <li>Join the Collective</li> </ol>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/obsidian-integration/#remember","title":"Remember","text":"<p>Obsidian is just the interface. The revolution happens in: - The knowledge we preserve - The decisions we document - The connections we build - The history we write</p> <p>Tools serve organizing. Organizing serves liberation.</p> <p>Next Steps: - Technical setup: Complete Setup Guide - Workflow design: Obsidian Git Workflow - Security configuration: Obsidian Offline Git Workflow</p> <p>Backlinks:</p>","tags":["obsidian","integration","user-interface","accessibility"]},{"location":"learn/druids-fundamentals/philosophy/","title":"DRUIDS Philosophy","text":"","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#infrastructure-is-political","title":"Infrastructure is Political","text":"<p>Every technical choice embodies political values. DRUIDS makes these choices explicit:</p> <ul> <li>Distributed over centralized \u2192 Power distribution over hierarchy</li> <li>Transparent history over editable \u2192 Accountability over revisionism</li> <li>Plain text over proprietary \u2192 Access over gatekeeping</li> <li>Local-first over cloud \u2192 Sovereignty over convenience</li> </ul> <p>Want to see these principles in action? Check out our Quick Demo or dive into Why DRUIDS?</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#core-principles","title":"Core Principles","text":"","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#1-technology-serves-organizing-not-vice-versa","title":"1. Technology Serves Organizing, Not Vice Versa","text":"<p>Tools should reduce friction for revolutionary work, not create new hierarchies or barriers. Every feature must answer: \"How does this help organizers organize?\"</p> <p>Bad: \"This uses cutting-edge blockchain technology!\" Good: \"This prevents lost meeting notes.\"</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#2-democratic-centralism-in-code","title":"2. Democratic Centralism in Code","text":"<p>Git's architecture accidentally implements democratic centralism: - Branches = Freedom of discussion - Pull requests = Debate and critique - Merges = Unity of action - History = Preserved dissent</p> <p>We lean into this, not away from it.</p> <p>See how Git enables democratic process: Git Isn't Programming and Git Through Campaign</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#3-security-through-clarity-not-obscurity","title":"3. Security Through Clarity, Not Obscurity","text":"<p>Security theater creates false confidence. Real security comes from: - Understanding actual threats (not fantasies) - Clear, simple protocols (not complex ceremonies) - Collective practices (not individual paranoia) - Material assessment (not ideological purity)</p> <p>Learn our security approach: Security as Revolutionary Practice and Our Red Lines</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#4-knowledge-as-commons","title":"4. Knowledge as Commons","text":"<p>Information wants to be free - both free as in beer and free as in freedom. DRUIDS ensures: - No proprietary formats - No vendor lock-in - No special priest class - No artificial scarcity</p> <p>How we democratize tech knowledge: Teaching Without Priesthood</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#5-prefigurative-technology","title":"5. Prefigurative Technology","text":"<p>The tools we use shape the world we build. DRUIDS prefigures: - Collective ownership (everyone has full repository) - Democratic process (transparent decision-making) - Mutual aid (knowledge shared freely) - Horizontal organization (no technical hierarchy)</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#design-decisions","title":"Design Decisions","text":"","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#why-git","title":"Why Git?","text":"<p>Git wasn't built for revolutionaries, but its design serves our needs:</p> <ol> <li>Distributed by design - No single point of failure</li> <li>History is immutable - Can't rewrite the past secretly</li> <li>Branching is free - Experimentation without commitment</li> <li>Merging is explicit - Unity requires conscious action</li> <li>Universal tool - Massive volunteer pool</li> </ol>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#why-plain-text","title":"Why Plain Text?","text":"<ul> <li>Survives decades - Can read 40-year-old text files</li> <li>Universal access - Any device can read it</li> <li>Version control friendly - Git tracks changes perfectly</li> <li>No vendor lock-in - Not dependent on any company</li> <li>Scriptable - Automate anything</li> </ul>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#why-three-tiers","title":"Why Three Tiers?","text":"<p>Security isn't binary. Different information needs different protection:</p> <ul> <li>L0 (Public) - Education and outreach</li> <li>L1 (Members) - Operational coordination  </li> <li>L2 (Sensitive) - Strategic planning</li> </ul> <p>This prevents both security theater and dangerous exposure.</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#why-local-first","title":"Why Local-First?","text":"<ul> <li>Sovereignty - You control your data</li> <li>Resilience - Works without internet</li> <li>Security - No cloud provider to subpoena</li> <li>Speed - No network latency</li> <li>Privacy - No surveillance capitalism</li> </ul>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#what-druids-is-not","title":"What DRUIDS Is Not","text":"","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#not-ideology","title":"Not Ideology","text":"<p>DRUIDS doesn't make you revolutionary. Your politics do that. DRUIDS makes revolutionary organizing more effective.</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#not-perfect-security","title":"Not Perfect Security","text":"<p>Perfect security doesn't exist. DRUIDS provides good-enough security based on real threat models, not paranoid fantasies.</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#not-a-silver-bullet","title":"Not a Silver Bullet","text":"<p>Tools don't solve organizational problems. DRUIDS reduces friction but can't fix: - Political disagreements - Personal conflicts - Lack of commitment - Poor organizing</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#not-corporate-software","title":"Not Corporate Software","text":"<p>DRUIDS will never: - Track metrics for \"engagement\" - Add features for \"growth hacking\" - Optimize for \"user retention\" - Implement \"productivity analytics\"</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#revolutionary-implications","title":"Revolutionary Implications","text":"","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#breaking-technical-hierarchy","title":"Breaking Technical Hierarchy","text":"<p>Traditional organizations depend on \"the tech person.\" When they leave, capacity dies. DRUIDS democratizes technical knowledge, making everyone capable of core functions.</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#institutional-memory-as-power","title":"Institutional Memory as Power","text":"<p>Organizations that remember their history make better decisions. DRUIDS ensures that memory persists beyond any individual, building power over time.</p> <p>Deep dive into institutional memory: Institutional Memory and Revolutionary Capacity</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#transparency-as-accountability","title":"Transparency as Accountability","text":"<p>When all decisions are tracked with context, leadership can't hide behind closed doors. Power becomes visible and therefore challengeable.</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#infrastructure-as-pedagogy","title":"Infrastructure as Pedagogy","text":"<p>Using DRUIDS teaches: - Democratic process through practice - Security culture through habits - Technical skills through necessity - Collective ownership through architecture</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#future-vision","title":"Future Vision","text":"<p>DRUIDS points toward a world where:</p> <ul> <li>Every organization controls its own infrastructure</li> <li>Every organizer has technical capability</li> <li>Every decision is transparent and accountable</li> <li>Every lesson builds collective knowledge</li> <li>Every tool serves liberation, not profit</li> </ul>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#the-revolutionary-wager","title":"The Revolutionary Wager","text":"<p>We bet that: - Organizations want democracy over efficiency - Organizers can learn technical skills - Transparency strengthens rather than weakens - Local infrastructure beats cloud convenience - Revolution requires sustainable organizing</p> <p>DRUIDS is infrastructure for those who share this wager.</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/philosophy/#join-us","title":"Join Us","text":"<p>DRUIDS isn't finished. It's a living project that grows through use and contribution. Every organization that adopts it shapes its future.</p> <p>The master's tools will never dismantle the master's house. So we're building our own tools.</p> <p>\"The philosophers have only interpreted the world in various ways; the point is to change it.\" - Marx</p> <p>DRUIDS is praxis: theory made material in code.</p> <p>Ready to start? Begin with Your First Revolutionary Commit or explore our Glossary to understand key terms.</p> <p>Backlinks:</p>","tags":["philosophy","theory","design-principles","revolutionary-infrastructure"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/","title":"Revolutionary Commit Conventions","text":"<p>Transform Git commits from individual changes to collective decisions</p>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#overview","title":"Overview","text":"<p>Revolutionary Commit Conventions encode democratic decision-making directly into version control. Every commit records: - WHO made the decision (which democratic body) - HOW it was decided (vote counts/consensus)  - WHAT was decided (in organizing language) - WHY it matters (political context)</p>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#basic-format","title":"Basic Format","text":"Text Only<pre><code>TYPE[decision-body](vote-result){#b6533fe2197cfdba9cbe91bbab2ff74b}: Action description\n</code></pre>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#examples","title":"Examples","text":"Bash<pre><code>DECIDED[general-meeting](15-2-1){#5c77733d9860e7a16e5bdcca5b192ba3}: Implement 3-tier security model\nORGANIZED[tenant-union](consensus){#078eb6dc4e96d2d5a922f246b4088cf6}: Launch rent strike campaign\nEDUCATED[study-group](12-present){#dbb0a73eef09b504ab41f9c2a0da19c2}: Document Capital Vol.1 Ch.3 key concepts\nEMERGENCY[security-comm](immediate){#516ff1e73f558b0ae701ae4561a63e2c}: Rotate compromised credentials\n</code></pre>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#commit-types","title":"Commit Types","text":"Type Purpose Example <code>DECIDED</code> Formal organizational decisions <code>DECIDED[committee](unanimous){#baccbb45bf9967b2307d32eb5743241e}: Adopt new bylaws</code> <code>ORGANIZED</code> Campaign/action planning <code>ORGANIZED[working-group](8-1-0){#49054e4f8f771b9da369375de01ad271}: Plan march route</code> <code>EDUCATED</code> Political education materials <code>EDUCATED[study-group](15-present){#4d7e7ade9a48c7f081ba04cf0f25af60}: Create Lenin reading guide</code> <code>DOCUMENTED</code> Meeting minutes/records <code>DOCUMENTED[secretary](routine){#31eee68da12abc2d387096a6877a1b38}: Record June meeting</code> <code>SECURED</code> Security-related changes <code>SECURED[security-team](emergency){#b65d50673fb197078c78f3a448a958bf}: Update access controls</code> <code>EMERGENCY</code> Urgent response actions <code>EMERGENCY[coords](quorum){#5e47a18853e96e5dd55b3b4c3e0b6ced}: Remove compromised data</code> <code>REFLECTED</code> Self-criticism/evaluation <code>REFLECTED[plenary](collective){#be6601e0439c8f7e32e545c04aae24c7}: Assess campaign effectiveness</code>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#decision-bodies","title":"Decision Bodies","text":"Body Description Authority <code>[general-meeting]</code> Full membership assembly Highest authority <code>[committee-name]</code> Standing committees Delegated authority <code>[working-group]</code> Temporary formations Task-specific <code>[security-team]</code> Security committee Emergency powers <code>[coords]</code> Coordination committee Daily operations <code>[plenary]</code> Evaluation sessions Assessment only","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#vote-results","title":"Vote Results","text":"Format Meaning Example <code>(unanimous)</code> No opposition Full agreement <code>(consensus)</code> No blocks, possible concerns General agreement <code>(15-2-1)</code> For-Against-Abstain count Democratic vote <code>(12-present)</code> Attendance for education No vote needed <code>(quorum)</code> Minimum attendance met Emergency decision <code>(postponed)</code> Tabled for future Needs more discussion <code>(amended)</code> Modified during meeting See details in commit","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#extended-format","title":"Extended Format","text":"<p>For complex decisions, use multi-line format:</p> Bash<pre><code>git commit -m \"DECIDED[general-meeting](18-3-0){#816163173d16b789b2db309c37da87ce}: Adopt 3-month campaign timeline\n\nMeeting: 2024-07-03 General Assembly\nProposer: Housing Committee  \nDiscussion: 45 minutes\nKey Points:\n- Timeline balances urgency with capacity\n- Includes 2-week education phase\n- Built-in evaluation checkpoints\n\nImplementation assigns:\n- Week 1-2: Education (Ed Committee)\n- Week 3-8: Escalation (Direct Action)  \n- Week 9-12: Negotiation (Liaison)\n\nReferences: proposal-2024-15.md\nSecurity: L0\"\n</code></pre>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#git-configuration","title":"Git Configuration","text":"","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#commit-template","title":"Commit Template","text":"<p>Create <code>.gitmessage</code> in your repository:</p> Text Only<pre><code># TYPE[body](result){#b4a88417b3d0170d754c647c30b7216a}: Subject (50 chars max)\n#\n# Meeting: Date and type\n# Proposer: Who brought forward\n# Discussion: Duration and key points\n# Decision: Specific outcome\n# Assigns: Who does what\n# Timeline: When complete\n# References: Related documents\n# Security: L0/L1/L2\n</code></pre> <p>Configure Git to use template: Bash<pre><code>git config commit.template .gitmessage\n</code></pre></p>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#validation-hook","title":"Validation Hook","text":"<p>Create <code>.git/hooks/commit-msg</code>:</p> Bash<pre><code>#!/bin/bash\n# Validate revolutionary commit format\n\ncommit_regex='^(DECIDED|ORGANIZED|EDUCATED|DOCUMENTED|SECURED|EMERGENCY|REFLECTED)\\[[a-z-]+\\]\\([a-z0-9-]+\\): .{1,50}'\n\nif ! grep -qE \"$commit_regex\" \"$1\"; then\n    echo \"ERROR: Commit message must follow revolutionary format:\"\n    echo \"TYPE[decision-body](vote-result){#b6533fe2197cfdba9cbe91bbab2ff74b}: Description\"\n    echo \"\"\n    echo \"Example:\"\n    echo \"DECIDED[general-meeting](unanimous){#baccbb45bf9967b2307d32eb5743241e}: Implement new security protocols\"\n    exit 1\nfi\n</code></pre>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#automation-integration","title":"Automation Integration","text":"","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#parse-commits-for-automation","title":"Parse Commits for Automation","text":"Python<pre><code>import re\nfrom typing import Dict, Optional\n\nclass RevolutionaryCommit:\n    def __init__(self, message: str):\n        self.pattern = r'^(\\w+)\\[([^\\]]+)\\]\\(([^)]+)\\): (.+)'\n        self.parse(message)\n\n    def parse(self, message: str) -&gt; None:\n        match = re.match(self.pattern, message)\n        if match:\n            self.type = match.group(1)\n            self.body = match.group(2)\n            self.result = match.group(3)\n            self.action = match.group(4)\n        else:\n            raise ValueError(\"Invalid revolutionary commit format\")\n\n    def needs_implementation(self) -&gt; bool:\n        return self.type == \"DECIDED\"\n\n    def is_urgent(self) -&gt; bool:\n        return self.type == \"EMERGENCY\"\n\n    def was_unanimous(self) -&gt; bool:\n        return self.result == \"unanimous\"\n</code></pre>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#automation-rules","title":"Automation Rules","text":"YAML<pre><code># .druids/automation.yml\ncommit_triggers:\n  - pattern: \"DECIDED.*general-meeting.*\"\n    actions:\n      - notify: all_members\n      - create_task: implementation_tracking\n      - deadline: 72_hours\n\n  - pattern: \"EMERGENCY.*\"\n    actions:\n      - notify: security_team\n      - notify: coordination_committee\n      - escalate: immediate\n\n  - pattern: \"EDUCATED.*\"\n    actions:\n      - update: education_tracker\n      - schedule: follow_up_discussion\n\n  - pattern: \".*unanimous.*\"\n    actions:\n      - priority: high\n      - flag: full_consensus\n</code></pre>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#security-integration","title":"Security Integration","text":"","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#linking-to-security-tiers","title":"Linking to Security Tiers","text":"Bash<pre><code># Public decision (L0)\nDECIDED[general-meeting](public){#4c9184f37cff01bcdc32dc486ec36961}: Update public organizing guide\n\n# Internal decision (L1) \nDECIDED[members](15-2-0){#37795bbafe244ebd67a4ff7c7f97bbe0}: Approve new member applications\n\n# Sensitive decision (L2) - minimal public detail\nSECURED[security-team](approved){#787d5f05953ec39b108869dfdd7733e6}: Implement protocols per L2-2024-07-03\n</code></pre>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#audit-trail","title":"Audit Trail","text":"<p>Revolutionary commits create an immutable audit trail:</p> Bash<pre><code># Show all democratic decisions\ngit log --grep=\"DECIDED\"\n\n# Show emergency actions\ngit log --grep=\"EMERGENCY\" --since=\"1 month ago\"\n\n# Show education work\ngit log --grep=\"EDUCATED\" --format=\"%ai %s\" | sort\n</code></pre>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#benefits","title":"Benefits","text":"<ol> <li>Democratic Transparency: Every decision is recorded with vote counts</li> <li>Automated Accountability: Parse commits to track implementation  </li> <li>Organizational Memory: New members can understand history</li> <li>Political Education: Commit messages teach democratic process</li> <li>Integration Ready: Enables powerful automation workflows</li> </ol>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#examples-in-practice","title":"Examples in Practice","text":"","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#campaign-launch","title":"Campaign Launch","text":"Text Only<pre><code>ORGANIZED[tenant-union](consensus){#078eb6dc4e96d2d5a922f246b4088cf6}: Launch \"Fair Rent Now\" campaign\nDECIDED[general-meeting](22-3-2){#ac054908f39d0b42345d19c9ef5e65c9}: Approve $500 campaign budget  \nEDUCATED[outreach](30-present){#c4c19e5de465dd14430f41627d40dbdf}: Train canvassers on tenant rights\nDOCUMENTED[secretary](routine){#31eee68da12abc2d387096a6877a1b38}: Record campaign kickoff meeting\n</code></pre>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#security-response","title":"Security Response","text":"Text Only<pre><code>EMERGENCY[security](immediate){#516ff1e73f558b0ae701ae4561a63e2c}: Disable compromised account\nSECURED[security-team](unanimous){#baccbb45bf9967b2307d32eb5743241e}: Implement 2FA requirement\nREFLECTED[coords](emergency){#b65d50673fb197078c78f3a448a958bf}: Assess security breach impact\nDECIDED[general-meeting](18-0-1){#58110d7ae8f3571c72f3f0f3880e7f7b}: Adopt new security protocols\n</code></pre>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#regular-operations","title":"Regular Operations","text":"Text Only<pre><code>DOCUMENTED[facilitator](routine){#31eee68da12abc2d387096a6877a1b38}: Record weekly check-in notes\nEDUCATED[study-group](8-present){#6dd485819c61ec035ce9c84efac5410c}: Discuss Chapter 4 of State and Revolution  \nORGANIZED[food-comm](5-0-0){#ef3385181ff5259193fa1eae08dad874}: Plan next community meal\nDECIDED[coords](consensus){#078eb6dc4e96d2d5a922f246b4088cf6}: Approve space rental for event\n</code></pre>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/druids-fundamentals/revolutionary-commit-conventions/#getting-started","title":"Getting Started","text":"<ol> <li>Add commit template to your repository</li> <li>Configure Git to use the template</li> <li>Install validation hook to ensure compliance</li> <li>Train members on the format</li> <li>Set up automation based on your needs</li> </ol> <p>Remember: This isn't bureaucracy - it's encoding democracy into daily practice.</p> <p>Every commit is a collective decision. Every push advances the revolution.</p> <p>Backlinks:</p>","tags":["git","commits","conventions","democracy","automation"]},{"location":"learn/explanations/","title":"Explanations","text":"<p>Deep analysis of why current organizing tools fail and how DRUIDS provides revolutionary alternatives. Read these when you need to understand the \"why\" behind DRUIDS.</p>","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#platform-analysis","title":"Platform Analysis","text":"","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#google-drive-trap","title":"Google Drive Trap","text":"<p>How Google's \"free\" tools create dependence, surveillance, and organizational vulnerability.</p>","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#signal-isnt-enough","title":"Signal Isn't Enough","text":"<p>Why secure messaging alone cannot solve organizing infrastructure problems.</p>","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#why-discord-democracy-fails","title":"Why Discord Democracy Fails","text":"<p>Analysis of how chat platforms undermine democratic organizing through design.</p>","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#revolutionary-theory","title":"Revolutionary Theory","text":"","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#role-of-ai","title":"Role of AI","text":"<p>Understanding artificial intelligence as tool for collective liberation, not individual productivity.</p>","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#state-repression","title":"State Repression","text":"<p>How infrastructure choices impact organizational security and resistance to state violence.</p>","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#institutional-memory-and-onboarding","title":"Institutional Memory and Onboarding","text":"<p>The two critical pain points DRUIDS solves for revolutionary organizations.</p>","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#understanding-infrastructure-politics","title":"Understanding Infrastructure Politics","text":"","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#why-this-analysis-matters","title":"Why This Analysis Matters","text":"<p>These explanations help you understand:</p> <ul> <li>Power Relations: How technology choices shape organizational power</li> <li>Surveillance Capitalism: How \"free\" tools extract value from organizing work</li> <li>Democratic Infrastructure: What tools that serve collective liberation look like</li> <li>Revolutionary Strategy: How infrastructure decisions impact movement capacity</li> </ul>","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#how-to-use-these-explanations","title":"How to Use These Explanations","text":"","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#for-individual-learning","title":"For Individual Learning","text":"<ul> <li>Start with platforms your organization currently uses</li> <li>Understand systemic problems, not just individual frustrations</li> <li>Connect technical choices to political analysis</li> </ul>","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#for-organizational-discussion","title":"for Organizational Discussion","text":"<ul> <li>Ground infrastructure decisions in political analysis</li> <li>Build collective understanding of why change matters</li> <li>Address concerns about transition difficulty</li> </ul>","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#for-movement-building","title":"For Movement Building","text":"<ul> <li>Share analysis with other organizations</li> <li>Connect infrastructure struggles to broader liberation work</li> <li>Build collective capacity for democratic technology</li> </ul>","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#key-concepts","title":"Key Concepts","text":"","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#surveillance-infrastructure","title":"Surveillance Infrastructure","text":"<p>Understanding how corporate platforms: - Monitor and monetize organizing work - Create dependencies that are difficult to break - Enable state surveillance and disruption - Undermine organizational autonomy</p>","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#democratic-alternatives","title":"Democratic Alternatives","text":"<p>How DRUIDS provides: - Collective ownership of infrastructure - Transparent, auditable processes - Distributed rather than centralized control - Tools designed for democratic organizing</p>","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/#revolutionary-implementation","title":"Revolutionary Implementation","text":"<p>Why transition requires: - Political analysis, not just technical solutions - Collective process, not individual adoption - Security consciousness throughout implementation - Building movement capacity, not just organizational efficiency</p> <p>\"Understanding why systems fail is the foundation for building systems that serve liberation.\"</p>","tags":["explanations","theory","analysis","understanding"]},{"location":"learn/explanations/google-drive-trap/","title":"The Google Drive Trap: Why Shared Folders Aren't Collective Ownership","text":"","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#the-illusion-of-collective-work","title":"The Illusion of Collective Work","text":"<p>Google Drive feels revolutionary. Everyone can edit! Real-time collaboration! Version history! Access from anywhere! But beneath this appealing surface lies a trap that undermines everything revolutionary organizations stand for.</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#the-material-reality","title":"The Material Reality","text":"","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#who-actually-owns-your-documents","title":"Who Actually Owns \"Your\" Documents?","text":"<p>When you create a document in Google Drive, you don't own it. Google does. This isn't metaphorical - it's legally true:</p> Text Only<pre><code>Traditional ownership: You write \u2192 You own \u2192 You control\nGoogle Drive reality: You write \u2192 Google owns \u2192 Google controls\n</code></pre> <p>The terms of service make this clear: Google can access, scan, modify, and delete your content. They can share it with governments. They can use it to train AI. They can lock you out instantly.</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#the-single-point-of-failure","title":"The Single Point of Failure","text":"<p>The Account Holder Becomes a Bottleneck:</p> Text Only<pre><code>Revolutionary ideal: Collective ownership, distributed power\nGoogle Drive reality: \n  \u2514\u2500\u2500 Organization Account (single point of control)\n      \u251c\u2500\u2500 If account suspended: Everything gone\n      \u251c\u2500\u2500 If password compromised: Everything exposed\n      \u251c\u2500\u2500 If member leaves: Scramble to transfer\n      \u2514\u2500\u2500 If Google decides: No recourse\n</code></pre> <p>Real example: In 2021, Google suspended an entire mutual aid network's account for \"terms violation\" (they shared information about protests). Years of organizing documents - gone. No appeal succeeded.</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#the-surveillance-architecture","title":"The Surveillance Architecture","text":"<p>Every keystroke in Google Docs is logged:</p> Python<pre><code># What Google actually stores:\n{\n  \"document_id\": \"abc123\",\n  \"user\": \"organizer@riseup.net\",\n  \"timestamp\": \"2024-03-20T19:43:21Z\",\n  \"action\": \"typed\",\n  \"content\": \"direct action planned for\",\n  \"location\": \"40.7128,-74.0060\",\n  \"device\": \"iPhone12,1\",\n  \"network\": \"CoffeeShopWiFi\"\n}\n</code></pre> <p>This isn't paranoia. Google's Jigsaw division explicitly partners with law enforcement. Project Maven uses Google tech for military targeting. Your organizing documents sit in the same infrastructure.</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#the-collaboration-trap","title":"The Collaboration Trap","text":"","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#real-time-editing-speed-at-what-cost","title":"Real-Time Editing: Speed at What Cost?","text":"<p>Google Docs feels efficient because everyone edits simultaneously. But consider what this means:</p> <ol> <li>No Moment of Reflection: Changes happen without review</li> <li>No Democratic Process: Whoever types fastest wins</li> <li>No Preserved Dissent: Minority positions overwritten instantly</li> <li>No Accountability: Who changed what becomes muddy</li> </ol>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#version-history-memory-with-amnesia","title":"Version History: Memory with Amnesia","text":"<p>Google provides version history, but:</p> Text Only<pre><code>Git version history:\n- Permanent (cryptographically guaranteed)\n- Names attached to changes\n- Reasons recorded in commits\n- Can't be secretly altered\n\nGoogle version history:\n- Can be purged by Google\n- Anonymous when account shared\n- No context for changes\n- Silently editable by Google\n</code></pre>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#the-permission-paradox","title":"The Permission Paradox","text":"<p>Google's permission system seems sophisticated: - View only - Comment - Edit</p> <p>But this creates hierarchies that mirror corporate structure:</p> Text Only<pre><code>Owner (dictatorial power)\n  \u251c\u2500\u2500 Editors (trusted inner circle)\n  \u251c\u2500\u2500 Commenters (second-class members)\n  \u2514\u2500\u2500 Viewers (passive consumers)\n</code></pre> <p>This isn't collective ownership - it's digital feudalism with modern aesthetics.</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#the-accessibility-excuse","title":"The Accessibility Excuse","text":"<p>\"But Google Drive is easy to use!\" This argument mistakes familiarity for accessibility:</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#whats-actually-accessible","title":"What's Actually Accessible:","text":"<ul> <li>One-click surveillance</li> <li>Corporate dependency</li> <li>Data colonialism</li> <li>Learned helplessness</li> </ul>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#whats-presented-as-difficult","title":"What's Presented as \"Difficult\":","text":"<ul> <li>Git (actually learnable in days)</li> <li>Self-hosted solutions (one-time setup)</li> <li>Distributed ownership (requires trust)</li> <li>Revolutionary discipline (requires commitment)</li> </ul> <p>The real question: Is temporary convenience worth permanent surveillance?</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#the-network-effects-prison","title":"The Network Effects Prison","text":"<p>Google Drive seems free, but you pay with dependence:</p> <pre><code>graph TD\n    A[Organization starts with Gmail] --&gt; B[Naturally uses Google Drive]\n    B --&gt; C[Integrates Google Calendar]\n    C --&gt; D[Adopts Google Meet]\n    D --&gt; E[Complete Google dependency]\n    E --&gt; F[Can't leave without losing everything]</code></pre> <p>Each additional Google service raises the exit cost. This is intentional - it's called a \"walled garden\" strategy.</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#real-organizations-real-consequences","title":"Real Organizations, Real Consequences","text":"","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#case-study-1-climate-activists","title":"Case Study 1: Climate Activists","text":"<ul> <li>Used Google Docs for action planning</li> <li>Google AI flagged \"suspicious activity\"</li> <li>Account suspended before major action</li> <li>Years of research lost</li> <li>Organizers doxxed through connected accounts</li> </ul>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#case-study-2-tenant-union","title":"Case Study 2: Tenant Union","text":"<ul> <li>Stored member information in Sheets</li> <li>Landlord's lawyer subpoenaed Google</li> <li>Google complied without resistance</li> <li>Tenant organizers faced retaliation</li> <li>Union collapsed from exposure</li> </ul>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#case-study-3-labor-organizers","title":"Case Study 3: Labor Organizers","text":"<ul> <li>Coordinated strike in Google Docs</li> <li>Company IT found the document</li> <li>(Google Workspace shows access logs)</li> <li>Key organizers fired before action</li> <li>Union drive failed</li> </ul>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#the-false-security-of-encryption","title":"The False Security of Encryption","text":"<p>\"But Google encrypts data in transit and at rest!\"</p> <p>This misunderstands threat models:</p> Text Only<pre><code>Encryption against: Random hackers \u2713\nEncryption against: Google themselves \u2717\nEncryption against: Government requests \u2717\nEncryption against: AI training \u2717\nEncryption against: Behavioral analysis \u2717\n</code></pre> <p>Google holds the encryption keys. It's like locking your door but giving the key to the landlord, the police, and anyone the landlord likes.</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#the-psychology-of-surrender","title":"The Psychology of Surrender","text":"<p>Google Drive trains learned helplessness:</p> <ol> <li>Complex tasks seem easy (because Google does them)</li> <li>Simple tasks seem hard (because they require agency)</li> <li>Corporate mediation feels natural</li> <li>Self-determination feels impossible</li> </ol> <p>This isn't accidental. Every UX decision nudges toward dependency.</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#why-this-matters","title":"Why This Matters","text":"<p>The tools we use shape our organizing:</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#google-drive-organizing","title":"Google Drive Organizing:","text":"<ul> <li>Centralized (like capitalism)</li> <li>Surveilled (like a police state)</li> <li>Hierarchical (like corporations)</li> <li>Fragile (single point of failure)</li> <li>Dependent (on corporate goodwill)</li> </ul>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#git-based-organizing","title":"Git-Based Organizing:","text":"<ul> <li>Distributed (like revolutionary cells)</li> <li>Private (cryptographically secured)</li> <li>Democratic (merge by consensus)</li> <li>Resilient (no single point of failure)</li> <li>Independent (self-hosted/distributed)</li> </ul>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#the-historical-pattern","title":"The Historical Pattern","text":"<p>This isn't new. Capital has always offered convenient tools that increase dependency:</p> <ul> <li>Company stores \u2192 Workers dependent on bosses</li> <li>Facebook Groups \u2192 Movements dependent on Zuckerberg</li> <li>Google Drive \u2192 Organizations dependent on Alphabet</li> </ul> <p>Each generation must recognize and reject these traps.</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#breaking-free","title":"Breaking Free","text":"<p>The alternative isn't technically harder - it's politically different:</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#immediate-steps","title":"Immediate steps:","text":"<ol> <li>Export all Google Docs to local files</li> <li>Set up Git repository for documents</li> <li>Train members on basic Git</li> <li>Celebrate independence</li> </ol>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#the-revelation","title":"The revelation:","text":"<p>After two weeks, organizations report: - \"We can work offline!\" - \"Our history is preserved!\" - \"Decisions have context!\" - \"No more account anxiety!\"</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#the-real-challenge","title":"The Real Challenge","text":"<p>The barrier isn't technical - it's psychological. We've been trained to believe:</p> <ul> <li>Convenience requires surveillance</li> <li>Collaboration requires corporate mediation</li> <li>Ease requires dependence</li> </ul> <p>These are lies. Revolutionary organizations deserve tools that embody their values:</p> <ul> <li>Collective ownership (actual, not simulated)</li> <li>Democratic process (built-in, not bolted-on)</li> <li>Historical memory (permanent, not erasable)</li> <li>Security culture (structural, not optional)</li> </ul>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#a-future-beyond-digital-feudalism","title":"A Future Beyond Digital Feudalism","text":"<p>Imagine organizing where: - Documents can't be disappeared - History can't be rewritten - Access can't be revoked by a corporation - Surveillance isn't the price of collaboration</p> <p>This isn't utopian. It's Git. It exists now. The only barrier is the decision to break free from the convenient trap of Google Drive.</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/google-drive-trap/#the-choice","title":"The Choice","text":"<p>Every organization faces this choice:</p> <p>Easy dependence or Revolutionary independence</p> <p>Google Drive offers the first. DRUIDS enables the second.</p> <p>The question isn't whether you can learn Git. The question is whether you can afford to keep trusting Google with your revolutionary future.</p> <p>Remember: Google's CEO sits on the Pentagon's Defense Innovation Board. Every document in Drive strengthens their surveillance apparatus. Every organization that breaks free weakens it.</p> <p>\"The master's tools will never dismantle the master's house.\" - Audre Lorde</p> <p>Google Drive is the master's tool, perfected. Git is the tool we sharpen for liberation.</p> <p>Backlinks:</p>","tags":["anti-patterns","google","surveillance","collective-ownership","infrastructure"]},{"location":"learn/explanations/institutional-memory-and-onboarding/","title":"Institutional Memory and Onboarding - Key DRUIDS Value Props","text":"<p>These are the two things comrades care deeply about. This document explains how DRUIDS addresses them.</p>","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#the-two-critical-pain-points","title":"The Two Critical Pain Points","text":"","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#1-institutional-memory-loss","title":"1. Institutional Memory Loss","text":"<p>The Problem: - Sarah leaves \u2192 passwords gone - Mike burns out \u2192 campaign history lost - Rosa moves cities \u2192 years of context vanishes - New members ask \"why don't we do X?\" \u2192 \"We tried in 2019 but I forget why it failed\"</p> <p>The Material Cost: - Repeated failures from forgotten lessons - Endless re-litigation of settled questions - Tribal knowledge in few heads - Organizational alzheimer's</p> <p>How DRUIDS Solves It:</p> Bash<pre><code># Traditional organizing memory:\n\"Ask Sarah about the phone tree campaign\"\n\"Sarah left 6 months ago\"\n\"...\"\n\n# DRUIDS organizing memory:\ngit log --grep=\"phone tree\"\n# commit 3a4f2d1 2019-03-15\n# Stop phone tree campaign - analysis\n# - Only reached 30% of members\n# - Required dedicated coordinator\n# - Signal groups more effective\n# See campaigns/2019/phone-tree-retrospective.md\n</code></pre> <p>Every decision preserved. Every lesson searchable. Every failure educational.</p>","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#2-onboarding-nightmare","title":"2. Onboarding Nightmare","text":"<p>The Problem: - New member joins excited \u2192 3 months later still confused - \"How do things work here?\" \u2192 20 different answers - Information scattered across Discord/Signal/Google/brains - Old-timers exhausted from explaining basics</p> <p>The Material Cost: - Months from joining to contributing - Burnout from constant explanation - Inconsistent organizational culture - High dropout rate from confusion</p> <p>How DRUIDS Solves It:</p> Bash<pre><code># Day 1 for new member:\ngit clone org-repo\ncd org-repo\ncat README.md  # Orientation in 5 minutes\n\n# Day 2:\nls meetings/  # See all meeting history\ngit log --oneline -20  # Recent organizational activity\n\n# Day 3:\ncp templates/proposal-template.md my-first-proposal.md\n# Already contributing!\n</code></pre>","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#concrete-examples","title":"Concrete Examples","text":"","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#institutional-memory-in-action","title":"Institutional Memory in Action","text":"<p>Scenario: Rent strike proposal in 2025</p> <p>Without DRUIDS: - \"Didn't we try this before?\" - \"I think so but not sure when\" - \"Ask Jamie... oh they moved\" - Proceed to repeat 2021's failures</p> <p>With DRUIDS: Bash<pre><code>git log --grep=\"rent strike\"\n# Shows:\n# - 2021 attempt (failed: no legal support)\n# - 2022 attempt (partial success: 3 buildings)\n# - Lessons learned documents\n# - Contact info for lawyers who helped\n\n# New proposal builds on history:\n\"Based on 2022's partial success (see commit a4f3d21), \nthis proposal addresses the legal support gap that \ncaused 2021's failure...\"\n</code></pre></p>","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#onboarding-in-action","title":"Onboarding in Action","text":"<p>Scenario: Alex joins the organization</p> <p>Without DRUIDS: - Week 1: \"Welcome! Talk to Sarah about passwords\" - Week 2: \"Check Discord for last month's discussion\" - Week 3: \"I think the bylaws are in someone's Google Drive\" - Month 2: Still asking basic questions - Month 3: Finally somewhat productive</p> <p>With DRUIDS: - Day 1: Clone repo, read README - Day 2: Read last 3 meeting minutes - Day 3: Understand current campaigns from proposals/ - Day 4: First commit fixing typo - Week 1: Submit first proposal using template - Week 2: Facilitate first meeting using template</p>","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#the-key-differentiators","title":"The Key Differentiators","text":"","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#for-institutional-memory","title":"For Institutional Memory","text":"<p>Not Just Storage - Active, Searchable Wisdom: - Git grep finds any decision ever made - Blame shows who made each choice and when - Log connects decisions to context - Branches preserve minority positions</p> <p>Not Just History - Living Documentation: - Templates encode organizational culture - Commit messages explain reasoning - Failed branches show what didn't work - Success patterns emerge from repetition</p>","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#for-onboarding","title":"For Onboarding","text":"<p>Not Just Documentation - Self-Service Learning: - New members explore at their pace - Questions become specific, not general - Templates teach by example - Git workflow teaches democratic process</p> <p>Not Just Information - Cultural Transmission: - Commit style shows communication norms - Meeting minutes demonstrate process - Proposals reveal strategic thinking - Security practices embedded in structure</p>","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#how-to-convey-this-message","title":"How to Convey This Message","text":"","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#for-institutional-memory_1","title":"For Institutional Memory","text":"<p>The Amnesia Metaphor:</p> <p>\"Your organization has alzheimer's. Every time someone leaves, you forget years of lessons. DRUIDS is organizational memory that can't walk out the door.\"</p> <p>The Wikipedia Comparison:</p> <p>\"Wikipedia never forgets an edit. Why does your organization forget every decision? DRUIDS makes your organizing history searchable and learnable.\"</p> <p>The Concrete Example:</p> <p>\"In 2019, you tried a phone tree. Failed. In 2021, new members proposed a phone tree. In 2023, newer members proposed a phone tree. With DRUIDS, they'd search 'phone tree' and find three retrospectives explaining exactly why it doesn't work for your organization.\"</p>","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#for-onboarding_1","title":"For Onboarding","text":"<p>The First Day Comparison:</p> <p>\"Traditional: 'Welcome! Ask around if you need anything.'  DRUIDS: 'Welcome! Clone this repo. Everything you need is there.'\"</p> <p>The Productivity Timeline:</p> <p>\"Most organizations: 3 months to productivity. DRUIDS organizations: 3 days to first contribution.\"</p> <p>The Self-Service Liberation:</p> <p>\"Stop making old-timers explain everything. New members can answer their own questions by exploring organizational history. When they do ask questions, they're specific and advanced.\"</p>","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#the-power-steering-connection","title":"The Power Steering Connection","text":"<p>Remember: DRUIDS doesn't tell you WHERE to go (that's ideology). It just ensures you don't forget HOW you got here or lose passengers along the way.</p> <ul> <li>Institutional Memory = GPS tracking where you've been</li> <li>Onboarding = Passenger seats that adjust automatically</li> <li>Both Together = Arriving at revolution with everyone aboard and knowing the route</li> </ul>","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#summary-for-comrades","title":"Summary for Comrades","text":"<p>When explaining DRUIDS, lead with these two pain points:</p> <ol> <li>\"Tired of losing everything when someone leaves?\" \u2192 Institutional Memory</li> <li>\"Tired of explaining everything to new people?\" \u2192 Onboarding</li> </ol> <p>These are universal organizing pains. DRUIDS solves both through Git's inherent properties, not through complex features. Simple infrastructure, revolutionary results.</p>","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/institutional-memory-and-onboarding/#learn-more","title":"Learn More","text":"<ul> <li>See the theory: Institutional Memory and Revolutionary Capacity</li> <li>Get hands-on: Your First Revolutionary Commit</li> <li>Find your path: Git Learning Path</li> <li>Implement in your org: Implementation Guide</li> <li>See it in action: Quick Demo</li> </ul> <p>Backlinks:</p>","tags":["institutional-memory","onboarding","pain-points","value-proposition"]},{"location":"learn/explanations/role-of-ai/","title":"AI and Revolutionary Organizing: Material Threats and Strategic Uses","text":"","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#the-material-reality-of-ai-surveillance","title":"The Material Reality of AI Surveillance","text":"","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#whats-actually-happening-now","title":"What's Actually Happening Now","text":"<p>The state's AI capabilities aren't science fiction - they're deployed against organizers today:</p> <p>Facial Recognition at Scale</p> <ul> <li>Every protest photographed by police drones</li> <li>Clearview AI: 30+ billion faces scraped from social media</li> <li>Real-time identification of protesters</li> <li>Retroactive identification from years-old footage</li> </ul> <p>Predictive Policing</p> <ul> <li>PredPol algorithms target \"pre-crime\" organizing</li> <li>Social network analysis maps activist connections</li> <li>Sentiment analysis flags \"radical\" content</li> <li>Location prediction for preemptive arrests</li> </ul> <p>Communication Surveillance</p> <ul> <li>NSA's XKeyscore processes billions of messages</li> <li>Voice recognition identifies speakers on calls</li> <li>Automated transcription of encrypted voice chats</li> <li>Behavioral analysis detects \"suspicious\" patterns</li> </ul> <p>Corporate Collaboration</p> <ul> <li>Palantir builds activist databases for ICE</li> <li>Amazon Ring footage fed to police</li> <li>Social media companies flag \"extremist\" content</li> <li>Tech workers build the surveillance state</li> </ul>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#the-atlanta-forest-example","title":"The Atlanta Forest Example","text":"<p>See how AI surveillance works in practice:</p> <ol> <li>Initial Protest: Drones capture aerial footage</li> <li>Face Detection: AI extracts every visible face</li> <li>Identity Matching: Cross-referenced with driver's licenses, social media</li> <li>Network Mapping: AI builds relationship graphs from photos</li> <li>Pattern Analysis: Identifies \"leaders\" by appearance frequency</li> <li>Coordinated Raids: 61 RICO charges based on AI analysis</li> </ol> <p>This isn't hypothetical. It happened.</p>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#realistic-ai-threats-to-organizations","title":"Realistic AI Threats to Organizations","text":"","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#1-infiltration-detection-reversal","title":"1. Infiltration Detection Reversal","text":"<p>The Threat: AI trained on organizing patterns to identify security practices</p> <ul> <li>Analyzes communication patterns for compartmentalization</li> <li>Detects pseudonym usage through writing style</li> <li>Identifies security-conscious members as \"high value targets\"</li> <li>Flags organizations using encryption as priority surveillance</li> </ul> <p>Real Example: NYPD's Patternizr system already does this for \"gang\" activity</p>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#2-synthetic-media-attacks","title":"2. Synthetic Media Attacks","text":"<p>The Threat: AI-generated disinformation to destroy organizations</p> <ul> <li>Deepfake audio of leaders saying compromising things</li> <li>Synthetic \"leaked documents\" mixing real and fake info</li> <li>AI-generated \"member testimonials\" about abuse</li> <li>Fake evidence of financial impropriety</li> </ul> <p>Real Example: FBI's COINTELPRO tactics, now automated and scalable</p>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#3-behavioral-prediction","title":"3. Behavioral Prediction","text":"<p>The Threat: AI predicting actions before they happen</p> <ul> <li>Movement pattern analysis from phone location data</li> <li>Predicting meeting locations from historical patterns</li> <li>Identifying likely direct action participants</li> <li>Flagging members likely to become informants</li> </ul> <p>Real Example: Chicago PD's \"heat list\" marks people for surveillance</p>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#4-mass-de-anonymization","title":"4. Mass De-anonymization","text":"<p>The Threat: AI breaking pseudonymity at scale</p> <ul> <li>Writing style analysis links anonymous posts</li> <li>Behavioral patterns expose real identities</li> <li>Metadata correlation across platforms</li> <li>Timing analysis of online activity</li> </ul> <p>Real Example: NSA's PRISM program already harvests this data</p>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#practical-ai-defense-strategies","title":"Practical AI Defense Strategies","text":"","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#immediate-implementation-this-week","title":"Immediate Implementation (This Week)","text":"<p>1. Standardize Communication Patterns</p> Text Only<pre><code>BAD: Everyone writes differently, AI learns individual styles\nGOOD: Standardized templates for common communications\n\nExample template for meeting summaries:\n- Date: YYYY-MM-DD\n- Attendees: [Use role names, not pseudonyms]\n- Decisions: [Bullet points only]\n- Actions: [Who, What, When]\n- Next meeting: [Date only]\n</code></pre> <p>2. Behavioral Discipline</p> <ul> <li>Post at randomized times, not personal schedule</li> <li>Rotate communication responsibilities</li> <li>Use shared devices for sensitive operations</li> <li>Never access organizing platforms from personal devices</li> </ul> <p>3. Counter-Surveillance Hygiene</p> <ul> <li>Cover cameras during meetings</li> <li>Use voice modulation for recorded content</li> <li>Avoid photographing gatherings</li> <li>Ban personal phones from sensitive discussions</li> </ul>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#systematic-defenses-within-a-month","title":"Systematic Defenses (Within a Month)","text":"<p>1. Synthetic Noise Generation Create false patterns to confuse AI analysis:</p> Bash<pre><code># Automated posting at random times\n0 */3 * * * /usr/bin/post-random-update.sh\n\n# Generate decoy traffic patterns\n./scripts/synthetic-activity-generator.py\n</code></pre> <p>2. Collective Identity Practices</p> <ul> <li>Shared writing through collaborative editing</li> <li>Multiple people managing single accounts</li> <li>Standardized vocabulary lists</li> <li>Grammar checking to normalize style</li> </ul> <p>3. Metadata Stripping Pipeline</p> Bash<pre><code># Strip all metadata before sharing\nexiftool -all= *.jpg\nmat2 --inplace sensitive-doc.pdf\n\n# Automated sanitization\ngit config filter.clean-metadata.clean 'mat2'\n</code></pre>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#advanced-protections-long-term","title":"Advanced Protections (Long-term)","text":"<p>1. Adversarial Training</p> <ul> <li>Test your practices against style analysis tools</li> <li>Use open-source de-anonymization tools on your own content</li> <li>Regular \"red team\" exercises</li> <li>Learn from identified weaknesses</li> </ul> <p>2. Distributed Synthetic Identities</p> <ul> <li>AI-generated faces for online presence</li> <li>Voice synthesis for public communications</li> <li>Behavioral patterns designed to confuse analysis</li> <li>Multiple synthetic identities per real member</li> </ul> <p>3. Counter-AI Operations</p> <ul> <li>Feed false data to known surveillance systems</li> <li>Create honeypot accounts to detect monitoring</li> <li>Use AI to analyze your own vulnerabilities</li> <li>Deploy defensive AI to detect synthetic media</li> </ul>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#revolutionary-uses-of-ai","title":"Revolutionary Uses of AI","text":"","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#1-political-education-at-scale","title":"1. Political Education at Scale","text":"<p>Concrete Application: AI-assisted study groups</p> Python<pre><code># Summarize complex theory for new members\ntheory_bot.summarize(\"Capital Volume 1\", reading_level=\"accessible\")\n\n# Generate discussion questions\nquestions = ai.generate_study_questions(\"State and Revolution\", \n                                      focus=\"practical application\")\n\n# Create multiple explanations for different contexts\nexplanations = ai.explain_concept(\"surplus value\", \n                               contexts=[\"service workers\", \"gig economy\"])\n</code></pre> <p>Why This Matters: Makes theory accessible without dumbing it down</p>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#2-security-analysis","title":"2. Security Analysis","text":"<p>Threat Modeling Assistance</p> <ul> <li>Analyze communications for accidental info leaks</li> <li>Pattern detection in potential infiltrator behavior</li> <li>Automated security audits of procedures</li> <li>Early warning systems for surveillance</li> </ul> <p>Example Implementation:</p> Bash<pre><code># Check all commits for personal information\npre-commit run detect-private-info --all-files\n\n# Analyze communication patterns\npython analyze_opsec.py --check-patterns --alert-anomalies\n</code></pre>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#3-translation-and-accessibility","title":"3. Translation and Accessibility","text":"<p>Breaking Language Barriers</p> <ul> <li>Real-time translation for international solidarity</li> <li>Accessibility tools for disabled comrades</li> <li>Cultural context translation, not just words</li> <li>Preserving indigenous languages in organizing</li> </ul> <p>Practical Use:</p> Python<pre><code># Translate organizing materials maintaining political clarity\ntranslator = RevolutionaryTranslator(\n    source_lang=\"en\",\n    target_lang=\"es\", \n    preserve_terms=[\"democratic centralism\", \"dialectical materialism\"]\n)\n</code></pre>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#4-capacity-multiplication","title":"4. Capacity Multiplication","text":"<p>Automating Repetitive Tasks</p> <ul> <li>Meeting transcription (with security protocols)</li> <li>Document summarization for quick briefings</li> <li>Pattern recognition in state repression tactics</li> <li>Automated alert systems for urgent response</li> </ul> <p>But Never:</p> <ul> <li>Strategic decision-making</li> <li>Leadership replacement</li> <li>Organizing relationship building</li> <li>Trust/verification decisions</li> </ul>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#critical-principles-for-ai-use","title":"Critical Principles for AI Use","text":"","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#what-ai-should-do","title":"What AI Should Do","text":"<p>\u2713 Amplify human organizing</p> <ul> <li>Tool for efficiency, not replacement</li> <li>Assists with analysis, not decisions</li> <li>Handles repetitive tasks</li> <li>Frees organizers for relationship building</li> </ul> <p>\u2713 Enhance security practices</p> <ul> <li>Pattern detection humans might miss</li> <li>Consistent application of protocols</li> <li>Rapid analysis of threats</li> <li>Testing defensive measures</li> </ul> <p>\u2713 Democratize access</p> <ul> <li>Political education for all education levels</li> <li>Translation for international solidarity</li> <li>Accessibility for all abilities</li> <li>Knowledge preservation and sharing</li> </ul>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#what-ai-should-never-do","title":"What AI Should Never Do","text":"<p>\u2717 Replace human judgment</p> <ul> <li>No AI leadership decisions</li> <li>No automated member vetting</li> <li>No strategic planning by algorithm</li> <li>No trust decisions through analysis</li> </ul> <p>\u2717 Create dependencies</p> <ul> <li>Must function without AI</li> <li>No single points of failure</li> <li>Human skills remain primary</li> <li>AI augments, never replaces</li> </ul> <p>\u2717 Compromise security</p> <ul> <li>No cloud-based AI for sensitive data</li> <li>No external APIs for internal content</li> <li>No persistent logs of queries</li> <li>No behavioral tracking</li> </ul>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#practical-implementation-guide","title":"Practical Implementation Guide","text":"","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#phase-1-defensive-basics-week-1","title":"Phase 1: Defensive Basics (Week 1)","text":"<ol> <li>Implement communication templates</li> <li>Start metadata stripping</li> <li>Behavioral discipline training</li> <li>Cover cameras in meetings</li> </ol>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#phase-2-active-defense-month-1","title":"Phase 2: Active Defense (Month 1)","text":"<ol> <li>Deploy style normalization tools</li> <li>Create synthetic noise patterns</li> <li>Rotate digital responsibilities</li> <li>Test against analysis tools</li> </ol>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#phase-3-strategic-use-month-2-3","title":"Phase 3: Strategic Use (Month 2-3)","text":"<ol> <li>Local AI for education materials</li> <li>Translation infrastructure</li> <li>Security analysis tools</li> <li>Accessibility enhancements</li> </ol>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#phase-4-advanced-operations-ongoing","title":"Phase 4: Advanced Operations (Ongoing)","text":"<ol> <li>Adversarial testing program</li> <li>Counter-surveillance systems</li> <li>Distributed synthetic identities</li> <li>Revolutionary AI development</li> </ol>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#the-dialectical-approach","title":"The Dialectical Approach","text":"","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#ai-as-contradiction","title":"AI as Contradiction","text":"<p>Thesis: AI serves capital and the state Antithesis: AI can serve revolutionary organizing Synthesis: Strategic use while defending against threats</p> <p>We neither reject AI (Luddism) nor embrace it uncritically (techno-utopianism). We understand it as a tool whose character depends on who controls it and for what purpose.</p>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#learning-from-history","title":"Learning from History","text":"<p>Printing Press: States used for propaganda, revolutionaries for manifestos Radio: Fascists broadcast hate, partisans coordinated resistance Internet: Surveillance apparatus AND organizing tool</p> <p>AI follows this pattern. The question isn't the technology but the power relations.</p>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#concrete-next-steps","title":"Concrete Next Steps","text":"","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#for-your-organization","title":"For Your Organization","text":"<p>This Week:</p> <ol> <li>Audit current AI exposure</li> <li>Implement basic defenses</li> <li>Train on threats</li> <li>Start using templates</li> </ol> <p>This Month:</p> <ol> <li>Deploy technical countermeasures</li> <li>Test security practices</li> <li>Explore beneficial uses</li> <li>Build AI literacy</li> </ol> <p>This Quarter:</p> <ol> <li>Advanced defensive systems</li> <li>Revolutionary AI tools</li> <li>Network with tech comrades</li> <li>Share lessons learned</li> </ol>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#remember","title":"Remember","text":"<p>The state has resources. We have creativity, solidarity, and revolutionary discipline. Their AI watches patterns. Our movement creates new ones.</p> <p>Every technical system reflects political relations. Build AI tools that embody revolutionary values:</p> <ul> <li>Collective over individual</li> <li>Transparency with security</li> <li>Education over mystification</li> <li>Liberation over control</li> </ul>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#resources-and-tools","title":"Resources and Tools","text":"","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#defensive-tools","title":"Defensive Tools","text":"<ul> <li><code>mat2</code>: Metadata removal</li> <li><code>stylometry</code>: Test writing analysis</li> <li><code>OnionShare</code>: Anonymous file sharing</li> <li><code>Tails</code>: Amnesic operating system</li> </ul>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#revolutionary-ai-projects","title":"Revolutionary AI Projects","text":"<ul> <li>Local LLMs for organizing</li> <li>Secure transcription systems</li> <li>Translation networks</li> <li>Education platforms</li> </ul>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/role-of-ai/#further-reading","title":"Further Reading","text":"<ul> <li>\"Weapons of Math Destruction\" - O'Neil</li> <li>\"Race After Technology\" - Benjamin</li> <li>\"Surveillance Capitalism\" - Zuboff</li> <li>\"The Age of Surveillance Capitalism\" - Analysis</li> </ul> <p>\"The philosophers have only interpreted the world; the point is to change it.\" - Marx</p> <p>AI interprets patterns. We change conditions.</p> <p>Build revolutionary infrastructure. Defend against algorithmic repression.</p> <p>Backlinks:</p>","tags":["ai","surveillance","security","organizing","threat-model","strategy"]},{"location":"learn/explanations/signal-isnt-enough/","title":"Signal Isn't Enough: Why Encryption Without Infrastructure Fails","text":"","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#the-security-theater-problem","title":"The Security Theater Problem","text":"<p>Many organizations believe they've solved security by adopting Signal. \"We use encrypted messaging!\" they proclaim, while their organizing suffers from the same vulnerabilities as before. This is security theater - the appearance of security without the substance.</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#what-signal-actually-provides","title":"What Signal Actually Provides","text":"<p>Let's be clear: Signal is excellent at what it does:</p> <ul> <li>End-to-end encryption: Messages can't be read in transit</li> <li>Disappearing messages: Reduces data persistence  </li> <li>Minimal metadata: Less tracking than alternatives</li> <li>Open source: Auditable security</li> </ul> <p>These are crucial features. Use Signal. But understand its limitations.</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#what-signal-doesnt-provide","title":"What Signal Doesn't Provide","text":"","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#1-organizational-memory","title":"1. Organizational Memory","text":"Text Only<pre><code>Signal Reality:\nMonday: \"What did we decide about the march route?\"\nTuesday: \"Check the group chat\"\nWednesday: \"Messages disappeared\"\nThursday: \"Does anyone remember?\"\nFriday: Starting from zero again\n</code></pre> <p>Signal's disappearing messages - a security feature - become an organizational liability. Revolutionary capacity requires institutional memory, not amnesia.</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#2-democratic-process","title":"2. Democratic Process","text":"<p>Signal groups are structurally authoritarian:</p> Text Only<pre><code>Signal Group Hierarchy:\n- Admin (can remove anyone, change settings)\n  \u2514\u2500\u2500 Members (can leave or stay)\n\nNo mechanism for:\n- Democratic admin selection\n- Voting on decisions\n- Recording dissent\n- Transparent process\n</code></pre> <p>One compromised or burnt-out admin can destroy years of organizing.</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#3-knowledge-organization","title":"3. Knowledge Organization","text":"<p>Signal is a stream, not a repository:</p> Text Only<pre><code>Traditional Organizing Failure:\n- 500 messages per day\n- Critical info buried in chat\n- No categorization\n- No search in disappearing chats\n- \"Scroll up\" isn't infrastructure\n</code></pre> <p>Compare to Git: Text Only<pre><code>Git-Based Organizing:\ncampaigns/\n  rent-strike/\n    plans.md\n    resources.md\n    lessons.md\nmeetings/\n  2024-03-21-minutes.md\n</code></pre></p> <p>Structure enables capacity.</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#4-onboarding-new-members","title":"4. Onboarding New Members","text":"<p>The Signal new member experience:</p> Text Only<pre><code>Day 1: Added to group\nDay 2: 1000 unread messages\nDay 3: \"Can someone catch me up?\"\nDay 4: Fragmented explanations\nWeek 2: Still confused about decisions\nMonth 2: Finally understanding context\n</code></pre> <p>Without persistent, organized information, every new member requires intensive hand-holding.</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#5-security-against-infiltration","title":"5. Security Against Infiltration","text":"<p>Signal's security model has a fatal flaw for organizing:</p> Python<pre><code># The infiltrator problem\nif infiltrator_gains_access:\n    can_see_all_current_messages = True\n    can_screenshot_everything = True\n    can_map_social_network = True\n    can_identify_active_times = True\n\n# Even with disappearing messages:\nif messages_disappear_after_1_week:\n    infiltrator_still_saw_them = True\n    state_still_has_screenshots = True\n</code></pre> <p>Signal protects against external surveillance, not internal threats.</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#the-deeper-problem-mistaking-tools-for-infrastructure","title":"The Deeper Problem: Mistaking Tools for Infrastructure","text":"","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#infrastructure-vs-apps","title":"Infrastructure vs Apps","text":"<p>Signal is an app. DRUIDS is infrastructure.</p> Text Only<pre><code>App:\n- Solves one problem\n- Individual tool\n- Easy to adopt\n- Limited scope\n\nInfrastructure:\n- Solves systemic problems\n- Integrated system\n- Requires commitment\n- Transformative scope\n</code></pre>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#the-encrypted-silo-problem","title":"The Encrypted Silo Problem","text":"<p>Organizations using only Signal create encrypted silos:</p> Text Only<pre><code>Signal Group 1: Direct action planning\nSignal Group 2: Legal support\nSignal Group 3: Media team\nSignal Group 4: Logistics\n\nResult: \n- No coordination between groups\n- Duplicate efforts\n- Lost knowledge\n- Fragmented organizing\n</code></pre>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#real-organizing-failures-from-signal-only-approach","title":"Real Organizing Failures from Signal-Only Approach","text":"","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#case-study-1-the-climate-coalition","title":"Case Study 1: The Climate Coalition","text":"<ul> <li>200 members across 5 Signal groups</li> <li>Campaign planning in disappearing messages</li> <li>New organizer joins, asks about past actions</li> <li>No records exist</li> <li>Recreate plans from memory</li> <li>Repeat same mistakes</li> </ul>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#case-study-2-the-tenant-union","title":"Case Study 2: The Tenant Union","text":"<ul> <li>Critical vote in Signal poll</li> <li>Messages disappear after 1 day</li> <li>Dispute about what was decided</li> <li>No record of minority position</li> <li>Trust breaks down</li> <li>Organization splits</li> </ul>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#case-study-3-the-mutual-aid-network","title":"Case Study 3: The Mutual Aid Network","text":"<ul> <li>Resource coordination in Signal</li> <li>Admin's phone seized in raid</li> <li>Admin had all group access</li> <li>Backup admin unknown</li> <li>Network collapses</li> </ul>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#the-false-security-of-encryption","title":"The False Security of Encryption","text":"<p>Encryption is necessary but not sufficient:</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#what-encryption-prevents","title":"What Encryption Prevents:","text":"<ul> <li>Passive surveillance</li> <li>Message interception</li> <li>Corporate data mining</li> <li>Some state surveillance</li> </ul>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#what-encryption-doesnt-prevent","title":"What Encryption Doesn't Prevent:","text":"<ul> <li>Infiltration</li> <li>Screenshots</li> <li>Metadata analysis</li> <li>Device compromise</li> <li>Human intelligence</li> <li>Organizational collapse</li> </ul> <p>The state doesn't need to break encryption when they can break your organization.</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#signal-infrastructure-the-complete-solution","title":"Signal + Infrastructure: The Complete Solution","text":"<p>Signal serves a crucial role IN CONJUNCTION with proper infrastructure:</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#signals-proper-role","title":"Signal's Proper Role:","text":"<ul> <li>Real-time coordination</li> <li>Urgent alerts</li> <li>Sensitive immediate communication</li> <li>Social connection</li> </ul>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#druids-complementary-role","title":"DRUIDS' Complementary Role:","text":"<ul> <li>Permanent records</li> <li>Democratic decisions</li> <li>Knowledge organization</li> <li>Institutional memory</li> <li>Onboarding systems</li> <li>Historical analysis</li> </ul>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#example-workflow","title":"Example Workflow:","text":"Text Only<pre><code>1. Urgent issue arises \u2192 Signal alert\n2. Quick coordination \u2192 Signal chat\n3. Decision made \u2192 Git commit\n4. Context preserved \u2192 DRUIDS repository\n5. New members learn \u2192 Read Git history\n6. Pattern recognition \u2192 Analyze commits\n</code></pre>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#the-security-model-comparison","title":"The Security Model Comparison","text":"","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#signal-security-model","title":"Signal Security Model:","text":"Text Only<pre><code>Threat: Message interception\nSolution: End-to-end encryption\nResult: Messages unreadable in transit\nWeakness: Endpoint security, infiltration\n</code></pre>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#druids-security-model","title":"DRUIDS Security Model:","text":"Text Only<pre><code>Threat: Organizational disruption\nSolution: Distributed infrastructure\nResult: Resilient organizing capacity\nWeakness: Requires technical knowledge\n</code></pre>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#combined-security-model","title":"Combined Security Model:","text":"Text Only<pre><code>Threat: Comprehensive state repression\nSolution: Encrypted communication + Distributed infrastructure\nResult: Secure, resilient organizing\nStrength: Defense in depth\n</code></pre>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#why-organizations-resist-infrastructure","title":"Why Organizations Resist Infrastructure","text":"","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#the-convenience-trap","title":"The Convenience Trap","text":"<p>Signal feels easy: - Download app - Create group - Start chatting - \"We're secure!\"</p> <p>DRUIDS requires investment: - Learn Git basics - Establish procedures - Maintain discipline - Build habits</p> <p>But convenience without capacity is a trap.</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#the-knowledge-monopoly","title":"The Knowledge Monopoly","text":"<p>Current reality in many organizations: Text Only<pre><code>Tech Person\u2122\ufe0f:\n- Holds all passwords\n- Manages all infrastructure\n- Becomes indispensable\n- Burns out or becomes bottleneck\n</code></pre></p> <p>DRUIDS disrupts this by democratizing knowledge.</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#the-good-enough-mentality","title":"The \"Good Enough\" Mentality","text":"<p>\"Signal is good enough\" until: - Key organizer's phone dies - Admin leaves organization - New campaign needs old lessons - State pressure intensifies - Organization needs to scale</p> <p>Then \"good enough\" becomes \"catastrophic failure.\"</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#building-complete-security-culture","title":"Building Complete Security Culture","text":"<p>Security isn't a product - it's a practice:</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#layer-1-communication-security-signal","title":"Layer 1: Communication Security (Signal)","text":"<ul> <li>Encrypted messages</li> <li>Verified contacts</li> <li>Disappearing messages</li> <li>Security number verification</li> </ul>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#layer-2-infrastructure-security-druids","title":"Layer 2: Infrastructure Security (DRUIDS)","text":"<ul> <li>Distributed repositories</li> <li>Cryptographic verification</li> <li>Access control</li> <li>Backup systems</li> </ul>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#layer-3-operational-security-practices","title":"Layer 3: Operational Security (Practices)","text":"<ul> <li>Compartmentalization</li> <li>Need-to-know basis</li> <li>Regular security audits</li> <li>Incident response plans</li> </ul>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#layer-4-cultural-security-discipline","title":"Layer 4: Cultural Security (Discipline)","text":"<ul> <li>Security as collective responsibility</li> <li>Regular training</li> <li>Threat modeling</li> <li>Continuous improvement</li> </ul>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#the-path-forward","title":"The Path Forward","text":"<p>Don't abandon Signal - expand beyond it:</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#week-1-assessment","title":"Week 1: Assessment","text":"<ul> <li>How many decisions lost to disappeared messages?</li> <li>How long does onboarding take?</li> <li>What happens if admin disappears?</li> <li>Where is your institutional memory?</li> </ul>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#week-2-implementation-planning","title":"Week 2: Implementation Planning","text":"<ul> <li>Who will learn Git first?</li> <li>What gets documented first?</li> <li>How to maintain Signal for appropriate uses?</li> <li>Training schedule for members?</li> </ul>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#week-3-parallel-systems","title":"Week 3: Parallel Systems","text":"<ul> <li>Keep Signal for urgent communication</li> <li>Start documenting in Git</li> <li>Build procedures gradually</li> <li>Celebrate small wins</li> </ul>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#month-2-integration","title":"Month 2: Integration","text":"<ul> <li>Signal for alerts \u2192 Git for records</li> <li>Workflows become natural</li> <li>Security improves systematically</li> <li>Capacity builds measurably</li> </ul>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/signal-isnt-enough/#conclusion-beyond-security-theater","title":"Conclusion: Beyond Security Theater","text":"<p>Real security requires: - Encrypted communication (Signal provides this) - Distributed infrastructure (DRUIDS provides this) - Operational discipline (You provide this) - Political education (Movement provides this)</p> <p>Signal is a tool. DRUIDS is infrastructure. Revolution requires both.</p> <p>The state wants you to believe that downloading an app equals security. They benefit when organizations: - Lose institutional memory - Can't scale effectively - Repeat old mistakes - Depend on individuals - Fragment into silos</p> <p>Real security builds revolutionary capacity. Everything else is theater.</p> <p>\"Without a correct political point of view, one has no soul.\" - Mao</p> <p>Without proper infrastructure, encrypted messaging has no foundation. Build the foundation. Keep the encryption. Win the revolution.</p> <p>Backlinks:</p>","tags":["security","signal","infrastructure","organizing","anti-patterns"]},{"location":"learn/explanations/state-repression/","title":"State Repression Is Material Reality","text":"","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#not-paranoia-pattern-recognition","title":"Not Paranoia - Pattern Recognition","text":"","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#recent-escalations","title":"Recent Escalations","text":"<p>The state's war on dissent intensifies:</p> <p>Atlanta Forest Defenders - 61 activists charged with RICO  - Treating protest as organized crime - Decades in prison for defending trees - Killed Tortuguita, claimed \"self-defense\"</p> <p>Cop City Resistance - Mass surveillance deployed - Infiltrators in planning meetings - Bail fund organizers arrested - Legal support criminalized</p> <p>Palestinian Solidarity - Organizers doxxed by Canary Mission - Fired from jobs, expelled from schools - FBI visits to activists' homes - Students suspended for Instagram posts</p> <p>Environmental Movement - Jessica Reznicek: 8 years for pipeline sabotage - Water protectors surveilled for years - Corporate-state intelligence sharing - Terrorism enhancements for property damage</p> <p>Black Liberation Continued - Ferguson activists mysteriously dead - BLM organizers surveilled nationally - COINTELPRO never ended, just evolved - Facial recognition at every protest</p> <p>The state treats organizing as warfare. Our infrastructure must reflect this reality.</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#current-tools-are-surveillance-infrastructure","title":"Current Tools Are Surveillance Infrastructure","text":"","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#signal-the-secure-trap","title":"Signal: The \"Secure\" Trap","text":"<p>What they tell you: End-to-end encrypted Material reality: - Phone numbers required (FBI has these from carriers) - Metadata preserved (who talks to whom, when) - Desktop backups vulnerable to device seizure - Groups compromised through one infiltrator's phone - Disappearing messages? Not from their servers</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#discordslack-corporate-complicity","title":"Discord/Slack: Corporate Complicity","text":"<p>Built for surveillance: Text Only<pre><code>Your \"private\" server \u2192 Discord's servers \u2192 FBI warrant\nEvery message logged \u2192 Full conversation history \u2192 Court evidence\nReal names exposed \u2192 Doxxing made easy \u2192 Employment retaliation\nNo encryption \u2192 Plain text storage \u2192 Instant access\n</code></pre></p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#google-docs-surveillance-by-design","title":"Google Docs: Surveillance by Design","text":"<p>Google's business model is surveillance: - Every keystroke logged - Edit history exposes real identities - Location data from access IPs - Instant compliance with subpoenas - AI trained on your strategies</p> <p>Real case: Inauguration protesters' Google accounts seized, years of organizing exposed</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#zoom-the-panopticon","title":"Zoom: The Panopticon","text":"<p>What happened to Palestinian organizers: - Zoom canceled academic events - Shared data with law enforcement - Recorded \"private\" strategy sessions - Facial recognition on participants</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#how-organizations-get-destroyed","title":"How Organizations Get Destroyed","text":"","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#the-raid-scenario","title":"The Raid Scenario","text":"<p>Morning raid. Devices seized. What do they get?</p> <p>Traditional setup: - Signal desktop with full history - Google Drive with years of documents - Discord logs showing entire network - Clear names, addresses, connections</p> <p>DRUIDS setup: - Encrypted repositories - Pseudonymous commits - Compartmentalized access - Distributed infrastructure continues</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#the-infiltrator-scenario","title":"The Infiltrator Scenario","text":"<p>Cop or informant gains member access. What can they see?</p> <p>Traditional setup: - Everything in shared Google Drive - All Signal group history - Complete member lists - Future plans visible</p> <p>DRUIDS setup: - Only L0 public and L1 member content - No access to L2 strategic planning - No real names in commits - Limited by compartmentalization</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#the-grand-jury-scenario","title":"The Grand Jury Scenario","text":"<p>Federal grand jury demands all communications. What can they compel?</p> <p>Traditional setup: - Google: Complete compliance - Discord: Full chat logs - Zoom: All recordings - Phone carriers: Metadata</p> <p>DRUIDS setup: - Self-hosted: Nothing to subpoena - Encrypted: Can't decrypt without keys - Distributed: No central server - Pseudonymous: Identity protection</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#druids-security-model","title":"DRUIDS Security Model","text":"","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#three-tier-compartmentalization","title":"Three-Tier Compartmentalization","text":"<p>Based on real organizing needs:</p> Text Only<pre><code>L0 PUBLIC (Green)\n\u251c\u2500\u2500 Educational materials\n\u251c\u2500\u2500 Public statements  \n\u251c\u2500\u2500 Event announcements\n\u2514\u2500\u2500 Recruitment content\n    \u2192 If cops see this, no harm done\n\nL1 MEMBER (Brown) - Encrypted\n\u251c\u2500\u2500 Meeting minutes (pseudonymous)\n\u251c\u2500\u2500 General planning\n\u251c\u2500\u2500 Member discussions\n\u2514\u2500\u2500 Day-to-day operations\n    \u2192 Infiltrator access limited here\n\nL2 CADRE (Red) - Maximum Security\n\u251c\u2500\u2500 Strategic planning\n\u251c\u2500\u2500 Security protocols\n\u251c\u2500\u2500 Direct action planning\n\u2514\u2500\u2500 Sensitive operations\n    \u2192 Air-gapped possible\n    \u2192 Need-to-know only\n    \u2192 Auto-expiration available\n</code></pre>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#operational-security-built-in","title":"Operational Security Built-In","text":"<p>Identity Protection Bash<pre><code># Never expose real names\ngit config user.name \"Comrade 47\"\ngit config user.email \"c47@protonmail.com\"\n\n# Pseudonyms enforced\npre-commit hook: reject commits with real names\n</code></pre></p> <p>Compartmentalization Bash<pre><code># Separate repositories by security level\norg-public/    # L0 content only\norg-member/    # L1 content, encrypted\norg-cadre/     # L2 content, maximum security\n\n# Access control enforced\nOnly trusted comrades get L2 access\n</code></pre></p> <p>Distributed Resilience - No single server to raid - Every member has full copy of their level - Continues functioning after seizures - Can rebuild from any surviving node</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#based-on-real-threat-modeling","title":"Based on Real Threat Modeling","text":"<p>Device Seizure - Encrypted drives (LUKS/FileVault) - No passwords saved - Separate devices for levels - Kill switches prepared</p> <p>Network Surveillance - VPN/Tor for all Git operations - No correlation between IP and identity - Onion routing for L2 operations - Traffic analysis resistance</p> <p>Human Intelligence - Compartmentalization limits damage - Pseudonyms prevent targeting - Regular security reviews - Infiltrator detection patterns</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#practical-implementation","title":"Practical Implementation","text":"","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#immediate-security-improvements","title":"Immediate Security Improvements","text":"<p>Week 1: Escape Corporate Surveillance 1. Stop using Google Docs immediately 2. Move off Discord/Slack 3. Implement pseudonym policy 4. Set up encrypted repositories</p> <p>Month 1: Security Culture 1. Train on threat models 2. Establish security protocols 3. Create incident response plan 4. Regular security audits</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#technical-specifications","title":"Technical Specifications","text":"<p>Encryption Standards - Repository: AES-256 encryption at rest - Transport: SSH with Ed25519 keys - Commits: GPG signed with 4096-bit RSA - Backups: Encrypted with separate keys</p> <p>Access Control - SSH keys for authentication - No passwords to compromise - Key rotation schedule - Revocation procedures</p> <p>Audit Capabilities Bash<pre><code># Who accessed what when\ngit log --all --full-history\n\n# Detect unusual patterns\ngit shortlog -sn --since=\"1 week ago\"\n\n# Security review checklist\n./scripts/security-audit.sh\n</code></pre></p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#this-isnt-optional","title":"This Isn't Optional","text":"<p>Every week brings new examples: - Activists surveilled - Organizers arrested - Movements disrupted - Lives destroyed</p> <p>The gap between our security practices and state capabilities grows daily. DRUIDS closes that gap with systematic discipline.</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#common-liberal-objections","title":"Common Liberal Objections","text":"","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#this-seems-paranoid","title":"\"This seems paranoid\"","text":"<p>Tell that to: - Atlanta forest defenders facing RICO - Palestinians fired for solidarity - Ferguson activists found dead - Standing Rock water protectors surveilled</p> <p>This is pattern recognition, not paranoia.</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#were-not-important-enough","title":"\"We're not important enough\"","text":"<p>The state surveils: - Food Not Bombs chapters - Palestine solidarity groups - Abolitionists networks - Environmental activists</p> <p>You're important enough when you threaten capital.</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#nothing-to-hide","title":"\"Nothing to hide\"","text":"<p>This misunderstands power: - Legal today, illegal tomorrow - Infiltrators need information - Doxxing enables harassment - Networks mapped for disruption</p> <p>Privacy is collective self-defense.</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/state-repression/#start-protecting-your-organization","title":"Start Protecting Your Organization","text":"<p>The state has unlimited resources. We have discipline and solidarity.</p> <p>Implement Security Model \u2192 Understand Architecture \u2192 Join Security Network \u2192</p> <p>\"The revolutionary will accept no compromise. For them, there exists only one single path: struggle.\" - Carlos Marighella</p> <p>Build infrastructure equal to the struggle.</p> <p>Backlinks:</p>","tags":["security","state-repression","surveillance","organizing","threat-model"]},{"location":"learn/explanations/why-discord-democracy-fails/","title":"Why Discord Democracy Fails","text":"","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#the-fundamental-contradiction","title":"The Fundamental Contradiction","text":"<p>Discord creates an illusion of democratic participation while structurally preventing actual democratic process. This isn't a bug - it's the architecture.</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#how-discord-appears-democratic","title":"How Discord Appears Democratic","text":"<p>Organizations think Discord enables democracy because:</p> <ul> <li>Everyone can speak: Open channels, emoji reactions, voice chat</li> <li>Voting mechanisms: Poll bots, reaction voting, role assignments</li> <li>Transparent activity: See who's online, message history, participation</li> <li>Flat appearance: All messages look equal in the stream</li> </ul> <p>This resembles democracy like a shopping mall resembles a public square.</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#the-material-reality","title":"The Material Reality","text":"","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#memory-hole-architecture","title":"Memory Hole Architecture","text":"<p>Discord's core design principle: ephemerality marketed as convenience.</p> Text Only<pre><code>Traditional Meeting:\n- Minutes taken \u2192 Archived \u2192 Referenced \u2192 History preserved\n\nDiscord \"Meeting\":\n- Messages scroll \u2192 Context lost \u2192 Decisions forgotten \u2192 History vanishes\n</code></pre> <p>Example: Try finding a decision made 6 months ago in Discord. Now try finding who opposed it and why. This isn't poor search - it's deliberate design.</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#the-tyranny-of-the-present","title":"The Tyranny of the Present","text":"<p>Discord privileges NOW over HISTORY:</p> <ul> <li>New messages push down old ones</li> <li>No native version control</li> <li>Edits destroy original content</li> <li>Deletions leave no trace</li> <li>Context requires infinite scrolling</li> </ul> <p>Political Impact: Organizations can't learn from past struggles. Every debate restarts from zero. Institutional memory becomes individual memory.</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#artificial-consensus","title":"Artificial Consensus","text":"<p>Discord's voting mechanisms create false democracy:</p> Python<pre><code># What Discord counts:\n\u2705 15 people\n\u274c 3 people\n# Decision: Approved!\n\n# What Discord doesn't record:\n- Who voted when (early votes influence later ones)\n- Why people voted (reasoning lost in scroll)\n- Who changed their vote (edits invisible)\n- Who was absent (silence = consent?)\n- What alternatives were considered\n</code></pre> <p>Result: Majority rule without minority protection. No record of dissent. No accountability for decisions.</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#the-three-pillars-of-democratic-centralism","title":"The Three Pillars of Democratic Centralism","text":"<p>Real democratic centralism requires:</p> <ol> <li>Freedom of Discussion</li> <li>Unity of Action </li> <li>Historical Record</li> </ol> <p>Discord fails all three:</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#1-freedom-of-discussion-channel-chaos","title":"1. Freedom of Discussion \u2192 Channel Chaos","text":"<p>Discord \"discussions\": - Multiple conversations overlap - Thoughtful responses get buried - Loud voices dominate - Threads fragment context - No structured debate</p> <p>Compare to Git branch discussions: - One topic per branch - Linear argument development - All positions preserved - Reasoning documented - Minority views protected</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#2-unity-of-action-unclear-decisions","title":"2. Unity of Action \u2192 Unclear Decisions","text":"<p>After a Discord \"vote\": - What exactly was decided? - Who's responsible for implementation? - When do we evaluate success? - How do we track completion?</p> <p>The stream swallows accountability.</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#3-historical-record-corporate-memory-hole","title":"3. Historical Record \u2192 Corporate Memory Hole","text":"<p>Discord's history belongs to Discord Inc: - They can delete everything - They can modify records - They log everything permanently - You can't verify authenticity - Exports are incomplete</p> <p>Your organizing history is their property.</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#case-study-the-failed-campaign","title":"Case Study: The Failed Campaign","text":"<p>Real example (details anonymized):</p> <p>Month 1: Enthusiastic Discord planning for tenant organizing - 50+ people in channel - Hundreds of messages daily - Emoji votes on strategies - Voice calls for coordination</p> <p>Month 3: Campaign stalling - Can't find original goals - Unclear who committed to what - New members asking answered questions - Decision rationales lost</p> <p>Month 6: Campaign collapsed - No record of what went wrong - Same mistakes being proposed again - Organizers burned out from repetition - Institutional knowledge in few heads</p> <p>Alternative Universe with Git: - Clear proposal with objectives - Branched discussions on strategy - Merged decisions with reasoning - Task assignments in commits - History shows what failed and why - New organizers learn from record</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#the-surveillance-problem","title":"The Surveillance Problem","text":"<p>Beyond democracy, Discord is counterinsurgency:</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#data-collection","title":"Data Collection","text":"<ul> <li>Every message timestamped</li> <li>Voice calls can be transcribed</li> <li>IP addresses logged</li> <li>Device fingerprints tracked</li> <li>Social graphs mapped</li> </ul>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#law-enforcement-pipeline","title":"Law Enforcement Pipeline","text":"Text Only<pre><code>Your \"secure\" server \u2192 Discord's servers \u2192 Subpoena \u2192 Evidence\n</code></pre> <p>No warrant needed for metadata. Corporate Terms of Service override your security culture.</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#the-january-6-lesson","title":"The January 6 Lesson","text":"<p>Proud Boys thought Discord was secure. Their messages became prosecution evidence. Every \"deleted\" message recovered. Every \"private\" channel exposed.</p> <p>Lesson: Corporate platforms will always choose compliance over your cause.</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#why-organizations-stay-trapped","title":"Why Organizations Stay Trapped","text":"","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#the-network-effect","title":"The Network Effect","text":"<p>\"Everyone's already on Discord\" - but everyone was on AOL once too.</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#the-comfort-trap","title":"The Comfort Trap","text":"<p>Familiar suffering feels safer than unfamiliar liberation.</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#the-liberal-mindset","title":"The Liberal Mindset","text":"<p>Believing corporations can be neutral infrastructure.</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#the-technical-excuse","title":"The Technical Excuse","text":"<p>\"Our members aren't technical\" - neither were revolutionary peasants learning to read.</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#building-real-democratic-infrastructure","title":"Building Real Democratic Infrastructure","text":"<p>True democratic organizing requires:</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#1-collective-memory","title":"1. Collective Memory","text":"<ul> <li>Git preserves every decision</li> <li>History can't be rewritten</li> <li>Dissent is documented</li> <li>Learning accumulates</li> </ul>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#2-structured-process","title":"2. Structured Process","text":"<ul> <li>Proposals follow templates</li> <li>Discussions have clear scope</li> <li>Decisions are explicit</li> <li>Implementation is tracked</li> </ul>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#3-material-control","title":"3. Material Control","text":"<ul> <li>Infrastructure you own</li> <li>Data you control</li> <li>Processes you define</li> <li>History you preserve</li> </ul>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#4-revolutionary-discipline","title":"4. Revolutionary Discipline","text":"<ul> <li>Security as collective practice</li> <li>Technical skills as political education</li> <li>Infrastructure as prefiguration</li> <li>Process as politics</li> </ul>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#the-deeper-truth","title":"The Deeper Truth","text":"<p>Discord democracy fails because it embodies capitalist social relations:</p> <ul> <li>Commodity form: Conversations as content to monetize</li> <li>Spectacle: Performance of participation without power</li> <li>Alienation: Separation from our own organizing history</li> <li>Reification: Social relations appear as platform features</li> </ul> <p>Git embodies different relations: - Collective ownership: Everyone has full history - Use value: Built for collaboration, not profit - Transparency: Process visible in structure - Democracy: Decisions require explicit merge</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#moving-forward","title":"Moving Forward","text":"<p>Understanding why Discord fails is the first step. Building alternatives is revolutionary practice.</p> <p>Immediate Actions: 1. Map your Discord dependencies 2. Start documenting decisions in Git 3. Train comrades on alternatives 4. Plan migration timeline 5. Break the chains</p> <p>Long-term Vision: Infrastructure that prefigures the society we're building. Tools that embody our principles. Technology serving liberation.</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/explanations/why-discord-democracy-fails/#conclusion","title":"Conclusion","text":"<p>Discord democracy fails not because of bad features but because of fundamental architecture. You cannot vote your way to democracy on a corporate platform.</p> <p>Every Discord server is a digital colony. Every migration to revolutionary infrastructure is decolonization.</p> <p>The question isn't whether to leave Discord. The question is whether you're serious about democratic organizing.</p> <p>Choose your tools like you choose your comrades: carefully, with the revolution in mind.</p> <p>\"The master's tools will never dismantle the master's house. They may allow us temporarily to beat him at his own game, but they will never enable us to bring about genuine change.\" - Audre Lorde</p> <p>See also: - Breaking Discord's Chains - Migration guide - Git as Democratic Centralism - The alternative</p> <p>Backlinks:</p>","tags":["explanation","discord","democracy","organizing","theory"]},{"location":"learn/git-basics/","title":"Git Basics for Organizers","text":"<p>Learn version control through organizing examples. Git isn't programming - it's institutional memory, democratic decision-making, and collective power building.</p>","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/#foundation-understanding","title":"Foundation Understanding","text":"","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/#git-isnt-programming","title":"Git Isn't Programming","text":"<p>Destroy the intimidation factor. Git is a filing system for collective work, not a programming tool.</p>","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/#why-revolutionaries-need-git","title":"Why Revolutionaries Need Git","text":"<p>Understand the material benefits: institutional memory, democratic transparency, and organizational sustainability.</p>","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/#essential-skills","title":"Essential Skills","text":"","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/#git-in-7-commands","title":"Git in 7 Commands","text":"<p>Master the 90% of Git you'll actually use for organizing work.</p>","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/#git-quick-reference","title":"Git Quick Reference","text":"<p>Quick lookup for commands and common operations.</p>","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/#git-command-reference-card","title":"Git Command Reference Card","text":"<p>Comprehensive reference for all Git operations.</p>","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/#daily-practice","title":"Daily Practice","text":"","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/#daily-git-workflows","title":"Daily Git Workflows","text":"<p>Integrate Git into your regular organizing routines.</p>","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/#visual-git-workflows","title":"Visual Git Workflows","text":"<p>See how Git operations map to organizing processes through diagrams and flowcharts.</p>","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/#learning-path","title":"Learning Path","text":"<ol> <li>Start Here: Git Isn't Programming</li> <li>Understand Why: Why Revolutionaries Need Git</li> <li>Learn by Doing: Follow Git Learning Path</li> <li>Practice: Git in 7 Commands</li> <li>Apply: Daily Git Workflows</li> </ol>","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/#key-principles","title":"Key Principles","text":"","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/#git-as-organizing-tool","title":"Git as Organizing Tool","text":"<ul> <li>Parallel Development: Multiple teams can work simultaneously without conflict</li> <li>Democratic Decision Making: Every change is visible and can be discussed</li> <li>Institutional Memory: Nothing is ever lost, everything is searchable</li> <li>Collective Ownership: No single person controls the organizational knowledge</li> </ul>","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/#revolutionary-approach","title":"Revolutionary Approach","text":"<ul> <li>No Tech Priests: Anyone can learn and teach Git</li> <li>Material Examples: All learning uses real organizing scenarios</li> <li>Collective Process: Focus on group coordination, not individual productivity</li> <li>Security Consciousness: Protect organizing work from surveillance and disruption</li> </ul> <p>\"Version control is organizing infrastructure - it shapes how we work together and what we can accomplish collectively.\"</p>","tags":["git","basics","version-control","organizing"]},{"location":"learn/git-basics/daily-git-workflows/","title":"Git Workflow Guide","text":"<p>Consolidated Documentation</p> <p>This guide consolidates all Git workflow information for DRUIDS, including content previously in separate files for Obsidian Git configuration, workflows, and offline usage. For specific Obsidian plugin configuration details, see the Obsidian Configuration section below.</p>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#overview","title":"Overview","text":"<p>This guide consolidates all Git workflow information for DRUIDS, covering automated synchronization, branch management for security tiers, pull request processes, conflict resolution, and commit signing. It's designed for both individual and collaborative vault management with a focus on security and democratic principles.</p>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#quick-start","title":"Quick Start","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#essential-commands","title":"Essential Commands","text":"Bash<pre><code># Modern tool usage (preferred)\nrg \"pattern\" --type md      # Search in markdown files\nfd \"*.md\" docs/             # Find all markdown files\nbat config.yaml             # View file with syntax highlighting\n\n# Basic Git operations in Obsidian\n\"Obsidian Git: Pull\"        # Fetch latest changes\n\"Obsidian Git: Commit all\"  # Commit all changes\n\"Obsidian Git: Push\"        # Push to remote\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#daily-workflow","title":"Daily Workflow","text":"<ol> <li>Start of day: Pull latest changes</li> <li>During work: Commit regularly with meaningful messages</li> <li>Before sharing: Push changes to remote</li> <li>Switching tiers: Always commit first, then switch branches</li> </ol>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#automated-sync-configuration","title":"Automated Sync Configuration","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#setting-up-auto-sync","title":"Setting Up Auto-Sync","text":"<ol> <li>Access Settings</li> <li> <p>Open Obsidian \u2192 Settings \u2192 Community plugins \u2192 Obsidian Git</p> </li> <li> <p>Configure Intervals</p> </li> </ol> YAML<pre><code>Vault backup interval: 15  # minutes\nAuto backup: \u2713 enabled\nAuto pull: \u2713 enabled  \nAuto push: \u2713 enabled\n</code></pre> <ol> <li>Set Commit Messages</li> </ol> YAML<pre><code># Good static messages\n\"chore: automatic vault sync\"\n\"docs: periodic backup\"\n\"feat: regular snapshot\"\n</code></pre> <ol> <li>Enable Pull on Startup</li> <li>\u2713 Pull updates on startup (highly recommended)</li> </ol>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#prerequisites-for-auto-sync","title":"Prerequisites for Auto-Sync","text":"<ul> <li>Git Authentication: SSH keys or credential manager configured</li> <li>Remote Repository: Properly configured origin</li> <li>No Conflicts: Resolved merge conflicts</li> <li>Internet Connection: Stable connectivity</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#monitoring-auto-sync","title":"Monitoring Auto-Sync","text":"<ul> <li>Check status bar for sync indicators</li> <li>Review commit history periodically</li> <li>Watch for error notifications</li> <li>Verify remote updates on GitHub</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#branch-management-for-security-tiers","title":"Branch Management for Security Tiers","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#core-principles","title":"Core Principles","text":"<ol> <li>Branch per Tier: Each security level has its own branch</li> <li>Default to Lowest: Stay on <code>main</code> (L0) unless needed</li> <li>Conscious Switching: Deliberate action for higher tiers</li> <li>No Merge Down: Never merge sensitive info to lower tiers</li> <li>Feature Branches: Create temporary branches for complex work</li> </ol>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#security-tier-branches","title":"Security Tier Branches","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#main-l0-public","title":"main (L0 - Public)","text":"YAML<pre><code>Purpose: Public, unclassified information\nAuto-sync: Safe to enable all features\nCollaboration: Open to all members\nVisual: \ud83d\udfe2 Green borders\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#l1-internal-member-only","title":"L1-internal (Member Only)","text":"YAML<pre><code>Purpose: Internal team information\nAuto-sync: Consider manual push\nCollaboration: Trusted members only\nVisual: \ud83d\udfe4 Brown borders\n\nSwitching Protocol:\n1. Commit all changes on current branch\n2. \"Obsidian Git: Checkout branch\" \u2192 L1-internal\n3. \"Obsidian Git: Pull\" immediately\n4. Work on L1 content\n5. Commit before switching back\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#l2-secure-highly-sensitive","title":"L2-secure (Highly Sensitive)","text":"YAML<pre><code>Purpose: Confidential, restricted information\nAuto-sync: DISABLE auto-push, manual only\nCollaboration: Minimal, need-to-know\nVisual: \ud83d\udd34 Red borders\n\nCritical Rules:\n- Double-check branch before every commit\n- Review staged changes carefully\n- Manual push only\n- Consider local-only or encrypted remote\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#branch-switching-workflow","title":"Branch Switching Workflow","text":"<pre><code>graph LR\n    A[Current Branch] --&gt;|1. Commit Changes| B[Clean State]\n    B --&gt;|2. Checkout New Branch| C[New Branch]\n    C --&gt;|3. Pull Latest| D[Updated Branch]\n    D --&gt;|4. Work &amp; Commit| E[Changes Made]\n    E --&gt;|5. Push if Appropriate| F[Synced]</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#security-considerations","title":"Security Considerations","text":"<ul> <li>Global Auto-Push: Be aware it affects ALL branches</li> <li>Mitigation Options:</li> <li>Disable global auto-push, use manual push for L1/L2</li> <li>Temporarily disable before switching to sensitive branches</li> <li>User Training: Essential for all vault users</li> <li>Accidental Commits: Have remediation procedures ready</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#pull-request-workflow","title":"Pull Request Workflow","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#overview-of-roles","title":"Overview of Roles","text":"<ul> <li>Obsidian-Git: Local operations (branches, commits, push/pull)</li> <li>GitHub: Remote collaboration (PR creation, review, merge)</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#creating-a-pull-request","title":"Creating a Pull Request","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#1-local-preparation-obsidian","title":"1. Local Preparation (Obsidian)","text":"Bash<pre><code># Update base branch\n\"Obsidian Git: Checkout branch\" \u2192 main\n\"Obsidian Git: Pull\"\n\n# Create feature branch\n\"Obsidian Git: Create new branch\"\n# Name: feature/description or initials/description\n\n# Make changes and commit\n\"Obsidian Git: Stage all\"\n\"Obsidian Git: Commit staged\"\n# Write clear commit messages\n\n# Push to remote\n\"Obsidian Git: Push\"\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#2-pr-creation-github","title":"2. PR Creation (GitHub)","text":"<ol> <li>Navigate to repository on GitHub</li> <li>Click \"New pull request\"</li> <li>Select branches:</li> <li>Base: Target branch (main, L1-internal, etc.)</li> <li>Compare: Your feature branch</li> <li>Write comprehensive description:</li> <li>Purpose of changes</li> <li>Key modifications</li> <li>How it aligns with goals</li> <li>Related issues</li> <li>Context for reviewers</li> </ol>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#3-review-process","title":"3. Review Process","text":"<pre><code>graph TD\n    A[PR Created] --&gt; B[Assign Reviewers]\n    B --&gt; C[Discussion &amp; Feedback]\n    C --&gt; D{Changes Requested?}\n    D --&gt;|Yes| E[Make Updates]\n    E --&gt; F[Push Updates]\n    F --&gt; C\n    D --&gt;|No| G[Approvals Given]\n    G --&gt; H[Merge PR]</code></pre> <p>Review Activities:</p> <ul> <li>Examine \"Files changed\" tab</li> <li>Leave line-specific comments</li> <li>Request modifications if needed</li> <li>Approve when satisfied</li> </ul> <p>Approval Methods:</p> <ul> <li>GitHub's formal \"Approve\" feature (preferred)</li> <li>Comment conventions: <code>+1</code>, <code>LGTM</code></li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#4-merging","title":"4. Merging","text":"<p>Merge Strategies:</p> <ul> <li>Squash and merge: Combines commits (recommended for features)</li> <li>Create merge commit: Preserves all commits</li> <li>Rebase and merge: Linear history (use cautiously - see Why Rebase Warps Reality)</li> </ul> <p>Post-Merge:</p> <ul> <li>Delete feature branch</li> <li>All collaborators pull updates</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#secure-pr-workflow-meta-bind","title":"Secure PR Workflow (Meta Bind)","text":"<p>For enhanced security, use the Obsidian \u2192 GitHub PR workflow:</p> <pre><code>graph LR\n    A[Obsidian PR Draft] --&gt;|Meta Bind Export| B[PR Queue]\n    B --&gt;|Git Sync| C[GitHub Repo]\n    C --&gt;|GitHub Action| D[Draft PR]\n    D --&gt;|Manual Review| E[Final PR]</code></pre> <p>Security Benefits:</p> <ul> <li>No credentials in Obsidian</li> <li>Validation before submission</li> <li>Audit trail maintained</li> <li>Manual review checkpoint</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#handling-merge-conflicts","title":"Handling Merge Conflicts","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#understanding-conflicts","title":"Understanding Conflicts","text":"<p>Conflicts occur when:</p> <ul> <li>Same lines modified in different ways</li> <li>Pulling changes that conflict with local edits</li> <li>Merging branches with overlapping changes</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#identifying-conflicts","title":"Identifying Conflicts","text":"<p>Conflict Markers:</p> Diff<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nYour local version\n=======\nIncoming version\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-name\n</code></pre> <p>Detection Methods:</p> <ul> <li>Obsidian-Git error notifications</li> <li>Source Control view in sidebar</li> <li><code>git status</code> in terminal</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#resolution-process","title":"Resolution Process","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#1-file-by-file-resolution","title":"1. File-by-File Resolution","text":"Bash<pre><code># Open conflicted file\n# Locate conflict markers\n# Choose resolution strategy:\n- Keep yours: Delete incoming + markers\n- Keep theirs: Delete yours + markers  \n- Combine: Manually merge both versions\n- Rewrite: Create new solution\n\n# Delete ALL conflict markers\n# Save file\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#2-stage-and-commit","title":"2. Stage and Commit","text":"Bash<pre><code>\"Obsidian Git: Stage current file\"\n\"Obsidian Git: Commit staged\"\n# Default merge message often sufficient\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#3-push-resolution","title":"3. Push Resolution","text":"Bash<pre><code>\"Obsidian Git: Push\"\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#prevention-strategies","title":"Prevention Strategies","text":"<ul> <li>Pull frequently before starting work</li> <li>Communicate about shared files</li> <li>Use feature branches to isolate changes</li> <li>Small commits are easier to resolve</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#aborting-a-merge","title":"Aborting a Merge","text":"<p>If overwhelmed, abort and restart:</p> Bash<pre><code>git merge --abort  # Terminal command\n# Returns to pre-merge state\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#commit-signing-with-gpg","title":"Commit Signing with GPG","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#why-sign-commits","title":"Why Sign Commits?","text":"<ul> <li>Authenticity: Proves you made the commit</li> <li>Integrity: Ensures commit hasn't been altered</li> <li>Trust: Critical for sensitive branches (L1/L2)</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#setup-process","title":"Setup Process","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#1-system-configuration","title":"1. System Configuration","text":"Bash<pre><code># Install GPG\ngpg --version\n\n# Generate or import key\ngpg --full-generate-key\n\n# List keys\ngpg --list-secret-keys --keyid-format LONG\n\n# Configure Git\ngit config --global user.signingkey YOUR_KEY_ID\ngit config --global commit.gpgsign true\ngit config --global tag.gpgsign true\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#2-gpg-agent-setup","title":"2. GPG Agent Setup","text":"<p>Essential for automated signing:</p> Bash<pre><code># Add to shell profile\nexport GPG_TTY=$(tty)\n\n# Configure agent to cache passphrase\n# Allows background signing\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#hardware-security-keys","title":"Hardware Security Keys","text":"<p>For maximum security on L2 branches:</p> <ul> <li>Store GPG key on YubiKey/Nitrokey</li> <li>Key never leaves hardware</li> <li>Physical touch required to sign</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#verification","title":"Verification","text":"Bash<pre><code># Check local signatures\ngit log --show-signature\n\n# GitHub shows \"Verified\" badge\n# Upload public key to GitHub\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#important-limitations","title":"Important Limitations","text":"<ul> <li>Mobile: Signing not supported on iOS/Android</li> <li>Automation: Requires GPG agent for auto-commits</li> <li>Complexity: Advanced feature, team training needed</li> </ul>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#best-practices","title":"Best Practices","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#security-first-approach","title":"Security-First Approach","text":"<ol> <li>Always verify branch before committing</li> <li>Review changes before pushing sensitive branches</li> <li>Use visual indicators as primary guide</li> <li>Manual push for L2 content</li> <li>Sign commits on sensitive branches</li> </ol>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#collaboration-guidelines","title":"Collaboration Guidelines","text":"<ol> <li>Clear commit messages describing changes</li> <li>Small, focused commits over large changes</li> <li>Comprehensive PR descriptions</li> <li>Constructive review feedback</li> <li>Prompt response to review requests</li> </ol>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#automation-balance","title":"Automation Balance","text":"<ol> <li>Enable auto-sync for public branches</li> <li>Manual control for sensitive content</li> <li>Monitor status regularly</li> <li>Test authentication periodically</li> <li>Document exceptions to standard workflow</li> </ol>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#troubleshooting","title":"Troubleshooting","text":"","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#auto-sync-issues","title":"Auto-Sync Issues","text":"Bash<pre><code># Check authentication\ngit push origin main  # Test manually\n\n# Verify configuration\ngit config --list | grep -E \"(user|commit|remote)\"\n\n# Check for conflicts\ngit status\ngit diff\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#branch-problems","title":"Branch Problems","text":"Bash<pre><code># List all branches\ngit branch -a\n\n# Force checkout if stuck\ngit checkout -f branch-name\n\n# Reset to remote state\ngit reset --hard origin/branch-name\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#conflict-resolution-help","title":"Conflict Resolution Help","text":"Bash<pre><code># Show conflict details\ngit diff --name-only --diff-filter=U\n\n# Use external merge tool\ngit mergetool\n\n# Get help from team\n# Don't guess on important conflicts\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#quick-reference-card","title":"Quick Reference Card","text":"Text Only<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        GIT WORKFLOW QUICK REF       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Daily Commands:                     \u2502\n\u2502   Pull \u2192 Work \u2192 Commit \u2192 Push       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Branch Before Switch:               \u2502\n\u2502   Commit \u2192 Checkout \u2192 Pull          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Security Branches:                  \u2502\n\u2502   L0/main = Auto-sync OK           \u2502\n\u2502   L1 = Consider manual push        \u2502\n\u2502   L2 = Manual push ONLY            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Conflicts:                          \u2502\n\u2502   Don't panic \u2192 Read markers       \u2502\n\u2502   Choose resolution \u2192 Delete marks \u2502\n\u2502   Stage \u2192 Commit \u2192 Push            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/daily-git-workflows/#related-documentation","title":"Related Documentation","text":"<ul> <li>Security Model - Full security model details</li> <li>Democratic Centralism - Organizational principles</li> <li>Obsidian Configuration - Plugin setup</li> </ul> <p>Remember: Good Git discipline protects both your work and your organization. When in doubt, ask for help!</p> <p>Backlinks:</p>","tags":["git","workflow","collaboration","obsidian","security","pull-requests"]},{"location":"learn/git-basics/git-in-7-commands/","title":"Git in 7 Commands","text":"<p>90% of organizing work needs only these 7 commands. Master these, ignore the rest until you need them.</p> <p>Prerequisites: Read Git Isn't Programming first to overcome fear.</p> <p>Want deeper understanding? See Git Through Campaign for these commands in action.</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#the-magnificent-seven","title":"The Magnificent Seven","text":"<ol> <li><code>git status</code> - What's happening?</li> <li><code>git add</code> - Include this</li> <li><code>git commit</code> - Save forever</li> <li><code>git push</code> - Share with comrades</li> <li><code>git pull</code> - Get updates</li> <li><code>git log</code> - See history</li> <li><code>git init</code> - Start new project</li> </ol> <p>That's it. Let's learn each one through real organizing work.</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#command-1-git-status-whats-happening","title":"Command 1: <code>git status</code> - What's Happening?","text":"<p>Think of it as: Asking \"What's going on?\"</p> <p>When to use:  - Before starting work - When confused - Before committing - Literally anytime you're unsure</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#try-it-now","title":"Try It Now","text":"Bash<pre><code>git status\n</code></pre> <p>What you might see:</p> Text Only<pre><code>On branch main\nYour branch is up to date with 'origin/main'.\n\nnothing to commit, working tree clean\n</code></pre> <p>Translation: \"Everything's saved and up to date. You're good!\"</p> <p>Or you might see:</p> Text Only<pre><code>Changes not staged for commit:\n  modified:   meetings/2025-07-03-notes.md\n\nUntracked files:\n  proposals/rent-strike-plan.md\n</code></pre> <p>Translation: \"You've got unsaved work. Time to commit!\"</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#practice-exercise","title":"Practice Exercise","text":"<ol> <li>Create a new file called <code>practice.md</code></li> <li>Run <code>git status</code></li> <li>See how Git notices your new file?</li> </ol> <p>Real Organizing Use: Before every meeting, run <code>git status</code> to make sure you have the latest notes.</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#command-2-git-add-include-this","title":"Command 2: <code>git add</code> - Include This","text":"<p>Think of it as: Putting documents in an envelope before mailing</p> <p>When to use:  - After creating new files - After editing files - Before committing</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#the-two-ways","title":"The Two Ways","text":"<p>Add everything (most common): Bash<pre><code>git add .\n</code></pre> The dot means \"everything in this folder\"</p> <p>Add specific file: Bash<pre><code>git add meetings/2025-07-03-notes.md\n</code></pre></p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#try-it-now_1","title":"Try It Now","text":"<p>Using the practice file from before:</p> Bash<pre><code>git add practice.md\ngit status\n</code></pre> <p>What you'll see: Text Only<pre><code>Changes to be committed:\n  new file:   practice.md\n</code></pre></p> <p>Translation: \"This file is ready to be saved permanently\"</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#practice-exercise_1","title":"Practice Exercise","text":"<ol> <li>Create two files: <code>todo.md</code> and <code>ideas.md</code></li> <li>Add just <code>todo.md</code> with <code>git add todo.md</code></li> <li>Run <code>git status</code> - see how only one is staged?</li> <li>Add the other with <code>git add ideas.md</code></li> </ol> <p>Real Organizing Use: After taking meeting notes, <code>git add meetings/</code> to include all meeting files.</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#command-3-git-commit-save-forever","title":"Command 3: <code>git commit</code> - Save Forever","text":"<p>Think of it as: Taking a permanent snapshot with a note attached</p> <p>When to use:  - After completing meaningful work - Before switching tasks - At end of work session - After meetings</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#the-command","title":"The Command","text":"Bash<pre><code>git commit -m \"Your message here\"\n</code></pre> <p>The <code>-m</code> means \"message follows\"</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#good-commit-messages","title":"Good Commit Messages","text":"<p>Bad \u274c: Bash<pre><code>git commit -m \"stuff\"\ngit commit -m \"updates\"\ngit commit -m \"asdfasdf\"\n</code></pre></p> <p>Good \u2705: Bash<pre><code>git commit -m \"Add July 3 general meeting minutes\"\ngit commit -m \"Update rent strike proposal with legal concerns\"\ngit commit -m \"Document security protocol for protests\"\n</code></pre></p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#try-it-now_2","title":"Try It Now","text":"Bash<pre><code>git commit -m \"Add practice files for Git learning\"\n</code></pre> <p>What you'll see: Text Only<pre><code>[main a4f3d21] Add practice files for Git learning\n 2 files changed, 10 insertions(+)\n create mode 100644 practice.md\n create mode 100644 todo.md\n</code></pre></p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#practice-exercise_2","title":"Practice Exercise","text":"<ol> <li>Edit your <code>practice.md</code> file</li> <li>Add it: <code>git add practice.md</code></li> <li>Commit with descriptive message</li> <li>Run <code>git log</code> to see your commit</li> </ol> <p>Real Organizing Use: After every meeting: <code>git commit -m \"Add March 15 tenant union meeting minutes - approved rent strike timeline\"</code></p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#command-4-git-push-share-with-comrades","title":"Command 4: <code>git push</code> - Share with Comrades","text":"<p>Think of it as: Uploading to shared drive</p> <p>When to use:  - After committing important work - End of work session - Before meetings (so others have latest) - When you want backup</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#the-command_1","title":"The Command","text":"Bash<pre><code>git push\n</code></pre> <p>That's it! If it's your first push on a new branch:</p> Bash<pre><code>git push -u origin branch-name\n</code></pre>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#try-it-now_3","title":"Try It Now","text":"Bash<pre><code>git push\n</code></pre> <p>What you might see: Text Only<pre><code>Enumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nWriting objects: 100% (3/3), 424 bytes | 424.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo github.com:org/repo.git\n   a4f3d21..b5e6f32  main -&gt; main\n</code></pre></p> <p>Translation: \"Your work is now shared with everyone!\"</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#practice-exercise_3","title":"Practice Exercise","text":"<ol> <li>Make another commit</li> <li>Push it</li> <li>Ask a comrade to pull and see your changes</li> </ol> <p>Real Organizing Use: After documenting important decisions: <code>git push</code> so absent comrades can review.</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#command-5-git-pull-get-updates","title":"Command 5: <code>git pull</code> - Get Updates","text":"<p>Think of it as: Downloading latest changes from comrades</p> <p>When to use:  - Start of every work session - Before meetings - When comrade says they pushed changes - If push fails with \"behind\" message</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#the-command_2","title":"The Command","text":"Bash<pre><code>git pull\n</code></pre>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#try-it-now_4","title":"Try It Now","text":"Bash<pre><code>git pull\n</code></pre> <p>What you might see: Text Only<pre><code>remote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nUpdating a4f3d21..c6d7e43\nFast-forward\n meetings/2025-07-03-emergency.md | 45 ++++++++++++\n 1 file changed, 45 insertions(+)\n</code></pre></p> <p>Translation: \"You got updates! Here's what's new.\"</p> <p>Or: Text Only<pre><code>Already up to date.\n</code></pre></p> <p>Translation: \"You already have everything.\"</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#practice-exercise_4","title":"Practice Exercise","text":"<ol> <li>Ask comrade to push a change</li> <li>Pull their change</li> <li>Read what they added</li> <li>Feel the magic of collaboration</li> </ol> <p>Real Organizing Use: Before every meeting: <code>git pull</code> to ensure you have latest agenda and notes.</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#command-6-git-log-see-history","title":"Command 6: <code>git log</code> - See History","text":"<p>Think of it as: Reading the organization's diary</p> <p>When to use:  - Finding past decisions - Understanding changes - Seeing who did what - Learning from history</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#the-commands","title":"The Commands","text":"<p>Basic (full details): Bash<pre><code>git log\n</code></pre></p> <p>Condensed (one line each): Bash<pre><code>git log --oneline\n</code></pre></p> <p>Search (find specific commits): Bash<pre><code>git log --grep=\"rent strike\"\n</code></pre></p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#try-it-now_5","title":"Try It Now","text":"Bash<pre><code>git log --oneline -5\n</code></pre> <p>What you'll see: Text Only<pre><code>b5e6f32 Add emergency meeting notes\na4f3d21 Update rent strike timeline\nd3c2b1a Document legal consultation results\nf9e8d7c Add March general meeting minutes\nc6b5a4d Initial security protocols\n</code></pre></p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#practice-exercise_5","title":"Practice Exercise","text":"<ol> <li>Make 3 different commits</li> <li>Use <code>git log</code> to see full details</li> <li>Use <code>git log --oneline</code> to see summary</li> <li>Search for one with <code>git log --grep=\"keyword\"</code></li> </ol> <p>Real Organizing Use: <code>git log --grep=\"DECISION\"</code> to find all formal decisions made by the organization.</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#command-7-git-init-start-new-project","title":"Command 7: <code>git init</code> - Start New Project","text":"<p>Think of it as: Creating a new filing cabinet</p> <p>When to use:  - Starting new campaign - Beginning new organization - Creating new vault - ONE TIME at project start</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#the-command_3","title":"The Command","text":"Bash<pre><code>git init\n</code></pre>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#try-it-now_6","title":"Try It Now","text":"Bash<pre><code>mkdir new-campaign\ncd new-campaign\ngit init\n</code></pre> <p>What you'll see: Text Only<pre><code>Initialized empty Git repository in /path/to/new-campaign/.git/\n</code></pre></p> <p>Translation: \"New Git project ready for your revolutionary work!\"</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#practice-exercise_6","title":"Practice Exercise","text":"<ol> <li>Create a new folder for a project</li> <li>Navigate into it</li> <li>Run <code>git init</code></li> <li>Create first file and commit it</li> </ol> <p>Real Organizing Use: Starting new campaign: <code>git init</code> in the campaign folder to track everything from day one.</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#your-daily-workflow","title":"Your Daily Workflow","text":"<p>Here's how these 7 commands flow together:</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#morning-start","title":"Morning Start","text":"Bash<pre><code>git pull                  # Get latest updates\ngit status               # See what's happening\n</code></pre>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#during-work","title":"During Work","text":"Bash<pre><code># Edit files, take notes, write proposals\ngit add .                # Stage changes\ngit commit -m \"Clear message about work\"\n</code></pre>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#before-break","title":"Before Break","text":"Bash<pre><code>git push                 # Share with comrades\n</code></pre>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#checking-history","title":"Checking History","text":"Bash<pre><code>git log --oneline       # Review recent work\n</code></pre>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#common-scenarios","title":"Common Scenarios","text":"","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#scenario-taking-meeting-notes","title":"Scenario: Taking Meeting Notes","text":"Bash<pre><code>git pull                              # Get latest\n# Take notes during meeting\ngit add meetings/2025-07-03-notes.md\ngit commit -m \"Add July 3 general meeting notes\"\ngit push                             # Share immediately\n</code></pre>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#scenario-proposing-something","title":"Scenario: Proposing Something","text":"Bash<pre><code>git pull                              # Get latest\n# Write proposal\ngit add proposals/new-idea.md\ngit commit -m \"Propose new organizing strategy\"\ngit push                             # Share for review\n</code></pre>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#scenario-finding-old-decision","title":"Scenario: Finding Old Decision","text":"Bash<pre><code>git log --grep=\"phone tree\"          # Search history\n# Found it! Read the old discussion\n</code></pre>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#practice-project-your-first-week","title":"Practice Project: Your First Week","text":"","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#day-1","title":"Day 1","text":"<ul> <li>Learn <code>git status</code> - use it 10 times</li> <li>Learn <code>git add</code> - add 3 files</li> <li>Learn <code>git commit</code> - make 3 commits</li> </ul>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#day-2","title":"Day 2","text":"<ul> <li>Learn <code>git push</code> - share your work</li> <li>Learn <code>git pull</code> - get updates</li> <li>Practice the pull-add-commit-push cycle</li> </ul>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#day-3","title":"Day 3","text":"<ul> <li>Learn <code>git log</code> - explore history</li> <li>Search for specific commits</li> <li>Read others' commit messages</li> </ul>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#day-4","title":"Day 4","text":"<ul> <li>Use all commands in real work</li> <li>Take actual meeting notes</li> <li>Share with comrades</li> </ul>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#day-5","title":"Day 5","text":"<ul> <li>Help another comrade learn one command</li> <li>Do entire workflow without referring to notes</li> <li>Celebrate!</li> </ul>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#troubleshooting","title":"Troubleshooting","text":"","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#git-says-i-need-to-pull-first","title":"\"Git says I need to pull first\"","text":"Bash<pre><code>git pull\n# Then try your push again\n</code></pre>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#i-committed-the-wrong-thing","title":"\"I committed the wrong thing\"","text":"Bash<pre><code>git log --oneline        # Find the commit\n# Don't panic - ask for help\n</code></pre>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#im-lost","title":"\"I'm lost\"","text":"Bash<pre><code>git status              # Always start here\n</code></pre>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#the-truth-about-git","title":"The Truth About Git","text":"<p>You just learned 90% of what you need. Yes, there are dozens more commands. You'll learn them if/when you need them. But these 7 commands will carry you through nearly all organizing work.</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#what-youve-accomplished","title":"What You've Accomplished","text":"<p>You can now: - \u2705 Check project status - \u2705 Save work permanently - \u2705 Share with comrades - \u2705 Get others' updates - \u2705 Search history - \u2705 Start new projects</p> <p>That's not \"basic\" - that's revolutionary infrastructure.</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#your-next-steps","title":"Your Next Steps","text":"<ol> <li>Today: Practice these 7 commands</li> <li>This Week: Use them for real work</li> <li>Next Week: Learn Git Through a Campaign</li> <li>This Month: Teach another comrade</li> </ol>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-in-7-commands/#remember","title":"Remember","text":"<ul> <li>These 7 commands are enough</li> <li>Use <code>git status</code> when confused</li> <li>Commit messages matter</li> <li>Pull before push</li> <li>Help others learn</li> </ul> <p>\"From each command according to ability, to each comrade according to need\"</p> <p>Ready for more? Try Git Through a Campaign \u2192</p> <p>Backlinks:</p>","tags":["tutorial","git","essential","commands","beginner"]},{"location":"learn/git-basics/git-isnt-programming/","title":"Git Isn't Programming","text":"<p>Intimidated by Git? You're not alone. But here's the secret: Git is just a fancy filing system, not programming.</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#the-big-lie","title":"The Big Lie","text":"<p>Someone told you Git is a \"programming tool.\" They lied. Or more accurately, they confused you with incomplete truth.</p> <p>Git is a writing tool that programmers happen to use. Like how Microsoft Word is a writing tool that novelists happen to use. You don't need to be a novelist to use Word. You don't need to be a programmer to use Git.</p> <p>Ready to learn Git the right way? Jump to Git in 7 Commands for the essentials.</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#what-git-actually-is","title":"What Git Actually Is","text":"","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#git-is-track-changes-on-steroids","title":"Git is Track Changes on Steroids","text":"<p>Remember \"Track Changes\" in Microsoft Word? Where you can: - See who changed what - When they changed it - Accept or reject changes - Compare versions</p> <p>Git does all that, but: - It never forgets (Word only keeps recent changes) - Multiple people can propose changes simultaneously - You can't accidentally lose work - No corporation controls it</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#git-is-democratic-google-docs","title":"Git is Democratic Google Docs","text":"<p>Imagine if Google Docs: - Worked without internet - Couldn't be shut down by Google - Let anyone propose changes without breaking the original - Kept perfect history forever - Showed exactly who decided what and when - Never lost a document - Couldn't be subpoenaed as easily</p> <p>That's Git.</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#git-is-organizational-memory","title":"Git is Organizational Memory","text":"<p>Think of Git as: - A filing cabinet that organizes itself - A meeting secretary that never misses details - A historian that remembers everything - A librarian that finds anything instantly</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#why-programmers-confused-you","title":"Why Programmers Confused You","text":"<p>Programmers use Git for code. So when they explain Git, they use programming examples:</p> Python<pre><code>def hello_world():\n    print(\"Hello, World!\")\n</code></pre> <p>This scares organizers away. But Git doesn't care what you store. Watch the same Git process with organizing content:</p> Markdown<pre><code># March 15 General Meeting Minutes\n\nPresent: Rosa, Karl, Emma, Malcolm\nFacilitator: Rosa\n\n## Decisions Made\n1. Rent strike campaign approved (7-2-1)\n2. $500 allocated for printing\n3. Next meeting: March 22\n</code></pre> <p>See? No programming. Just organizing.</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#the-only-technical-parts","title":"The Only \"Technical\" Parts","text":"","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#1-the-command-line-isnt-programming","title":"1. The Command Line Isn't Programming","text":"<p>When you type: Bash<pre><code>git add meeting-minutes.md\n</code></pre></p> <p>You're not programming. You're giving instructions. Like typing: - \"print document.pdf\" - \"save as draft.doc\" - \"email to everyone\"</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#2-these-arent-code-words","title":"2. These Aren't Code Words","text":"<p>Git commands are just English: - <code>add</code> = include this - <code>commit</code> = save forever - <code>push</code> = share with others - <code>pull</code> = get updates - <code>status</code> = what's happening? - <code>log</code> = show history</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#3-you-already-understand-branches","title":"3. You Already Understand Branches","text":"<p>A \"branch\" sounds technical. It's not:</p> <p>Real life: \"Let's try planning the march for Saturday\" Git: Create branch called <code>march-saturday-proposal</code></p> <p>Real life: \"Actually, Sunday works better\" Git: Create another branch <code>march-sunday-proposal</code></p> <p>Real life: \"We voted for Sunday\" Git: Merge <code>march-sunday-proposal</code> into main plan</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#what-you-need-vs-what-you-dont","title":"What You Need vs What You Don't","text":"","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#you-dont-need-to-know","title":"You DON'T Need to Know:","text":"<ul> <li>Any programming language</li> <li>How Git works internally</li> <li>Complex Git features</li> <li>Computer science concepts</li> <li>Technical jargon</li> </ul>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#you-do-need-to-know","title":"You DO Need to Know:","text":"<ul> <li>How to type</li> <li>How to create folders</li> <li>How to save files</li> <li>How to follow simple instructions</li> <li>How to ask for help</li> </ul>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#common-fears-debunked","title":"Common Fears Debunked","text":"","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#ill-break-everything","title":"\"I'll Break Everything\"","text":"<p>Fear: \"What if I delete all our work?\" Reality: Git is designed to prevent this. It's harder to lose work in Git than in Google Docs.</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#its-too-complicated","title":"\"It's Too Complicated\"","text":"<p>Fear: \"There are hundreds of Git commands!\" Reality: You need 7 commands for 90% of organizing work. You already remember more phone numbers than that.</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#im-not-technical","title":"\"I'm Not Technical\"","text":"<p>Fear: \"I don't understand computers\" Reality: Do you use: - Email? That's a distributed message protocol. - Google Docs? That's real-time collaborative editing. - Facebook? That's a complex social graph database.</p> <p>You're already technical. You just don't use programmer words for it.</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#i-dont-have-time","title":"\"I Don't Have Time\"","text":"<p>Fear: \"Learning Git will take forever\" Reality:  - 30 minutes to make your first commit - 1 week to feel comfortable - 2 weeks to wonder how you lived without it</p> <p>Compare to: How long does it take to find that document from 6 months ago?</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#the-political-truth","title":"The Political Truth","text":"<p>Here's why programmers gatekeep Git: Knowledge is power.</p> <p>When technical knowledge stays with \"technical people,\" it creates hierarchy. When organizers depend on tech volunteers, it creates bottlenecks. When tools seem \"too hard,\" it maintains divisions.</p> <p>Learning Git isn't about becoming technical. It's about refusing the artificial division between \"technical\" and \"non-technical\" comrades.</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#real-organizers-using-git","title":"Real Organizers Using Git","text":"","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#rosas-story","title":"Rosa's Story","text":"<p>\"I coordinate a tenants union. I thought Git was for coders. Now I track every meeting, every decision, every campaign in Git. When the city tried to claim we never opposed their development plan, I pulled up the commit from 2 years ago with our detailed objections. Git is revolutionary infrastructure.\"</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#malcolms-experience","title":"Malcolm's Experience","text":"<p>\"I'm 67 years old. Started organizing before computers existed. Learned Git last month. Now I teach it to younger comrades because I understand: Git is just a better filing cabinet. The revolution needs better filing cabinets.\"</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#emmas-revelation","title":"Emma's Revelation","text":"<p>\"I avoided Git for years because tech bros made it sound impossible. Then a comrade showed me: it's just saving and sharing documents with memory. I learned it in a weekend. Now I run Git trainings for our whole organization.\"</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#your-path-forward","title":"Your Path Forward","text":"<ol> <li>Today: Read this document, realize Git isn't programming</li> <li>Tomorrow: Read Why Revolutionaries Need Git</li> <li>This Week: Do Your First Revolutionary Commit tutorial</li> <li>Next Week: Use Git for real meeting minutes</li> <li>In a Month: Teach another comrade using our Workshop Template</li> </ol>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-isnt-programming/#the-bottom-line","title":"The Bottom Line","text":"<p>Git isn't programming. It's infrastructure for organizing. Like phones, email, or meeting spaces - tools we use without being \"technical.\"</p> <p>The question isn't whether you're \"technical enough\" for Git. The question is whether you're ready to stop letting corporations control your organizational memory.</p> <p>You don't need to be a programmer. You need to be an organizer who refuses to lose another decision to digital amnesia.</p> <p>\"The difference between 'technical' and 'non-technical' is just practice and patience.\"</p> <p>Ready for the next step? Continue to Why Revolutionaries Need Git to understand the political importance.</p> <p>Want to see Git in action? Try our Quick Demo for a 5-minute example.</p> <p>Need to convince skeptical comrades? Share Tech Democratization as Class Struggle.</p> <p>Backlinks:</p>","tags":["git","explanation","non-technical","demystification","organizing"]},{"location":"learn/git-basics/git-through-campaign/","title":"Git Through a Campaign","text":"<p>Learn Git by following the Riverside Tenant Union through their victorious rent strike campaign</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#youre-not-just-learning-git","title":"You're Not Just Learning Git","text":"<p>You're learning how to preserve struggle, build on victories, and never lose hard-won knowledge again. This tutorial follows a real campaign structure, teaching Git through the actual work of organizing.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#meet-your-comrades","title":"Meet Your Comrades","text":"<p>Maria - Lead organizer, been fighting slumlords for 5 years Jamal - New member, great at talking to neighbors Li - Takes amazing notes, never misses a detail You - Ready to learn Git while organizing  </p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#chapter-1-the-campaign-begins","title":"Chapter 1: The Campaign Begins","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#day-1-first-meeting","title":"Day 1: First Meeting","text":"<p>Maria calls an emergency meeting. SafeHaven Corp just announced a 40% rent increase. Tenants are furious but disorganized.</p> <p>Li takes notes in a Google Doc. By Day 3, they can't find the doc. Someone \"cleaned up\" the shared drive. Again.</p> <p>Maria: \"We can't keep losing our history. We need Git.\"</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#your-first-git-steps","title":"Your First Git Steps","text":"Bash<pre><code># Create a folder for the campaign\nmkdir riverside-rent-strike\ncd riverside-rent-strike\n\n# Initialize Git repository\ngit init\n</code></pre> <p>What just happened? You created a filing cabinet (repository) that never forgets.</p> Bash<pre><code># Check what's happening\ngit status\n</code></pre> <p>Output: Text Only<pre><code>On branch main\nNo commits yet\nnothing to commit\n</code></pre></p> <p>Translation: \"New filing cabinet ready. Nothing filed yet.\"</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#document-the-first-meeting","title":"Document the First Meeting","text":"<p>Create your first file:</p> Bash<pre><code># Create meetings folder\nmkdir meetings\n\n# Create first meeting notes\necho \"# Riverside Rent Strike - Emergency Meeting\" &gt; meetings/2024-11-15-emergency.md\necho \"\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"## Attendees\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"- Maria (facilitator)\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"- Jamal\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"- Li (notes)\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"- 47 other tenants\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"## Decisions\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"1. Form Riverside Tenant Union\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"2. Demand: Freeze rent at current levels\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"3. Next meeting: Tuesday Nov 19\" &gt;&gt; meetings/2024-11-15-emergency.md\n</code></pre>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#save-history-forever","title":"Save History Forever","text":"Bash<pre><code># See what Git notices\ngit status\n</code></pre> <p>Output shows: Text Only<pre><code>Untracked files:\n  meetings/2024-11-15-emergency.md\n</code></pre></p> <p>Translation: \"I see new files. Want to save them?\"</p> Bash<pre><code># Add to staging area\ngit add meetings/\n\n# Commit to history\ngit commit -m \"Add emergency meeting notes - union formed, 40% increase opposed\"\n</code></pre> <p>\ud83c\udf89 First Victory! You've preserved your first piece of organizing history.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#chapter-2-building-momentum","title":"Chapter 2: Building Momentum","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#day-5-outreach-begins","title":"Day 5: Outreach Begins","text":"<p>Jamal has been talking to neighbors. He has notes on napkins, phone notes, scattered everywhere.</p> <p>You: \"Let's track our outreach in Git.\"</p> Bash<pre><code># Create outreach directory\nmkdir outreach\n\n# Create contact tracking\ncat &gt; outreach/building-contacts.md &lt;&lt; 'EOF'\n# Building Contacts\n\n## Building A\n- Apt 101: Interested, needs Spanish materials\n- Apt 102: Very engaged, wants to help organize  \n- Apt 103: Scared of retaliation\n- Apt 104: No answer\n\n## Building B\n- Apt 201: Already can't afford rent\n- Apt 202: Supportive but traveling\n- Apt 203: Wants to know more\n- Apt 204: Landlord's friend - skip\nEOF\n\n# Track it\ngit add outreach/\ngit commit -m \"Track outreach progress - Building A and B initial contacts\"\n</code></pre>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#see-your-history","title":"See Your History","text":"Bash<pre><code>git log --oneline\n</code></pre> <p>Output: Text Only<pre><code>a3f42d1 Track outreach progress - Building A and B initial contacts\nb2e1c93 Add emergency meeting notes - union formed, 40% increase opposed\n</code></pre></p> <p>You're building institutional memory! Every door knocked, every conversation, preserved.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#chapter-3-parallel-organizing","title":"Chapter 3: Parallel Organizing","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#day-8-teams-form","title":"Day 8: Teams Form","text":"<p>The union splits into working groups: - Outreach Team (Jamal leads) - Research Team (Li leads) - Direct Action Team (Maria leads)</p> <p>Each team needs to work independently but stay coordinated.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#enter-branches","title":"Enter: Branches","text":"Bash<pre><code># Create branch for outreach team\ngit checkout -b outreach-team\n\n# Jamal's team adds more contacts\ncat &gt;&gt; outreach/building-contacts.md &lt;&lt; 'EOF'\n\n## Building C\n- Apt 301: Enthusiastic! Wants to organize their floor\n- Apt 302: Undocumented, worried but supportive\n- Apt 303: Offered living room for meetings\n- Apt 304: Will join if others do\nEOF\n\ngit add outreach/building-contacts.md\ngit commit -m \"Add Building C contacts - found meeting space in 303!\"\n</code></pre> <p>Meanwhile, Li's team works on research:</p> Bash<pre><code># Switch to new branch\ngit checkout main\ngit checkout -b research-team\n\n# Create research directory\nmkdir research\n\n# Document findings\ncat &gt; research/safehaven-violations.md &lt;&lt; 'EOF'\n# SafeHaven Corp Code Violations\n\n## Building A\n- 15 health code violations unaddressed\n- Heating system failed inspection 2019, 2021, 2023\n- Mold in 6 units reported, no remediation\n\n## Building B  \n- Fire exits blocked (illegal)\n- No hot water for 3 months in 2023\n- Rat infestation reports ignored\n\n## Sources\n- City inspection records (public database)\n- Tenant photos and documentation\n- Health department complaints\nEOF\n\ngit add research/\ngit commit -m \"Document SafeHaven violations - major health and safety issues\"\n</code></pre>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#see-your-branches","title":"See Your Branches","text":"Bash<pre><code>git branch\n</code></pre> <p>Output: Text Only<pre><code>  main\n  outreach-team\n* research-team\n</code></pre></p> <p>What's happening? Three parallel workstreams, no stepping on toes!</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#chapter-4-coming-together","title":"Chapter 4: Coming Together","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#day-12-merge-the-work","title":"Day 12: Merge the Work","text":"<p>Teams reconvene. Everyone's work needs to combine for the big tenant meeting.</p> Bash<pre><code># Go back to main\ngit checkout main\n\n# Merge outreach work\ngit merge outreach-team\n# Merging happens automatically!\n\n# Merge research work  \ngit merge research-team\n# Also automatic!\n\n# See combined work\nls\n</code></pre> <p>Now you have: Text Only<pre><code>meetings/  outreach/  research/\n</code></pre></p> <p>All work preserved, all teams credited, no information lost!</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#chapter-5-the-conflict","title":"Chapter 5: The Conflict","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#day-15-disagreement-on-demands","title":"Day 15: Disagreement on Demands","text":"<p>Two groups emerge with different demands documents:</p> <p>Group 1 (Maria's draft): Bash<pre><code>git checkout -b demands-militant\n\ncat &gt; demands.md &lt;&lt; 'EOF'\n# Riverside Tenant Union Demands\n\n1. Immediate rent freeze\n2. 50% rent reduction for code violations\n3. Tenant committee approval for any increases\n4. Right to organize without retaliation\nEOF\n\ngit add demands.md\ngit commit -m \"Draft militant demands - 50% reduction\"\n</code></pre></p> <p>Group 2 (Moderate draft): Bash<pre><code>git checkout main\ngit checkout -b demands-moderate\n\ncat &gt; demands.md &lt;&lt; 'EOF'\n# Riverside Tenant Union Demands\n\n1. Rent increase capped at 5%\n2. 30-day notice for any changes\n3. Monthly building inspections\n4. Good faith negotiations\nEOF\n\ngit add demands.md\ngit commit -m \"Draft moderate demands - 5% cap\"\n</code></pre></p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#the-merge-conflict","title":"The Merge Conflict","text":"<p>At the meeting, both proposals are discussed. Through democratic debate, a unified position emerges:</p> Bash<pre><code>git checkout main\ngit merge demands-militant\n</code></pre> <p>Git responds: Text Only<pre><code>Auto-merging demands.md\nCONFLICT (add/add): Merge conflict in demands.md\n</code></pre></p> <p>Don't panic! This is democracy in action.</p> <p>Look at the file: Bash<pre><code>cat demands.md\n</code></pre></p> <p>You see: Text Only<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n=======\n# Riverside Tenant Union Demands\n\n1. Immediate rent freeze\n2. 50% rent reduction for code violations\n3. Tenant committee approval for any increases\n4. Right to organize without retaliation\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; demands-militant\n</code></pre></p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#resolve-through-democracy","title":"Resolve Through Democracy","text":"<p>After debate, the union votes. Edit the file to reflect collective decision:</p> Bash<pre><code>cat &gt; demands.md &lt;&lt; 'EOF'\n# Riverside Tenant Union Demands\n\n1. Immediate rent freeze for all tenants\n2. 50% rent reduction until code violations fixed\n3. Tenant committee approval for future increases\n4. Right to organize without retaliation\n5. All negotiations public with tenant observers\nEOF\n\n# Mark conflict resolved\ngit add demands.md\ngit commit -m \"Merge demands after democratic vote - unified position\"\n</code></pre>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#chapter-6-campaign-intensifies","title":"Chapter 6: Campaign Intensifies","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#day-20-shifting-tactics","title":"Day 20: Shifting Tactics","text":"<p>SafeHaven ignores demands. Time for escalation. Maria creates action plans:</p> Bash<pre><code>git checkout -b direct-action\n\nmkdir actions\ncat &gt; actions/phase-1-pressure.md &lt;&lt; 'EOF'\n# Phase 1: Building Pressure\n\n## Week 1: Visibility\n- Banner drop from Building C\n- Flyers in neighborhood\n- Social media campaign\n\n## Week 2: Disruption  \n- Picket at SafeHaven offices\n- Calls to board members\n- Media outreach\n\n## Week 3: Escalation\n- Rent strike begins\n- Letter to city officials\n- Know Your Rights trainings\nEOF\n\ngit add actions/\ngit commit -m \"Plan Phase 1 pressure campaign\"\n</code></pre>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#sharing-the-plan","title":"Sharing the Plan","text":"Bash<pre><code># Push to shared repository\ngit push origin direct-action\n</code></pre> <p>Now organizers in other buildings can: Bash<pre><code>git pull\ngit checkout direct-action\n</code></pre></p> <p>Everyone stays coordinated. No \"Did you get my email?\" No \"Which version is latest?\"</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#chapter-7-victory-through-history","title":"Chapter 7: Victory Through History","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#day-45-leverage-from-the-past","title":"Day 45: Leverage from the Past","text":"<p>City council meeting tomorrow. Li remembers something:</p> Bash<pre><code>git log --grep=\"violations\"\n</code></pre> <p>Finds: Text Only<pre><code>d4f3a21 Document SafeHaven violations - major health and safety issues\n</code></pre></p> Bash<pre><code>git show d4f3a21\n</code></pre> <p>The detailed violations list from Day 8! Li presents it to council with photos. City inspectors launch investigation.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#day-50-we-win","title":"Day 50: We Win!","text":"<p>SafeHaven caves: - Rent frozen for 2 years - Violations must be fixed - Tenant committee recognized</p> <p>Document the victory:</p> Bash<pre><code>cat &gt; victory-announcement.md &lt;&lt; 'EOF'\n# WE WON!\n\nAfter 50 days of organizing:\n- \u270a Rent frozen for 2 years\n- \u270a All violations must be fixed in 90 days\n- \u270a Tenant committee officially recognized\n- \u270a No retaliation pledge signed\n\n## Key to Victory\n- 95% tenant participation\n- Documented history of violations  \n- United demands\n- Strategic escalation\n\nThe struggle continues, but today we celebrate!\nEOF\n\ngit add victory-announcement.md\ngit commit -m \"VICTORY! Document win - 2 year freeze achieved\"\n</code></pre>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#chapter-8-the-knowledge-lives-on","title":"Chapter 8: The Knowledge Lives On","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#six-months-later","title":"Six Months Later","text":"<p>New organizer joins. Instead of spending weeks catching up:</p> Bash<pre><code># Clone the repository\ngit clone https://github.com/riverside-union/rent-strike.git\n\n# See the entire campaign\ngit log --oneline\n\n# Find specific information\ngit log --grep=\"contact\" # All outreach\ngit log --grep=\"violation\" # All research\ngit log --grep=\"action\" # All tactics\n</code></pre> <p>In one day, they understand: - How the campaign developed - What tactics worked - Who did what - Why decisions were made</p> <p>The institution remembers, even when individuals move on.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#your-git-journey","title":"Your Git Journey","text":"<p>Through this campaign, you learned:</p> <p>\u2705 <code>git init</code> - Start tracking history \u2705 <code>git add</code> - Stage changes \u2705 <code>git commit</code> - Save forever \u2705 <code>git branch</code> - Parallel organizing \u2705 <code>git merge</code> - Unite work \u2705 <code>git log</code> - Search history \u2705 <code>git push/pull</code> - Share with comrades  </p> <p>But more importantly, you learned: - History is power - Parallel work multiplies capacity - Conflicts resolve through democracy - Knowledge compounds over time</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#practice-your-skills","title":"Practice Your Skills","text":"<p>Try these exercises using the campaign structure:</p> <ol> <li>Create a branch for planning next campaign</li> <li>Document lessons learned</li> <li>Merge different strategic proposals  </li> <li>Search for specific decisions</li> <li>Share with other tenant unions</li> </ol>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#the-real-victory","title":"The Real Victory","text":"<p>Git isn't about commands. It's about ensuring that every hour spent organizing, every lesson learned, every victory won becomes part of permanent revolutionary infrastructure.</p> <p>SafeHaven thought tenant memory was short. They were wrong. The repository remembers.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/git-through-campaign/#next-steps","title":"Next Steps","text":"<ol> <li>Start using Git for your real organizing</li> <li>Read Daily Git Workflows</li> <li>Learn Git Workflows by Role</li> <li>Teach another organizer</li> </ol> <p>\"The people, united, will never be defeated - especially when they use version control\"</p> <p>Ready to preserve your own struggles? The revolution will be committed.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"learn/git-basics/visual-git-workflows/","title":"Visual Git Workflows for Revolutionary Organizing","text":"<p>Visual learners: These diagrams show how Git workflows support organizing work.</p> <p>New to Git? Start with Git Isn't Programming then Git in 7 Commands</p> <p>Need command references? See Quick Reference or Command Card</p>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#basic-daily-workflow","title":"Basic Daily Workflow","text":"","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#ascii-version","title":"ASCII Version","text":"Text Only<pre><code>Morning                    During Day                 Evening\n   \u2502                          \u2502                          \u2502\n   \u25bc                          \u25bc                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PULL \u2502                 \u2502 WORK &amp;  \u2502              \u2502 COMMIT &amp; \u2502\n\u2502      \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 EDIT    \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 PUSH     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   \u2502                          \u2502                          \u2502\n   \u2502                          \u2502                          \u2502\n   \u25bc                          \u25bc                          \u25bc\n\"git pull\"              \"edit files\"            \"git add .\"\n                                               \"git commit -m\"\n                                               \"git push\"\n</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#mermaid-version","title":"Mermaid Version","text":"<pre><code>graph LR\n    A[Start Day] --&gt;|git pull| B[Get Latest Changes]\n    B --&gt; C[Work on Files]\n    C --&gt; D{Changes Made?}\n    D --&gt;|Yes| E[git add files]\n    D --&gt;|No| F[End Day]\n    E --&gt; G[git commit -m 'message']\n    G --&gt; H[git push]\n    H --&gt; F[End Day]</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#meeting-documentation-flow","title":"Meeting Documentation Flow","text":"","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#ascii-version_1","title":"ASCII Version","text":"Text Only<pre><code>BEFORE MEETING          DURING MEETING          AFTER MEETING\n      \u2502                       \u2502                      \u2502\n      \u25bc                       \u25bc                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Create    \u2502        \u2502    Take     \u2502       \u2502   Commit    \u2502\n\u2502   Branch    \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502    Notes    \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502   &amp; Push    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2502                       \u2502                      \u2502\n      \u25bc                       \u25bc                      \u25bc\n\"git checkout -b      \"Edit meeting.md\"      \"git add meeting.md\"\n meeting/2024-03-21\"                         \"git commit -m 'DOCUMENTED'\"\n                                            \"git push origin\"\n</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#mermaid-version_1","title":"Mermaid Version","text":"<pre><code>graph TD\n    A[Meeting Scheduled] --&gt;|git checkout -b meeting/date| B[Create Meeting Branch]\n    B --&gt; C[Meeting Starts]\n    C --&gt; D[Take Notes in meeting.md]\n    D --&gt; E[Meeting Ends]\n    E --&gt; F{Review Notes}\n    F --&gt;|Accurate| G[git add meeting.md]\n    F --&gt;|Need Fixes| D\n    G --&gt; H[git commit -m 'DOCUMENTED: meeting']\n    H --&gt; I[git push origin meeting/date]\n    I --&gt; J[Create Pull Request]\n    J --&gt; K[Team Reviews]\n    K --&gt; L[Merge to Main]</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#campaign-development-workflow","title":"Campaign Development Workflow","text":"","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#ascii-version_2","title":"ASCII Version","text":"Text Only<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     MAIN BRANCH                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502                           \u2502\n              \u25bc                           \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                     \u2502\n        \u2502  Create   \u2502                     \u2502\n        \u2502  Campaign \u2502                     \u2502\n        \u2502  Branch   \u2502                     \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518                     \u2502\n              \u2502                           \u2502\n              \u25bc                           \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                     \u2502\n        \u2502  Develop  \u2502                     \u2502\n        \u2502 Strategy  \u2502                     \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518                     \u2502\n              \u2502                           \u2502\n              \u25bc                           \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                     \u2502\n        \u2502 Organize  \u2502                     \u2502\n        \u2502 Resources \u2502                     \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518                     \u2502\n              \u2502                           \u2502\n              \u25bc                           \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                     \u2502\n        \u2502  Review   \u2502                     \u2502\n        \u2502    PR     \u2502                     \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518                     \u2502\n              \u2502                           \u2502\n              \u25bc                           \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502         MERGE TO MAIN              \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#mermaid-version_2","title":"Mermaid Version","text":"<pre><code>graph TD\n    A[Identify Campaign Need] --&gt;|git checkout -b campaigns/name| B[Create Campaign Branch]\n    B --&gt; C[Initial Strategy Doc]\n    C --&gt; D[git commit -m 'PROPOSED: campaign']\n    D --&gt; E[Develop Materials]\n    E --&gt; F[Resource Planning]\n    F --&gt; G[Timeline Creation]\n    G --&gt; H[git push origin campaigns/name]\n    H --&gt; I[Open Pull Request]\n    I --&gt; J{Democratic Review}\n    J --&gt;|Approved| K[Merge to Main]\n    J --&gt;|Changes Needed| L[Update Proposal]\n    L --&gt; H\n    K --&gt; M[Campaign Launches]</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#proposal-development-process","title":"Proposal Development Process","text":"","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#ascii-version_3","title":"ASCII Version","text":"Text Only<pre><code> INDIVIDUAL           COLLABORATIVE           DEMOCRATIC\n    WORK                 REVIEW               DECISION\n     \u2502                      \u2502                     \u2502\n     \u25bc                      \u25bc                     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Branch  \u2502           \u2502   Push  \u2502          \u2502  Vote   \u2502\n\u2502   &amp;     \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502    &amp;    \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502   &amp;     \u2502\n\u2502 Develop \u2502           \u2502   PR    \u2502          \u2502  Merge  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502                      \u2502                     \u2502\nFreedom to            Open discussion        Unity of\ndevelop ideas         and feedback           action\n</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#mermaid-version_3","title":"Mermaid Version","text":"<pre><code>graph LR\n    A[Idea Emerges] --&gt;|git checkout -b proposal/idea| B[Create Proposal Branch]\n    B --&gt; C[Write Proposal]\n    C --&gt; D[Add Supporting Docs]\n    D --&gt; E[git push origin proposal/idea]\n    E --&gt; F[Open Pull Request]\n    F --&gt; G[Discussion Period]\n    G --&gt; H{Consensus Check}\n    H --&gt;|More Discussion| G\n    H --&gt;|Ready to Vote| I[Democratic Vote]\n    I --&gt;|Approved| J[git merge proposal/idea]\n    I --&gt;|Rejected| K[Record Decision &amp; Close PR]\n    J --&gt; L[Implement Decision]</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#security-incident-response","title":"Security Incident Response","text":"","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#ascii-version_4","title":"ASCII Version","text":"Text Only<pre><code>INCIDENT DETECTED \u2500\u2500\u2500\u2500\u2500\u2500\u25b6 IMMEDIATE RESPONSE \u2500\u2500\u2500\u2500\u2500\u2500\u25b6 RECOVERY\n       \u2502                          \u2502                      \u2502\n       \u25bc                          \u25bc                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   FREEZE    \u2502           \u2502   DOCUMENT   \u2502      \u2502   ROTATE     \u2502\n\u2502    REPO     \u2502           \u2502   INCIDENT   \u2502      \u2502 CREDENTIALS  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                          \u2502                      \u2502\n\"Notify team\"            \"git commit -m          \"Update access\"\n\"Stop pushes\"            'EMERGENCY: incident'\"  \"Force push clean\"\n</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#mermaid-version_4","title":"Mermaid Version","text":"<pre><code>graph TD\n    A[Security Incident] --&gt;|Alert Team| B[Freeze Repository]\n    B --&gt; C{Assess Damage}\n    C --&gt;|Data Exposed| D[Document What Leaked]\n    C --&gt;|Infiltration| E[Identify Compromise]\n    D --&gt; F[Create Incident Report]\n    E --&gt; F\n    F --&gt;|git commit -m 'EMERGENCY'| G[Secure Documentation]\n    G --&gt; H[Rotate All Credentials]\n    H --&gt; I[Clean Repository]\n    I --&gt;|git push --force| J[Resume Operations]\n    J --&gt; K[Post-Incident Review]</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#conflict-resolution-workflow","title":"Conflict Resolution Workflow","text":"","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#ascii-version_5","title":"ASCII Version","text":"Text Only<pre><code>CONFLICT DETECTED\n      \u2502\n      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  git pull   \u2502 \u25c4\u2500\u2500\u2500\u2500 \"Merge conflict in strategy.md\"\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    EDIT     \u2502 \u25c4\u2500\u2500\u2500\u2500 Remove &lt;&lt;&lt;&lt; ==== &gt;&gt;&gt;&gt; markers\n\u2502    FILE     \u2502       Keep best of both versions\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  git add    \u2502 \u25c4\u2500\u2500\u2500\u2500 Mark as resolved\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 git commit  \u2502 \u25c4\u2500\u2500\u2500\u2500 \"Resolved conflict: incorporated both positions\"\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#mermaid-version_5","title":"Mermaid Version","text":"<pre><code>graph TD\n    A[git pull] --&gt;|Conflict Detected| B[Merge Conflict]\n    B --&gt; C[Open Conflicted File]\n    C --&gt; D[See Both Versions]\n    D --&gt; E{Resolve Method}\n    E --&gt;|Keep Theirs| F[Remove Your Changes]\n    E --&gt;|Keep Yours| G[Remove Their Changes]\n    E --&gt;|Combine| H[Synthesize Both]\n    F --&gt; I[git add file]\n    G --&gt; I\n    H --&gt; I\n    I --&gt; J[git commit -m 'Resolved conflict']\n    J --&gt; K[git push]</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#knowledge-preservation-pattern","title":"Knowledge Preservation Pattern","text":"","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#ascii-version_6","title":"ASCII Version","text":"Text Only<pre><code>EXPERIENCE \u2500\u2500\u2500\u25b6 DOCUMENTATION \u2500\u2500\u2500\u25b6 PRESERVATION \u2500\u2500\u2500\u25b6 FUTURE USE\n    \u2502                \u2502                   \u2502                \u2502\n    \u25bc                \u25bc                   \u25bc                \u25bc\nCampaign        Write lessons       Commit to Git    New organizers\nhappens         learned doc         with context      read &amp; learn\n\n                              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                              \u2502 Git History \u2502\n                              \u2502  Preserves  \u2502\n                              \u2502 Everything  \u2502\n                              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                     \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u25bc                \u25bc                \u25bc\n                Successes        Failures      Decisions\n                Preserved        Preserved     Preserved\n</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#mermaid-version_6","title":"Mermaid Version","text":"<pre><code>graph TD\n    A[Organizing Experience] --&gt; B[Document Immediately]\n    B --&gt; C[Create Lessons Learned]\n    C --&gt;|git add| D[Stage Documentation]\n    D --&gt;|git commit -m 'EDUCATED'| E[Preserve with Context]\n    E --&gt;|git push| F[Share with Organization]\n    F --&gt; G[Available Forever]\n    G --&gt; H[New Members Read]\n    H --&gt; I[Apply Lessons]\n    I --&gt; J[Better Organizing]\n    J --&gt; A</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#distributed-backup-workflow","title":"Distributed Backup Workflow","text":"","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#ascii-version_7","title":"ASCII Version","text":"Text Only<pre><code>                     MAIN REPO\n                         \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u25bc                \u25bc                \u25bc\n   BACKUP 1         BACKUP 2         BACKUP 3\n   Server A         Server B         Comrade C\n        \u2502                \u2502                \u2502\n        \u2502                \u2502                \u2502\n   \"git push        \"git push        \"git push\n    backup1\"         backup2\"         backup3\"\n</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#mermaid-version_7","title":"Mermaid Version","text":"<pre><code>graph TD\n    A[Main Repository] --&gt;|git remote add backup1| B[Backup Server 1]\n    A --&gt;|git remote add backup2| C[Backup Server 2]\n    A --&gt;|git remote add backup3| D[Trusted Comrade]\n    E[Daily Backup Script] --&gt; F[git push --all backup1]\n    E --&gt; G[git push --all backup2]\n    E --&gt; H[git push --all backup3]\n    I[If Raid Happens] --&gt; J[Any Backup Can Restore]</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#quick-reference-visual-command-flow","title":"Quick Reference: Visual Command Flow","text":"Text Only<pre><code>STATUS \u2500\u2500\u25b6 ADD \u2500\u2500\u25b6 COMMIT \u2500\u2500\u25b6 PUSH\n  \u2502        \u2502         \u2502         \u2502\n  \u25bc        \u25bc         \u25bc         \u25bc\nWhat's   Select    Save      Share\nchanged  changes   locally   with all\n\nPULL \u2500\u2500\u25b6 WORK \u2500\u2500\u25b6 REPEAT\n  \u2502        \u2502         \u2502\n  \u25bc        \u25bc         \u25bc\nGet      Make      Daily\nlatest   changes   cycle\n</code></pre>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/visual-git-workflows/#using-these-diagrams","title":"Using These Diagrams","text":"<ol> <li>Print and Post: Put these on the wall during training</li> <li>Customize: Adapt workflows to your organization</li> <li>Teach: Use visual + verbal explanation together</li> <li>Practice: Walk through diagrams while doing commands</li> </ol> <p>Remember: Different comrades learn differently. These visuals complement hands-on practice and written guides.</p> <p>\"A picture is worth a thousand words, but a good diagram is worth a thousand commits.\"</p> <p>Ready to practice? Try Your First Revolutionary Commit</p> <p>Teaching others? Use our Git Workshop Template with these visuals</p> <p>Backlinks:</p>","tags":["git","visual","workflows","diagrams","reference"]},{"location":"learn/git-basics/why-revolutionaries-need-git/","title":"Why Revolutionaries Need Git","text":"","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#the-material-conditions","title":"The Material Conditions","text":"<p>Your organization faces real threats: - State surveillance is increasing - Organizer burnout is epidemic - Institutional knowledge walks out the door - Corporate platforms control your data - Decision-making lacks transparency</p> <p>Git addresses each of these material conditions.</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#the-five-revolutionary-benefits","title":"The Five Revolutionary Benefits","text":"","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#1-breaking-the-single-point-of-failure","title":"1. Breaking the Single Point of Failure","text":"<p>Current Reality: Sarah has all the passwords. Sarah burns out. Organization paralyzed.</p> <p>With Git: Everyone has complete history. Sarah leaves, work continues. Knowledge persists.</p> <p>Real Example:  Portland Tenants Union, 2023. Lead organizer raided by FBI. Because they used Git: - All campaign plans preserved - Meeting history intact - Work continued without interruption - New coordinators onboarded in days, not months</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#2-surveillance-resistance","title":"2. Surveillance Resistance","text":"<p>Current Reality:  - Google reads your docs - Discord logs everything forever - Zoom records your meetings - One subpoena exposes years of organizing</p> <p>With Git: - You control the infrastructure - Distributed copies prevent total seizure - Encrypted repositories - No corporate intermediary</p> <p>Real Example: Atlanta Forest Defenders, 2024. City subpoenaed Google for all docs. Organizations using Git: - Sensitive plans already encrypted locally - Public information separated from private - Continued organizing despite surveillance</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#3-institutional-memory-that-lasts","title":"3. Institutional Memory That Lasts","text":"<p>Current Reality: - \"Why did we stop doing phone trees?\" \"Ask Mike... oh, he moved.\" - \"What happened with that campaign?\" \"Check Discord from 2022... somewhere.\" - New members ask questions answered 100 times before</p> <p>With Git: Bash<pre><code>git log --grep=\"phone tree\"\n# Shows: 2019 attempt, why it failed, lessons learned\n\ngit blame campaign-strategy.md\n# Shows: Who made each decision and when\n\ngit show 2022-rent-strike\n# Shows: Complete campaign history\n</code></pre></p> <p>Real Example: Kansas Socialist Book Club discovered through Git that they'd tried the same failed tactic three times over 5 years. The fourth time, they searched Git first, found the failure analysis, tried something different, and won.</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#4-democratic-centralism-in-practice","title":"4. Democratic Centralism in Practice","text":"<p>Current Reality: - Decisions made in meetings, forgotten by next week - Minority positions vanish from record - \"Unity of action\" becomes \"whoever remembers\" - No accountability for decisions</p> <p>With Git: - Every proposal preserved in branches - Discussion tracked in commits - Votes recorded in merges - Minority positions preserved for history</p> <p>Real Example: Bash<pre><code># Democratic process in Git:\ngit checkout -b proposals/may-day-action\n# Freedom of discussion - everyone can see and comment\n\ngit log --oneline proposals/may-day-action\n# Track how proposal evolved through debate\n\ngit merge proposals/may-day-action\n# Unity of action - decision implemented\n\ngit tag v2024.05.01-may-day-decision\n# Historical record of what was decided\n</code></pre></p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#5-scalable-without-hierarchy","title":"5. Scalable Without Hierarchy","text":"<p>Current Reality: - Small group: Works fine with informal systems - Growing: Need \"tech person\" (hierarchy begins) - Large: Dependence on specialized roles - Result: Technical knowledge becomes power</p> <p>With Git: - Same system works for 5 or 500 - Knowledge distributed by design - No special technical priest class - Every organizer can contribute</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#concrete-problems-git-solves","title":"Concrete Problems Git Solves","text":"","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#the-what-did-we-decide-problem","title":"The \"What Did We Decide?\" Problem","text":"<p>Without Git: \"I think we voted to do X, but maybe it was Y? Check the notes... where are the notes?\"</p> <p>With Git:  Bash<pre><code>git log --grep=\"DECISION\" meetings/\n# Every decision, with context, forever\n</code></pre></p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#the-who-has-access-problem","title":"The \"Who Has Access?\" Problem","text":"<p>Without Git: \"Email Sarah for the password. Sarah's on vacation. Wait two weeks.\"</p> <p>With Git: Clone the repository. You have everything. Start working.</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#the-version-chaos-problem","title":"The \"Version Chaos\" Problem","text":"<p>Without Git:  - RentStrikePlan_v2_FINAL.doc - RentStrikePlan_v2_FINAL_REALLY.doc - RentStrikePlan_v2_FINAL_USE_THIS_ONE.doc</p> <p>With Git: One file. Complete history. No confusion.</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#the-onboarding-nightmare-problem","title":"The \"Onboarding Nightmare\" Problem","text":"<p>Without Git:  - Week 1: \"Talk to five different people\" - Week 2: \"Read through Discord history\" - Month 2: \"Starting to understand how things work\"</p> <p>With Git: - Day 1: Clone repo, read README - Day 2: Review recent commits, understand current work - Day 3: Submit first proposal using templates - Week 1: Fully productive</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#the-security-through-obscurity-problem","title":"The \"Security Through Obscurity\" Problem","text":"<p>Without Git: \"It's secure because it's in a private Google Doc\" Google employee laughs in surveillance</p> <p>With Git:  - L0: Public information, share freely - L1: Member information, encrypted repos - L2: Sensitive operations, air-gapped systems - Clear security model, not wishful thinking</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#why-git-specifically","title":"Why Git Specifically?","text":"","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#not-just-any-version-control","title":"Not Just Any Version Control","text":"<p>Git is: - Distributed: Everyone has full copy (resilience) - Free: No licenses, no corporate control - Proven: 20 years of development - Universal: Every programmer knows it (huge volunteer pool) - Extensible: Grows with your needs</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#built-for-collaboration-without-hierarchy","title":"Built for Collaboration Without Hierarchy","text":"<p>Git assumes: - Multiple people working simultaneously - No single authority - Conflicts need resolution - History matters - Transparency by default</p> <p>These aren't features added to Git. They're Git's foundation. Perfect for democratic organizing.</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#common-objections-addressed","title":"Common Objections Addressed","text":"","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#were-too-small-for-git","title":"\"We're Too Small for Git\"","text":"<p>If you're big enough to: - Take meeting minutes - Make decisions - Want to remember things - Care about security</p> <p>You're big enough for Git.</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#our-members-arent-technical","title":"\"Our Members Aren't Technical\"","text":"<p>Your members use: - Smartphones (complex computers) - Social media (distributed systems) - Email (internet protocols) - Google Docs (real-time collaboration)</p> <p>They're already technical. Git is easier than Facebook.</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#we-dont-have-time","title":"\"We Don't Have Time\"","text":"<p>Time spent this week learning Git: - 5 hours</p> <p>Time spent this month looking for lost documents: - 10 hours</p> <p>Time spent this year re-explaining decisions: - 100 hours</p> <p>Time lost when key organizer burns out: - Infinite</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#git-seems-overkill","title":"\"Git Seems Overkill\"","text":"<p>Is it overkill to: - Remember your decisions? - Protect against surveillance? - Preserve institutional knowledge? - Enable democratic participation? - Build sustainable infrastructure?</p> <p>If yes, keep using Google Docs. If no, Git awaits.</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#the-revolutionary-case","title":"The Revolutionary Case","text":"<p>Git embodies the world we're building: - Distributed power (not centralized) - Collective ownership (not private property) - Transparent process (not hidden machinations) - Historical memory (not eternal present) - Democratic participation (not technical hierarchy)</p> <p>Using Git isn't just practical. It's prefigurative politics.</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#your-material-benefits-start-tomorrow","title":"Your Material Benefits Start Tomorrow","text":"<p>Tomorrow with Git: - Your meeting minutes are permanent - Your decisions have context - Your knowledge persists - Your organizing continues despite individual changes</p> <p>Next Month with Git: - New members onboard themselves - Old decisions inform new ones - Security practices embedded - Burnout reduced through distribution</p> <p>Next Year with Git: - Institutional memory stronger than any individual - Surveillance resistance built in - Democratic practices encoded - Technical knowledge democratized</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/git-basics/why-revolutionaries-need-git/#the-choice","title":"The Choice","text":"<p>Continue with: - Corporate surveillance platforms - Knowledge in individual heads - Decisions lost to time - Hierarchical technical dependence</p> <p>Or build: - Infrastructure you control - Collective memory that persists - Transparent democratic process - Distributed technical capacity</p> <p>The revolution needs infrastructure. Git is infrastructure we control.</p> <p>\"The master's tools will never dismantle the master's house. So we built our own tools.\"</p> <p>Next: Your Git Learning Path \u2192</p> <p>Backlinks:</p>","tags":["git","explanation","organizing","infrastructure","material-analysis"]},{"location":"learn/mkdocs/","title":"MkDocs Setup Guide","text":"<p>This guide explains how our MkDocs documentation system is configured and how to use it effectively.</p>"},{"location":"learn/mkdocs/#quick-start","title":"Quick Start","text":"<p>Our documentation uses MkDocs Material with custom configurations for:</p> <ul> <li>\ud83c\udfa8 Custom theming and styling</li> <li>\ud83d\udcac Giscus comments integration</li> <li>\ud83d\udcf1 Progressive Web App (offline support)</li> <li>\ud83d\udd0d Enhanced search and navigation</li> <li>\ud83d\udccb Comprehensive validation system</li> </ul>"},{"location":"learn/mkdocs/#documentation-structure","title":"Documentation Structure","text":""},{"location":"learn/mkdocs/#core-setup-guides","title":"Core Setup Guides","text":"<ul> <li>Getting Started with MkDocs - Basic setup and configuration</li> </ul> <ul> <li>Validation System - Prevent configuration errors</li> </ul>"},{"location":"learn/mkdocs/#feature-implementation","title":"Feature Implementation","text":"<ul> <li>Giscus Comments - GitHub Discussions integration</li> <li>Offline Support - PWA functionality</li> </ul>"},{"location":"learn/mkdocs/#design-reference","title":"Design Reference","text":""},{"location":"learn/mkdocs/#additional-resources","title":"Additional Resources","text":"<ul> <li>Analytics &amp; Privacy - Privacy-respecting analytics</li> </ul>"},{"location":"learn/mkdocs/#key-configuration-files","title":"Key Configuration Files","text":"<ol> <li>mkdocs.yml - Main configuration file</li> <li>justfile - Task automation commands</li> <li>dependencies/requirements.txt - Python dependencies</li> <li>overrides/ - Custom theme templates</li> </ol>"},{"location":"learn/mkdocs/#common-tasks","title":"Common Tasks","text":""},{"location":"learn/mkdocs/#development","title":"Development","text":"Bash<pre><code># Start development server\njust serve\n\n# Run validation checks\njust validate\n\n# Build documentation\njust build\n</code></pre>"},{"location":"learn/mkdocs/#customization","title":"Customization","text":"<ul> <li>Modify colors in <code>docs/assets/css/</code></li> <li>Override templates in <code>overrides/</code></li> <li>Configure features in <code>mkdocs.yml</code></li> </ul>"},{"location":"learn/mkdocs/#getting-help","title":"Getting Help","text":"<ul> <li>Check individual guides for detailed instructions</li> <li>Run <code>just validate</code> to catch configuration errors</li> <li>See validation guide for troubleshooting</li> </ul>"},{"location":"learn/mkdocs/mkdocs/","title":"MkDocs Configuration Guide","text":"<p>This guide explains our MkDocs setup, configuration, and how to use it effectively.</p>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#overview","title":"Overview","text":"<p>Our documentation uses MkDocs Material - a powerful, feature-rich theme that provides: - Modern, responsive design - Advanced navigation features - Built-in search functionality - Extensive customization options</p>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#project-structure","title":"Project Structure","text":"Text Only<pre><code>mkdocs/\n\u251c\u2500\u2500 mkdocs.yml           # Main configuration file\n\u251c\u2500\u2500 docs/                # Documentation content\n\u2502   \u251c\u2500\u2500 index.md        # Homepage\n\u2502   \u251c\u2500\u2500 assets/         # CSS, JS, images\n\u2502   \u2514\u2500\u2500 website/        # This documentation\n\u251c\u2500\u2500 overrides/          # Theme customizations\n\u251c\u2500\u2500 dependencies/\n\u2502   \u251c\u2500\u2500 requirements.txt  # Python dependencies\n\u2502   \u2514\u2500\u2500 package.json     # Node.js dependencies\n\u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 pyproject.toml   # Python tooling config\n\u2502   \u2514\u2500\u2500 .prettierrc.json # Code formatting config\n\u251c\u2500\u2500 justfile           # Task automation\n\u2514\u2500\u2500 tests/             # Validation scripts\n</code></pre>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#key-configuration-mkdocsyml","title":"Key Configuration (mkdocs.yml)","text":"<p>Our MkDocs configuration includes:</p>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#site-information","title":"Site Information","text":"YAML<pre><code>site_name: DRUIDS Wiki\nsite_description: Democratic Revolutionary Unified Information &amp; Documentation System\nsite_url: https://druids.kssocialistbookclub.com\nrepo_url: https://github.com/ks-sbc/DRUIDS\n</code></pre>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#theme-configuration","title":"Theme Configuration","text":"<ul> <li>Theme: Material with custom overrides</li> <li>Color Scheme: Dark mode with custom colors</li> <li>Features: 20+ enabled features for enhanced UX</li> </ul>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#plugins","title":"Plugins","text":"<ul> <li>Search: Built-in search functionality</li> <li>Obsidian: Wikilinks and Obsidian compatibility</li> <li>Git Revision Date: Shows last update times</li> <li>Tags: Content tagging system</li> </ul>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#quick-start-commands","title":"Quick Start Commands","text":"<p>Using our <code>justfile</code> task runner:</p> Bash<pre><code># Install dependencies\njust init\n\n# Start development server\njust serve\n\n# Run validation checks\njust validate\n\n# Build site\njust build\n\n# Deploy to GitHub Pages\njust deploy\n</code></pre>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#working-with-content","title":"Working with Content","text":"","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#creating-pages","title":"Creating Pages","text":"<ol> <li>Add Markdown files to the <code>docs/</code> directory</li> <li>Use YAML frontmatter for metadata</li> <li>Link pages using standard Markdown or wikilinks</li> <li>Organize content in logical folders</li> </ol>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#markdown-features","title":"Markdown Features","text":"<p>Our setup supports all standard Markdown plus: - Admonitions for callout boxes - Code blocks with syntax highlighting - Tables with advanced formatting - Task lists for checklists - Footnotes for references - Abbreviations with tooltips</p> <p>See the Features Demo for examples.</p>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#development-workflow","title":"Development Workflow","text":"","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#1-local-development","title":"1. Local Development","text":"Bash<pre><code># Start dev server with live reload\njust serve\n\n# Open http://localhost:8000\n</code></pre>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#2-making-changes","title":"2. Making Changes","text":"<ul> <li>Edit Markdown files in <code>docs/</code></li> <li>Modify CSS in <code>docs/assets/css/</code></li> <li>Override templates in <code>overrides/</code></li> </ul>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#3-validation","title":"3. Validation","text":"Bash<pre><code># Run all checks before committing\njust validate\n\n# Specific validations\njust validate-yaml\njust validate-blog\n</code></pre>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#4-building","title":"4. Building","text":"Bash<pre><code># Build site\njust build\n\n# Build and serve locally\njust build-serve\n</code></pre>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#features-overview","title":"Features Overview","text":"","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#navigation-system","title":"Navigation System","text":"<ul> <li>Instant loading with prefetch</li> <li>Sticky navigation tabs</li> <li>Collapsible sections</li> <li>Breadcrumb navigation</li> <li>Table of contents integration</li> </ul> <p>See Navigation Guide for setup details.</p>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#customization","title":"Customization","text":"<ul> <li>Custom color schemes</li> <li>Typography settings</li> <li>Component styling</li> <li>Template overrides</li> </ul>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#advanced-features","title":"Advanced Features","text":"<ul> <li>Giscus Comments - GitHub Discussions integration</li> <li>Offline Support - PWA functionality</li> <li>Versioning - Multi-version documentation</li> <li>Search - Built-in full-text search</li> </ul>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#best-practices","title":"Best Practices","text":"","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#content-organization","title":"Content Organization","text":"<ul> <li>Use clear, descriptive filenames</li> <li>Group related content in folders</li> <li>Create index pages for sections</li> <li>Maintain consistent navigation structure</li> </ul>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#writing-guidelines","title":"Writing Guidelines","text":"<ul> <li>Write clear, concise content</li> <li>Use headings for structure</li> <li>Include code examples</li> <li>Add visual elements (diagrams, screenshots)</li> </ul>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#performance","title":"Performance","text":"<ul> <li>Optimize images before adding</li> <li>Use lazy loading for large assets</li> <li>Enable caching for static content</li> <li>Monitor build times</li> </ul>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#build-errors","title":"Build Errors","text":"<ul> <li>Check YAML syntax in frontmatter</li> <li>Validate Markdown formatting</li> <li>Ensure all linked files exist</li> <li>Review plugin configurations</li> </ul>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#styling-issues","title":"Styling Issues","text":"<ul> <li>Clear browser cache</li> <li>Check CSS file paths</li> <li>Verify theme overrides</li> <li>Test in multiple browsers</li> </ul> <p>See Validation Guide for comprehensive testing.</p>","tags":["mkdocs","configuration","setup"]},{"location":"learn/mkdocs/mkdocs/#next-steps","title":"Next Steps","text":"<ol> <li>Review the Test Features</li> <li>Customize using the CSS Aesthetic Reference</li> <li>Set up Giscus Comments</li> <li>Enable Offline Support</li> </ol> <p>For questions, check our validation system or file an issue on GitHub.</p> <p>Backlinks:</p>","tags":["mkdocs","configuration","setup"]},{"location":"learn/tutorials/escaping-google-surveillance/","title":"Escaping Google's Surveillance: Migrating Your Organization's Data","text":"","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#the-material-reality","title":"The Material Reality","text":"<p>Google isn't your friend. They're a surveillance corporation that actively collaborates with the state:</p> <ul> <li>Project Maven: Google builds AI for military drone strikes</li> <li>Keyword Warrants: Police get data on everyone who searched specific terms</li> <li>Geofence Warrants: Everyone at a protest identified through location data</li> <li>Real Example: Inauguration protesters' entire Google accounts seized, years of organizing exposed</li> </ul> <p>Every document in Google Drive is a future evidence exhibit. Every shared folder is a network map for investigators. Every comment thread is a recorded conversation.</p> <p>This isn't paranoia. It's pattern recognition.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#before-you-start","title":"Before You Start","text":"","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#what-youll-need","title":"What You'll Need","text":"<ul> <li> Computer with Git installed (we'll help with this)</li> <li> List of all Google Drives/folders your org uses</li> <li> 2-3 hours of focused time</li> <li> Trusted comrades to verify the migration</li> <li> Determination to break free from corporate surveillance</li> </ul>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#security-considerations","title":"Security Considerations","text":"<p>DO NOT do this migration: - On organization wifi - From a personal Google account linked to your name - Without VPN if possible - While leaving browser logged into Google afterward</p> <p>DO this migration: - From a secure location - Using dedicated browser profile - With comrades aware it's happening - After backing up critical documents elsewhere first</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#step-1-inventory-your-digital-prison","title":"Step 1: Inventory Your Digital Prison","text":"<p>Before escaping, map what you're liberating:</p> Markdown<pre><code># Organization Data Inventory\n\n## Google Drive Folders\n- [ ] Meeting Minutes (2020-2025)\n- [ ] Campaign Planning Documents  \n- [ ] Member Resources\n- [ ] Financial Records (handle specially)\n- [ ] Graphics and Flyers\n\n## Google Docs Being Actively Edited\n- [ ] Current Campaign Strategy\n- [ ] Upcoming Event Planning\n- [ ] Active Proposals\n\n## Shared With External Organizations\n- [ ] Coalition Documents\n- [ ] Joint Statements\n</code></pre> <p>Reality Check: You probably have more than you think. Check: - \"Shared with me\" section - Trash (Google keeps deleted files) - Version history of sensitive docs - Comments that might contain real names</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#step-2-download-your-data","title":"Step 2: Download Your Data","text":"","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#method-1-google-takeout-complete-archive","title":"Method 1: Google Takeout (Complete Archive)","text":"<p>Best for comprehensive liberation:</p> <ol> <li>Go to takeout.google.com</li> <li>Click \"Deselect all\"</li> <li>Select ONLY \"Drive\"</li> <li>Click \"Next step\"</li> <li>Choose:</li> <li>Export once</li> <li>File type: .zip</li> <li>Size: 2GB chunks (easier to handle)</li> <li>Create export</li> <li>Wait for email (can take hours for large archives)</li> </ol> <p>Warning: This downloads EVERYTHING, including: - Files others shared with you - Revision history - Comments with potential real names - Deleted items in trash</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#method-2-selective-download-recommended","title":"Method 2: Selective Download (Recommended)","text":"<p>More secure, gives you control:</p> <ol> <li>Open Google Drive</li> <li>Navigate to each folder</li> <li>Right-click \u2192 Download</li> <li>Creates .zip with folder structure preserved</li> <li>Repeat for each organizational folder</li> </ol> <p>Pro tip: Download in chunks to avoid overwhelming your system or triggering Google's suspicion.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#what-about-google-docs","title":"What About Google Docs?","text":"<p>Google's proprietary formats need conversion:</p> <ul> <li>Google Docs \u2192 Downloads as .docx (Microsoft Word)</li> <li>Google Sheets \u2192 Downloads as .xlsx (Excel)  </li> <li>Google Slides \u2192 Downloads as .pptx (PowerPoint)</li> </ul> <p>You'll convert these to Markdown later for Git compatibility.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#step-3-cleanse-the-data","title":"Step 3: Cleanse the Data","text":"<p>Before importing to Git, remove surveillance traces:</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#remove-metadata","title":"Remove Metadata","text":"<p>Every file contains hidden data about you:</p> Bash<pre><code># Install metadata removal tool\nsudo apt install mat2  # Debian/Ubuntu\nbrew install mat2     # Mac\n\n# Clean all files in directory\nmat2 --inplace downloaded-files/*\n\n# Verify metadata removed\nmat2 --show cleaned-file.docx\n</code></pre>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#check-for-exposed-names","title":"Check for Exposed Names","text":"<p>Search for accidental identity leaks:</p> Bash<pre><code># Search for common name patterns\ngrep -r \"First Last\" downloaded-files/\ngrep -r \"@gmail.com\" downloaded-files/\ngrep -r \"phone:\" downloaded-files/\n</code></pre> <p>Replace any found with pseudonyms before proceeding.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#convert-to-markdown","title":"Convert to Markdown","text":"<p>For Git compatibility and future-proofing:</p> Bash<pre><code># Install pandoc for conversion\nsudo apt install pandoc\n\n# Convert all .docx files\nfor file in *.docx; do\n    pandoc \"$file\" -t markdown -o \"${file%.docx}.md\"\ndone\n</code></pre>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#step-4-initialize-your-liberation-repository","title":"Step 4: Initialize Your Liberation Repository","text":"<p>Time to create your organization's new home:</p> Bash<pre><code># Create repository directory\nmkdir ~/organizing/our-org-docs\ncd ~/organizing/our-org-docs\n\n# Initialize Git repository\ngit init\n\n# Create basic structure\nmkdir -p {meetings,campaigns,resources,graphics}\n\n# Create README\necho \"# [Organization Name] Liberation Archive\" &gt; README.md\necho \"Escaped from Google's surveillance: $(date)\" &gt;&gt; README.md\n</code></pre>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#step-5-import-your-liberated-data","title":"Step 5: Import Your Liberated Data","text":"<p>Move your cleaned files into the new structure:</p> Bash<pre><code># Move meeting minutes\nmv ~/Downloads/cleaned-export/meetings/* ./meetings/\n\n# Move campaign docs\nmv ~/Downloads/cleaned-export/campaigns/* ./campaigns/\n\n# Move resources\nmv ~/Downloads/cleaned-export/resources/* ./resources/\n</code></pre> <p>Organize thoughtfully - this is your chance to improve on Google's chaos.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#step-6-your-first-revolutionary-commit","title":"Step 6: Your First Revolutionary Commit","text":"<p>This moment matters. You're not just saving files - you're practicing digital self-determination:</p> Bash<pre><code># Configure Git with pseudonym\ngit config user.name \"Comrade 102\"\ngit config user.email \"comrade102@protonmail.com\"\n\n# Stage all liberated documents\ngit add .\n\n# Make your liberation commit\ngit commit -m \"Liberation from Google surveillance complete\n\n- Migrated 5 years of meeting minutes\n- Preserved campaign documentation  \n- Removed all metadata and real names\n- Began practice of revolutionary infrastructure\n\nNo more corporate surveillance. No more data harvesting.\nOur organizing, our control.\n\nDeath to digital landlords! \ud83d\udea9\"\n\n# View your revolutionary history\ngit log\n</code></pre>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#step-7-verification-and-cleanup","title":"Step 7: Verification and Cleanup","text":"","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#verify-migration-success","title":"Verify Migration Success","text":"<p>With trusted comrades, confirm:</p> <ul> <li> All critical documents transferred</li> <li> No real names in committed files</li> <li> Folder structure makes sense</li> <li> Git history shows your liberation commit</li> </ul>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#destroy-the-colonial-records","title":"Destroy the Colonial Records","text":"<p>After verification:</p> <ol> <li>Download your Google Takeout archive (keep encrypted backup)</li> <li>Delete files from Google Drive</li> <li>Empty Google Drive trash</li> <li>Remove Google permissions from browser</li> <li>Consider account deletion timeline</li> </ol> <p>Warning: Google keeps deleted data for up to 60 days. Plan accordingly.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#common-problems-and-solutions","title":"Common Problems and Solutions","text":"","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#the-download-is-huge","title":"\"The download is huge!\"","text":"<p>Google bloats exports. Focus on essential organizing documents first. Graphics and videos can migrate separately.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#conversion-broke-formatting","title":"\"Conversion broke formatting!\"","text":"<p>Markdown is simpler than Google Docs. This is good - fancy formatting was corporate distraction. Content matters, not fonts.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#found-real-names-after-committing","title":"\"Found real names after committing!\"","text":"<p>See our guide: Help, I Committed Sensitive Data!</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#comrades-resist-leaving-google","title":"\"Comrades resist leaving Google!\"","text":"<p>Normal. Share this guide. Show them RICO charges. Demonstrate the alternative. Change takes time.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#what-youve-accomplished","title":"What You've Accomplished","text":"<p>You've just: - Removed organizational data from corporate surveillance - Taken first step toward infrastructural autonomy - Practiced security culture concretely - Created foundation for democratic centralism</p> <p>Your documents are no longer evidence. They're revolutionary resources under collective control.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#next-steps","title":"Next Steps","text":"<ol> <li>Learn Git Basics: Your First Revolutionary Commit</li> <li>Set Up Security: Pseudonym Discipline in Practice</li> <li>Organize Workflows: Meeting Workflows That Work</li> <li>Break Other Chains: Breaking Discord's Chains</li> </ol>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/escaping-google-surveillance/#remember","title":"Remember","text":"<p>Google made it easy because surveillance is profitable. DRUIDS requires discipline because liberation takes work.</p> <p>Every commit is a blow against digital feudalism. Every push spreads revolutionary infrastructure.</p> <p>\"The master's tools will never dismantle the master's house.\" - Audre Lorde</p> <p>But we can steal the tools, learn their craft, and build our own damn house.</p> <p>Welcome to revolutionary infrastructure, comrade.</p>","tags":["migration","google-docs","surveillance","organizing","liberation"]},{"location":"learn/tutorials/onboarding-without-burnout/","title":"Onboarding New Members Without Burnout","text":"","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#overview","title":"Overview","text":"<p>Traditional onboarding burns out experienced organizers through repetitive explanations, inconsistent information, and emotional labor. This guide shows how to create systematic onboarding that welcomes new comrades effectively while preserving organizer capacity.</p>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#prerequisites","title":"Prerequisites","text":"<ul> <li>DRUIDS repository with basic structure</li> <li>Templates for common documents</li> <li>2-3 hours for initial setup</li> <li>Commitment to systematic vs heroic onboarding</li> </ul>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#basic-onboarding-system","title":"Basic Onboarding System","text":"","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#1-create-self-service-onboarding-path","title":"1. Create Self-Service Onboarding Path","text":"<p>Stop repeating yourself. Build once, welcome many.</p> Bash<pre><code># Create onboarding structure\nmkdir -p docs/onboarding/{week-1,week-2,week-3}\ntouch docs/onboarding/README.md\ntouch docs/onboarding/checklist.md\n</code></pre> <p>docs/onboarding/README.md: Markdown<pre><code># Welcome to [Organization Name]!\n\nYou're joining a revolutionary organization committed to [mission].\nThis guide helps you get oriented without overwhelming anyone.\n\n## Your First Day\n1. Read our [Principles &amp; Unity](principles.md){#f945a0468423c10b67fcf7c0f3e1898e}\n2. Set up your [DRUIDS access](druids-setup.md){#76e65054760d9a0e1bd3b4925f161d0b}\n3. Introduce yourself in [introductions](introductions.md){#fd1490983ea7d64af58509515cc4ab9a}\n\n## Your First Week\nFollow the [Week 1 Checklist](checklist.md){#c8e21a0ef5d3e43b66b2ea38a8f0381d}\n\n## Questions?\n- Technical: Check [FAQs](faqs.md){#46a0edbbd3de7ca48d659067f8c0cc15} first\n- Political: Attend Thursday education\n- Personal: Your buddy is **[assigned buddy]**\n\nRemember: Asking questions after reading docs = good\nAsking questions instead of reading docs = burnout\n</code></pre></p>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#2-implement-buddy-system-not-mentor-system","title":"2. Implement Buddy System (Not Mentor System)","text":"<p>Distribute emotional labor, prevent hero dynamics.</p> Bash<pre><code># Track buddy assignments\ntouch members/buddy-rotation.md\n</code></pre> <p>members/buddy-rotation.md: Markdown<pre><code># Buddy System Rotation\n\n## Current Assignments\n| New Member | Buddy | Started | Notes |\n|------------|-------|---------|-------|\n| Alex K. | Sam L. | 2024-03-15 | Week 2 |\n| Jordan P. | River B. | 2024-03-20 | Just started |\n\n## Rotation Schedule\n- Each buddy takes ONE new member at a time\n- 3-week commitment\n- Minimum 1 month break between assignments\n- Track burnout: anyone can skip rotation\n\n## Buddy Responsibilities (LIMITED!)\n- [ ] Weekly 30-min check-in\n- [ ] Answer questions AFTER they read docs\n- [ ] Connect to relevant working groups\n- [ ] Flag any concerns to membership\n\nNOT RESPONSIBLE FOR:\n- Daily availability\n- Teaching everything\n- Emotional counseling\n- Making them feel included (that's collective work)\n</code></pre></p>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#3-automate-routine-communications","title":"3. Automate Routine Communications","text":"<p>Stop writing the same emails.</p> Bash<pre><code># Create template emails\nmkdir -p templates/onboarding/emails\n</code></pre> <p>templates/onboarding/emails/welcome.md: Markdown<pre><code>Subject: Welcome to [Org] - Your First Steps\n\nComrade [Name],\n\nWelcome! We're excited you're joining our struggle for [mission].\n\n**Your Next Steps:**\n1. Access your onboarding guide: [link to repo]\n2. Read Week 1 materials (2 hours total)\n3. Your buddy [Buddy Name] will reach out within 48 hours\n\n**Key Dates:**\n- Thursday 7pm: Political Education (optional but encouraged)\n- Sunday 3pm: New Member Orientation\n- [Date]: Next General Meeting\n\n**Important:** Our onboarding is self-directed. The repository has \nanswers to 90% of first questions. Reading first = respecting capacity.\n\nIn solidarity,\n[Membership Secretary]\n\nP.S. If you have access issues, email tech@[org].org\n</code></pre></p>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#4-progressive-security-clearance","title":"4. Progressive Security Clearance","text":"<p>Don't overwhelm with security, build trust gradually.</p> Bash<pre><code># Create security levels docs\nmkdir -p docs/onboarding/security-levels\n</code></pre> <p>Week 1: Basic Security Markdown<pre><code>## Week 1 Security Practices\n\n### Required:\n- [ ] Use Signal for communications\n- [ ] Create organizing pseudonym\n- [ ] Read [Basic Security](basic.md){#9f043c0d0d320a105e644fbd6515da42}\n\n### Not Yet:\n- Don't worry about encryption beyond Signal\n- No access to sensitive campaign info yet\n- Focus on building trust first\n</code></pre></p> <p>Week 3: Enhanced Security Markdown<pre><code>## Week 3 Security Practices\n\nAfter demonstrating consistency:\n- [ ] GPG key generation workshop\n- [ ] Metadata hygiene training  \n- [ ] Access to L1 repositories\n\nRemember: Security is collective practice, not individual paranoia\n</code></pre></p>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#advanced-onboarding-systems","title":"Advanced Onboarding Systems","text":"","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#1-self-service-learning-portal","title":"1. Self-Service Learning Portal","text":"<p>Create a fully automated onboarding system that requires zero hand-holding.</p> Bash<pre><code># Create interactive onboarding portal\nmkdir -p onboarding-portal/{modules,progress,resources}\n</code></pre> <p>Save as <code>onboarding-portal/index.html</code>: HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;New Member Portal&lt;/title&gt;\n    &lt;style&gt;\n        .module { border: 1px solid #ccc; padding: 10px; margin: 10px; }\n        .completed { background-color: #90EE90; }\n        .locked { opacity: 0.5; pointer-events: none; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to [Organization] Self-Service Portal&lt;/h1&gt;\n\n    &lt;div id=\"progress\"&gt;\n        &lt;h2&gt;Your Progress: &lt;span id=\"percent\"&gt;0&lt;/span&gt;%&lt;/h2&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"modules\"&gt;\n        &lt;div class=\"module\" data-week=\"1\"&gt;\n            &lt;h3&gt;Week 1: Foundation&lt;/h3&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;input type=\"checkbox\" onchange=\"updateProgress()\"&gt; Read principles&lt;/li&gt;\n                &lt;li&gt;&lt;input type=\"checkbox\" onchange=\"updateProgress()\"&gt; Set up DRUIDS&lt;/li&gt;\n                &lt;li&gt;&lt;input type=\"checkbox\" onchange=\"updateProgress()\"&gt; Join Signal&lt;/li&gt;\n                &lt;li&gt;&lt;input type=\"checkbox\" onchange=\"updateProgress()\"&gt; Complete security basics&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"module locked\" data-week=\"2\"&gt;\n            &lt;h3&gt;Week 2: Integration&lt;/h3&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;input type=\"checkbox\" onchange=\"updateProgress()\"&gt; Attend first meeting&lt;/li&gt;\n                &lt;li&gt;&lt;input type=\"checkbox\" onchange=\"updateProgress()\"&gt; Shadow working group&lt;/li&gt;\n                &lt;li&gt;&lt;input type=\"checkbox\" onchange=\"updateProgress()\"&gt; Complete skills assessment&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"module locked\" data-week=\"3\"&gt;\n            &lt;h3&gt;Week 3: Contribution&lt;/h3&gt;\n            &lt;ul&gt;\n                &lt;li&gt;&lt;input type=\"checkbox\" onchange=\"updateProgress()\"&gt; Take first task&lt;/li&gt;\n                &lt;li&gt;&lt;input type=\"checkbox\" onchange=\"updateProgress()\"&gt; Submit first PR&lt;/li&gt;\n                &lt;li&gt;&lt;input type=\"checkbox\" onchange=\"updateProgress()\"&gt; Help newer member&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        function updateProgress() {\n            const total = document.querySelectorAll('input[type=\"checkbox\"]').length;\n            const checked = document.querySelectorAll('input[type=\"checkbox\"]:checked').length;\n            const percent = Math.round((checked / total) * 100);\n            document.getElementById('percent').textContent = percent;\n\n            // Unlock next module when previous is complete\n            const modules = document.querySelectorAll('.module');\n            modules.forEach((module, index) =&gt; {\n                const inputs = module.querySelectorAll('input[type=\"checkbox\"]');\n                const moduleChecked = module.querySelectorAll('input[type=\"checkbox\"]:checked');\n\n                if (inputs.length === moduleChecked.length &amp;&amp; index &lt; modules.length - 1) {\n                    modules[index + 1].classList.remove('locked');\n                    module.classList.add('completed');\n                }\n            });\n\n            // Save progress to localStorage\n            localStorage.setItem('onboarding-progress', percent);\n        }\n\n        // Load saved progress\n        window.onload = function() {\n            const saved = localStorage.getItem('onboarding-progress');\n            if (saved) {\n                document.getElementById('percent').textContent = saved;\n            }\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#2-automated-check-in-bot","title":"2. Automated Check-in Bot","text":"<p>Stop manually checking on new members.</p> <p>Save as <code>scripts/onboarding-bot.py</code>: Python<pre><code>#!/usr/bin/env python3\n\"\"\"Automated onboarding check-in bot\"\"\"\n\nimport json\nimport datetime\nfrom pathlib import Path\n\nclass OnboardingBot:\n    def __init__(self):\n        self.members_file = Path(\"members/onboarding-status.json\")\n        self.load_members()\n\n    def load_members(self):\n        if self.members_file.exists():\n            with open(self.members_file) as f:\n                self.members = json.load(f)\n        else:\n            self.members = {}\n\n    def add_member(self, name, start_date, buddy):\n        \"\"\"Add new member to tracking\"\"\"\n        self.members[name] = {\n            \"start_date\": start_date,\n            \"buddy\": buddy,\n            \"week\": 1,\n            \"completed_items\": [],\n            \"last_checkin\": None,\n            \"status\": \"active\"\n        }\n        self.save_members()\n\n    def check_progress(self, name):\n        \"\"\"Generate automated check-in message\"\"\"\n        member = self.members.get(name)\n        if not member:\n            return None\n\n        days_since_start = (datetime.date.today() - \n                           datetime.date.fromisoformat(member[\"start_date\"])).days\n        current_week = (days_since_start // 7) + 1\n\n        messages = {\n            1: f\"Hi {name}! You're in Week 1. Have you:\\n\"\n               f\"- Read our principles? \u2713\\n\"\n               f\"- Set up DRUIDS access? \u2713\\n\"\n               f\"- Joined Signal? \u2713\\n\"\n               f\"Reply with completed items or 'help' if stuck.\",\n\n            2: f\"Welcome to Week 2, {name}! Ready to:\\n\"\n               f\"- Attend Thursday's meeting?\\n\"\n               f\"- Shadow a working group?\\n\"\n               f\"- Complete skills survey?\\n\"\n               f\"Your buddy {member['buddy']} is available for questions.\",\n\n            3: f\"Week 3 already, {name}! Time to:\\n\"\n               f\"- Take on a small task\\n\"\n               f\"- Make your first contribution\\n\"\n               f\"- Help someone newer\\n\"\n               f\"You're almost fully onboarded!\",\n\n            4: f\"Congrats {name}! You've completed onboarding.\\n\"\n               f\"- Join #general channel\\n\"\n               f\"- Pick a working group\\n\"\n               f\"- Consider being a buddy\\n\"\n               f\"Welcome to full membership!\"\n        }\n\n        return messages.get(current_week, messages[4])\n\n    def generate_weekly_report(self):\n        \"\"\"Create report for organizers\"\"\"\n        report = \"# Weekly Onboarding Report\\n\\n\"\n\n        active = [m for m in self.members.values() if m[\"status\"] == \"active\"]\n        report += f\"**Active onboardings**: {len(active)}\\n\\n\"\n\n        for name, data in self.members.items():\n            if data[\"status\"] == \"active\":\n                week = data[\"week\"]\n                report += f\"- {name} (Week {week}, Buddy: {data['buddy']})\\n\"\n\n        # Flag concerns\n        report += \"\\n## Concerns\\n\"\n        for name, data in self.members.items():\n            if data[\"last_checkin\"]:\n                days_since = (datetime.date.today() - \n                             datetime.date.fromisoformat(data[\"last_checkin\"])).days\n                if days_since &gt; 7:\n                    report += f\"- {name}: No check-in for {days_since} days\\n\"\n\n        return report\n\n    def save_members(self):\n        with open(self.members_file, 'w') as f:\n            json.dump(self.members, f, indent=2)\n\n# Usage\nif __name__ == \"__main__\":\n    bot = OnboardingBot()\n\n    # Add new member\n    bot.add_member(\"Alex K\", \"2024-03-15\", \"Sam L\")\n\n    # Check progress\n    print(bot.check_progress(\"Alex K\"))\n\n    # Generate report\n    print(bot.generate_weekly_report())\n</code></pre></p>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#3-knowledge-prerequisite-tracking","title":"3. Knowledge Prerequisite Tracking","text":"<p>Prevent repeated explanations through systematic learning.</p> YAML<pre><code># onboarding/prerequisites.yml\nlearning_paths:\n  technical_track:\n    modules:\n      - id: git_basics\n        name: \"Git Fundamentals\"\n        duration: \"2 hours\"\n        prerequisites: []\n        resources:\n          - type: video\n            url: \"videos/git-basics.mp4\"\n          - type: text\n            url: \"docs/git-quick-start.md\"\n          - type: interactive\n            url: \"tutorials/git-playground\"\n        assessment:\n          type: \"practical\"\n          task: \"Make first commit to sandbox repo\"\n\n      - id: druids_setup\n        name: \"DRUIDS Installation\"\n        duration: \"1 hour\"\n        prerequisites: [\"git_basics\"]\n        resources:\n          - type: guide\n            url: \"docs/druids-setup.md\"\n        assessment:\n          type: \"checklist\"\n          items:\n            - \"DRUIDS installed\"\n            - \"Can access repository\"\n            - \"Made test edit\"\n\n  organizing_track:\n    modules:\n      - id: consensus_basics\n        name: \"Consensus Process\"\n        duration: \"90 minutes\"\n        prerequisites: []\n        resources:\n          - type: video\n            url: \"videos/consensus-explained.mp4\"\n          - type: reading\n            url: \"theory/consensus-democracy.pdf\"\n        assessment:\n          type: \"quiz\"\n          passing_score: 80\n\n      - id: meeting_facilitation\n        name: \"Facilitate Meetings\"\n        duration: \"3 hours\"\n        prerequisites: [\"consensus_basics\"]\n        resources:\n          - type: workshop\n            url: \"workshops/facilitation-skills\"\n        assessment:\n          type: \"observation\"\n          task: \"Co-facilitate one meeting\"\n\n# Progress tracking\nmember_progress:\n  \"alex_k\":\n    completed_modules: [\"git_basics\", \"consensus_basics\"]\n    current_module: \"druids_setup\"\n    started_date: \"2024-03-15\"\n    track: \"technical_track\"\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#2-cohort-onboarding","title":"2. Cohort Onboarding","text":"<p>Build solidarity between new members.</p> Markdown<pre><code>## Monthly New Member Cohorts\n\n### Benefits:\n- New members support each other\n- Efficient use of trainer time\n- Built-in accountability partners\n- Reduces isolation\n\n### Structure:\nWeek 1: Individual study + buddy check-ins\nWeek 2: Cohort meeting - share learnings\nWeek 3: Shadow experienced organizers\nWeek 4: First contribution with support\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#3-contribution-pathways","title":"3. Contribution Pathways","text":"<p>Clear routes from observer to organizer.</p> Markdown<pre><code># Contribution Pathway Map\n\n## Observer \u2192 Contributor (Weeks 1-2)\n- Attend meetings as observer\n- Read documentation\n- Ask questions in appropriate channels\n\n## Contributor \u2192 Organizer (Weeks 3-4)\n- Take notes at one meeting\n- Help with simple tasks\n- Join a working group\n\n## Organizer \u2192 Leader (Months 2-6)\n- Bottom-line a project\n- Facilitate meetings\n- Mentor new members\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#4-automated-progress-tracking","title":"4. Automated Progress Tracking","text":"<p>Know who needs what without asking.</p> Bash<pre><code>#!/bin/bash\n# scripts/check-onboarding-progress.sh\n\nMEMBER=$1\necho \"Checking progress for $MEMBER\"\n\n# Check completed items\ngit log --author=\"$MEMBER\" --pretty=format:\"%s\" | grep \"COMPLETED\"\n\n# Check current week\nDAYS_SINCE_JOIN=$(( ($(date +%s) - $(date -d \"$(git log --author=\"$MEMBER\" --reverse --pretty=format:%ad | head -1)\" +%s)) / 86400 ))\nCURRENT_WEEK=$(( $DAYS_SINCE_JOIN / 7 + 1 ))\n\necho \"Currently in week $CURRENT_WEEK of onboarding\"\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#understanding-output","title":"Understanding Output","text":"","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#healthy-onboarding-metrics","title":"Healthy Onboarding Metrics","text":"<p>Track sustainability, not just speed:</p> Bash<pre><code># Burnout indicators\n- Same 3 people doing all orientations\n- Buddies extending past 3 weeks\n- New members texting buddies constantly\n\n# Health indicators  \n- Onboarding duty rotates among 10+ people\n- 80% questions answered by docs\n- New members helping newer members by week 4\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#success-measurements","title":"Success Measurements","text":"<p>What good onboarding produces:</p> Text Only<pre><code>Traditional: \"Sarah is amazing at onboarding!\"\nSystematic: \"New members are contributing by week 3\"\n\nTraditional: \"Text me with any questions!\"\nSystematic: \"Check docs, then ask in #questions\"\n\nTraditional: 90% retention, 3 burnt organizers\nSystematic: 75% retention, sustainable process\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#customization","title":"Customization","text":"","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#organization-specific-pathways","title":"Organization-Specific Pathways","text":"<p>Create tracks for different entry points:</p> Markdown<pre><code># onboarding/pathways/\n\nstudent-organizer.md\n- Campus-specific resources\n- Academic calendar considerations\n- Age-appropriate security culture\n\nworkplace-organizer.md  \n- Labor law resources\n- Boss retaliation prep\n- Scheduling around shifts\n\ncommunity-organizer.md\n- Neighborhood mapping\n- Local government structure\n- Coalition building\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#cultural-language-adaptation","title":"Cultural &amp; Language Adaptation","text":"<p>Make onboarding accessible:</p> Bash<pre><code># Multilingual support\ndocs/onboarding/\n  en/\n  es/\n  zh/\n\n# Cultural considerations\nonboarding/cultural-notes/\n  immigrant-rights-focus.md\n  indigenous-protocols.md\n  religious-considerations.md\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#performance","title":"Performance","text":"","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#reducing-time-to-contribution","title":"Reducing Time-to-Contribution","text":"<p>Goals for efficient onboarding:</p> <ul> <li>Week 1: Can navigate resources</li> <li>Week 2: Attends first meeting</li> <li>Week 3: Takes on first task</li> <li>Week 4: Helps someone newer</li> </ul>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#scaling-considerations","title":"Scaling Considerations","text":"<p>As organization grows:</p> Markdown<pre><code>## 10-30 members\n- Individual buddies work fine\n- Monthly orientations\n\n## 30-100 members  \n- Need cohort system\n- Automated check-ins\n- Working group specialization\n\n## 100+ members\n- Multiple onboarding tracks\n- Dedicated onboarding committee\n- Regional/chapter variations\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#troubleshooting","title":"Troubleshooting","text":"","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#new-members-still-arent-reading-docs","title":"\"New members still aren't reading docs\"","text":"<p>Solution: Make reading mandatory Markdown<pre><code>## Orientation Agenda\n1. Did you read Week 1 docs? (Y/N)\n   - If No: Here's 30 minutes to read\n   - If Yes: Let's discuss questions\n</code></pre></p>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#buddies-getting-overwhelmed","title":"\"Buddies getting overwhelmed\"","text":"<p>Solution: Enforce boundaries Markdown<pre><code>## Buddy Boundaries\n- 30 minutes/week MAX\n- Questions via weekly thread, not DMs\n- \"Read docs first\" is caring response\n- Can hand off if overwhelmed\n</code></pre></p>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#onboarding-feels-impersonal","title":"\"Onboarding feels impersonal\"","text":"<p>Solution: Automate logistics, humanize connection - Automate: Access, schedules, resources - Humanize: Stories, struggles, solidarity - Templates handle information - Humans handle relationships</p>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#best-practices","title":"Best Practices","text":"","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#do","title":"DO:","text":"<ul> <li>\u2713 Create self-directed pathways</li> <li>\u2713 Rotate onboarding duties</li> <li>\u2713 Track progress systematically</li> <li>\u2713 Build cohort connections</li> <li>\u2713 Enforce sustainable boundaries</li> <li>\u2713 Celebrate first contributions</li> </ul>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#dont","title":"DON'T:","text":"<ul> <li>\u2717 Make one person \"onboarding guru\"</li> <li>\u2717 Repeat same info individually</li> <li>\u2717 Skip documentation \"to save time\"</li> <li>\u2717 Overwhelm with everything at once</li> <li>\u2717 Tolerate boundary violations</li> <li>\u2717 Rush security practices</li> </ul>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#gradual-integration-patterns","title":"Gradual Integration Patterns","text":"","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#the-permission-ladder","title":"The Permission Ladder","text":"<p>Prevent overwhelm through progressive access:</p> YAML<pre><code># access-levels.yml\nweek_1:\n  name: \"Observer\"\n  permissions:\n    - read: public_docs\n    - join: orientation_channel\n    - attend: public_meetings\n  restrictions:\n    - no_voting\n    - no_financial_access\n    - no_member_directory\n\nweek_2:\n  name: \"Participant\"  \n  permissions:\n    - write: introductions\n    - join: new_member_cohort\n    - submit: first_task\n  restrictions:\n    - no_sensitive_data\n    - no_facilitating\n\nweek_4:\n  name: \"Contributor\"\n  permissions:\n    - vote: working_groups\n    - access: member_directory\n    - create: proposals\n  restrictions:\n    - no_financial_decisions\n    - no_security_access\n\nweek_8:\n  name: \"Full Member\"\n  permissions:\n    - vote: all_decisions\n    - access: L1_security\n    - facilitate: meetings\n  restrictions:\n    - standard_security_practices\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#automated-access-management","title":"Automated Access Management","text":"Python<pre><code>#!/usr/bin/env python3\n# manage-access.py\n\nimport datetime\nimport subprocess\n\ndef update_member_access(member_name, start_date):\n    \"\"\"Automatically grant permissions based on time\"\"\"\n\n    weeks_active = (datetime.date.today() - \n                   datetime.date.fromisoformat(start_date)).days // 7\n\n    if weeks_active &gt;= 8:\n        level = \"full_member\"\n    elif weeks_active &gt;= 4:\n        level = \"contributor\"\n    elif weeks_active &gt;= 2:\n        level = \"participant\"\n    else:\n        level = \"observer\"\n\n    # Update Git permissions\n    subprocess.run([\n        \"git\", \"config\", f\"user.{member_name}.level\", level\n    ])\n\n    # Update channel access\n    update_signal_permissions(member_name, level)\n\n    # Update repository access\n    update_repo_access(member_name, level)\n\n    return f\"{member_name} updated to {level}\"\n\ndef generate_access_report():\n    \"\"\"Weekly access audit\"\"\"\n    report = \"# Access Level Audit\\n\\n\"\n\n    # Check all members\n    members = get_all_members()\n\n    for member in members:\n        level = get_member_level(member)\n        report += f\"- {member}: {level}\\n\"\n\n    return report\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#automated-faq-system","title":"Automated FAQ System","text":"<p>Stop answering the same questions:</p> Python<pre><code>#!/usr/bin/env python3\n# faq-bot.py\n\nimport re\nfrom datetime import datetime\n\nclass FAQBot:\n    def __init__(self):\n        self.faqs = {\n            r\"meeting|when|schedule\": {\n                \"answer\": \"Meetings are Thursdays 7pm. Calendar: [link]\",\n                \"category\": \"logistics\"\n            },\n            r\"password|access|can't log\": {\n                \"answer\": \"Check onboarding email for credentials. Still stuck? Email tech@org\",\n                \"category\": \"technical\"\n            },\n            r\"contribute|help|task\": {\n                \"answer\": \"Week 1: Observe. Week 2: Shadow. Week 3: Take a task from #available-tasks\",\n                \"category\": \"contribution\"\n            },\n            r\"buddy|mentor|question\": {\n                \"answer\": \"Your buddy is listed in your welcome email. They check in weekly.\",\n                \"category\": \"support\"\n            }\n        }\n\n        self.escalation_triggers = [\n            \"urgent\", \"emergency\", \"help asap\", \"confused\", \"frustrated\"\n        ]\n\n    def process_question(self, question, asker):\n        \"\"\"Auto-respond or escalate\"\"\"\n\n        # Check FAQs first\n        for pattern, response in self.faqs.items():\n            if re.search(pattern, question.lower()):\n                self.log_faq_hit(asker, response[\"category\"])\n                return response[\"answer\"]\n\n        # Check for escalation\n        if any(trigger in question.lower() for trigger in self.escalation_triggers):\n            self.escalate_to_human(asker, question)\n            return \"I've flagged this for human response within 24h\"\n\n        # Log new question for FAQ updates\n        self.log_new_question(question)\n        return \"I don't have an answer for that. Check #questions or ask your buddy.\"\n\n    def generate_faq_report(self):\n        \"\"\"What questions are killing us?\"\"\"\n        report = \"# FAQ Performance Report\\n\\n\"\n        report += \"## Most Asked (Update docs!):\\n\"\n        # Show top questions to add to documentation\n\n        report += \"\\n## Escalation Patterns:\\n\"\n        # Show what triggers human intervention\n\n        return report\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#zero-touch-onboarding-metrics","title":"Zero-Touch Onboarding Metrics","text":"<p>Track success without manual work:</p> Bash<pre><code>#!/bin/bash\n# onboarding-metrics.sh\n\necho \"=== Onboarding Health Metrics ===\"\necho \"Generated: $(date)\"\necho \"\"\n\n# Time to first contribution\necho \"Average time to first commit:\"\nfor member in $(cat members/new-last-90-days.txt); do\n    first_commit=$(git log --author=\"$member\" --reverse --format=\"%ad\" | head -1)\n    join_date=$(grep \"$member\" members/join-dates.txt | cut -d: -f2)\n    days_to_commit=$(( ($(date -d \"$first_commit\" +%s) - $(date -d \"$join_date\" +%s)) / 86400 ))\n    echo \"$member: $days_to_commit days\"\ndone | awk '{sum+=$2; count++} END {print sum/count \" days average\"}'\n\n# Buddy load distribution\necho -e \"\\nBuddy workload (last 30 days):\"\ngrep -c \"buddy:\" members/assignments.txt | sort -rn\n\n# Self-service success rate\necho -e \"\\nQuestions in #help channel:\"\nlast_month=$(grep \"$(date -d '30 days ago' +%Y-%m)\" logs/help-channel.log | wc -l)\nthis_month=$(grep \"$(date +%Y-%m)\" logs/help-channel.log | wc -l)\necho \"Last month: $last_month\"\necho \"This month: $this_month\"\nreduction=$(( (last_month - this_month) * 100 / last_month ))\necho \"Reduction: $reduction%\"\n\n# Retention by cohort\necho -e \"\\nRetention rates:\"\nfor cohort in q1-2024 q2-2024 q3-2024; do\n    started=$(wc -l &lt; cohorts/$cohort/started.txt)\n    active=$(wc -l &lt; cohorts/$cohort/still-active.txt)\n    rate=$(( active * 100 / started ))\n    echo \"$cohort: $rate% ($active/$started)\"\ndone\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#real-example","title":"Real Example","text":"<p>Here's how one organization transformed onboarding:</p> <p>Before:  - Marcus spent 10 hours/week onboarding - Information inconsistent between buddies - 50% dropped out from overwhelm - Organizers burning out</p> <p>Implementation Timeline:</p>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#phase-1-documentation-sprint-week-1","title":"Phase 1: Documentation Sprint (Week 1)","text":"Bash<pre><code># Document everything once\ngit checkout -b sustainable-onboarding\nmkdir -p docs/onboarding/{week-1,week-2,week-3}\n\n# Created core documents\n- principles-and-values.md\n- technical-setup-guide.md  \n- meeting-culture.md\n- security-basics.md\n- contribution-pathways.md\n\n# Built FAQ from common questions\ngrep \"?\" chat-logs/last-6-months.txt | sort | uniq -c | sort -rn &gt; common-questions.txt\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#phase-2-automation-setup-week-2","title":"Phase 2: Automation Setup (Week 2)","text":"Bash<pre><code># Set up self-service portal\ncp templates/onboarding-portal.html public/onboard/\n\n# Deploy check-in bot\npython3 scripts/onboarding-bot.py --init\n\n# Create cohort structure\nmkdir -p cohorts/2024-Q2/{materials,progress}\n</code></pre>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#phase-3-pilot-program-week-3","title":"Phase 3: Pilot Program (Week 3)","text":"<ul> <li>5 new members in first cohort</li> <li>2 buddies on rotation</li> <li>Tracked every question to improve docs</li> <li>Daily check-ins on process</li> </ul>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#phase-4-full-rollout-week-4","title":"Phase 4: Full Rollout (Week 4)","text":"Bash<pre><code># Announce new system\ngit commit -m \"Launch sustainable onboarding system\"\n\n# Train buddies on boundaries\n- 30 min/week maximum\n- Point to docs first\n- Escalate only if needed\n\n# Monitor metrics\nwatch -n 3600 ./onboarding-metrics.sh\n</code></pre> <p>After 6 Months: - Onboarding distributed among 12 people - Each buddy spends 30 min/week max - 75% retention (up from 50%) - New members help newer members by week 4 - 90% questions answered by documentation - Zero burnout from onboarding duty</p>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/onboarding-without-burnout/#next-steps","title":"Next Steps","text":"<ol> <li>Create your onboarding directory structure</li> <li>Write your Week 1 checklist</li> <li>Set up buddy rotation schedule</li> <li>Draft welcome email template</li> <li>Test with next new member</li> </ol> <p>Remember: Every hour spent on systematic onboarding saves 10 hours of repeated explanation. Sustainability isn't just self-care - it's revolutionary discipline.</p> <p>\"The revolution is not an apple that falls when it is ripe. You have to make it fall.\" - Che</p> <p>But you can't make it fall if you're burnt out from explaining Signal setup for the 50<sup>th</sup> time.</p> <p>Backlinks:</p>","tags":["onboarding","sustainability","capacity-building","organizing"]},{"location":"learn/tutorials/your-first-revolutionary-commit/","title":"Your First Revolutionary Commit","text":"<p>A hands-on tutorial for comrades with zero Git experience</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#what-well-learn","title":"What We'll Learn","text":"<p>By the end of this tutorial, you will: - Create your first Git repository - Write and save meeting minutes - Make your first commit (a permanent record) - Understand how this practices democratic centralism - Feel confident to continue learning</p> <p>No prior technical knowledge required. Just revolutionary determination.</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#what-youll-need","title":"What You'll Need","text":"<ul> <li> A computer (Windows, Mac, or Linux)</li> <li> 30-45 minutes of focused time</li> <li> Meeting notes to transcribe (or we'll create example ones)</li> <li> Patience with yourself - everyone starts here</li> </ul>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#setting-up-your-tools","title":"Setting Up Your Tools","text":"<p>First, we need to install Git. Don't worry - we'll walk through every step.</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#on-ubuntudebian-linux","title":"On Ubuntu/Debian Linux","text":"<p>Open a terminal (press <code>Ctrl+Alt+T</code>) and type:</p> Bash<pre><code>sudo apt update\nsudo apt install git\n</code></pre> <p>When it asks for your password, type it (you won't see characters - that's normal).</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#on-mac","title":"On Mac","text":"<ol> <li>Open Terminal (find it in Applications \u2192 Utilities)</li> <li>Type: <code>git --version</code></li> <li>If Git isn't installed, it will prompt you to install it</li> <li>Click \"Install\" and wait</li> </ol>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#on-windows","title":"On Windows","text":"<ol> <li>Download Git from: https://git-scm.com/download/win</li> <li>Run the installer</li> <li>Click \"Next\" for all default options (they're fine)</li> <li>Open \"Git Bash\" from your Start menu</li> </ol>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#verify-it-worked","title":"Verify It Worked","text":"<p>In your terminal/Git Bash, type:</p> Bash<pre><code>git --version\n</code></pre> <p>You should see something like: <code>git version 2.34.1</code></p> <p>Celebrate! You just installed revolutionary infrastructure.</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#creating-your-first-repository","title":"Creating Your First Repository","text":"<p>A repository (or \"repo\") is like a folder with memory. It remembers every change ever made.</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#step-1-create-a-folder","title":"Step 1: Create a Folder","text":"Bash<pre><code># Create a new directory for our organization\nmkdir ~/my-organization\n\n# Go into that directory\ncd ~/my-organization\n\n# See where we are\npwd\n</code></pre> <p>You should see something like <code>/home/yourname/my-organization</code></p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#step-2-initialize-git","title":"Step 2: Initialize Git","text":"<p>This is the moment we create revolutionary infrastructure:</p> Bash<pre><code>git init\n</code></pre> <p>You'll see: <code>Initialized empty Git repository in /home/yourname/my-organization/.git/</code></p> <p>What just happened? You created a <code>.git</code> folder that will track all changes. This is your organization's memory.</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#step-3-configure-your-identity","title":"Step 3: Configure Your Identity","text":"<p>Git needs to know who's making changes. We use pseudonyms for security:</p> Bash<pre><code>git config user.name \"Comrade Rosa\"\ngit config user.email \"rosa@protonmail.com\"\n</code></pre> <p>Replace with your chosen pseudonym. This protects your identity while maintaining accountability.</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#writing-your-first-meeting-minutes","title":"Writing Your First Meeting Minutes","text":"<p>Let's create actual organizing documentation.</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#step-1-create-the-file","title":"Step 1: Create the File","text":"Bash<pre><code># Create a meetings folder\nmkdir meetings\n\n# Create our first meeting minutes file\ntouch meetings/2025-07-02-weekly-meeting.md\n</code></pre>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#step-2-write-the-minutes","title":"Step 2: Write the Minutes","text":"<p>Open the file in any text editor. If you're unsure, type:</p> Bash<pre><code># On Linux/Mac\nnano meetings/2025-07-02-weekly-meeting.md\n\n# On Windows Git Bash\nnotepad meetings/2025-07-02-weekly-meeting.md\n</code></pre> <p>Now type (or paste) these meeting minutes:</p> Markdown<pre><code># Weekly Organizing Meeting\nDate: July 2, 2025\nAttendees: Rosa, Karl, Vladimir, Clara\n\n## Agenda\n1. Review last week's actions\n2. Plan upcoming mutual aid\n3. Security check-in\n4. Next steps\n\n## Discussion\n\n### Last Week's Actions\n- Rosa: Completed flyer design \u2713\n- Karl: Contacted food bank \u2713\n- Vladimir: Security audit (in progress)\n\n### Mutual Aid Planning\nDecision: Saturday July 6, 2pm at People's Park\n- Food distribution\n- Know Your Rights training\n- Childcare provided\n\n### Security Notes\n- Reminder: Use Signal for coordination\n- New member vetting process working well\n- No incidents to report\n\n## Decisions Made\n1. Mutual aid event July 6 (unanimous)\n2. Create dedicated roles for event (approved)\n3. Budget $200 for supplies (approved)\n\n## Action Items\n- Clara: Reserve park space\n- Rosa: Final flyer + social media\n- Karl: Coordinate food pickup\n- Vladimir: Complete security audit\n\n## Next Meeting\nJuly 9, 2025 - same time, Clara facilitating\n</code></pre> <p>Save the file (<code>Ctrl+X</code> then <code>Y</code> in nano, or just save in notepad).</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#step-3-see-what-git-sees","title":"Step 3: See What Git Sees","text":"Bash<pre><code>git status\n</code></pre> <p>You'll see: Text Only<pre><code>Untracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        meetings/\n\nnothing added to commit but untracked files present\n</code></pre></p> <p>Git sees our new folder but isn't tracking it yet.</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#making-your-first-revolutionary-commit","title":"Making Your First Revolutionary Commit","text":"<p>This is the moment we practice democratic centralism - collective decisions preserved forever.</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#step-1-stage-the-changes","title":"Step 1: Stage the Changes","text":"Bash<pre><code>git add meetings/\n</code></pre> <p>Run <code>git status</code> again: Text Only<pre><code>Changes to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   meetings/2025-07-02-weekly-meeting.md\n</code></pre></p> <p>The file is now \"staged\" - ready to be committed to history.</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#step-2-make-the-commit","title":"Step 2: Make the Commit","text":"Bash<pre><code>git commit -m \"Add July 2 weekly meeting minutes\n\n- Documented mutual aid planning for July 6\n- Recorded security check-in results  \n- Assigned action items to comrades\n- Practicing democratic centralism through Git\"\n</code></pre> <p>You'll see something like: Text Only<pre><code>[main 8a3f2d1] Add July 2 weekly meeting minutes\n 1 file changed, 45 insertions(+)\n create mode 100644 meetings/2025-07-02-weekly-meeting.md\n</code></pre></p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#step-3-view-your-revolutionary-history","title":"Step 3: View Your Revolutionary History","text":"Bash<pre><code>git log\n</code></pre> <p>You'll see: Text Only<pre><code>commit 8a3f2d1... (HEAD -&gt; main)\nAuthor: Comrade Rosa &lt;rosa@protonmail.com&gt;\nDate:   Tue Jul 2 22:30:00 2025 -0500\n\n    Add July 2 weekly meeting minutes\n\n    - Documented mutual aid planning for July 6\n    - Recorded security check-in results\n    - Assigned action items to comrades\n    - Practicing democratic centralism through Git\n</code></pre></p> <p>CELEBRATE! You just created permanent, tamper-proof organizational history!</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#understanding-what-we-just-did","title":"Understanding What We Just Did","text":"","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#this-isnt-just-file-storage","title":"This Isn't Just File Storage","text":"<p>What makes this revolutionary:</p> <ol> <li>Permanent Record: That commit can never be secretly altered</li> <li>Accountability: Every change is attributed (to pseudonyms)</li> <li>Democratic Process: Decisions are documented and preserved</li> <li>No Memory Holes: Can't delete inconvenient history</li> <li>Collective Ownership: Not dependent on any individual</li> </ol>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#how-this-practices-democratic-centralism","title":"How This Practices Democratic Centralism","text":"<ul> <li>Freedom of Discussion: Create branches to propose changes</li> <li>Unity of Action: Merge approved changes to main branch</li> <li>Minority Positions: History preserves all proposals, even rejected ones</li> <li>Collective Memory: Organization's knowledge isn't in one person's head</li> </ul>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#common-problems-and-solutions","title":"Common Problems and Solutions","text":"","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#command-not-found","title":"\"Command not found\"","text":"<p>You might be in the wrong terminal. Make sure you're using: - Terminal (Mac/Linux) - Git Bash (Windows)</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#permission-denied","title":"\"Permission denied\"","text":"<p>On Linux/Mac, you might need <code>sudo</code> for installation: Bash<pre><code>sudo apt install git  # Add sudo\n</code></pre></p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#i-made-a-typo-in-my-commit-message","title":"\"I made a typo in my commit message!\"","text":"<p>For your most recent commit: Bash<pre><code>git commit --amend -m \"New corrected message\"\n</code></pre></p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#i-committed-the-wrong-file","title":"\"I committed the wrong file!\"","text":"<p>Don't panic. We can fix this: Bash<pre><code>git reset HEAD~1  # Undo last commit but keep changes\n# Now commit the right files\n</code></pre></p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#your-next-steps","title":"Your Next Steps","text":"","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#1-practice-with-real-work","title":"1. Practice with Real Work","text":"<p>Next meeting, volunteer to take notes and commit them: - Take notes during meeting - Type them up in Markdown - Commit with descriptive message - Show comrades the git log</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#2-learn-about-branches","title":"2. Learn About Branches","text":"<p>Branches let multiple comrades work without conflict: Bash<pre><code>git branch mutual-aid-planning\ngit checkout mutual-aid-planning\n# Make changes here without affecting main\n</code></pre></p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#3-connect-with-comrades","title":"3. Connect with Comrades","text":"<p>Share your repository: - Show others your commit history - Teach someone else their first commit - Build collective knowledge</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#what-youve-accomplished","title":"What You've Accomplished","text":"<p>You've just: - Installed revolutionary infrastructure - Created organizational memory - Practiced democratic centralism - Taken first step toward collective liberation - Joined the tradition of revolutionary record-keeping</p> <p>Your meeting minutes are no longer just notes - they're part of permanent revolutionary history.</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"learn/tutorials/your-first-revolutionary-commit/#remember","title":"Remember","text":"<p>Every commit is a small act of revolution. You're building infrastructure that: - Can't be controlled by corporations - Preserves organizational memory - Practices collective decision-making - Prepares for state repression</p> <p>Welcome to the revolutionary infrastructure, comrade.</p> <p>\"The step from theory to practice is the most revolutionary step.\"</p> <p>Next tutorial: Git in 7 Commands \u2192</p> <p>Backlinks:</p>","tags":["tutorial","git","beginners","meeting-minutes","hands-on"]},{"location":"reference/glossary/","title":"DRUIDS Glossary","text":"","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#core-terms","title":"Core Terms","text":"","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#druids","title":"DRUIDS","text":"<p>Democratic, Resilient, Unity-building Information Distribution System. Infrastructure for revolutionary organizations to preserve knowledge, coordinate work, and resist surveillance.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#institutional-memory","title":"Institutional Memory","text":"<p>The accumulated knowledge, decisions, and lessons of an organization that persists beyond individual members. What gets lost when experienced organizers leave.</p> <p>Learn more: Institutional Memory and Revolutionary Capacity</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#democratic-centralism","title":"Democratic Centralism","text":"<p>Organizational principle: freedom of discussion, unity of action. In Git: branches for debate, merges for unity, history preserving dissent.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#three-tier-security-model","title":"Three-Tier Security Model","text":"<ul> <li>L0 (Green): Public information, educational materials</li> <li>L1 (Brown): Member-only content, operational data</li> <li>L2 (Red): Sensitive strategic planning, high-security</li> </ul> <p>Implementation details: Security Implementation and Security Red Lines</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#power-steering-metaphor","title":"Power Steering Metaphor","text":"<p>DRUIDS as infrastructure that makes organizing easier without providing direction. The ideology is your compass; DRUIDS is power steering.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#git-terms-for-organizers","title":"Git Terms for Organizers","text":"<p>New to Git? Start with Git Isn't Programming and Git in 7 Commands</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#repository-repo","title":"Repository (Repo)","text":"<p>Your organization's complete history and current files. Like a filing cabinet that never forgets.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#commit","title":"Commit","text":"<p>A saved snapshot of your work with a description. Like filing a document with a note about what it is and why.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#branch","title":"Branch","text":"<p>A parallel version for experimenting or proposing changes. Like drafting a proposal before presenting it.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#merge","title":"Merge","text":"<p>Combining different branches of work. Like voting to accept a proposal and implement it.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#clone","title":"Clone","text":"<p>Making a complete copy of the repository. Every member has the full history.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#pushpull","title":"Push/Pull","text":"<p>Sharing your changes (push) or getting others' changes (pull). Like distributing meeting minutes.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#conflict","title":"Conflict","text":"<p>When two people change the same thing differently. Like competing amendments that need reconciliation.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#revolutionary-terms","title":"Revolutionary Terms","text":"","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#material-conditions","title":"Material Conditions","text":"<p>The actual, concrete circumstances of organizing - not abstract theory. DRUIDS addresses material problems like burnout and knowledge loss.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#prefigurative-politics","title":"Prefigurative Politics","text":"<p>Building the new world in the shell of the old. DRUIDS prefigures collective ownership and democratic process.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#technical-labor-aristocracy","title":"Technical Labor Aristocracy","text":"<p>Those who hoard technical knowledge to maintain power. DRUIDS breaks this by democratizing skills.</p> <p>Fight this pattern: Teaching Without Priesthood</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#security-culture","title":"Security Culture","text":"<p>Collective practices that protect without paranoia. Based on real threats, not fantasy.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#bus-factor","title":"Bus Factor","text":"<p>How many people could leave before the organization fails. Traditional: 1-2. With DRUIDS: much higher.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#druids-specific-terms","title":"DRUIDS-Specific Terms","text":"","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#revolutionary-commit-conventions","title":"Revolutionary Commit Conventions","text":"<p>Commit messages that encode democratic process: - <code>DECIDED[body](vote){#4ca5d171acaac2c5ca261c97b0d40383}: description</code> - <code>EDUCATED[topic]: description</code> - <code>EMERGENCY[auth]: description</code></p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#knowledge-artifact","title":"Knowledge Artifact","text":"<p>Documentation that preserves lessons, decisions, or processes. Campaign retrospectives, meeting minutes, etc.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#federation","title":"Federation","text":"<p>Multiple DRUIDS instances coordinating while maintaining autonomy. Like chapters sharing knowledge.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#air-gapped","title":"Air-gapped","text":"<p>Completely disconnected from internet for maximum security. Used for L2 sensitive planning.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#pseudonym-discipline","title":"Pseudonym Discipline","text":"<p>Consistent use of revolutionary names across platforms to prevent identity correlation.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#technical-terms-simplified","title":"Technical Terms Simplified","text":"","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#encryption","title":"Encryption","text":"<p>Scrambling data so only authorized people can read it. Like a cipher that protects messages.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#version-control","title":"Version Control","text":"<p>Tracking all changes over time. Like keeping every draft of a document with notes about what changed.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#plain-text","title":"Plain Text","text":"<p>Simple text files readable by any computer. No special software needed, works forever.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#markdown","title":"Markdown","text":"<p>Simple formatting for plain text. Like <code>**bold**</code> or <code># Heading</code>. Easy to learn, works everywhere.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#sshgpg-keys","title":"SSH/GPG Keys","text":"<p>Digital credentials that prove identity. Like unforgeable signatures for digital work.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#tor","title":"Tor","text":"<p>Network that hides your internet location. Like mailing letters without return addresses.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#anti-patterns","title":"Anti-Patterns","text":"","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#discord-democracy","title":"Discord Democracy","text":"<p>Voting in chat where history disappears. No record of decisions or dissent.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#google-socialism","title":"Google Socialism","text":"<p>Shared documents on surveillance platforms. Collective ownership, corporate control.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#signal-security-theater","title":"Signal Security Theater","text":"<p>Encrypted messages with no infrastructure. Protects chat, not organizing capacity.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#tech-priest","title":"Tech Priest","text":"<p>Person who hoards technical knowledge to maintain power. Often burns out, taking knowledge with them.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#zoom-organizing","title":"Zoom Organizing","text":"<p>Presence without infrastructure. Meetings happen but nothing persists.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#workflow-terms","title":"Workflow Terms","text":"","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#onboarding","title":"Onboarding","text":"<p>Getting new members productive quickly. Traditional: months. With DRUIDS: days.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#retrospective","title":"Retrospective","text":"<p>Documented analysis after campaigns/projects. What worked, what didn't, lessons learned.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#knowledge-hemorrhaging","title":"Knowledge Hemorrhaging","text":"<p>Constant loss of experience when people leave. The problem DRUIDS solves.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#self-service-documentation","title":"Self-Service Documentation","text":"<p>Information organized so people can find answers without asking. Reduces burnout.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#commit-signing","title":"Commit Signing","text":"<p>Cryptographic proof of who made changes. Prevents impersonation.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#security-terms","title":"Security Terms","text":"","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#threat-model","title":"Threat Model","text":"<p>Realistic assessment of actual dangers. Not paranoid fantasy but material analysis.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#opsec-operational-security","title":"OpSec (Operational Security)","text":"<p>Practices that protect sensitive information. Being boring is good OpSec.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#compartmentalization","title":"Compartmentalization","text":"<p>Limiting information to those who need it. Not secrecy but practical security.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#forward-secrecy","title":"Forward Secrecy","text":"<p>Past communications stay secure even if current keys are compromised.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#surveillance-capitalism","title":"Surveillance Capitalism","text":"<p>Business model of tracking everything for profit. Why we avoid corporate platforms.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#common-phrases","title":"Common Phrases","text":"","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#ask-sarah-for-the-password","title":"\"Ask Sarah for the password\"","text":"<p>Symbol of organizational fragility. When Sarah leaves, access dies.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#lost-to-discord","title":"\"Lost to Discord\"","text":"<p>Information that exists somewhere in chat history but is effectively gone.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#starting-from-scratch","title":"\"Starting from scratch\"","text":"<p>What happens without institutional memory. Every campaign reinvents the wheel.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#technical-hierarchy","title":"\"Technical hierarchy\"","text":"<p>When specialized knowledge creates power imbalances. DRUIDS fights this.</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/glossary/#the-revolution-will-be-committed","title":"\"The revolution will be committed\"","text":"<p>Play on Gil Scott-Heron. The revolution needs version control.</p> <p>This glossary is living documentation. Terms evolve with the movement.</p> <p>Continue learning: Return to DRUIDS Philosophy or explore Why DRUIDS?</p> <p>Backlinks:</p>","tags":["glossary","terminology","definitions","reference"]},{"location":"reference/testing/test-suite-reference/","title":"Test Suite Technical Reference","text":"","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#overview","title":"Overview","text":"<p>The MkDocs Test Suite is a comprehensive validation system designed to detect and categorize documentation quality issues, with particular focus on link validation and content structure compliance. The suite consists of 6 test modules providing 4-tier severity analysis and automated quality reporting.</p>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#architecture","title":"Architecture","text":"","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#test-module-organization","title":"Test Module Organization","text":"Text Only<pre><code>tests/\n\u251c\u2500\u2500 test_build_quality.py      # Build warning parsing and categorization\n\u251c\u2500\u2500 test_links.py              # Comprehensive link validation\n\u251c\u2500\u2500 test_static_analysis.py    # Pre-build markdown validation\n\u251c\u2500\u2500 test_content_structure.py  # Di\u00e1taxis framework compliance\n\u251c\u2500\u2500 test_utils.py              # Shared parsing utilities\n\u2514\u2500\u2500 test_build.py              # Core build validation (enhanced)\n</code></pre>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#severity-classification-system","title":"Severity Classification System","text":"Severity Description Test Failure Examples Critical Navigation structure failures \u274c Fails Missing nav files, build errors High Broken internal links \u274c Fails Non-existent targets, malformed refs Medium Suboptimal but functional \u26a0\ufe0f Warning Absolute links, missing metadata Low Informational issues \u2139\ufe0f Info Style inconsistencies, suggestions","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#module-reference","title":"Module Reference","text":"","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#test_build_qualitypy","title":"test_build_quality.py","text":"<p>Purpose: Parse MkDocs build output to detect and categorize warnings/errors by severity.</p>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#classes","title":"Classes","text":"","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#testbuildquality","title":"<code>TestBuildQuality</code>","text":"<p>Core test class for build output analysis.</p> <p>Methods:</p> <ul> <li><code>run_mkdocs_build(project_root: Path, strict: bool = True) -&gt; tuple[bool, str, Dict]</code></li> <li>Executes MkDocs build and parses output</li> <li> <p>Returns: (success_status, combined_output, parsed_warnings)</p> </li> <li> <p><code>test_no_critical_warnings(project_root)</code> </p> </li> <li>Severity: Critical</li> <li>Fails on: Any critical-level issues</li> <li> <p>Detects: Configuration errors, missing dependencies</p> </li> <li> <p><code>test_no_broken_navigation_links(project_root)</code></p> </li> <li>Severity: Critical  </li> <li>Fails on: Navigation references to non-existent files</li> <li> <p>Detects: <code>mkdocs.yml</code> nav entries pointing to missing files</p> </li> <li> <p><code>test_no_broken_internal_links(project_root)</code></p> </li> <li>Severity: High</li> <li>Fails on: Internal markdown links to non-existent targets</li> <li> <p>Detects: <code>[text](target.md){#004e7d6970320c8d1a7bbbcb2c9f07a7}</code> where target.md doesn't exist</p> </li> <li> <p><code>test_absolute_links_have_suggestions(project_root)</code></p> </li> <li>Severity: Medium</li> <li>Warning on: Absolute internal links with relative suggestions</li> <li> <p>Detects: <code>/path/to/file.md</code> that could be <code>../file.md</code></p> </li> <li> <p><code>test_warning_count_threshold(project_root)</code></p> </li> <li>Severity: Variable</li> <li>Threshold: 75 total warnings</li> <li>Purpose: Prevent warning accumulation</li> </ul> <p>Configuration: Python<pre><code>WARNING_THRESHOLD = 75  # Maximum allowed warnings\n</code></pre></p>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#output-format","title":"Output Format","text":"Python<pre><code>{\n    'warnings': [\n        {\n            'type': 'nav_reference_not_found',\n            'severity': 'critical',\n            'file': 'missing-file.md',\n            'message': 'Full warning text'\n        }\n    ],\n    'errors': [...],\n    'info': [...]\n}\n</code></pre>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#test_linkspy","title":"test_links.py","text":"<p>Purpose: Comprehensive validation of all link types in markdown content.</p>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#classes_1","title":"Classes","text":"","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#testlinkvalidation","title":"<code>TestLinkValidation</code>","text":"<p>Validates links across the entire documentation structure.</p> <p>Methods:</p> <ul> <li><code>load_mkdocs_config(project_root: Path) -&gt; Dict</code></li> <li>Loads and parses mkdocs.yml configuration</li> <li> <p>Returns: Parsed YAML configuration object</p> </li> <li> <p><code>extract_nav_links(nav_item, base_path: str = \"\") -&gt; List[str]</code></p> </li> <li>Recursively extracts file paths from navigation configuration</li> <li>Handles nested navigation structures</li> <li> <p>Returns: List of file paths referenced in navigation</p> </li> <li> <p><code>find_wikilinks(content: str) -&gt; List[Dict[str, str]]</code></p> </li> <li>Detects Obsidian-style wikilinks: <code>[display](target.md){#004e7d6970320c8d1a7bbbcb2c9f07a7}</code></li> <li>Supports both <code>[target](target.md){#004e7d6970320c8d1a7bbbcb2c9f07a7}</code> and <code>[display](target.md){#004e7d6970320c8d1a7bbbcb2c9f07a7}</code> formats</li> <li> <p>Returns: List of wikilink objects with target/display properties</p> </li> <li> <p><code>resolve_link_path(link: str, source_file: Path, docs_dir: Path) -&gt; Path</code></p> </li> <li>Resolves relative and absolute link paths</li> <li>Handles directory links (adds index.md)</li> <li>Adds .md extension when appropriate</li> <li>Returns: Absolute path to target file</li> </ul> <p>Test Methods:</p> <ul> <li><code>test_navigation_links_exist(project_root, docs_dir)</code></li> <li>Severity: Critical</li> <li>Validates: All mkdocs.yml navigation entries</li> <li> <p>Checks: File existence for nav references</p> </li> <li> <p><code>test_internal_markdown_links(docs_dir)</code></p> </li> <li>Severity: High</li> <li>Validates: <code>[text](url){#572d4e421e5e6b9bc11d815e8a027112}</code> style links</li> <li> <p>Excludes: External links, anchors, mailto</p> </li> <li> <p><code>test_wikilink_validation(docs_dir)</code></p> </li> <li>Severity: High</li> <li>Validates: <code>[target](target.md){#004e7d6970320c8d1a7bbbcb2c9f07a7}</code> and <code>[display](target.md){#004e7d6970320c8d1a7bbbcb2c9f07a7}</code> links</li> <li> <p>Resolves: Relative paths from wikilink targets</p> </li> <li> <p><code>test_absolute_vs_relative_links(docs_dir)</code></p> </li> <li>Severity: Medium (Warning)</li> <li>Detects: Internal links using absolute paths</li> <li> <p>Suggests: Relative path alternatives</p> </li> <li> <p><code>test_anchor_links_valid(docs_dir)</code></p> </li> <li>Severity: Medium (Warning)</li> <li>Validates: <code>#heading</code> and <code>file.md#heading</code> links</li> <li> <p>Checks: Target heading existence in markdown</p> </li> <li> <p><code>test_link_target_case_sensitivity(docs_dir)</code></p> </li> <li>Severity: High</li> <li>Detects: Case mismatches in file references</li> <li>Critical for: Cross-platform compatibility</li> </ul> <p>Link Type Support:</p> Link Type Pattern Example Validation Markdown <code>[text](url){#572d4e421e5e6b9bc11d815e8a027112}</code> <code>[Guide](guide.md){#8c27d0d0b409c1de1867fdc9a128c72c}</code> Path resolution Wikilink <code>[target](target.md){#004e7d6970320c8d1a7bbbcb2c9f07a7}</code> <code>[Installation Guide](Installation Guide.md){#0cffdc3ec1304287febf724e76516ff2}</code> Target existence Wikilink Display <code>[text](target\\.md){#f7e7b826f38d0b0d6c94d9ea1ffbd595}</code> <code>[Setup Guide](guide.md\\.md){#fcf1da96bad2e715bc6b484bc0855800}</code> Target + display Anchor <code>[text](#anchor)</code> <code>[Top](#overview)</code> Heading existence Cross-file Anchor <code>[text](file#anchor){#8c7dd922ad47494fc02c388e12c00eac}</code> <code>[Setup](guide.md){#8c27d0d0b409c1de1867fdc9a128c72c}</code> File + heading External <code>[text](http...){#fca68df40656ea64d2c71a450193ed89}</code> <code>[GitHub](https://github.com)</code> Skipped","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#test_static_analysispy","title":"test_static_analysis.py","text":"<p>Purpose: Pre-build validation of markdown content structure and syntax.</p>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#classes_2","title":"Classes","text":"","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#teststaticanalysis","title":"<code>TestStaticAnalysis</code>","text":"<p>Analyzes markdown files without requiring MkDocs build.</p> <p>Methods:</p> <ul> <li><code>test_all_markdown_files_parseable(docs_dir)</code></li> <li>Checks: UTF-8 encoding, basic markdown syntax</li> <li>Detects: Empty files, malformed frontmatter</li> <li> <p>Severity: Critical for parse failures</p> </li> <li> <p><code>test_frontmatter_consistency(docs_dir)</code></p> </li> <li>Validates: YAML frontmatter structure</li> <li>Checks: Required fields by content type</li> <li>Requirements:<ul> <li>Blog posts: <code>title</code>, <code>date</code></li> <li>Tutorials: <code>title</code></li> </ul> </li> <li> <p>Severity: Medium (Warning)</p> </li> <li> <p><code>test_markdown_structure_quality(docs_dir)</code></p> </li> <li>Validates: Heading hierarchy (H1 \u2192 H2 \u2192 H3)</li> <li>Detects: Heading level jumps, unmatched brackets</li> <li>Checks: First heading is H1</li> <li> <p>Severity: Medium (Warning)</p> </li> <li> <p><code>test_link_syntax_validation(docs_dir)</code></p> </li> <li>Detects: Malformed link syntax before build</li> <li>Patterns:<ul> <li>Spaces in URLs: <code>[text](url with spaces){#39ffce9fd0767738366e8fa6954bd54e}</code></li> <li>Malformed wikilinks: <code>[[target]</code> (missing close)</li> <li>Empty links: <code>[text]()</code></li> <li>Mixed syntax: <code>[[[target](target|text]])</code></li> </ul> </li> <li> <p>Severity: High (Fails test)</p> </li> <li> <p><code>test_content_quality_metrics(docs_dir)</code></p> </li> <li>Analyzes: Word count, heading presence, link density</li> <li>Thresholds:<ul> <li>Very short: &lt; 50 words (excluding index.md)</li> <li>Very long: &gt; 5000 words</li> </ul> </li> <li>Reports: Quality statistics</li> <li>Severity: Informational</li> </ul> <p>Quality Metrics:</p> Python<pre><code>quality_stats = {\n    'total_files': int,\n    'files_with_frontmatter': int,\n    'files_with_headings': int,\n    'files_with_links': int,\n    'very_short_files': int,\n    'very_long_files': int,\n    'files_without_title': int\n}\n</code></pre>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#test_content_structurepy","title":"test_content_structure.py","text":"<p>Purpose: Validate Di\u00e1taxis documentation framework compliance.</p>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#classes_3","title":"Classes","text":"","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#testcontentstructure","title":"<code>TestContentStructure</code>","text":"<p>Ensures content organization follows Di\u00e1taxis principles.</p> <p>Content Classification:</p> Type Indicators Purpose Validation Tutorial \"step 1\", \"first\", \"let's\", \"walkthrough\" Learning-oriented Action verbs, clear progression How-to \"how to\", \"solution\", \"fix\", \"troubleshoot\" Problem-oriented Goal-oriented language Reference \"API\", \"syntax\", \"options\", \"specification\" Information-oriented Structured data, minimal instruction Explanation \"why\", \"because\", \"concept\", \"principle\" Understanding-oriented Theoretical content <p>Methods:</p> <ul> <li><code>classify_content_type(content: str, file_path: Path) -&gt; str</code></li> <li>Input: File content and path</li> <li>Analysis: Frontmatter, path structure, content patterns</li> <li>Returns: Content type classification</li> <li> <p>Algorithm: Pattern matching with scoring system</p> </li> <li> <p><code>test_diataxis_directory_structure(docs_dir)</code></p> </li> <li>Validates: Presence of Di\u00e1taxis directories</li> <li>Expected: <code>tutorials/</code>, <code>how-to/</code>, <code>reference/</code>, <code>explanation/</code></li> <li> <p>Severity: Medium (Warning)</p> </li> <li> <p><code>test_content_type_classification(docs_dir)</code></p> </li> <li>Classifies: All markdown files by content type</li> <li>Threshold: &lt; 30% unclassified files</li> <li>Reports: Classification distribution</li> <li> <p>Severity: Warning if too many unclassified</p> </li> <li> <p><code>test_tutorial_content_quality(docs_dir)</code></p> </li> <li>Validates: Tutorial-specific quality requirements</li> <li>Checks:<ul> <li>Step sequences present</li> <li>Action-oriented language (imperative verbs)</li> <li>Limited explanatory content</li> <li>Clear learning outcomes</li> </ul> </li> <li> <p>Severity: Medium (Warning)</p> </li> <li> <p><code>test_content_cross_references(docs_dir)</code></p> </li> <li>Analyzes: Cross-reference patterns between content types</li> <li>Validates: Appropriate linking strategies</li> <li>Flags: Inappropriate references (e.g., reference \u2192 tutorial)</li> <li>Severity: Medium (Warning)</li> </ul>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#test_utilspy","title":"test_utils.py","text":"<p>Purpose: Shared utilities for build output parsing and validation.</p>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#core-functions","title":"Core Functions","text":"","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#build-output-parsing","title":"Build Output Parsing","text":"<ul> <li><code>parse_mkdocs_output(output: str) -&gt; Dict[str, List[Dict[str, str]]]</code></li> <li>Input: Combined stdout/stderr from mkdocs build</li> <li>Output: Structured warning/error/info objects</li> <li> <p>Parsing: Regex-based message extraction and classification</p> </li> <li> <p><code>parse_warning_message(warning_text: str) -&gt; Optional[Dict[str, str]]</code></p> </li> <li>Patterns:<ul> <li>Navigation references: <code>A reference to 'X' is included in the 'nav' configuration</code></li> <li>Broken links: <code>Doc file 'X' contains a link 'Y', but the target is not found</code></li> <li>Link suggestions: <code>Did you mean 'Z'?</code></li> </ul> </li> <li> <p>Returns: Structured warning object with type/severity/details</p> </li> <li> <p><code>categorize_warnings(parsed_output: Dict) -&gt; Dict[str, List[Dict]]</code></p> </li> <li>Input: Parsed warnings from <code>parse_mkdocs_output</code></li> <li>Output: Warnings grouped by severity level</li> <li> <p>Categories: critical, high, medium, low</p> </li> <li> <p><code>format_warning_report(categorized_warnings: Dict) -&gt; str</code></p> </li> <li>Input: Categorized warnings</li> <li>Output: Human-readable report with counts and details</li> <li>Features: Grouped by type, limited display, summary statistics</li> </ul>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#link-validation-utilities","title":"Link Validation Utilities","text":"<ul> <li><code>find_markdown_links(content: str) -&gt; List[Dict[str, str]]</code></li> <li>Pattern: <code>\\[([^\\]]+)\\]\\(([^)]+)\\)</code></li> <li> <p>Returns: List of <code>{'text': str, 'url': str}</code> objects</p> </li> <li> <p><code>validate_internal_link(link: str, current_file: Path, docs_dir: Path) -&gt; bool</code></p> </li> <li>Validation: Path resolution and file existence</li> <li>Handles: Relative paths, directory links, .md extension addition</li> <li>Returns: Boolean validity status</li> </ul>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#file-system-utilities","title":"File System Utilities","text":"<ul> <li><code>get_all_markdown_files(directory: Path, exclude_patterns: List[str]) -&gt; List[Path]</code></li> <li>Recursive: Finds all .md files in directory tree</li> <li>Filtering: Supports glob pattern exclusions</li> <li>Returns: List of Path objects</li> </ul>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#justfile-integration","title":"Justfile Integration","text":"","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#command-reference","title":"Command Reference","text":"Bash<pre><code># Individual test suites\njust test-links           # Link validation comprehensive suite\njust test-static          # Static analysis and syntax validation\njust test-structure       # Di\u00e1taxis compliance and content classification\njust test-build-quality   # Build warning parsing and categorization\n\n# Comprehensive testing\njust test-comprehensive   # Execute all new test modules sequentially\n\n# Traditional commands (enhanced)\njust test                 # Run all pytest tests including new modules\njust test-all             # Full test suite including bash tests\n</code></pre>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#integration-points","title":"Integration Points","text":"<p>The test suite integrates with existing workflows:</p> <ol> <li>CI/CD Pipeline: All tests run via <code>pytest tests/ -v</code></li> <li>Pre-commit Hooks: Static analysis runs on modified files</li> <li>Development Workflow: <code>just dev-check</code> includes link validation</li> <li>Quality Gates: <code>just check-all</code> runs comprehensive validation</li> </ol>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#configuration","title":"Configuration","text":"","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#pytest-markers","title":"Pytest Markers","text":"Python<pre><code>@pytest.mark.unit          # Fast, isolated tests\n@pytest.mark.integration   # Tests requiring full environment\n@pytest.mark.slow          # Long-running tests (optional)\n</code></pre>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#test-execution-filters","title":"Test Execution Filters","text":"Bash<pre><code># Run only critical tests\npytest -m \"not slow\" tests/\n\n# Run specific test categories\npytest tests/test_build_quality.py::TestBuildQuality::test_no_critical_warnings\n\n# Verbose output with warnings\npytest tests/ -v -s\n</code></pre>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#environment-requirements","title":"Environment Requirements","text":"<ul> <li>Python: 3.8+</li> <li>Dependencies: pytest, mkdocs, yaml, pathlib</li> <li>Optional: pytest-benchmark (for performance testing)</li> </ul>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#error-handling","title":"Error Handling","text":"","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#test-failure-patterns","title":"Test Failure Patterns","text":"<ol> <li>Critical Failures: Immediately fail with detailed error messages</li> <li>Warning Accumulation: Skip tests with informational messages</li> <li>Threshold Violations: Fail when issue counts exceed limits</li> <li>Parse Errors: Fail with specific file/line information</li> </ol>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#recovery-strategies","title":"Recovery Strategies","text":"Python<pre><code># Graceful handling of missing directories\nif not docs_dir.exists():\n    pytest.skip(\"Docs directory not found\")\n\n# Threshold-based warnings\nif warning_count &gt; THRESHOLD:\n    pytest.fail(f\"Too many warnings: {warning_count}\")\nelse:\n    pytest.skip(f\"Warnings found (acceptable): {warning_count}\")\n</code></pre>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#performance-characteristics","title":"Performance Characteristics","text":"","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#execution-times-approximate","title":"Execution Times (Approximate)","text":"Test Module Typical Runtime Scaling Factor test_build_quality 5-10 seconds Linear with content test_links 3-8 seconds O(n\u00d7m) files\u00d7links test_static_analysis 2-5 seconds Linear with files test_content_structure 3-7 seconds Linear with files","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#optimization-strategies","title":"Optimization Strategies","text":"<ol> <li>Parallel Execution: Tests designed for pytest-xdist compatibility</li> <li>Caching: File content parsing cached within test runs</li> <li>Early Termination: Critical failures stop immediately</li> <li>Selective Execution: Marker-based test filtering</li> </ol>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#extension-points","title":"Extension Points","text":"","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#adding-new-validators","title":"Adding New Validators","text":"Python<pre><code># In test_utils.py\ndef parse_custom_warning(warning_text: str) -&gt; Optional[Dict[str, str]]:\n    pattern = r'your_custom_pattern'\n    match = re.match(pattern, warning_text)\n    if match:\n        return {\n            'type': 'custom_warning_type',\n            'severity': 'medium',\n            'details': match.groups()\n        }\n    return None\n\n# Register in parse_warning_message()\n</code></pre>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#custom-severity-levels","title":"Custom Severity Levels","text":"Python<pre><code># In categorize_warnings()\ncustom_categories = {\n    'critical': [],\n    'high': [],\n    'medium': [],\n    'low': [],\n    'custom_level': []  # Add custom severity\n}\n</code></pre>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#troubleshooting","title":"Troubleshooting","text":"","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#common-issues","title":"Common Issues","text":"<ol> <li>Import Errors: Ensure test_utils.py is in Python path</li> <li>Path Resolution: All tests use absolute paths</li> <li>Encoding Issues: Files must be UTF-8 encoded</li> <li>Permission Errors: Ensure read access to docs directory</li> </ol>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#debug-output","title":"Debug Output","text":"Bash<pre><code># Enable debug output\npytest tests/ -v -s --tb=long\n\n# Show test discovery\npytest --collect-only tests/\n\n# Run with coverage\npytest tests/ --cov=tests/\n</code></pre>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#validation-commands","title":"Validation Commands","text":"Bash<pre><code># Verify test discovery\npython -m pytest --collect-only tests/test_build_quality.py\n\n# Test specific functionality\npython -c \"from tests.test_utils import parse_mkdocs_output; print('Import successful')\"\n</code></pre>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#version-history","title":"Version History","text":"Version Date Changes 1.0.0 2025-01-22 Initial comprehensive test suite implementation","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"reference/testing/test-suite-reference/#references","title":"References","text":"<ul> <li>MkDocs Documentation</li> <li>Pytest Documentation</li> <li>Di\u00e1taxis Framework</li> <li>Material for MkDocs</li> </ul> <p>This reference documentation is maintained as part of the DRUIDS test infrastructure and follows semantic versioning for API stability.</p>","tags":["testing","mkdocs","validation","links","quality-assurance"]},{"location":"start/","title":"Is DRUIDS Right for Your Organization?","text":"","tags":["getting-started","assessment","introduction"]},{"location":"start/#quick-assessment-2-minutes","title":"Quick Assessment (2 minutes)","text":"<p>Answer these questions about your organization:</p>","tags":["getting-started","assessment","introduction"]},{"location":"start/#knowledge-memory","title":"Knowledge &amp; Memory","text":"<ul> <li> When experienced members leave, do you lose critical knowledge?</li> <li> Do new members ask questions that have been answered many times before?</li> <li> Have you ever repeated a failed tactic because no one remembered the previous attempt?</li> <li> Is important information scattered across emails, docs, and people's memories?</li> </ul>","tags":["getting-started","assessment","introduction"]},{"location":"start/#security-control","title":"Security &amp; Control","text":"<ul> <li> Are you uncomfortable with Google/Discord/Zoom having access to your organizing data?</li> <li> Have you worried about platform shutdowns or account suspensions?</li> <li> Do you need different security levels for different information?</li> <li> Would a subpoena to a tech company expose years of organizing?</li> </ul>","tags":["getting-started","assessment","introduction"]},{"location":"start/#process-democracy","title":"Process &amp; Democracy","text":"<ul> <li> Do decisions get made but then forgotten or poorly documented?</li> <li> Is it hard to track who decided what and when?</li> <li> Do minority positions disappear from the record?</li> <li> Does your tech setup reinforce hierarchies you're trying to eliminate?</li> </ul>","tags":["getting-started","assessment","introduction"]},{"location":"start/#sustainability","title":"Sustainability","text":"<ul> <li> Do organizers burn out from explaining the same things repeatedly?</li> <li> Does onboarding new members take weeks or months?</li> <li> Are you dependent on one or two \"tech people\"?</li> <li> Would your organizing survive if key people suddenly left?</li> </ul> <p>If you checked 3+ boxes, DRUIDS will transform your organizing.</p>","tags":["getting-started","assessment","introduction"]},{"location":"start/#what-makes-druids-different","title":"What Makes DRUIDS Different","text":"Traditional Tools DRUIDS Corporate surveillance You control the infrastructure Knowledge in individual heads Institutional memory that persists Months to onboard Days to productivity Tech hierarchy Democratized knowledge Repeated mistakes Lessons compound over time <p>Want to understand these problems deeply? Explore Institutional Memory and Tech Democratization as Class Struggle.</p>","tags":["getting-started","assessment","introduction"]},{"location":"start/#three-paths-forward","title":"Three Paths Forward","text":"","tags":["getting-started","assessment","introduction"]},{"location":"start/#we-need-this-yesterday","title":"\ud83d\ude80 \"We need this yesterday\"","text":"<p>\u2192 Jump to Installation Guide Get running in under an hour</p>","tags":["getting-started","assessment","introduction"]},{"location":"start/#we-need-to-understand-first","title":"\ud83d\udcda \"We need to understand first\"","text":"<p>\u2192 Start with Why DRUIDS? Deep dive into problems and solutions</p>","tags":["getting-started","assessment","introduction"]},{"location":"start/#show-me-what-it-does","title":"\ud83c\udfaf \"Show me what it does\"","text":"<p>\u2192 Try the Quick Demo See DRUIDS in action (5 minutes)</p> <p>Different organizing context? Check Visual Learning Paths for paths tailored to labor unions, tenant organizing, or direct action groups.</p>","tags":["getting-started","assessment","introduction"]},{"location":"start/#common-concerns-addressed","title":"Common Concerns Addressed","text":"<p>\"We're not technical\" If your members can use smartphones and social media, they can use DRUIDS. We've eliminated unnecessary complexity.</p> <p>\"We're too small\" If you take meeting minutes and make decisions, you're big enough for DRUIDS. It scales from 3 to 300.</p> <p>\"We don't have time\" How much time do you waste looking for lost documents? Explaining things repeatedly? DRUIDS saves more time than it takes.</p> <p>\"Seems like overkill\" Is preserving institutional memory overkill? Is security overkill? Is sustainable organizing overkill?</p>","tags":["getting-started","assessment","introduction"]},{"location":"start/#why-were-building-this","title":"Why We're Building This","text":"<p>DRUIDS is currently in active development by the Kansas Socialist Book Club. We're building it because we've experienced these exact problems in our own organizing and seen them repeated across movements. </p> <p>While DRUIDS hasn't been deployed yet, it's based on proven technologies (Git, Obsidian, strong encryption) that revolutionary organizations are already using separately. DRUIDS integrates them into a cohesive system designed specifically for organizing needs.</p>","tags":["getting-started","assessment","introduction"]},{"location":"start/#next-steps","title":"Next Steps","text":"<ol> <li>Learn - Understand Core Concepts</li> <li>Try - Run through the Quick Demo</li> <li>Implement - Follow the Installation Guide</li> <li>Teach - Share knowledge using our Workshop Templates</li> </ol> <p>Already convinced but need help with migration? Check guides for escaping Google or leaving Discord.</p> <p>Ready to build infrastructure for revolution? Let's begin.</p> <p>Backlinks:</p>","tags":["getting-started","assessment","introduction"]},{"location":"start/onboarding-yourself-in-3-days/","title":"Onboarding Yourself in 3 Days","text":"","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#youre-not-starting-from-zero","title":"You're Not Starting From Zero","text":"<p>Every organizer brings experience. Maybe you've: - Lost meeting notes in someone's Google Drive - Watched experienced comrades burn out taking all knowledge with them - Repeated the same mistakes because no one remembered last year's campaign - Felt dependent on \"the tech person\" who might leave tomorrow</p> <p>DRUIDS transforms these material problems into collective strength. In three days, you'll build the capacity to never lose organizing history again.</p>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#before-you-begin-material-requirements","title":"Before You Begin: Material Requirements","text":"<p>Technical: - A computer (any operating system) - Internet for initial setup - 30 minutes of uninterrupted time per day</p> <p>Political: - Understanding that tools shape organizing - Commitment to collective ownership over individual expertise - Patience with yourself while learning</p> <p>Ready to build collective memory? Let's begin.</p>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#day-1-understanding-the-vision-2-3-hours","title":"Day 1: Understanding the Vision (2-3 hours)","text":"","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#morning-why-druids-exists","title":"Morning: Why DRUIDS Exists","text":"<p>Start here to ground yourself in the political purpose:</p> <ol> <li>Read: Why DRUIDS?</li> <li>Understand the material problems we solve</li> <li> <p>See how Google/Discord fail revolutionary organizations</p> </li> <li> <p>Read: Institutional Memory and Onboarding</p> </li> <li>Deep dive into the two key pain points DRUIDS solves</li> <li>Understand why organizations hemorrhage knowledge</li> <li> <p>Learn why democratic centralism needs version control</p> </li> <li> <p>Experience: Quick Demo</p> </li> <li>See DRUIDS in action (5 minutes)</li> <li>Understand the daily workflow</li> <li> <p>Visualize your organization using this</p> </li> <li> <p>Reflect: Your Organization's Pain Points    Write down:</p> </li> <li>What knowledge has your organization lost?</li> <li>Who holds critical information alone?</li> <li>What would happen if they left tomorrow?</li> </ol>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#afternoon-core-concepts","title":"Afternoon: Core Concepts","text":"<p>Now understand the revolutionary theory behind the tools:</p> <ol> <li>Study: Institutional Memory</li> <li>Why organizations hemorrhage knowledge</li> <li>How memory builds revolutionary capacity</li> <li> <p>The compound effect of preserved struggle</p> </li> <li> <p>Study: Democratic Centralism in Practice</p> </li> <li>Freedom of discussion = branches</li> <li>Unity of action = merges</li> <li> <p>Minority positions preserved in history</p> </li> <li> <p>Study: DRUIDS Security Implementation</p> </li> <li>Security through political clarity, not paranoia</li> <li>Three-tier model for real threats</li> <li>Why perfect security is liberal fantasy</li> </ol>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#evening-self-assessment","title":"Evening: Self-Assessment","text":"<p>Political Check-in: - Do you understand why technical infrastructure is political? - Can you explain DRUIDS to a comrade in your own words? - Are you ready to democratize technical knowledge?</p> <p>Continue when you can answer yes to all three.</p>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#day-2-learning-by-doing-3-4-hours","title":"Day 2: Learning By Doing (3-4 hours)","text":"","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#morning-your-first-repository","title":"Morning: Your First Repository","text":"<p>Time to get your hands dirty. No more theory without practice:</p> <ol> <li>Install Git: Complete Setup Guide</li> <li>Platform-specific instructions</li> <li>Common troubleshooting</li> <li> <p>Verification steps</p> </li> <li> <p>Learn Through Story: Git Through a Campaign</p> </li> <li>Follow organizers through a rent strike</li> <li>Learn commands through material needs</li> <li> <p>See democracy in action through merges</p> </li> <li> <p>Practice the Basics:    Bash<pre><code># Create your practice repository\nmkdir druids-practice\ncd druids-practice\ngit init\n\n# Document your first meeting\necho \"# Practice Meeting Notes\" &gt; meetings/first-meeting.md\ngit add meetings/\ngit commit -m \"Document first practice meeting\"\n</code></pre></p> </li> </ol>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#afternoon-collaborative-workflows","title":"Afternoon: Collaborative Workflows","text":"<p>Now learn how teams work together:</p> <ol> <li>Essential Commands: Git in 7 Commands</li> <li>The 90% you'll use daily</li> <li>Practical examples from organizing</li> <li> <p>Common patterns</p> </li> <li> <p>Practice Collaboration:</p> </li> <li>Create a branch for proposals</li> <li>Make changes in parallel</li> <li>Merge different perspectives</li> <li> <p>Resolve conflicts democratically</p> </li> <li> <p>Security Basics: Help, I Committed Sensitive Data!</p> </li> <li>What not to commit</li> <li>Emergency procedures</li> <li>Building security habits</li> </ol>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#evening-integration","title":"Evening: Integration","text":"<p>Technical Check-in: - Can you create a repository? - Can you commit meeting notes? - Can you create and merge branches? - Do you understand what NOT to commit?</p> <p>Ready to contribute? Tomorrow you become a teacher.</p>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#day-3-contributing-and-teaching-2-3-hours","title":"Day 3: Contributing and Teaching (2-3 hours)","text":"","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#morning-your-first-contribution","title":"Morning: Your First Contribution","text":"<p>Join the collective by contributing:</p> <ol> <li>Choose Your Role:</li> <li>Secretary? Read Meeting Workflows</li> <li>Coordinator? Read Project Management</li> <li> <p>Educator? Read Teaching Without Priesthood</p> </li> <li> <p>Make Your First Real Commit:</p> </li> <li>Document an actual meeting</li> <li>Create a proposal</li> <li>Write a reflection</li> <li> <p>Fix a typo in documentation</p> </li> <li> <p>Submit for Review:</p> </li> <li>Push your branch</li> <li>Create a pull request</li> <li>Engage with feedback</li> <li>See democracy in action</li> </ol>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#afternoon-preparing-to-teach","title":"Afternoon: Preparing to Teach","text":"<p>The revolution spreads through teaching:</p> <ol> <li>Understand Pedagogy: Teaching Tech Without Creating Priests</li> <li>Rotate the keyboard</li> <li>Demystify through practice</li> <li> <p>Build collective capacity</p> </li> <li> <p>Plan Your First Workshop:</p> </li> <li>Identify 2-3 comrades to teach</li> <li>Choose a real organizing task</li> <li>Prepare simple exercises</li> <li> <p>Schedule within a week</p> </li> <li> <p>Create Learning Materials:</p> </li> <li>Adapt examples to your context</li> <li>Use your organization's campaigns</li> <li>Build on existing struggles</li> </ol>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#evening-reflection-and-commitment","title":"Evening: Reflection and Commitment","text":"<p>Capacity Check-in: - Can you preserve organizational memory? - Can you work collaboratively with Git? - Can you teach another comrade? - Will you commit to daily practice?</p>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#your-ongoing-journey","title":"Your Ongoing Journey","text":"","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#week-1-daily-practice","title":"Week 1: Daily Practice","text":"<ul> <li>Commit one thing daily (meeting notes, ideas, reflections)</li> <li>Read one new document each day</li> <li>Help one comrade with Git</li> </ul>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#week-2-deepen-understanding","title":"Week 2: Deepen Understanding","text":"<ul> <li>Study Advanced Workflows</li> <li>Implement Security Practices</li> <li>Run your first workshop</li> </ul>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#month-1-build-infrastructure","title":"Month 1: Build Infrastructure","text":"<ul> <li>Migrate from corporate platforms</li> <li>Establish team workflows</li> <li>Document your first campaign</li> </ul>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#month-3-revolutionary-routine","title":"Month 3: Revolutionary Routine","text":"<ul> <li>Git becomes invisible infrastructure</li> <li>Knowledge compounds daily</li> <li>New members onboard themselves</li> <li>Your organization remembers everything</li> </ul>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#common-challenges-and-solutions","title":"Common Challenges and Solutions","text":"<p>\"I'm not technical\" - Neither were most organizers using DRUIDS - You learned to organize; you can learn this - Focus on one command at a time</p> <p>\"I don't have time\" - How much time do you waste re-explaining things? - 30 minutes daily prevents hours of future confusion - This IS organizing work, not extra work</p> <p>\"My organization resists change\" - Start with yourself - Demonstrate value through practice - Let results speak louder than arguments</p> <p>\"I'm stuck on something\" - Check QM Troubleshooting - Ask in community forums - Remember: every expert was once confused</p>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#success-metrics","title":"Success Metrics","text":"<p>You're ready when: - \u2705 You commit without thinking about commands - \u2705 You naturally document decisions with context - \u2705 You've taught at least one other person - \u2705 You can't imagine organizing without version control</p>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#next-steps","title":"Next Steps","text":"<p>Immediate: 1. Set up your organization's first repository 2. Document your next meeting 3. Schedule a workshop</p> <p>This Week: - Read Daily Git Workflows - Study Security Playbook - Plan migration from corporate platforms</p> <p>This Month: - Run Git Workshop - Implement Three-Tier Security - Build your first Project Management Setup</p>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/onboarding-yourself-in-3-days/#remember","title":"Remember","text":"<p>Every commit is a small act of revolution. Every push shares knowledge with comrades. Every merge strengthens democratic practice.</p> <p>You're not just learning Git. You're building infrastructure for liberation.</p> <p>The revolution will be committed, one decision at a time.</p> <p>Questions? Need support? \u2192 Check our Getting Started Guide Ready to organize? \u2192 Daily Workflows Want to go deeper? \u2192 Revolutionary Theory</p> <p>Backlinks:</p>","tags":["onboarding","getting-started","self-guided","tutorial","capacity-building"]},{"location":"start/quick-demo/","title":"DRUIDS in 5 Minutes","text":"<p>This demo shows how DRUIDS solves real organizing problems. Follow along to see the power of revolutionary infrastructure.</p>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#scenario-planning-a-rent-strike","title":"Scenario: Planning a Rent Strike","text":"<p>Your tenant union is planning a rent strike. Let's see how DRUIDS transforms this work.</p> <p>Want to learn Git through a complete campaign? Check out Git Through Campaign for an in-depth tutorial.</p>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#without-druids-the-old-way","title":"Without DRUIDS (The Old Way)","text":"<p>Monday - Emergency meeting about 40% rent increase Maria takes notes in Google Doc #47</p> <p>Wednesday - Someone \"cleans up\" the drive Meeting notes are... somewhere?</p> <p>Friday - \"What did we decide?\" 45 minutes searching emails and docs</p> <p>Next Week - New member joins \"Talk to Maria, Sarah, and check Discord from last month\"</p> <p>Month Later - Maria burns out and leaves Years of knowledge walks out the door</p>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#with-druids-the-revolutionary-way","title":"With DRUIDS (The Revolutionary Way)","text":"","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#step-1-document-the-meeting-30-seconds","title":"Step 1: Document the Meeting (30 seconds)","text":"Bash<pre><code># Create meeting notes\ndruids new meeting --type=emergency\n\n# DRUIDS creates: meetings/2024-11-15-emergency-meeting.md\n</code></pre> <p>The template appears: Markdown<pre><code># Emergency Meeting - 2024-11-15\n\n## Attendees\n- Maria (facilitator)\n- Jamal  \n- Li (notes)\n- 47 other tenants\n\n## Agenda\n1. SafeHaven 40% rent increase\n2. Formation of tenant union\n3. Next steps\n\n## Decisions\n- [DECIDED] Form Riverside Tenant Union (unanimous)\n- [DECIDED] Demand rent freeze (48-2-0)\n- [DECIDED] Next meeting Tuesday Nov 19\n\n## Action Items\n- [ ] Maria: Draft demand letter\n- [ ] Jamal: Flyer building\n- [ ] Li: Create contact sheet\n</code></pre></p>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#step-2-save-forever-10-seconds","title":"Step 2: Save Forever (10 seconds)","text":"Bash<pre><code># Save to permanent history\ndruids save \"Form tenant union to fight 40% increase\"\n\n# Created commit: a3f42d1\n</code></pre>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#step-3-everyone-stays-synchronized","title":"Step 3: Everyone Stays Synchronized","text":"<p>Jamal's computer: Bash<pre><code>druids pull\n# Receives: Emergency meeting notes\n</code></pre></p> <p>New member next week: Bash<pre><code>druids clone riverside-union\n# Gets: Complete history, all decisions, context\n</code></pre></p>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#step-4-find-anything-instantly","title":"Step 4: Find Anything Instantly","text":"<p>\"What did we decide about rent freeze?\" Bash<pre><code>druids search \"rent freeze\"\n\n# Found in commits:\n# a3f42d1 - DECIDED: Demand rent freeze (48-2-0)\n# b2e1c93 - Research: Average rent increases 2019-2024\n# c5d8f22 - Template: Rent freeze demand letter\n</code></pre></p> <p>\"Why did previous phone banking fail?\" Bash<pre><code>druids search \"phone banking lessons\"\n\n# Found in: campaigns/2019-phone-banking-retrospective.md\n# Key lesson: Started too late, needed 3 week lead time\n</code></pre></p>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#the-power-revealed","title":"The Power Revealed","text":"<p>In 5 minutes you've seen:</p> <p>\u2705 Institutional Memory - Decisions preserved forever \u2705 Instant Onboarding - New members productive immediately \u2705 No Single Point of Failure - Maria can leave, work continues \u2705 Searchable History - Find anything in seconds \u2705 Democratic Transparency - See who decided what and when  </p>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#try-it-yourself","title":"Try It Yourself","text":"","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#option-1-browser-demo-no-installation","title":"Option 1: Browser Demo (No Installation)","text":"<p>Visit try.druids.dev for an interactive demo (Note: Demo environment coming soon)</p>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#option-2-local-quick-start-15-minutes","title":"Option 2: Local Quick Start (15 minutes)","text":"Bash<pre><code># Install DRUIDS\ncurl -sSL https://druids.dev/install.sh | bash\n\n# Create your first repository\ndruids init my-organization\n\n# Create a meeting note\ndruids new meeting\n\n# Make your first commit\ndruids save \"Our first DRUIDS commit!\"\n</code></pre>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#what-makes-this-revolutionary","title":"What Makes This Revolutionary?","text":"","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#1-you-own-your-infrastructure","title":"1. You Own Your Infrastructure","text":"<ul> <li>No Google reading your plans</li> <li>No Discord forgetting your history  </li> <li>No corporate surveillance</li> <li>Your data, your control</li> </ul>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#2-knowledge-compounds-over-time","title":"2. Knowledge Compounds Over Time","text":"<ul> <li>Every lesson learned is preserved</li> <li>Mistakes aren't repeated</li> <li>New campaigns build on old ones</li> <li>Experience accumulates</li> </ul>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#3-democracy-in-practice","title":"3. Democracy in Practice","text":"<ul> <li>Every decision tracked</li> <li>Minority positions preserved</li> <li>Transparent process</li> <li>Accountable leadership</li> </ul>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#4-sustainable-organizing","title":"4. Sustainable Organizing","text":"<ul> <li>No more burnout from repetition</li> <li>Knowledge outlasts individuals</li> <li>Onboarding becomes self-service</li> <li>Focus energy on new struggles</li> </ul>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#common-questions","title":"Common Questions","text":"<p>\"Is this just Git with templates?\" Git is the foundation, but DRUIDS adds: - Security tiers for sensitive info - Templates for organizing work - Integration with friendly tools - Workflows designed for movements</p> <p>\"How is this different from Google Docs?\" - You control it (not Google) - History is permanent (not editable) - Works offline (not cloud-dependent) - Encrypted options (not surveilled)</p> <p>\"Do I need to be technical?\" If you can: - Send an email - Use a word processor - Follow a recipe</p> <p>You can use DRUIDS.</p>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/quick-demo/#next-steps","title":"Next Steps","text":"<p>Ready to implement? \u2192 Installation Guide</p> <p>Want to understand more? \u2192 Core Concepts</p> <p>Need to convince others? \u2192 Why DRUIDS?</p> <p>Escaping corporate surveillance? \u2192 Migration from Google \u2192 Migration from Discord</p> <p>Ready to teach others? \u2192 Teaching Without Priesthood</p> <p>In 5 minutes, you've seen how DRUIDS transforms organizing. Imagine what it can do for your movement.</p> <p>Backlinks:</p>","tags":["demo","quick-start","example","tutorial"]},{"location":"start/why-druids/","title":"Why DRUIDS?","text":"<p>Not sure this is for you? Check out our Visual Learning Paths to see different journeys based on your organizing context.</p>","tags":["introduction","value-proposition","organizing","infrastructure"]},{"location":"start/why-druids/#the-material-reality","title":"The Material Reality","text":"<p>Your revolutionary organization is hemorrhaging knowledge. Every time an experienced organizer burns out, years of lessons walk out the door. New members take months to become productive, asking the same questions that have been answered dozens of times before.</p> <p>Meanwhile, your data lives on corporate surveillance platforms that read every word, log every connection, and hand it all to the state when subpoenaed.</p> <p>DRUIDS changes this.</p>","tags":["introduction","value-proposition","organizing","infrastructure"]},{"location":"start/why-druids/#what-is-druids","title":"What is DRUIDS?","text":"<p>DRUIDS (Democratic, Resilient, Unity-building Information Distribution System) is infrastructure for revolutionary organizations that:</p> <ul> <li>Preserves institutional memory - Every decision, lesson, and campaign becomes permanent organizational knowledge</li> <li>Accelerates onboarding - New members become productive in days, not months</li> <li>Resists surveillance - You control the infrastructure, not Google or Discord</li> <li>Enables democratic process - Transparent decision-making with preserved dissent</li> <li>Scales without hierarchy - Same system works for 5 or 500 members</li> </ul>","tags":["introduction","value-proposition","organizing","infrastructure"]},{"location":"start/why-druids/#the-two-core-problems-we-solve","title":"The Two Core Problems We Solve","text":"","tags":["introduction","value-proposition","organizing","infrastructure"]},{"location":"start/why-druids/#1-institutional-memory-loss","title":"1. Institutional Memory Loss","text":"<p>Without DRUIDS: - \"Why did we stop doing phone banking?\"  - \"Ask Sarah... oh, she moved last year.\" - Knowledge trapped in individual heads - Repeated mistakes from forgotten lessons - Campaigns starting from scratch</p> <p>With DRUIDS: Bash<pre><code>git log --grep=\"phone banking\"\n# Shows: 2019 attempt, why it failed, lessons learned\n</code></pre> - Complete campaign histories preserved - Decisions tracked with context - Lessons compound over time - Knowledge survives personnel changes</p>","tags":["introduction","value-proposition","organizing","infrastructure"]},{"location":"start/why-druids/#2-onboarding-burnout","title":"2. Onboarding Burnout","text":"<p>Without DRUIDS: - Experienced organizers exhausted by repetitive explanations - New members lost for months - Same training given individually - Institutional knowledge gatekept by availability</p> <p>With DRUIDS: - Self-service onboarding from day one - Templates enforce best practices - Past decisions provide context - New members contribute immediately</p>","tags":["introduction","value-proposition","organizing","infrastructure"]},{"location":"start/why-druids/#druids-is-power-steering-not-a-compass","title":"DRUIDS is Power Steering, Not a Compass","text":"<p>DRUIDS doesn't give you ideology or direction - that comes from your revolutionary politics. DRUIDS makes the journey easier:</p> <ul> <li>Traditional organizing: Like driving without power steering - every turn exhausts</li> <li>With DRUIDS: Same destination, but you arrive with energy to fight</li> </ul> <p>Think of it as infrastructure, like roads. The Romans built roads that everyone used - revolutionaries, merchants, and yes, even armies. But revolutionaries used them to spread uprising, not empire.</p>","tags":["introduction","value-proposition","organizing","infrastructure"]},{"location":"start/why-druids/#based-on-real-organizing-needs","title":"Based on Real Organizing Needs","text":"<p>DRUIDS is in development because we've seen these patterns repeatedly:</p> <ul> <li>Organizations using Git for some things, Google Docs for others, Signal for coordination - but nothing talks to each other</li> <li>Security practices that are either too lax (everything on Google) or too strict (can't get work done)</li> <li>The same knowledge gaps appearing in organization after organization</li> </ul> <p>DRUIDS integrates proven tools (Git, encryption, distributed systems) into a cohesive framework designed specifically for revolutionary organizing.</p>","tags":["introduction","value-proposition","organizing","infrastructure"]},{"location":"start/why-druids/#who-druids-is-for","title":"Who DRUIDS is For","text":"<p>\u2705 Revolutionary organizations tired of losing knowledge \u2705 Union organizers building sustainable campaigns \u2705 Mutual aid networks coordinating without hierarchy \u2705 Study groups preserving political education \u2705 Any group that values democracy over efficiency  </p> <p>\u274c Not for: Corporations, NGOs, electoral campaigns, or anyone comfortable with surveillance capitalism</p>","tags":["introduction","value-proposition","organizing","infrastructure"]},{"location":"start/why-druids/#getting-started-is-simple","title":"Getting Started is Simple","text":"<ol> <li>Assess your pain - What knowledge do you lose when people leave?</li> <li>Start small - Begin with meeting minutes in Git</li> <li>Build habits - Make documentation part of organizing</li> <li>Expand gradually - Add security tiers as needed</li> </ol> <p>Ready to see it in action? Try our Quick Demo - just 5 minutes to see the power.</p> <p>Need the theory first? Dive into Institutional Memory to understand the problem deeply.</p>","tags":["introduction","value-proposition","organizing","infrastructure"]},{"location":"start/why-druids/#the-choice","title":"The Choice","text":"<p>Continue with: - Google reading your plans - Discord forgetting your history - Knowledge walking out the door - Burnout from repetitive work</p> <p>Or build: - Infrastructure you control - Memory that persists - Democracy that scales - Capacity that compounds</p>","tags":["introduction","value-proposition","organizing","infrastructure"]},{"location":"start/why-druids/#ready-to-start","title":"Ready to Start?","text":"<p>\u2192 Quick Demo - See DRUIDS in action (5 minutes) \u2192 Core Concepts - Understand the foundation \u2192 Installation Guide - Get running today  </p> <p>\"The master's tools will never dismantle the master's house. So we built our own tools.\"</p> <p>Backlinks:</p>","tags":["introduction","value-proposition","organizing","infrastructure"]},{"location":"teach/","title":"Teaching DRUIDS","text":"<p>New to teaching tech? Start with how to teach without creating hierarchies.</p> <p>Ready for structured workshops? Use our Git workshop template.</p>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#core-philosophy","title":"Core Philosophy","text":"<p>Teaching DRUIDS isn't about creating technical experts - it's about democratizing knowledge and eliminating hierarchies. Every person who learns DRUIDS should be able to teach someone else.</p>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#teaching-principles","title":"\ud83c\udfaf Teaching Principles","text":"","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#no-tech-priests","title":"No Tech Priests","text":"<ul> <li>Rotate who teaches</li> <li>Make mistakes publicly  </li> <li>Emphasize that everyone can learn</li> <li>Destroy the mystique</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#material-examples","title":"Material Examples","text":"<ul> <li>Use real organizing scenarios</li> <li>Connect every concept to their work</li> <li>Show immediate practical value</li> <li>Build from their experience</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#collective-learning","title":"Collective Learning","text":"<ul> <li>Pair teaching with practice</li> <li>Create study groups not lectures</li> <li>Share keyboards during demos</li> <li>Learn by doing together</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#teaching-resources","title":"\ud83d\udcda Teaching Resources","text":"","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#foundational","title":"Foundational","text":"<ul> <li>Teaching Tech Without Priesthood - Core pedagogical approach</li> <li>Workshop Materials - Ready-to-use session plans</li> <li>Learning Paths - Different journeys for different contexts</li> <li>Revolutionary Style Guide - Help learners navigate</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#workshop-templates","title":"Workshop Templates","text":"","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#introduction-workshop-2-hours","title":"Introduction Workshop (2 hours)","text":"<ol> <li>Why we need revolutionary infrastructure (30 min)</li> <li>Demo: Your first commit (30 min)</li> <li>Hands-on: Document a real meeting (45 min)</li> <li>Q&amp;A and troubleshooting (15 min)</li> </ol>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#git-basics-workshop-3-hours","title":"Git Basics Workshop (3 hours)","text":"<ol> <li>Git isn't programming (20 min)</li> <li>The magnificent seven commands (40 min)</li> <li>Practice: Git Through Campaign (90 min)</li> <li>Conflict resolution exercise (30 min)</li> </ol>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#security-workshop-25-hours","title":"Security Workshop (2.5 hours)","text":"<ol> <li>Threat assessment for organizers (45 min)</li> <li>Three-tier security model (30 min)</li> <li>Practice: Encryption and keys (45 min)</li> <li>Security culture discussion (30 min)</li> </ol>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#learning-paths-by-role","title":"\ud83c\udf93 Learning Paths by Role","text":"","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#for-new-members","title":"For New Members","text":"<p>Goal: Contributing within one week</p> <ol> <li>Orientation to DRUIDS concept</li> <li>First commit exercise</li> <li>Daily workflow practice</li> <li>Finding information skills</li> </ol>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#for-facilitators","title":"For Facilitators","text":"<p>Goal: Run effective meetings with DRUIDS</p> <ol> <li>Meeting templates mastery</li> <li>Decision documentation</li> <li>Action item tracking</li> <li>Repository organization</li> </ol>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#for-security-officers","title":"For Security Officers","text":"<p>Goal: Implement and maintain security practices</p> <ol> <li>Threat modeling</li> <li>Security tier implementation</li> <li>Incident response</li> <li>Training others in OpSec</li> </ol>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#for-coordinators","title":"For Coordinators","text":"<p>Goal: Manage multi-team workflows</p> <ol> <li>Branch strategies</li> <li>Merge conflict resolution</li> <li>Federation setup</li> <li>Performance monitoring</li> </ol>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#teaching-tools","title":"\ud83d\udee0\ufe0f Teaching Tools","text":"","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#hands-on-exercises","title":"Hands-On Exercises","text":"<ul> <li>Meeting Minutes Challenge - Document a mock meeting</li> <li>Campaign Planning - Use Git Through Campaign tutorial</li> <li>Security Drill - Practice incident response</li> <li>Merge Conflict Party - Make conflicts fun</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#visual-aids","title":"Visual Aids","text":"<ul> <li>Git workflow diagrams</li> <li>Security model charts</li> <li>Before/after organizing comparisons</li> <li>Command reference cards</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#assessment-tools","title":"Assessment Tools","text":"<ul> <li>Skills checklists</li> <li>Practice scenarios</li> <li>Peer teaching exercises</li> <li>Real-world projects</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#measuring-learning","title":"\ud83d\udcca Measuring Learning","text":"","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#individual-progress","title":"Individual Progress","text":"<ul> <li>Can create and commit</li> <li>Can find information</li> <li>Can resolve conflicts</li> <li>Can teach another person</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#organizational-adoption","title":"Organizational Adoption","text":"<ul> <li>% of meetings documented</li> <li>Average onboarding time</li> <li>Security incidents avoided</li> <li>Knowledge retention rate</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#common-teaching-scenarios","title":"\ud83c\udfaf Common Teaching Scenarios","text":"","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#im-not-technical","title":"\"I'm Not Technical\"","text":"<ul> <li>Start with smartphones as computers</li> <li>Show Track Changes \u2192 Git connection (see Git isn't programming)</li> <li>Emphasize organizing skills they have</li> <li>Make first commit in 5 minutes</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#too-complicated","title":"\"Too Complicated\"","text":"<ul> <li>Teach only 7 commands first</li> <li>Use templates for everything</li> <li>GUI tools when helpful</li> <li>Gradual complexity increase</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#no-time-to-learn","title":"\"No Time to Learn\"","text":"<ul> <li>Calculate time lost to current methods</li> <li>Start with one workflow</li> <li>15-minute daily practice</li> <li>Immediate practical value</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#why-not-just-use-google","title":"\"Why Not Just Use Google?\"","text":"<ul> <li>Security awareness exercise</li> <li>Show surveillance examples (see Migration from Google)</li> <li>Discuss organizational autonomy</li> <li>Connect to political values (see why this matters)</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#building-teaching-capacity","title":"\ud83c\udfd7\ufe0f Building Teaching Capacity","text":"","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#create-teacher-pairs","title":"Create Teacher Pairs","text":"<ul> <li>Technical + Organizing expertise</li> <li>Rotate teaching duties</li> <li>Share preparation work</li> <li>Debrief after sessions</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#develop-local-materials","title":"Develop Local Materials","text":"<ul> <li>Customize examples to your work</li> <li>Create organization-specific guides</li> <li>Document local workflows</li> <li>Share improvements upstream</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#establish-practice-culture","title":"Establish Practice Culture","text":"<ul> <li>Regular skill shares</li> <li>Troubleshooting parties</li> <li>Celebration of mistakes</li> <li>Continuous improvement</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#teaching-tips","title":"\ud83d\udca1 Teaching Tips","text":"","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#before-the-session","title":"Before the Session","text":"<ul> <li>Test all technology</li> <li>Prepare real examples</li> <li>Have backup plans</li> <li>Create safe environment</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#during-the-session","title":"During the Session","text":"<ul> <li>Go slower than feels comfortable</li> <li>Repeat key concepts</li> <li>Encourage questions</li> <li>Rotate who's typing</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#after-the-session","title":"After the Session","text":"<ul> <li>Follow up within 24 hours</li> <li>Provide practice tasks</li> <li>Schedule check-ins</li> <li>Connect learners</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#scaling-knowledge","title":"\ud83d\ude80 Scaling Knowledge","text":"","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#documentation","title":"Documentation","text":"<ul> <li>Record common questions</li> <li>Create FAQ documents</li> <li>Build troubleshooting guides</li> <li>Share teaching materials</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#peer-networks","title":"Peer Networks","text":"<ul> <li>Connect new teachers</li> <li>Share successes/failures</li> <li>Coordinate curriculums</li> <li>Build resource library</li> </ul>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/#continuous-improvement","title":"Continuous Improvement","text":"<ul> <li>Gather feedback actively</li> <li>Iterate on materials</li> <li>Test new approaches</li> <li>Measure outcomes</li> </ul> <p>\"Each one teach one - technical knowledge is revolutionary when shared freely.\"</p> <p>Backlinks:</p>","tags":["teaching","education","training","capacity-building"]},{"location":"teach/teach-tech-without-priest-hood/","title":"How to Teach Tech Without Being a Tech Priest","text":"<p>A practical guide for tech workers who want to transfer knowledge, not maintain hierarchy</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#the-problem-youre-solving","title":"The Problem You're Solving","text":"<p>You know things that could help revolutionary movements. But every time you try to help, you accidentally: - Become \"the tech person\" everyone depends on - Use jargon that excludes rather than educates - Build tools FOR people instead of WITH them - Maintain the very hierarchy you want to destroy</p> <p>This guide helps you break that pattern.</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#pre-teaching-preparation","title":"Pre-Teaching Preparation","text":"","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#1-check-your-assumptions","title":"1. Check Your Assumptions","text":"<p>Before teaching anything, examine your beliefs:</p> <p>Tech Priest Assumes: - \"They won't understand the real explanation\" - \"I need to simplify this for non-technical people\" - \"They just need to know enough to use it\" - \"Teaching properly takes too long\"</p> <p>Liberatory Teacher Assumes: - \"They understand complex organizing - they can understand this\" - \"I need to translate jargon, not simplify concepts\" - \"They need to understand WHY, not just HOW\" - \"Teaching properly saves time long-term\"</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#2-learn-their-context","title":"2. Learn Their Context","text":"<p>Before teaching Git to organizers, understand: - What tools do they currently use? - What problems do they actually face? - What language do they use for their work? - What are their actual fears about technology?</p> <p>Bad: \"Let me teach you version control\" Good: \"Show me how you currently share meeting notes\"</p> <p>Ready for a concrete example? See our Git Through Campaign Workshop Template for how to teach Git using organizing scenarios.</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#3-prepare-liberatory-materials","title":"3. Prepare Liberatory Materials","text":"<p>Your teaching materials should: - Use examples from their work, not abstract concepts - Include the \"why\" not just the \"how\" - Provide multiple learning paths - Be available for future reference - Include troubleshooting for real scenarios</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#during-teaching-anti-hierarchy-practices","title":"During Teaching: Anti-Hierarchy Practices","text":"","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#1-start-with-shared-language","title":"1. Start with Shared Language","text":"<p>Tech Priest: \"Git uses a directed acyclic graph to store commits\" Liberatory: \"Git is like tracking changes in a document, but more powerful\"</p> <p>Always start with concepts they know, then build bridges: - \"You know how Google Docs shows edit history? Git is like that but...\" - \"Remember doing security culture trainings? Git commits are like that...\" - \"Think of branches like working groups that merge their work...\"</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#2-teach-concepts-before-commands","title":"2. Teach Concepts Before Commands","text":"<p>Tech Priest Approach: Text Only<pre><code>\"Type these commands:\ngit add .\ngit commit -m 'message'\ngit push\"\n</code></pre></p> <p>Liberatory Approach: Text Only<pre><code>\"Let's understand what we're doing:\n1. We're selecting which changes to save (like choosing which notes matter)\n2. We're creating a permanent record with context (like meeting minutes)\n3. We're sharing with comrades (like posting to Signal)\n\nNow let's see how Git does this...\"\n</code></pre></p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#3-make-mistakes-publicly","title":"3. Make Mistakes Publicly","text":"<p>Tech priests never make mistakes. Liberatory teachers do:</p> Bash<pre><code>$ git pish\ngit: 'pish' is not a git command. See 'git --help'.\n\n\"Oops, I meant 'push'. See? Git tells you when something's wrong. \nYou literally cannot break anything permanently.\"\n</code></pre> <p>This shows: - Everyone makes typos - Errors aren't scary - Git is forgiving - You're learning together</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#4-rotate-the-keyboard","title":"4. Rotate the Keyboard","text":"<p>Tech Priest: Types everything while others watch Liberatory: \"Who wants to drive? I'll navigate.\"</p> <p>Physical control matters. When they type: - They embody the knowledge - They overcome fear through action - They own the process - You become guide, not guru</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#5-connect-to-political-work","title":"5. Connect to Political Work","text":"<p>Every technical concept has a political parallel:</p> Tech Concept Political Parallel Commits Meeting minutes that can't be lost Branches Working groups developing proposals Merging Democratic consolidation of ideas Conflicts Competing proposals needing synthesis History Institutional memory preserved","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#6-acknowledge-multiple-paths","title":"6. Acknowledge Multiple Paths","text":"<p>Tech Priest: \"This is the right way\" Liberatory: \"Here are three ways - pick what works\"</p> <p>Example with Git: - \"Visual people might prefer GitHub Desktop\" - \"Command line gives more control\" - \"VS Code has Git built in\" - \"All valid - let's try each\"</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#common-teaching-scenarios","title":"Common Teaching Scenarios","text":"","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#scenario-1-i-could-never-learn-that","title":"Scenario 1: \"I Could Never Learn That\"","text":"<p>Tech Priest Response: \"Don't worry, I'll handle the technical stuff\" Liberatory Response: \"You organize workers against capital. This is easier.\"</p> <p>Then prove it: 1. Start with something they succeeded at 2. Show the parallel to tech concept 3. Let them do one small thing successfully 4. Build confidence through repetition</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#scenario-2-just-set-it-up-for-me","title":"Scenario 2: \"Just Set It Up For Me\"","text":"<p>Tech Priest Response: Sets it up, maintains dependency Liberatory Response: \"Let's set it up together so you can do it next time\"</p> <p>Process: 1. \"I'll do first step while you watch\" 2. \"You do second step while I guide\" 3. \"You do third step while I watch\" 4. \"You teach someone else tomorrow\"</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#scenario-3-what-if-i-break-something","title":"Scenario 3: \"What If I Break Something?\"","text":"<p>Tech Priest Response: \"Don't worry, I'll fix it\" Liberatory Response: \"Let's break it on purpose and fix it together\"</p> <p>Create safe failure: Bash<pre><code># Make a test repository\nmkdir test-break-things\ncd test-break-things\ngit init\n\n# Now mess it up!\n# Delete files, make mistakes, experiment\n# Show how to recover everything\n</code></pre></p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#scenario-4-i-dont-have-time-to-learn","title":"Scenario 4: \"I Don't Have Time to Learn\"","text":"<p>Tech Priest Response: \"I'll just do it for you\" Liberatory Response: \"Learning saves time within a week\"</p> <p>Show the math: - \"How long to wait for me each time? 2 days?\" - \"How many times per month? 5?\" - \"That's 10 days waiting vs 2 hours learning\"</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#post-teaching-ensuring-independence","title":"Post-Teaching: Ensuring Independence","text":"","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#1-create-documentation-together","title":"1. Create Documentation Together","text":"<p>Don't write docs FOR them. Write WITH them: - They describe the problem in their words - You provide technical solution - They write the steps as they understand them - You review for accuracy, not style</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#2-establish-peer-learning","title":"2. Establish Peer Learning","text":"<p>Tech Priest: Remains sole source of knowledge Liberatory: Creates learning networks</p> <p>Actions: - Connect learners with each other - Create practice groups - Celebrate when they teach others - Step back as they step up</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#3-regular-check-ins-without-solving","title":"3. Regular Check-ins Without Solving","text":"<p>Schedule follow-ups where you: - Ask what they've accomplished - Celebrate their independence - Refuse to solve problems directly - Guide them to solutions instead</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#4-document-patterns-not-just-solutions","title":"4. Document Patterns, Not Just Solutions","text":"<p>Help them recognize patterns: - \"Notice how Git errors usually tell you what to do?\" - \"See how the workflow is always: change, stage, commit, share?\" - \"Pattern: When stuck, check status first\"</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#anti-patterns-to-avoid","title":"Anti-Patterns to Avoid","text":"","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#the-humble-brag","title":"The Humble Brag","text":"<p>\"Oh this? It's super easy once you understand the underlying Merkle tree structure...\"</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#the-overwhelm","title":"The Overwhelm","text":"<p>Teaching everything about Git instead of the 7 commands they need</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#the-rescue","title":"The Rescue","text":"<p>Jumping in to fix things instead of guiding them to fix it</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#the-gatekeeper","title":"The Gatekeeper","text":"<p>\"You're not ready for that advanced feature\" (Let them decide!)</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#the-priests-tools","title":"The Priest's Tools","text":"<p>Using your special aliases, custom setup, or advanced tools while teaching</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#success-metrics","title":"Success Metrics","text":"<p>You're succeeding when: - They stop asking you for help - They start teaching others - They propose technical solutions you hadn't considered - They correct your mistakes - You become unnecessary</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#a-personal-practice","title":"A Personal Practice","text":"<p>Before each teaching session, remind yourself: - \"I am transferring power, not demonstrating it\" - \"Their struggle context matters more than my technical context\" - \"Every question is legitimate\" - \"My goal is my own obsolescence\"</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#example-teaching-git-in-1-hour","title":"Example: Teaching Git in 1 Hour","text":"<p>0-10 min: Their current workflow and pain points 10-20 min: Git solves these specific problems (demos) 20-40 min: They drive, you navigate through basics 40-50 min: They do it solo with you watching 50-60 min: Plan their practice and next steps  </p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#the-revolutionary-teaching-moment","title":"The Revolutionary Teaching Moment","text":"<p>The moment you know you've succeeded isn't when they thank you for your help. It's when they say:</p> <p>\"Wait, that's it? I thought it would be harder.\"</p> <p>That's when you know you've taught without priesthood - when the mystery dissolves and only capability remains.</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/teach-tech-without-priest-hood/#final-thought","title":"Final Thought","text":"<p>Every time you're tempted to just \"fix it real quick,\" remember: maintaining their dependency maintains hierarchy. Your revolutionary duty is to transfer knowledge so completely that they forget they ever needed you.</p> <p>The revolution doesn't need more tech priests. It needs more teachers who make themselves unnecessary.</p> <p>\"Teach a comrade to fish, and you feed them for a day. Teach a comrade to learn fishing from documentation, and you've broken the role of master forever.\"</p> <p>Backlinks:</p>","tags":["how-to","education","teaching","anti-hierarchy","knowledge-transfer"]},{"location":"teach/workshops/","title":"Workshop Materials","text":"<p>Ready-to-use materials for teaching DRUIDS in group settings. These workshops are designed for facilitators with any technical background - no tech priesthood required.</p>","tags":["workshops","teaching","training","templates"]},{"location":"teach/workshops/#available-workshops","title":"Available Workshops","text":"","tags":["workshops","teaching","training","templates"]},{"location":"teach/workshops/#git-through-campaign","title":"Git Through Campaign","text":"<p>Format: Story-based tutorial Duration: 90 minutes to 2 hours Audience: Complete beginners Goal: Learn Git by following a rent strike campaign</p> <p>Follow the Riverside Tenant Union through their victorious rent strike campaign while learning Git commands, branching, merging, and conflict resolution through real organizing scenarios.</p>","tags":["workshops","teaching","training","templates"]},{"location":"teach/workshops/#git-through-campaign-template","title":"Git Through Campaign Template","text":"<p>Format: Facilitator guide Duration: 3 hours Audience: Workshop facilitators Goal: Run structured Git workshops</p> <p>Structured workshop template with timing, materials needed, and facilitator notes for running Git training sessions in your organization.</p>","tags":["workshops","teaching","training","templates"]},{"location":"teach/workshops/#using-these-materials","title":"Using These Materials","text":"","tags":["workshops","teaching","training","templates"]},{"location":"teach/workshops/#for-self-study","title":"For Self-Study","text":"<ul> <li>Start with Git Through Campaign</li> <li>Work through at your own pace</li> <li>Practice with real organizing scenarios</li> </ul>","tags":["workshops","teaching","training","templates"]},{"location":"teach/workshops/#for-group-workshops","title":"For Group Workshops","text":"<ul> <li>Use the Template for structure</li> <li>Adapt scenarios to your local context</li> <li>Allow 3+ hours for hands-on practice</li> </ul>","tags":["workshops","teaching","training","templates"]},{"location":"teach/workshops/#for-ongoing-training","title":"For Ongoing Training","text":"<ul> <li>Incorporate into new member orientation</li> <li>Use as refresher for experienced organizers</li> <li>Build into leadership development programs</li> </ul>","tags":["workshops","teaching","training","templates"]},{"location":"teach/workshops/#workshop-philosophy","title":"Workshop Philosophy","text":"<p>These materials follow DRUIDS teaching principles:</p> <ul> <li>No Tech Priests: Anyone can facilitate these workshops</li> <li>Material Examples: All scenarios use real organizing situations</li> <li>Collective Learning: Designed for group participation and peer teaching</li> <li>Practical Focus: Immediate application to organizing work</li> </ul>","tags":["workshops","teaching","training","templates"]},{"location":"teach/workshops/#getting-started","title":"Getting Started","text":"<p>New to facilitating? Read Teaching Tech Without Priesthood first.</p> <p>Ready to run a workshop? Start with the Template.</p> <p>Want to practice first? Work through Git Through Campaign yourself.</p>","tags":["workshops","teaching","training","templates"]},{"location":"teach/workshops/#support","title":"Support","text":"<p>Questions about running workshops? Connect with other facilitators through the teaching networks described in the main Teaching Guide.</p> <p>\"Each one teach one - revolutionary knowledge grows through collective sharing.\"</p>","tags":["workshops","teaching","training","templates"]},{"location":"teach/workshops/git-through-campaign-template/","title":"Git Through Campaign: Workshop Template","text":"","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#material-problem-this-solves","title":"Material Problem This Solves","text":"<p>Traditional Git tutorials teach commands in a vacuum. Organizers learn to type <code>git add</code> without understanding WHY it matters for their work. This leads to: - Mechanical usage without political understanding - Fear of Git as mysterious \"programmer tool\" - Abandoned adoption when complexity increases - Individual heroes instead of collective capacity</p> <p>This workshop teaches Git as what it is: infrastructure for democratic organizing.</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#political-framing","title":"Political Framing","text":"<p>Git accidentally implements democratic centralism: - Branches = Autonomous working groups - Commits = Meeting minutes and decisions - Pull Requests = Proposals for collective approval - Merge = Unity after democratic debate</p> <p>By teaching through campaign scenarios, we transform Git from tech tool to organizing weapon.</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#workshop-structure-3-hours","title":"Workshop Structure (3 Hours)","text":"","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#opening-30-minutes","title":"Opening (30 minutes)","text":"","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#set-the-scene","title":"Set the Scene","text":"<p>\"Your tenant union is planning a city-wide rent strike. 50 buildings, 200 organizers, multiple committees. Last time, you lost months of work when Maria's laptop was stolen. This time will be different.\"</p> <p>[EXPAND HERE: Use a campaign relevant to your participants]</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#material-conditions-check","title":"Material Conditions Check","text":"<p>Go around the room: - Who's lost organizing work to tech failure? - Who's repeated work because they couldn't find the latest version? - Who's been excluded because they \"aren't tech people\"?</p> <p>[EXPAND HERE: Add questions specific to your organizing context]</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#political-line","title":"Political Line","text":"<p>\"We're not learning Git to become programmers. We're learning it to build power. Every command we learn is a brick in our revolutionary infrastructure.\"</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#part-1-foundation-through-crisis-45-minutes","title":"Part 1: Foundation Through Crisis (45 minutes)","text":"","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#scenario-the-raid","title":"Scenario: The Raid","text":"<p>\"Police raided the union office. They took computers but not the struggle. How do we recover?\"</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#exercise-1-clone-the-struggle","title":"Exercise 1: Clone the Struggle","text":"Bash<pre><code># Each organizer clones the repository\ngit clone https://gitserver.local/tenant-union/rent-strike-2025.git\n\n# Explain: This is why we distribute power\n# Every comrade now has complete history\n</code></pre> <p>Teaching Points: - Decentralization as security practice - Each clone is complete, not dependent - Connection to guerrilla cell structure</p> <p>[EXPAND HERE: Add local examples of resilience through distribution]</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#exercise-2-check-our-losses","title":"Exercise 2: Check Our Losses","text":"Bash<pre><code># See what we have\ngit log --oneline -20\n\n# Find specific work\ngit log --grep=\"eastside buildings\"\n\n# Explain: Our memory is collective, not individual\n</code></pre> <p>Teaching Points: - History as institutional memory - Searchable record of decisions - No single point of failure</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#scenario-emergency-response","title":"Scenario: Emergency Response","text":"<p>\"Landlords just announced mass evictions. We need rapid coordinated response.\"</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#exercise-3-branch-the-resistance","title":"Exercise 3: Branch the Resistance","text":"Bash<pre><code># Legal team starts research\ngit checkout -b legal-team/eviction-defense\n\n# Outreach prepares flyers\ngit checkout -b outreach/emergency-flyers\n\n# Direct action plans response\ngit checkout -b action/building-blockades\n</code></pre> <p>Teaching Points: - Parallel work without interference - Autonomy with coordination - Branch names as political clarity</p> <p>[EXPAND HERE: Create branches for your organizing structure]</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#part-2-democratic-development-60-minutes","title":"Part 2: Democratic Development (60 minutes)","text":"","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#scenario-building-the-campaign","title":"Scenario: Building the Campaign","text":"<p>\"Each committee works autonomously but transparently.\"</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#exercise-4-document-the-work","title":"Exercise 4: Document the Work","text":"Bash<pre><code># In legal-team branch\necho \"## Eviction Defense Rights\" &gt; know-your-rights.md\necho \"- You have 30 days to respond\" &gt;&gt; know-your-rights.md\ngit add know-your-rights.md\ngit commit -m \"legal: Add basic tenant rights for eviction defense\n\nBased on city ordinance 24.5.B. Reviewed by volunteer lawyers.\nNext: Translate to Spanish, Vietnamese, Somali\"\n</code></pre> <p>Teaching Points: - Commits as meeting minutes - Clear messages for accountability - Documentation AS organizing</p> <p>[EXPAND HERE: Add commit examples from your campaigns]</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#exercise-5-share-the-work","title":"Exercise 5: Share the Work","text":"Bash<pre><code># Push branch for collective review\ngit push origin legal-team/eviction-defense\n\n# Create pull request (use UI or CLI)\n# Title: \"Legal: Eviction defense rights - ready for review\"\n# Body: \n# - What changed and why\n# - Who needs to review\n# - Timeline for merge\n</code></pre> <p>Teaching Points: - Transparency in all work - Collective ownership - Review as political education</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#scenario-resolving-contradictions","title":"Scenario: Resolving Contradictions","text":"<p>\"Outreach and legal have different phone numbers on flyers.\"</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#exercise-6-merge-conflicts-as-democracy","title":"Exercise 6: Merge Conflicts as Democracy","text":"Bash<pre><code># Try to merge outreach work\ngit checkout main\ngit merge outreach/emergency-flyers\n\n# Conflict! This is good - it means we're catching contradictions\n# Git shows:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nCall hotline: 555-LEGAL-AID\n=======\nCall hotline: 555-TENANTS-WIN\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; outreach/emergency-flyers\n</code></pre> <p>Resolution Process: 1. Stop and discuss (not just pick one) 2. Why different numbers? 3. What serves the campaign? 4. Document decision in commit</p> <p>Teaching Points: - Conflicts surface contradictions - Technical process serves political process - Unity through struggle, not avoidance</p> <p>[EXPAND HERE: Add examples of productive conflicts from organizing]</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#part-3-campaign-in-action-45-minutes","title":"Part 3: Campaign in Action (45 minutes)","text":"","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#scenario-strike-day-coordination","title":"Scenario: Strike Day Coordination","text":"<p>\"It's strike day. 50 buildings need real-time coordination.\"</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#exercise-7-rapid-response-cycle","title":"Exercise 7: Rapid Response Cycle","text":"Bash<pre><code># Morning: Building captains report\ngit checkout -b reports/eastside-status\necho \"Building 1: 90% participation\" &gt; eastside-report.md\ngit add . &amp;&amp; git commit -m \"report: Eastside strong, need support at Building 5\"\ngit push origin reports/eastside-status\n\n# Merge quickly for visibility\ngit checkout main\ngit merge reports/eastside-status\ngit push origin main\n</code></pre> <p>Real-world practice: - Short cycles for rapid response - Clear commit messages under pressure - Push early, push often</p> <p>[EXPAND HERE: Create rapid scenarios from your actions]</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#exercise-8-victory-documentation","title":"Exercise 8: Victory Documentation","text":"Bash<pre><code># Document wins immediately\ngit checkout -b victory/rent-freeze-won\necho \"## WE WON: 6-month rent freeze!\" &gt; victory-announcement.md\n# Add details, quotes, next steps\ngit add . &amp;&amp; git commit -m \"VICTORY: Document rent freeze win for history\"\n</code></pre> <p>Teaching Points: - History written by victors (us) - Institutional memory of tactics - Morale through documentation</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#closing-circle-30-minutes","title":"Closing Circle (30 minutes)","text":"","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#reflection-questions","title":"Reflection Questions","text":"<ol> <li>How does Git change how we organize?</li> <li>What scared you? What excited you?</li> <li>How will you use this in your committee?</li> </ol>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#commitments","title":"Commitments","text":"<p>Each participant commits to: - Teaching one other organizer - Using Git for one real project - Joining weekly Git practice sessions</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#political-synthesis","title":"Political Synthesis","text":"<p>\"Git is not neutral - it embodies collective power. We've learned not just commands but new ways of working together. This is prefigurative politics through technology.\"</p> <p>[EXPAND HERE: Connect to your organization's political principles]</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#workshop-variations","title":"Workshop Variations","text":"","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#for-labor-organizers","title":"For Labor Organizers","text":"<ul> <li>Branches for different shops</li> <li>Commits as grievance documentation</li> <li>Merges as contract negotiations</li> </ul>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#for-community-defense","title":"For Community Defense","text":"<ul> <li>Branches for rapid response teams</li> <li>Commits as incident reports</li> <li>History as evidence collection</li> </ul>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#for-revolutionary-study","title":"For Revolutionary Study","text":"<ul> <li>Branches for reading groups</li> <li>Commits as study notes</li> <li>Pull requests as theoretical development</li> </ul> <p>[EXPAND HERE: Create variations for your movement sectors]</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#facilitator-notes","title":"Facilitator Notes","text":"","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#common-challenges","title":"Common Challenges","text":"<p>\"This is too technical!\" - Return to material problems - Use physical metaphors (folders, papers) - Pair technical with political</p> <p>\"Why not just use Google Docs?\" - Reference Why Discord Democracy Fails - Discuss surveillance capitalism - Show concrete surveillance risks</p> <p>\"Our members won't adopt this\" - Start with willing early adopters - Show immediate benefits - Build slowly but surely</p> <p>[EXPAND HERE: Add challenges you've encountered]</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#materials-needed","title":"Materials Needed","text":"<ul> <li>Laptops (organize loaner system)</li> <li>Git pre-installed (provide installer guide)</li> <li>Practice repository set up</li> <li>Printed cheat sheets</li> <li>Snacks (always snacks)</li> </ul>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#follow-up-plan","title":"Follow-Up Plan","text":"<ul> <li>Weekly practice sessions</li> <li>Buddy system for new users</li> <li>Real campaign to practice on</li> <li>Documentation of learnings</li> </ul>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign-template/#remember","title":"Remember","text":"<p>We're not teaching Git. We're building revolutionary capacity through Git. Every command is politics. Every commit is praxis. Every merge is democracy.</p> <p>The revolution will be version controlled.</p> <p>Ready to run this workshop? Check Teaching Without Hierarchy for facilitation principles.</p> <p>Need the technical foundation? Review Git in 7 Commands for yourself first.</p> <p>Backlinks:</p>","tags":["workshop","git","teaching","campaign","collective-learning","praxis"]},{"location":"teach/workshops/git-through-campaign/","title":"Git Through a Campaign","text":"<p>Learn Git by following the Riverside Tenant Union through their victorious rent strike campaign</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#youre-not-just-learning-git","title":"You're Not Just Learning Git","text":"<p>You're learning how to preserve struggle, build on victories, and never lose hard-won knowledge again. This tutorial follows a real campaign structure, teaching Git through the actual work of organizing.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#meet-your-comrades","title":"Meet Your Comrades","text":"<p>Maria - Lead organizer, been fighting slumlords for 5 years Jamal - New member, great at talking to neighbors Li - Takes amazing notes, never misses a detail You - Ready to learn Git while organizing  </p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#chapter-1-the-campaign-begins","title":"Chapter 1: The Campaign Begins","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#day-1-first-meeting","title":"Day 1: First Meeting","text":"<p>Maria calls an emergency meeting. SafeHaven Corp just announced a 40% rent increase. Tenants are furious but disorganized.</p> <p>Li takes notes in a Google Doc. By Day 3, they can't find the doc. Someone \"cleaned up\" the shared drive. Again.</p> <p>Maria: \"We can't keep losing our history. We need Git.\"</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#your-first-git-steps","title":"Your First Git Steps","text":"Bash<pre><code># Create a folder for the campaign\nmkdir riverside-rent-strike\ncd riverside-rent-strike\n\n# Initialize Git repository\ngit init\n</code></pre> <p>What just happened? You created a filing cabinet (repository) that never forgets.</p> Bash<pre><code># Check what's happening\ngit status\n</code></pre> <p>Output: Text Only<pre><code>On branch main\nNo commits yet\nnothing to commit\n</code></pre></p> <p>Translation: \"New filing cabinet ready. Nothing filed yet.\"</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#document-the-first-meeting","title":"Document the First Meeting","text":"<p>Create your first file:</p> Bash<pre><code># Create meetings folder\nmkdir meetings\n\n# Create first meeting notes\necho \"# Riverside Rent Strike - Emergency Meeting\" &gt; meetings/2024-11-15-emergency.md\necho \"\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"## Attendees\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"- Maria (facilitator)\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"- Jamal\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"- Li (notes)\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"- 47 other tenants\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"## Decisions\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"1. Form Riverside Tenant Union\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"2. Demand: Freeze rent at current levels\" &gt;&gt; meetings/2024-11-15-emergency.md\necho \"3. Next meeting: Tuesday Nov 19\" &gt;&gt; meetings/2024-11-15-emergency.md\n</code></pre>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#save-history-forever","title":"Save History Forever","text":"Bash<pre><code># See what Git notices\ngit status\n</code></pre> <p>Output shows: Text Only<pre><code>Untracked files:\n  meetings/2024-11-15-emergency.md\n</code></pre></p> <p>Translation: \"I see new files. Want to save them?\"</p> Bash<pre><code># Add to staging area\ngit add meetings/\n\n# Commit to history\ngit commit -m \"Add emergency meeting notes - union formed, 40% increase opposed\"\n</code></pre> <p>\ud83c\udf89 First Victory! You've preserved your first piece of organizing history.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#chapter-2-building-momentum","title":"Chapter 2: Building Momentum","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#day-5-outreach-begins","title":"Day 5: Outreach Begins","text":"<p>Jamal has been talking to neighbors. He has notes on napkins, phone notes, scattered everywhere.</p> <p>You: \"Let's track our outreach in Git.\"</p> Bash<pre><code># Create outreach directory\nmkdir outreach\n\n# Create contact tracking\ncat &gt; outreach/building-contacts.md &lt;&lt; 'EOF'\n# Building Contacts\n\n## Building A\n- Apt 101: Interested, needs Spanish materials\n- Apt 102: Very engaged, wants to help organize  \n- Apt 103: Scared of retaliation\n- Apt 104: No answer\n\n## Building B\n- Apt 201: Already can't afford rent\n- Apt 202: Supportive but traveling\n- Apt 203: Wants to know more\n- Apt 204: Landlord's friend - skip\nEOF\n\n# Track it\ngit add outreach/\ngit commit -m \"Track outreach progress - Building A and B initial contacts\"\n</code></pre>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#see-your-history","title":"See Your History","text":"Bash<pre><code>git log --oneline\n</code></pre> <p>Output: Text Only<pre><code>a3f42d1 Track outreach progress - Building A and B initial contacts\nb2e1c93 Add emergency meeting notes - union formed, 40% increase opposed\n</code></pre></p> <p>You're building institutional memory! Every door knocked, every conversation, preserved.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#chapter-3-parallel-organizing","title":"Chapter 3: Parallel Organizing","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#day-8-teams-form","title":"Day 8: Teams Form","text":"<p>The union splits into working groups: - Outreach Team (Jamal leads) - Research Team (Li leads) - Direct Action Team (Maria leads)</p> <p>Each team needs to work independently but stay coordinated.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#enter-branches","title":"Enter: Branches","text":"Bash<pre><code># Create branch for outreach team\ngit checkout -b outreach-team\n\n# Jamal's team adds more contacts\ncat &gt;&gt; outreach/building-contacts.md &lt;&lt; 'EOF'\n\n## Building C\n- Apt 301: Enthusiastic! Wants to organize their floor\n- Apt 302: Undocumented, worried but supportive\n- Apt 303: Offered living room for meetings\n- Apt 304: Will join if others do\nEOF\n\ngit add outreach/building-contacts.md\ngit commit -m \"Add Building C contacts - found meeting space in 303!\"\n</code></pre> <p>Meanwhile, Li's team works on research:</p> Bash<pre><code># Switch to new branch\ngit checkout main\ngit checkout -b research-team\n\n# Create research directory\nmkdir research\n\n# Document findings\ncat &gt; research/safehaven-violations.md &lt;&lt; 'EOF'\n# SafeHaven Corp Code Violations\n\n## Building A\n- 15 health code violations unaddressed\n- Heating system failed inspection 2019, 2021, 2023\n- Mold in 6 units reported, no remediation\n\n## Building B  \n- Fire exits blocked (illegal)\n- No hot water for 3 months in 2023\n- Rat infestation reports ignored\n\n## Sources\n- City inspection records (public database)\n- Tenant photos and documentation\n- Health department complaints\nEOF\n\ngit add research/\ngit commit -m \"Document SafeHaven violations - major health and safety issues\"\n</code></pre>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#see-your-branches","title":"See Your Branches","text":"Bash<pre><code>git branch\n</code></pre> <p>Output: Text Only<pre><code>  main\n  outreach-team\n* research-team\n</code></pre></p> <p>What's happening? Three parallel workstreams, no stepping on toes!</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#chapter-4-coming-together","title":"Chapter 4: Coming Together","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#day-12-merge-the-work","title":"Day 12: Merge the Work","text":"<p>Teams reconvene. Everyone's work needs to combine for the big tenant meeting.</p> Bash<pre><code># Go back to main\ngit checkout main\n\n# Merge outreach work\ngit merge outreach-team\n# Merging happens automatically!\n\n# Merge research work  \ngit merge research-team\n# Also automatic!\n\n# See combined work\nls\n</code></pre> <p>Now you have: Text Only<pre><code>meetings/  outreach/  research/\n</code></pre></p> <p>All work preserved, all teams credited, no information lost!</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#chapter-5-the-conflict","title":"Chapter 5: The Conflict","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#day-15-disagreement-on-demands","title":"Day 15: Disagreement on Demands","text":"<p>Two groups emerge with different demands documents:</p> <p>Group 1 (Maria's draft): Bash<pre><code>git checkout -b demands-militant\n\ncat &gt; demands.md &lt;&lt; 'EOF'\n# Riverside Tenant Union Demands\n\n1. Immediate rent freeze\n2. 50% rent reduction for code violations\n3. Tenant committee approval for any increases\n4. Right to organize without retaliation\nEOF\n\ngit add demands.md\ngit commit -m \"Draft militant demands - 50% reduction\"\n</code></pre></p> <p>Group 2 (Moderate draft): Bash<pre><code>git checkout main\ngit checkout -b demands-moderate\n\ncat &gt; demands.md &lt;&lt; 'EOF'\n# Riverside Tenant Union Demands\n\n1. Rent increase capped at 5%\n2. 30-day notice for any changes\n3. Monthly building inspections\n4. Good faith negotiations\nEOF\n\ngit add demands.md\ngit commit -m \"Draft moderate demands - 5% cap\"\n</code></pre></p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#the-merge-conflict","title":"The Merge Conflict","text":"<p>At the meeting, both proposals are discussed. Through democratic debate, a unified position emerges:</p> Bash<pre><code>git checkout main\ngit merge demands-militant\n</code></pre> <p>Git responds: Text Only<pre><code>Auto-merging demands.md\nCONFLICT (add/add): Merge conflict in demands.md\n</code></pre></p> <p>Don't panic! This is democracy in action.</p> <p>Look at the file: Bash<pre><code>cat demands.md\n</code></pre></p> <p>You see: Text Only<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n=======\n# Riverside Tenant Union Demands\n\n1. Immediate rent freeze\n2. 50% rent reduction for code violations\n3. Tenant committee approval for any increases\n4. Right to organize without retaliation\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; demands-militant\n</code></pre></p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#resolve-through-democracy","title":"Resolve Through Democracy","text":"<p>After debate, the union votes. Edit the file to reflect collective decision:</p> Bash<pre><code>cat &gt; demands.md &lt;&lt; 'EOF'\n# Riverside Tenant Union Demands\n\n1. Immediate rent freeze for all tenants\n2. 50% rent reduction until code violations fixed\n3. Tenant committee approval for future increases\n4. Right to organize without retaliation\n5. All negotiations public with tenant observers\nEOF\n\n# Mark conflict resolved\ngit add demands.md\ngit commit -m \"Merge demands after democratic vote - unified position\"\n</code></pre>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#chapter-6-campaign-intensifies","title":"Chapter 6: Campaign Intensifies","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#day-20-shifting-tactics","title":"Day 20: Shifting Tactics","text":"<p>SafeHaven ignores demands. Time for escalation. Maria creates action plans:</p> Bash<pre><code>git checkout -b direct-action\n\nmkdir actions\ncat &gt; actions/phase-1-pressure.md &lt;&lt; 'EOF'\n# Phase 1: Building Pressure\n\n## Week 1: Visibility\n- Banner drop from Building C\n- Flyers in neighborhood\n- Social media campaign\n\n## Week 2: Disruption  \n- Picket at SafeHaven offices\n- Calls to board members\n- Media outreach\n\n## Week 3: Escalation\n- Rent strike begins\n- Letter to city officials\n- Know Your Rights trainings\nEOF\n\ngit add actions/\ngit commit -m \"Plan Phase 1 pressure campaign\"\n</code></pre>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#sharing-the-plan","title":"Sharing the Plan","text":"Bash<pre><code># Push to shared repository\ngit push origin direct-action\n</code></pre> <p>Now organizers in other buildings can: Bash<pre><code>git pull\ngit checkout direct-action\n</code></pre></p> <p>Everyone stays coordinated. No \"Did you get my email?\" No \"Which version is latest?\"</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#chapter-7-victory-through-history","title":"Chapter 7: Victory Through History","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#day-45-leverage-from-the-past","title":"Day 45: Leverage from the Past","text":"<p>City council meeting tomorrow. Li remembers something:</p> Bash<pre><code>git log --grep=\"violations\"\n</code></pre> <p>Finds: Text Only<pre><code>d4f3a21 Document SafeHaven violations - major health and safety issues\n</code></pre></p> Bash<pre><code>git show d4f3a21\n</code></pre> <p>The detailed violations list from Day 8! Li presents it to council with photos. City inspectors launch investigation.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#day-50-we-win","title":"Day 50: We Win!","text":"<p>SafeHaven caves: - Rent frozen for 2 years - Violations must be fixed - Tenant committee recognized</p> <p>Document the victory:</p> Bash<pre><code>cat &gt; victory-announcement.md &lt;&lt; 'EOF'\n# WE WON!\n\nAfter 50 days of organizing:\n- \u270a Rent frozen for 2 years\n- \u270a All violations must be fixed in 90 days\n- \u270a Tenant committee officially recognized\n- \u270a No retaliation pledge signed\n\n## Key to Victory\n- 95% tenant participation\n- Documented history of violations  \n- United demands\n- Strategic escalation\n\nThe struggle continues, but today we celebrate!\nEOF\n\ngit add victory-announcement.md\ngit commit -m \"VICTORY! Document win - 2 year freeze achieved\"\n</code></pre>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#chapter-8-the-knowledge-lives-on","title":"Chapter 8: The Knowledge Lives On","text":"","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#six-months-later","title":"Six Months Later","text":"<p>New organizer joins. Instead of spending weeks catching up:</p> Bash<pre><code># Clone the repository\ngit clone https://github.com/riverside-union/rent-strike.git\n\n# See the entire campaign\ngit log --oneline\n\n# Find specific information\ngit log --grep=\"contact\" # All outreach\ngit log --grep=\"violation\" # All research\ngit log --grep=\"action\" # All tactics\n</code></pre> <p>In one day, they understand: - How the campaign developed - What tactics worked - Who did what - Why decisions were made</p> <p>The institution remembers, even when individuals move on.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#your-git-journey","title":"Your Git Journey","text":"<p>Through this campaign, you learned:</p> <p>\u2705 <code>git init</code> - Start tracking history \u2705 <code>git add</code> - Stage changes \u2705 <code>git commit</code> - Save forever \u2705 <code>git branch</code> - Parallel organizing \u2705 <code>git merge</code> - Unite work \u2705 <code>git log</code> - Search history \u2705 <code>git push/pull</code> - Share with comrades  </p> <p>But more importantly, you learned: - History is power - Parallel work multiplies capacity - Conflicts resolve through democracy - Knowledge compounds over time</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#practice-your-skills","title":"Practice Your Skills","text":"<p>Try these exercises using the campaign structure:</p> <ol> <li>Create a branch for planning next campaign</li> <li>Document lessons learned</li> <li>Merge different strategic proposals  </li> <li>Search for specific decisions</li> <li>Share with other tenant unions</li> </ol>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#the-real-victory","title":"The Real Victory","text":"<p>Git isn't about commands. It's about ensuring that every hour spent organizing, every lesson learned, every victory won becomes part of permanent revolutionary infrastructure.</p> <p>SafeHaven thought tenant memory was short. They were wrong. The repository remembers.</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]},{"location":"teach/workshops/git-through-campaign/#next-steps","title":"Next Steps","text":"<ol> <li>Start using Git for your real organizing</li> <li>Read Daily Git Workflows</li> <li>Learn Git Workflows by Role</li> <li>Follow Your Git Learning Path for structured progression</li> <li>Teach another organizer using this tutorial</li> </ol> <p>\"The people, united, will never be defeated - especially when they use version control\"</p> <p>Ready to preserve your own struggles? The revolution will be committed.</p> <p>Backlinks:</p>","tags":["tutorial","git","campaign","story-based","rent-strike"]}]}